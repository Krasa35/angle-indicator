
Projekt_stm.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c9a0  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  0800cb70  0800cb70  0001cb70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cfb8  0800cfb8  00020328  2**0
                  CONTENTS
  4 .ARM          00000008  0800cfb8  0800cfb8  0001cfb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cfc0  0800cfc0  00020328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cfc0  0800cfc0  0001cfc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cfc4  0800cfc4  0001cfc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800cfc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001e8  0800d1b0  000201e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000288  0800d250  00020288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000968  20000328  0800d2f0  00020328  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000c90  0800d2f0  00020c90  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 15 .debug_info   00020300  00000000  00000000  0002039b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000046f7  00000000  00000000  0004069b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001a08  00000000  00000000  00044d98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001426  00000000  00000000  000467a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002bc95  00000000  00000000  00047bc6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000265f5  00000000  00000000  0007385b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    000fed07  00000000  00000000  00099e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008258  00000000  00000000  00198b58  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  001a0db0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000328 	.word	0x20000328
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800cb58 	.word	0x0800cb58

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000032c 	.word	0x2000032c
 800020c:	0800cb58 	.word	0x0800cb58

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <strlen>:
 80002b0:	4603      	mov	r3, r0
 80002b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002b6:	2a00      	cmp	r2, #0
 80002b8:	d1fb      	bne.n	80002b2 <strlen+0x2>
 80002ba:	1a18      	subs	r0, r3, r0
 80002bc:	3801      	subs	r0, #1
 80002be:	4770      	bx	lr

080002c0 <__aeabi_drsub>:
 80002c0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002c4:	e002      	b.n	80002cc <__adddf3>
 80002c6:	bf00      	nop

080002c8 <__aeabi_dsub>:
 80002c8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002cc <__adddf3>:
 80002cc:	b530      	push	{r4, r5, lr}
 80002ce:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002d2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002d6:	ea94 0f05 	teq	r4, r5
 80002da:	bf08      	it	eq
 80002dc:	ea90 0f02 	teqeq	r0, r2
 80002e0:	bf1f      	itttt	ne
 80002e2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002e6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ea:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ee:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002f2:	f000 80e2 	beq.w	80004ba <__adddf3+0x1ee>
 80002f6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002fa:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002fe:	bfb8      	it	lt
 8000300:	426d      	neglt	r5, r5
 8000302:	dd0c      	ble.n	800031e <__adddf3+0x52>
 8000304:	442c      	add	r4, r5
 8000306:	ea80 0202 	eor.w	r2, r0, r2
 800030a:	ea81 0303 	eor.w	r3, r1, r3
 800030e:	ea82 0000 	eor.w	r0, r2, r0
 8000312:	ea83 0101 	eor.w	r1, r3, r1
 8000316:	ea80 0202 	eor.w	r2, r0, r2
 800031a:	ea81 0303 	eor.w	r3, r1, r3
 800031e:	2d36      	cmp	r5, #54	; 0x36
 8000320:	bf88      	it	hi
 8000322:	bd30      	pophi	{r4, r5, pc}
 8000324:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000328:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800032c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000330:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000334:	d002      	beq.n	800033c <__adddf3+0x70>
 8000336:	4240      	negs	r0, r0
 8000338:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800033c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000340:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000344:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000348:	d002      	beq.n	8000350 <__adddf3+0x84>
 800034a:	4252      	negs	r2, r2
 800034c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000350:	ea94 0f05 	teq	r4, r5
 8000354:	f000 80a7 	beq.w	80004a6 <__adddf3+0x1da>
 8000358:	f1a4 0401 	sub.w	r4, r4, #1
 800035c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000360:	db0d      	blt.n	800037e <__adddf3+0xb2>
 8000362:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000366:	fa22 f205 	lsr.w	r2, r2, r5
 800036a:	1880      	adds	r0, r0, r2
 800036c:	f141 0100 	adc.w	r1, r1, #0
 8000370:	fa03 f20e 	lsl.w	r2, r3, lr
 8000374:	1880      	adds	r0, r0, r2
 8000376:	fa43 f305 	asr.w	r3, r3, r5
 800037a:	4159      	adcs	r1, r3
 800037c:	e00e      	b.n	800039c <__adddf3+0xd0>
 800037e:	f1a5 0520 	sub.w	r5, r5, #32
 8000382:	f10e 0e20 	add.w	lr, lr, #32
 8000386:	2a01      	cmp	r2, #1
 8000388:	fa03 fc0e 	lsl.w	ip, r3, lr
 800038c:	bf28      	it	cs
 800038e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000392:	fa43 f305 	asr.w	r3, r3, r5
 8000396:	18c0      	adds	r0, r0, r3
 8000398:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800039c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a0:	d507      	bpl.n	80003b2 <__adddf3+0xe6>
 80003a2:	f04f 0e00 	mov.w	lr, #0
 80003a6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003aa:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ae:	eb6e 0101 	sbc.w	r1, lr, r1
 80003b2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003b6:	d31b      	bcc.n	80003f0 <__adddf3+0x124>
 80003b8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003bc:	d30c      	bcc.n	80003d8 <__adddf3+0x10c>
 80003be:	0849      	lsrs	r1, r1, #1
 80003c0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003c4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003c8:	f104 0401 	add.w	r4, r4, #1
 80003cc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003d4:	f080 809a 	bcs.w	800050c <__adddf3+0x240>
 80003d8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003dc:	bf08      	it	eq
 80003de:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003e2:	f150 0000 	adcs.w	r0, r0, #0
 80003e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ea:	ea41 0105 	orr.w	r1, r1, r5
 80003ee:	bd30      	pop	{r4, r5, pc}
 80003f0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003f4:	4140      	adcs	r0, r0
 80003f6:	eb41 0101 	adc.w	r1, r1, r1
 80003fa:	3c01      	subs	r4, #1
 80003fc:	bf28      	it	cs
 80003fe:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000402:	d2e9      	bcs.n	80003d8 <__adddf3+0x10c>
 8000404:	f091 0f00 	teq	r1, #0
 8000408:	bf04      	itt	eq
 800040a:	4601      	moveq	r1, r0
 800040c:	2000      	moveq	r0, #0
 800040e:	fab1 f381 	clz	r3, r1
 8000412:	bf08      	it	eq
 8000414:	3320      	addeq	r3, #32
 8000416:	f1a3 030b 	sub.w	r3, r3, #11
 800041a:	f1b3 0220 	subs.w	r2, r3, #32
 800041e:	da0c      	bge.n	800043a <__adddf3+0x16e>
 8000420:	320c      	adds	r2, #12
 8000422:	dd08      	ble.n	8000436 <__adddf3+0x16a>
 8000424:	f102 0c14 	add.w	ip, r2, #20
 8000428:	f1c2 020c 	rsb	r2, r2, #12
 800042c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000430:	fa21 f102 	lsr.w	r1, r1, r2
 8000434:	e00c      	b.n	8000450 <__adddf3+0x184>
 8000436:	f102 0214 	add.w	r2, r2, #20
 800043a:	bfd8      	it	le
 800043c:	f1c2 0c20 	rsble	ip, r2, #32
 8000440:	fa01 f102 	lsl.w	r1, r1, r2
 8000444:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000448:	bfdc      	itt	le
 800044a:	ea41 010c 	orrle.w	r1, r1, ip
 800044e:	4090      	lslle	r0, r2
 8000450:	1ae4      	subs	r4, r4, r3
 8000452:	bfa2      	ittt	ge
 8000454:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000458:	4329      	orrge	r1, r5
 800045a:	bd30      	popge	{r4, r5, pc}
 800045c:	ea6f 0404 	mvn.w	r4, r4
 8000460:	3c1f      	subs	r4, #31
 8000462:	da1c      	bge.n	800049e <__adddf3+0x1d2>
 8000464:	340c      	adds	r4, #12
 8000466:	dc0e      	bgt.n	8000486 <__adddf3+0x1ba>
 8000468:	f104 0414 	add.w	r4, r4, #20
 800046c:	f1c4 0220 	rsb	r2, r4, #32
 8000470:	fa20 f004 	lsr.w	r0, r0, r4
 8000474:	fa01 f302 	lsl.w	r3, r1, r2
 8000478:	ea40 0003 	orr.w	r0, r0, r3
 800047c:	fa21 f304 	lsr.w	r3, r1, r4
 8000480:	ea45 0103 	orr.w	r1, r5, r3
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f1c4 040c 	rsb	r4, r4, #12
 800048a:	f1c4 0220 	rsb	r2, r4, #32
 800048e:	fa20 f002 	lsr.w	r0, r0, r2
 8000492:	fa01 f304 	lsl.w	r3, r1, r4
 8000496:	ea40 0003 	orr.w	r0, r0, r3
 800049a:	4629      	mov	r1, r5
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	fa21 f004 	lsr.w	r0, r1, r4
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f094 0f00 	teq	r4, #0
 80004aa:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ae:	bf06      	itte	eq
 80004b0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004b4:	3401      	addeq	r4, #1
 80004b6:	3d01      	subne	r5, #1
 80004b8:	e74e      	b.n	8000358 <__adddf3+0x8c>
 80004ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004be:	bf18      	it	ne
 80004c0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004c4:	d029      	beq.n	800051a <__adddf3+0x24e>
 80004c6:	ea94 0f05 	teq	r4, r5
 80004ca:	bf08      	it	eq
 80004cc:	ea90 0f02 	teqeq	r0, r2
 80004d0:	d005      	beq.n	80004de <__adddf3+0x212>
 80004d2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004d6:	bf04      	itt	eq
 80004d8:	4619      	moveq	r1, r3
 80004da:	4610      	moveq	r0, r2
 80004dc:	bd30      	pop	{r4, r5, pc}
 80004de:	ea91 0f03 	teq	r1, r3
 80004e2:	bf1e      	ittt	ne
 80004e4:	2100      	movne	r1, #0
 80004e6:	2000      	movne	r0, #0
 80004e8:	bd30      	popne	{r4, r5, pc}
 80004ea:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ee:	d105      	bne.n	80004fc <__adddf3+0x230>
 80004f0:	0040      	lsls	r0, r0, #1
 80004f2:	4149      	adcs	r1, r1
 80004f4:	bf28      	it	cs
 80004f6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004fa:	bd30      	pop	{r4, r5, pc}
 80004fc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000500:	bf3c      	itt	cc
 8000502:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000506:	bd30      	popcc	{r4, r5, pc}
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000510:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000514:	f04f 0000 	mov.w	r0, #0
 8000518:	bd30      	pop	{r4, r5, pc}
 800051a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800051e:	bf1a      	itte	ne
 8000520:	4619      	movne	r1, r3
 8000522:	4610      	movne	r0, r2
 8000524:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000528:	bf1c      	itt	ne
 800052a:	460b      	movne	r3, r1
 800052c:	4602      	movne	r2, r0
 800052e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000532:	bf06      	itte	eq
 8000534:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000538:	ea91 0f03 	teqeq	r1, r3
 800053c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000540:	bd30      	pop	{r4, r5, pc}
 8000542:	bf00      	nop

08000544 <__aeabi_ui2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000558:	f04f 0500 	mov.w	r5, #0
 800055c:	f04f 0100 	mov.w	r1, #0
 8000560:	e750      	b.n	8000404 <__adddf3+0x138>
 8000562:	bf00      	nop

08000564 <__aeabi_i2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800057c:	bf48      	it	mi
 800057e:	4240      	negmi	r0, r0
 8000580:	f04f 0100 	mov.w	r1, #0
 8000584:	e73e      	b.n	8000404 <__adddf3+0x138>
 8000586:	bf00      	nop

08000588 <__aeabi_f2d>:
 8000588:	0042      	lsls	r2, r0, #1
 800058a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800058e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000592:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000596:	bf1f      	itttt	ne
 8000598:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800059c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005a4:	4770      	bxne	lr
 80005a6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005aa:	bf08      	it	eq
 80005ac:	4770      	bxeq	lr
 80005ae:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005b2:	bf04      	itt	eq
 80005b4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005b8:	4770      	bxeq	lr
 80005ba:	b530      	push	{r4, r5, lr}
 80005bc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005c4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005c8:	e71c      	b.n	8000404 <__adddf3+0x138>
 80005ca:	bf00      	nop

080005cc <__aeabi_ul2d>:
 80005cc:	ea50 0201 	orrs.w	r2, r0, r1
 80005d0:	bf08      	it	eq
 80005d2:	4770      	bxeq	lr
 80005d4:	b530      	push	{r4, r5, lr}
 80005d6:	f04f 0500 	mov.w	r5, #0
 80005da:	e00a      	b.n	80005f2 <__aeabi_l2d+0x16>

080005dc <__aeabi_l2d>:
 80005dc:	ea50 0201 	orrs.w	r2, r0, r1
 80005e0:	bf08      	it	eq
 80005e2:	4770      	bxeq	lr
 80005e4:	b530      	push	{r4, r5, lr}
 80005e6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ea:	d502      	bpl.n	80005f2 <__aeabi_l2d+0x16>
 80005ec:	4240      	negs	r0, r0
 80005ee:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005f2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005f6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005fa:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005fe:	f43f aed8 	beq.w	80003b2 <__adddf3+0xe6>
 8000602:	f04f 0203 	mov.w	r2, #3
 8000606:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800060a:	bf18      	it	ne
 800060c:	3203      	addne	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800061a:	f1c2 0320 	rsb	r3, r2, #32
 800061e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000622:	fa20 f002 	lsr.w	r0, r0, r2
 8000626:	fa01 fe03 	lsl.w	lr, r1, r3
 800062a:	ea40 000e 	orr.w	r0, r0, lr
 800062e:	fa21 f102 	lsr.w	r1, r1, r2
 8000632:	4414      	add	r4, r2
 8000634:	e6bd      	b.n	80003b2 <__adddf3+0xe6>
 8000636:	bf00      	nop

08000638 <__aeabi_dmul>:
 8000638:	b570      	push	{r4, r5, r6, lr}
 800063a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800063e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000642:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000646:	bf1d      	ittte	ne
 8000648:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800064c:	ea94 0f0c 	teqne	r4, ip
 8000650:	ea95 0f0c 	teqne	r5, ip
 8000654:	f000 f8de 	bleq	8000814 <__aeabi_dmul+0x1dc>
 8000658:	442c      	add	r4, r5
 800065a:	ea81 0603 	eor.w	r6, r1, r3
 800065e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000662:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000666:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800066a:	bf18      	it	ne
 800066c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000670:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000674:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000678:	d038      	beq.n	80006ec <__aeabi_dmul+0xb4>
 800067a:	fba0 ce02 	umull	ip, lr, r0, r2
 800067e:	f04f 0500 	mov.w	r5, #0
 8000682:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000686:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800068a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800068e:	f04f 0600 	mov.w	r6, #0
 8000692:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000696:	f09c 0f00 	teq	ip, #0
 800069a:	bf18      	it	ne
 800069c:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006a4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006a8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006ac:	d204      	bcs.n	80006b8 <__aeabi_dmul+0x80>
 80006ae:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006b2:	416d      	adcs	r5, r5
 80006b4:	eb46 0606 	adc.w	r6, r6, r6
 80006b8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006bc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006c4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006c8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006cc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d0:	bf88      	it	hi
 80006d2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006d6:	d81e      	bhi.n	8000716 <__aeabi_dmul+0xde>
 80006d8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006dc:	bf08      	it	eq
 80006de:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006e2:	f150 0000 	adcs.w	r0, r0, #0
 80006e6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f0:	ea46 0101 	orr.w	r1, r6, r1
 80006f4:	ea40 0002 	orr.w	r0, r0, r2
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000700:	bfc2      	ittt	gt
 8000702:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000706:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800070a:	bd70      	popgt	{r4, r5, r6, pc}
 800070c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000710:	f04f 0e00 	mov.w	lr, #0
 8000714:	3c01      	subs	r4, #1
 8000716:	f300 80ab 	bgt.w	8000870 <__aeabi_dmul+0x238>
 800071a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800071e:	bfde      	ittt	le
 8000720:	2000      	movle	r0, #0
 8000722:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000726:	bd70      	pople	{r4, r5, r6, pc}
 8000728:	f1c4 0400 	rsb	r4, r4, #0
 800072c:	3c20      	subs	r4, #32
 800072e:	da35      	bge.n	800079c <__aeabi_dmul+0x164>
 8000730:	340c      	adds	r4, #12
 8000732:	dc1b      	bgt.n	800076c <__aeabi_dmul+0x134>
 8000734:	f104 0414 	add.w	r4, r4, #20
 8000738:	f1c4 0520 	rsb	r5, r4, #32
 800073c:	fa00 f305 	lsl.w	r3, r0, r5
 8000740:	fa20 f004 	lsr.w	r0, r0, r4
 8000744:	fa01 f205 	lsl.w	r2, r1, r5
 8000748:	ea40 0002 	orr.w	r0, r0, r2
 800074c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000750:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000754:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000758:	fa21 f604 	lsr.w	r6, r1, r4
 800075c:	eb42 0106 	adc.w	r1, r2, r6
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 040c 	rsb	r4, r4, #12
 8000770:	f1c4 0520 	rsb	r5, r4, #32
 8000774:	fa00 f304 	lsl.w	r3, r0, r4
 8000778:	fa20 f005 	lsr.w	r0, r0, r5
 800077c:	fa01 f204 	lsl.w	r2, r1, r4
 8000780:	ea40 0002 	orr.w	r0, r0, r2
 8000784:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000788:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800078c:	f141 0100 	adc.w	r1, r1, #0
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 0520 	rsb	r5, r4, #32
 80007a0:	fa00 f205 	lsl.w	r2, r0, r5
 80007a4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007a8:	fa20 f304 	lsr.w	r3, r0, r4
 80007ac:	fa01 f205 	lsl.w	r2, r1, r5
 80007b0:	ea43 0302 	orr.w	r3, r3, r2
 80007b4:	fa21 f004 	lsr.w	r0, r1, r4
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	fa21 f204 	lsr.w	r2, r1, r4
 80007c0:	ea20 0002 	bic.w	r0, r0, r2
 80007c4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007cc:	bf08      	it	eq
 80007ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007d2:	bd70      	pop	{r4, r5, r6, pc}
 80007d4:	f094 0f00 	teq	r4, #0
 80007d8:	d10f      	bne.n	80007fa <__aeabi_dmul+0x1c2>
 80007da:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007de:	0040      	lsls	r0, r0, #1
 80007e0:	eb41 0101 	adc.w	r1, r1, r1
 80007e4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3c01      	subeq	r4, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1a6>
 80007ee:	ea41 0106 	orr.w	r1, r1, r6
 80007f2:	f095 0f00 	teq	r5, #0
 80007f6:	bf18      	it	ne
 80007f8:	4770      	bxne	lr
 80007fa:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007fe:	0052      	lsls	r2, r2, #1
 8000800:	eb43 0303 	adc.w	r3, r3, r3
 8000804:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3d01      	subeq	r5, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1c6>
 800080e:	ea43 0306 	orr.w	r3, r3, r6
 8000812:	4770      	bx	lr
 8000814:	ea94 0f0c 	teq	r4, ip
 8000818:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800081c:	bf18      	it	ne
 800081e:	ea95 0f0c 	teqne	r5, ip
 8000822:	d00c      	beq.n	800083e <__aeabi_dmul+0x206>
 8000824:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000828:	bf18      	it	ne
 800082a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082e:	d1d1      	bne.n	80007d4 <__aeabi_dmul+0x19c>
 8000830:	ea81 0103 	eor.w	r1, r1, r3
 8000834:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000838:	f04f 0000 	mov.w	r0, #0
 800083c:	bd70      	pop	{r4, r5, r6, pc}
 800083e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000842:	bf06      	itte	eq
 8000844:	4610      	moveq	r0, r2
 8000846:	4619      	moveq	r1, r3
 8000848:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084c:	d019      	beq.n	8000882 <__aeabi_dmul+0x24a>
 800084e:	ea94 0f0c 	teq	r4, ip
 8000852:	d102      	bne.n	800085a <__aeabi_dmul+0x222>
 8000854:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000858:	d113      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800085a:	ea95 0f0c 	teq	r5, ip
 800085e:	d105      	bne.n	800086c <__aeabi_dmul+0x234>
 8000860:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000864:	bf1c      	itt	ne
 8000866:	4610      	movne	r0, r2
 8000868:	4619      	movne	r1, r3
 800086a:	d10a      	bne.n	8000882 <__aeabi_dmul+0x24a>
 800086c:	ea81 0103 	eor.w	r1, r1, r3
 8000870:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000874:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000878:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800087c:	f04f 0000 	mov.w	r0, #0
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000886:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800088a:	bd70      	pop	{r4, r5, r6, pc}

0800088c <__aeabi_ddiv>:
 800088c:	b570      	push	{r4, r5, r6, lr}
 800088e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800089a:	bf1d      	ittte	ne
 800089c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a0:	ea94 0f0c 	teqne	r4, ip
 80008a4:	ea95 0f0c 	teqne	r5, ip
 80008a8:	f000 f8a7 	bleq	80009fa <__aeabi_ddiv+0x16e>
 80008ac:	eba4 0405 	sub.w	r4, r4, r5
 80008b0:	ea81 0e03 	eor.w	lr, r1, r3
 80008b4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008bc:	f000 8088 	beq.w	80009d0 <__aeabi_ddiv+0x144>
 80008c0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008c4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008c8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008cc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008d4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008d8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008dc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008e4:	429d      	cmp	r5, r3
 80008e6:	bf08      	it	eq
 80008e8:	4296      	cmpeq	r6, r2
 80008ea:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ee:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008f2:	d202      	bcs.n	80008fa <__aeabi_ddiv+0x6e>
 80008f4:	085b      	lsrs	r3, r3, #1
 80008f6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fa:	1ab6      	subs	r6, r6, r2
 80008fc:	eb65 0503 	sbc.w	r5, r5, r3
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800090a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000938:	085b      	lsrs	r3, r3, #1
 800093a:	ea4f 0232 	mov.w	r2, r2, rrx
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000968:	ea55 0e06 	orrs.w	lr, r5, r6
 800096c:	d018      	beq.n	80009a0 <__aeabi_ddiv+0x114>
 800096e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000972:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000976:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800097a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800097e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000982:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000986:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800098a:	d1c0      	bne.n	800090e <__aeabi_ddiv+0x82>
 800098c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000990:	d10b      	bne.n	80009aa <__aeabi_ddiv+0x11e>
 8000992:	ea41 0100 	orr.w	r1, r1, r0
 8000996:	f04f 0000 	mov.w	r0, #0
 800099a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800099e:	e7b6      	b.n	800090e <__aeabi_ddiv+0x82>
 80009a0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009a4:	bf04      	itt	eq
 80009a6:	4301      	orreq	r1, r0
 80009a8:	2000      	moveq	r0, #0
 80009aa:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ae:	bf88      	it	hi
 80009b0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009b4:	f63f aeaf 	bhi.w	8000716 <__aeabi_dmul+0xde>
 80009b8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009bc:	bf04      	itt	eq
 80009be:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009c2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009c6:	f150 0000 	adcs.w	r0, r0, #0
 80009ca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ce:	bd70      	pop	{r4, r5, r6, pc}
 80009d0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009d4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009d8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009dc:	bfc2      	ittt	gt
 80009de:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009e2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009e6:	bd70      	popgt	{r4, r5, r6, pc}
 80009e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ec:	f04f 0e00 	mov.w	lr, #0
 80009f0:	3c01      	subs	r4, #1
 80009f2:	e690      	b.n	8000716 <__aeabi_dmul+0xde>
 80009f4:	ea45 0e06 	orr.w	lr, r5, r6
 80009f8:	e68d      	b.n	8000716 <__aeabi_dmul+0xde>
 80009fa:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009fe:	ea94 0f0c 	teq	r4, ip
 8000a02:	bf08      	it	eq
 8000a04:	ea95 0f0c 	teqeq	r5, ip
 8000a08:	f43f af3b 	beq.w	8000882 <__aeabi_dmul+0x24a>
 8000a0c:	ea94 0f0c 	teq	r4, ip
 8000a10:	d10a      	bne.n	8000a28 <__aeabi_ddiv+0x19c>
 8000a12:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a16:	f47f af34 	bne.w	8000882 <__aeabi_dmul+0x24a>
 8000a1a:	ea95 0f0c 	teq	r5, ip
 8000a1e:	f47f af25 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a22:	4610      	mov	r0, r2
 8000a24:	4619      	mov	r1, r3
 8000a26:	e72c      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a28:	ea95 0f0c 	teq	r5, ip
 8000a2c:	d106      	bne.n	8000a3c <__aeabi_ddiv+0x1b0>
 8000a2e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a32:	f43f aefd 	beq.w	8000830 <__aeabi_dmul+0x1f8>
 8000a36:	4610      	mov	r0, r2
 8000a38:	4619      	mov	r1, r3
 8000a3a:	e722      	b.n	8000882 <__aeabi_dmul+0x24a>
 8000a3c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a46:	f47f aec5 	bne.w	80007d4 <__aeabi_dmul+0x19c>
 8000a4a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a4e:	f47f af0d 	bne.w	800086c <__aeabi_dmul+0x234>
 8000a52:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a56:	f47f aeeb 	bne.w	8000830 <__aeabi_dmul+0x1f8>
 8000a5a:	e712      	b.n	8000882 <__aeabi_dmul+0x24a>

08000a5c <__gedf2>:
 8000a5c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a60:	e006      	b.n	8000a70 <__cmpdf2+0x4>
 8000a62:	bf00      	nop

08000a64 <__ledf2>:
 8000a64:	f04f 0c01 	mov.w	ip, #1
 8000a68:	e002      	b.n	8000a70 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__cmpdf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a80:	bf18      	it	ne
 8000a82:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a86:	d01b      	beq.n	8000ac0 <__cmpdf2+0x54>
 8000a88:	b001      	add	sp, #4
 8000a8a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a8e:	bf0c      	ite	eq
 8000a90:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a94:	ea91 0f03 	teqne	r1, r3
 8000a98:	bf02      	ittt	eq
 8000a9a:	ea90 0f02 	teqeq	r0, r2
 8000a9e:	2000      	moveq	r0, #0
 8000aa0:	4770      	bxeq	lr
 8000aa2:	f110 0f00 	cmn.w	r0, #0
 8000aa6:	ea91 0f03 	teq	r1, r3
 8000aaa:	bf58      	it	pl
 8000aac:	4299      	cmppl	r1, r3
 8000aae:	bf08      	it	eq
 8000ab0:	4290      	cmpeq	r0, r2
 8000ab2:	bf2c      	ite	cs
 8000ab4:	17d8      	asrcs	r0, r3, #31
 8000ab6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aba:	f040 0001 	orr.w	r0, r0, #1
 8000abe:	4770      	bx	lr
 8000ac0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ac4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ac8:	d102      	bne.n	8000ad0 <__cmpdf2+0x64>
 8000aca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ace:	d107      	bne.n	8000ae0 <__cmpdf2+0x74>
 8000ad0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ad4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad8:	d1d6      	bne.n	8000a88 <__cmpdf2+0x1c>
 8000ada:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ade:	d0d3      	beq.n	8000a88 <__cmpdf2+0x1c>
 8000ae0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop

08000ae8 <__aeabi_cdrcmple>:
 8000ae8:	4684      	mov	ip, r0
 8000aea:	4610      	mov	r0, r2
 8000aec:	4662      	mov	r2, ip
 8000aee:	468c      	mov	ip, r1
 8000af0:	4619      	mov	r1, r3
 8000af2:	4663      	mov	r3, ip
 8000af4:	e000      	b.n	8000af8 <__aeabi_cdcmpeq>
 8000af6:	bf00      	nop

08000af8 <__aeabi_cdcmpeq>:
 8000af8:	b501      	push	{r0, lr}
 8000afa:	f7ff ffb7 	bl	8000a6c <__cmpdf2>
 8000afe:	2800      	cmp	r0, #0
 8000b00:	bf48      	it	mi
 8000b02:	f110 0f00 	cmnmi.w	r0, #0
 8000b06:	bd01      	pop	{r0, pc}

08000b08 <__aeabi_dcmpeq>:
 8000b08:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b0c:	f7ff fff4 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b10:	bf0c      	ite	eq
 8000b12:	2001      	moveq	r0, #1
 8000b14:	2000      	movne	r0, #0
 8000b16:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b1a:	bf00      	nop

08000b1c <__aeabi_dcmplt>:
 8000b1c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b20:	f7ff ffea 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b24:	bf34      	ite	cc
 8000b26:	2001      	movcc	r0, #1
 8000b28:	2000      	movcs	r0, #0
 8000b2a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2e:	bf00      	nop

08000b30 <__aeabi_dcmple>:
 8000b30:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b34:	f7ff ffe0 	bl	8000af8 <__aeabi_cdcmpeq>
 8000b38:	bf94      	ite	ls
 8000b3a:	2001      	movls	r0, #1
 8000b3c:	2000      	movhi	r0, #0
 8000b3e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b42:	bf00      	nop

08000b44 <__aeabi_dcmpge>:
 8000b44:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b48:	f7ff ffce 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b4c:	bf94      	ite	ls
 8000b4e:	2001      	movls	r0, #1
 8000b50:	2000      	movhi	r0, #0
 8000b52:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b56:	bf00      	nop

08000b58 <__aeabi_dcmpgt>:
 8000b58:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b5c:	f7ff ffc4 	bl	8000ae8 <__aeabi_cdrcmple>
 8000b60:	bf34      	ite	cc
 8000b62:	2001      	movcc	r0, #1
 8000b64:	2000      	movcs	r0, #0
 8000b66:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b6a:	bf00      	nop

08000b6c <__aeabi_dcmpun>:
 8000b6c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b70:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b74:	d102      	bne.n	8000b7c <__aeabi_dcmpun+0x10>
 8000b76:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b7a:	d10a      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b7c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b84:	d102      	bne.n	8000b8c <__aeabi_dcmpun+0x20>
 8000b86:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b8a:	d102      	bne.n	8000b92 <__aeabi_dcmpun+0x26>
 8000b8c:	f04f 0000 	mov.w	r0, #0
 8000b90:	4770      	bx	lr
 8000b92:	f04f 0001 	mov.w	r0, #1
 8000b96:	4770      	bx	lr

08000b98 <__aeabi_d2iz>:
 8000b98:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b9c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba0:	d215      	bcs.n	8000bce <__aeabi_d2iz+0x36>
 8000ba2:	d511      	bpl.n	8000bc8 <__aeabi_d2iz+0x30>
 8000ba4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ba8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bac:	d912      	bls.n	8000bd4 <__aeabi_d2iz+0x3c>
 8000bae:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bb2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bb6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bbe:	fa23 f002 	lsr.w	r0, r3, r2
 8000bc2:	bf18      	it	ne
 8000bc4:	4240      	negne	r0, r0
 8000bc6:	4770      	bx	lr
 8000bc8:	f04f 0000 	mov.w	r0, #0
 8000bcc:	4770      	bx	lr
 8000bce:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bd2:	d105      	bne.n	8000be0 <__aeabi_d2iz+0x48>
 8000bd4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bd8:	bf08      	it	eq
 8000bda:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_d2uiz>:
 8000be8:	004a      	lsls	r2, r1, #1
 8000bea:	d211      	bcs.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bec:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bf0:	d211      	bcs.n	8000c16 <__aeabi_d2uiz+0x2e>
 8000bf2:	d50d      	bpl.n	8000c10 <__aeabi_d2uiz+0x28>
 8000bf4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bf8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bfc:	d40e      	bmi.n	8000c1c <__aeabi_d2uiz+0x34>
 8000bfe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c02:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c06:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c0a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c1a:	d102      	bne.n	8000c22 <__aeabi_d2uiz+0x3a>
 8000c1c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c20:	4770      	bx	lr
 8000c22:	f04f 0000 	mov.w	r0, #0
 8000c26:	4770      	bx	lr

08000c28 <__aeabi_d2f>:
 8000c28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c30:	bf24      	itt	cs
 8000c32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c3a:	d90d      	bls.n	8000c58 <__aeabi_d2f+0x30>
 8000c3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c50:	bf08      	it	eq
 8000c52:	f020 0001 	biceq.w	r0, r0, #1
 8000c56:	4770      	bx	lr
 8000c58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c5c:	d121      	bne.n	8000ca2 <__aeabi_d2f+0x7a>
 8000c5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c62:	bfbc      	itt	lt
 8000c64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c68:	4770      	bxlt	lr
 8000c6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c72:	f1c2 0218 	rsb	r2, r2, #24
 8000c76:	f1c2 0c20 	rsb	ip, r2, #32
 8000c7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c82:	bf18      	it	ne
 8000c84:	f040 0001 	orrne.w	r0, r0, #1
 8000c88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c94:	ea40 000c 	orr.w	r0, r0, ip
 8000c98:	fa23 f302 	lsr.w	r3, r3, r2
 8000c9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ca0:	e7cc      	b.n	8000c3c <__aeabi_d2f+0x14>
 8000ca2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ca6:	d107      	bne.n	8000cb8 <__aeabi_d2f+0x90>
 8000ca8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000cac:	bf1e      	ittt	ne
 8000cae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cb2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cb6:	4770      	bxne	lr
 8000cb8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cbc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cc0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cc4:	4770      	bx	lr
 8000cc6:	bf00      	nop

08000cc8 <__aeabi_uldivmod>:
 8000cc8:	b953      	cbnz	r3, 8000ce0 <__aeabi_uldivmod+0x18>
 8000cca:	b94a      	cbnz	r2, 8000ce0 <__aeabi_uldivmod+0x18>
 8000ccc:	2900      	cmp	r1, #0
 8000cce:	bf08      	it	eq
 8000cd0:	2800      	cmpeq	r0, #0
 8000cd2:	bf1c      	itt	ne
 8000cd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cdc:	f000 b9a6 	b.w	800102c <__aeabi_idiv0>
 8000ce0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ce4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ce8:	f000 f83c 	bl	8000d64 <__udivmoddi4>
 8000cec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cf4:	b004      	add	sp, #16
 8000cf6:	4770      	bx	lr

08000cf8 <__aeabi_d2lz>:
 8000cf8:	b538      	push	{r3, r4, r5, lr}
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	4604      	mov	r4, r0
 8000d00:	460d      	mov	r5, r1
 8000d02:	f7ff ff0b 	bl	8000b1c <__aeabi_dcmplt>
 8000d06:	b928      	cbnz	r0, 8000d14 <__aeabi_d2lz+0x1c>
 8000d08:	4620      	mov	r0, r4
 8000d0a:	4629      	mov	r1, r5
 8000d0c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d10:	f000 b80a 	b.w	8000d28 <__aeabi_d2ulz>
 8000d14:	4620      	mov	r0, r4
 8000d16:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d1a:	f000 f805 	bl	8000d28 <__aeabi_d2ulz>
 8000d1e:	4240      	negs	r0, r0
 8000d20:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d24:	bd38      	pop	{r3, r4, r5, pc}
 8000d26:	bf00      	nop

08000d28 <__aeabi_d2ulz>:
 8000d28:	b5d0      	push	{r4, r6, r7, lr}
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <__aeabi_d2ulz+0x34>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	4606      	mov	r6, r0
 8000d30:	460f      	mov	r7, r1
 8000d32:	f7ff fc81 	bl	8000638 <__aeabi_dmul>
 8000d36:	f7ff ff57 	bl	8000be8 <__aeabi_d2uiz>
 8000d3a:	4604      	mov	r4, r0
 8000d3c:	f7ff fc02 	bl	8000544 <__aeabi_ui2d>
 8000d40:	4b07      	ldr	r3, [pc, #28]	; (8000d60 <__aeabi_d2ulz+0x38>)
 8000d42:	2200      	movs	r2, #0
 8000d44:	f7ff fc78 	bl	8000638 <__aeabi_dmul>
 8000d48:	4602      	mov	r2, r0
 8000d4a:	460b      	mov	r3, r1
 8000d4c:	4630      	mov	r0, r6
 8000d4e:	4639      	mov	r1, r7
 8000d50:	f7ff faba 	bl	80002c8 <__aeabi_dsub>
 8000d54:	f7ff ff48 	bl	8000be8 <__aeabi_d2uiz>
 8000d58:	4621      	mov	r1, r4
 8000d5a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d5c:	3df00000 	.word	0x3df00000
 8000d60:	41f00000 	.word	0x41f00000

08000d64 <__udivmoddi4>:
 8000d64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d68:	9e08      	ldr	r6, [sp, #32]
 8000d6a:	460d      	mov	r5, r1
 8000d6c:	4604      	mov	r4, r0
 8000d6e:	460f      	mov	r7, r1
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d14a      	bne.n	8000e0a <__udivmoddi4+0xa6>
 8000d74:	428a      	cmp	r2, r1
 8000d76:	4694      	mov	ip, r2
 8000d78:	d965      	bls.n	8000e46 <__udivmoddi4+0xe2>
 8000d7a:	fab2 f382 	clz	r3, r2
 8000d7e:	b143      	cbz	r3, 8000d92 <__udivmoddi4+0x2e>
 8000d80:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d84:	f1c3 0220 	rsb	r2, r3, #32
 8000d88:	409f      	lsls	r7, r3
 8000d8a:	fa20 f202 	lsr.w	r2, r0, r2
 8000d8e:	4317      	orrs	r7, r2
 8000d90:	409c      	lsls	r4, r3
 8000d92:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d96:	fa1f f58c 	uxth.w	r5, ip
 8000d9a:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d9e:	0c22      	lsrs	r2, r4, #16
 8000da0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000da4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000da8:	fb01 f005 	mul.w	r0, r1, r5
 8000dac:	4290      	cmp	r0, r2
 8000dae:	d90a      	bls.n	8000dc6 <__udivmoddi4+0x62>
 8000db0:	eb1c 0202 	adds.w	r2, ip, r2
 8000db4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000db8:	f080 811c 	bcs.w	8000ff4 <__udivmoddi4+0x290>
 8000dbc:	4290      	cmp	r0, r2
 8000dbe:	f240 8119 	bls.w	8000ff4 <__udivmoddi4+0x290>
 8000dc2:	3902      	subs	r1, #2
 8000dc4:	4462      	add	r2, ip
 8000dc6:	1a12      	subs	r2, r2, r0
 8000dc8:	b2a4      	uxth	r4, r4
 8000dca:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dce:	fb0e 2210 	mls	r2, lr, r0, r2
 8000dd2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000dd6:	fb00 f505 	mul.w	r5, r0, r5
 8000dda:	42a5      	cmp	r5, r4
 8000ddc:	d90a      	bls.n	8000df4 <__udivmoddi4+0x90>
 8000dde:	eb1c 0404 	adds.w	r4, ip, r4
 8000de2:	f100 32ff 	add.w	r2, r0, #4294967295
 8000de6:	f080 8107 	bcs.w	8000ff8 <__udivmoddi4+0x294>
 8000dea:	42a5      	cmp	r5, r4
 8000dec:	f240 8104 	bls.w	8000ff8 <__udivmoddi4+0x294>
 8000df0:	4464      	add	r4, ip
 8000df2:	3802      	subs	r0, #2
 8000df4:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	b11e      	cbz	r6, 8000e06 <__udivmoddi4+0xa2>
 8000dfe:	40dc      	lsrs	r4, r3
 8000e00:	2300      	movs	r3, #0
 8000e02:	e9c6 4300 	strd	r4, r3, [r6]
 8000e06:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e0a:	428b      	cmp	r3, r1
 8000e0c:	d908      	bls.n	8000e20 <__udivmoddi4+0xbc>
 8000e0e:	2e00      	cmp	r6, #0
 8000e10:	f000 80ed 	beq.w	8000fee <__udivmoddi4+0x28a>
 8000e14:	2100      	movs	r1, #0
 8000e16:	e9c6 0500 	strd	r0, r5, [r6]
 8000e1a:	4608      	mov	r0, r1
 8000e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e20:	fab3 f183 	clz	r1, r3
 8000e24:	2900      	cmp	r1, #0
 8000e26:	d149      	bne.n	8000ebc <__udivmoddi4+0x158>
 8000e28:	42ab      	cmp	r3, r5
 8000e2a:	d302      	bcc.n	8000e32 <__udivmoddi4+0xce>
 8000e2c:	4282      	cmp	r2, r0
 8000e2e:	f200 80f8 	bhi.w	8001022 <__udivmoddi4+0x2be>
 8000e32:	1a84      	subs	r4, r0, r2
 8000e34:	eb65 0203 	sbc.w	r2, r5, r3
 8000e38:	2001      	movs	r0, #1
 8000e3a:	4617      	mov	r7, r2
 8000e3c:	2e00      	cmp	r6, #0
 8000e3e:	d0e2      	beq.n	8000e06 <__udivmoddi4+0xa2>
 8000e40:	e9c6 4700 	strd	r4, r7, [r6]
 8000e44:	e7df      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000e46:	b902      	cbnz	r2, 8000e4a <__udivmoddi4+0xe6>
 8000e48:	deff      	udf	#255	; 0xff
 8000e4a:	fab2 f382 	clz	r3, r2
 8000e4e:	2b00      	cmp	r3, #0
 8000e50:	f040 8090 	bne.w	8000f74 <__udivmoddi4+0x210>
 8000e54:	1a8a      	subs	r2, r1, r2
 8000e56:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e5a:	fa1f fe8c 	uxth.w	lr, ip
 8000e5e:	2101      	movs	r1, #1
 8000e60:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e64:	fb07 2015 	mls	r0, r7, r5, r2
 8000e68:	0c22      	lsrs	r2, r4, #16
 8000e6a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e6e:	fb0e f005 	mul.w	r0, lr, r5
 8000e72:	4290      	cmp	r0, r2
 8000e74:	d908      	bls.n	8000e88 <__udivmoddi4+0x124>
 8000e76:	eb1c 0202 	adds.w	r2, ip, r2
 8000e7a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e7e:	d202      	bcs.n	8000e86 <__udivmoddi4+0x122>
 8000e80:	4290      	cmp	r0, r2
 8000e82:	f200 80cb 	bhi.w	800101c <__udivmoddi4+0x2b8>
 8000e86:	4645      	mov	r5, r8
 8000e88:	1a12      	subs	r2, r2, r0
 8000e8a:	b2a4      	uxth	r4, r4
 8000e8c:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e90:	fb07 2210 	mls	r2, r7, r0, r2
 8000e94:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e98:	fb0e fe00 	mul.w	lr, lr, r0
 8000e9c:	45a6      	cmp	lr, r4
 8000e9e:	d908      	bls.n	8000eb2 <__udivmoddi4+0x14e>
 8000ea0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ea4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ea8:	d202      	bcs.n	8000eb0 <__udivmoddi4+0x14c>
 8000eaa:	45a6      	cmp	lr, r4
 8000eac:	f200 80bb 	bhi.w	8001026 <__udivmoddi4+0x2c2>
 8000eb0:	4610      	mov	r0, r2
 8000eb2:	eba4 040e 	sub.w	r4, r4, lr
 8000eb6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eba:	e79f      	b.n	8000dfc <__udivmoddi4+0x98>
 8000ebc:	f1c1 0720 	rsb	r7, r1, #32
 8000ec0:	408b      	lsls	r3, r1
 8000ec2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ec6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eca:	fa05 f401 	lsl.w	r4, r5, r1
 8000ece:	fa20 f307 	lsr.w	r3, r0, r7
 8000ed2:	40fd      	lsrs	r5, r7
 8000ed4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ed8:	4323      	orrs	r3, r4
 8000eda:	fbb5 f8f9 	udiv	r8, r5, r9
 8000ede:	fa1f fe8c 	uxth.w	lr, ip
 8000ee2:	fb09 5518 	mls	r5, r9, r8, r5
 8000ee6:	0c1c      	lsrs	r4, r3, #16
 8000ee8:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000eec:	fb08 f50e 	mul.w	r5, r8, lr
 8000ef0:	42a5      	cmp	r5, r4
 8000ef2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ef6:	fa00 f001 	lsl.w	r0, r0, r1
 8000efa:	d90b      	bls.n	8000f14 <__udivmoddi4+0x1b0>
 8000efc:	eb1c 0404 	adds.w	r4, ip, r4
 8000f00:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f04:	f080 8088 	bcs.w	8001018 <__udivmoddi4+0x2b4>
 8000f08:	42a5      	cmp	r5, r4
 8000f0a:	f240 8085 	bls.w	8001018 <__udivmoddi4+0x2b4>
 8000f0e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f12:	4464      	add	r4, ip
 8000f14:	1b64      	subs	r4, r4, r5
 8000f16:	b29d      	uxth	r5, r3
 8000f18:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f1c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f20:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f24:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f28:	45a6      	cmp	lr, r4
 8000f2a:	d908      	bls.n	8000f3e <__udivmoddi4+0x1da>
 8000f2c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f30:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f34:	d26c      	bcs.n	8001010 <__udivmoddi4+0x2ac>
 8000f36:	45a6      	cmp	lr, r4
 8000f38:	d96a      	bls.n	8001010 <__udivmoddi4+0x2ac>
 8000f3a:	3b02      	subs	r3, #2
 8000f3c:	4464      	add	r4, ip
 8000f3e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f42:	fba3 9502 	umull	r9, r5, r3, r2
 8000f46:	eba4 040e 	sub.w	r4, r4, lr
 8000f4a:	42ac      	cmp	r4, r5
 8000f4c:	46c8      	mov	r8, r9
 8000f4e:	46ae      	mov	lr, r5
 8000f50:	d356      	bcc.n	8001000 <__udivmoddi4+0x29c>
 8000f52:	d053      	beq.n	8000ffc <__udivmoddi4+0x298>
 8000f54:	b156      	cbz	r6, 8000f6c <__udivmoddi4+0x208>
 8000f56:	ebb0 0208 	subs.w	r2, r0, r8
 8000f5a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f5e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f62:	40ca      	lsrs	r2, r1
 8000f64:	40cc      	lsrs	r4, r1
 8000f66:	4317      	orrs	r7, r2
 8000f68:	e9c6 7400 	strd	r7, r4, [r6]
 8000f6c:	4618      	mov	r0, r3
 8000f6e:	2100      	movs	r1, #0
 8000f70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f74:	f1c3 0120 	rsb	r1, r3, #32
 8000f78:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f7c:	fa20 f201 	lsr.w	r2, r0, r1
 8000f80:	fa25 f101 	lsr.w	r1, r5, r1
 8000f84:	409d      	lsls	r5, r3
 8000f86:	432a      	orrs	r2, r5
 8000f88:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f8c:	fa1f fe8c 	uxth.w	lr, ip
 8000f90:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f94:	fb07 1510 	mls	r5, r7, r0, r1
 8000f98:	0c11      	lsrs	r1, r2, #16
 8000f9a:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f9e:	fb00 f50e 	mul.w	r5, r0, lr
 8000fa2:	428d      	cmp	r5, r1
 8000fa4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x258>
 8000faa:	eb1c 0101 	adds.w	r1, ip, r1
 8000fae:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fb2:	d22f      	bcs.n	8001014 <__udivmoddi4+0x2b0>
 8000fb4:	428d      	cmp	r5, r1
 8000fb6:	d92d      	bls.n	8001014 <__udivmoddi4+0x2b0>
 8000fb8:	3802      	subs	r0, #2
 8000fba:	4461      	add	r1, ip
 8000fbc:	1b49      	subs	r1, r1, r5
 8000fbe:	b292      	uxth	r2, r2
 8000fc0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fc4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fc8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fcc:	fb05 f10e 	mul.w	r1, r5, lr
 8000fd0:	4291      	cmp	r1, r2
 8000fd2:	d908      	bls.n	8000fe6 <__udivmoddi4+0x282>
 8000fd4:	eb1c 0202 	adds.w	r2, ip, r2
 8000fd8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000fdc:	d216      	bcs.n	800100c <__udivmoddi4+0x2a8>
 8000fde:	4291      	cmp	r1, r2
 8000fe0:	d914      	bls.n	800100c <__udivmoddi4+0x2a8>
 8000fe2:	3d02      	subs	r5, #2
 8000fe4:	4462      	add	r2, ip
 8000fe6:	1a52      	subs	r2, r2, r1
 8000fe8:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000fec:	e738      	b.n	8000e60 <__udivmoddi4+0xfc>
 8000fee:	4631      	mov	r1, r6
 8000ff0:	4630      	mov	r0, r6
 8000ff2:	e708      	b.n	8000e06 <__udivmoddi4+0xa2>
 8000ff4:	4639      	mov	r1, r7
 8000ff6:	e6e6      	b.n	8000dc6 <__udivmoddi4+0x62>
 8000ff8:	4610      	mov	r0, r2
 8000ffa:	e6fb      	b.n	8000df4 <__udivmoddi4+0x90>
 8000ffc:	4548      	cmp	r0, r9
 8000ffe:	d2a9      	bcs.n	8000f54 <__udivmoddi4+0x1f0>
 8001000:	ebb9 0802 	subs.w	r8, r9, r2
 8001004:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001008:	3b01      	subs	r3, #1
 800100a:	e7a3      	b.n	8000f54 <__udivmoddi4+0x1f0>
 800100c:	4645      	mov	r5, r8
 800100e:	e7ea      	b.n	8000fe6 <__udivmoddi4+0x282>
 8001010:	462b      	mov	r3, r5
 8001012:	e794      	b.n	8000f3e <__udivmoddi4+0x1da>
 8001014:	4640      	mov	r0, r8
 8001016:	e7d1      	b.n	8000fbc <__udivmoddi4+0x258>
 8001018:	46d0      	mov	r8, sl
 800101a:	e77b      	b.n	8000f14 <__udivmoddi4+0x1b0>
 800101c:	3d02      	subs	r5, #2
 800101e:	4462      	add	r2, ip
 8001020:	e732      	b.n	8000e88 <__udivmoddi4+0x124>
 8001022:	4608      	mov	r0, r1
 8001024:	e70a      	b.n	8000e3c <__udivmoddi4+0xd8>
 8001026:	4464      	add	r4, ip
 8001028:	3802      	subs	r0, #2
 800102a:	e742      	b.n	8000eb2 <__udivmoddi4+0x14e>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <AS5600_Init>:
 *      Author: Kurus
 */

#include "AS5600.h"

void AS5600_Init(struct AS5600* device){
 8001030:	b480      	push	{r7}
 8001032:	b083      	sub	sp, #12
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    device->ADDRESS = _AS5600_ADDRESS;
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	2236      	movs	r2, #54	; 0x36
 800103c:	701a      	strb	r2, [r3, #0]
    device->ZMCO = 0;
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	2200      	movs	r2, #0
 8001042:	705a      	strb	r2, [r3, #1]
    device->ZPOS1 = 0;
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	2200      	movs	r2, #0
 8001048:	709a      	strb	r2, [r3, #2]
    device->ZPOS2 = 0;
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	2200      	movs	r2, #0
 800104e:	70da      	strb	r2, [r3, #3]
    device->MPOS1 = 0;
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	2200      	movs	r2, #0
 8001054:	711a      	strb	r2, [r3, #4]
    device->MPOS2 = 0;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	2200      	movs	r2, #0
 800105a:	715a      	strb	r2, [r3, #5]
    device->MANG1 = 0;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	2200      	movs	r2, #0
 8001060:	719a      	strb	r2, [r3, #6]
    device->MANG2 = 0;
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	2200      	movs	r2, #0
 8001066:	71da      	strb	r2, [r3, #7]
    device->CONF1 = 0;
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	2200      	movs	r2, #0
 800106c:	721a      	strb	r2, [r3, #8]
    device->CONF2 = 0;
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2200      	movs	r2, #0
 8001072:	725a      	strb	r2, [r3, #9]
    device->RAW_ANGLE1 = 0;
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	2200      	movs	r2, #0
 8001078:	729a      	strb	r2, [r3, #10]
    device->RAW_ANGLE2 = 0;
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	2200      	movs	r2, #0
 800107e:	72da      	strb	r2, [r3, #11]
    device->ANGLE1 = _ANGLE;
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	220e      	movs	r2, #14
 8001084:	731a      	strb	r2, [r3, #12]
    device->ANGLE2 = 0;
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	2200      	movs	r2, #0
 800108a:	735a      	strb	r2, [r3, #13]
    device->STATUS = _STATUS;
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	220b      	movs	r2, #11
 8001090:	739a      	strb	r2, [r3, #14]
    device->AGC = 0;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	2200      	movs	r2, #0
 8001096:	73da      	strb	r2, [r3, #15]
    device->MAGNITUDE1 = 0;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	2200      	movs	r2, #0
 800109c:	741a      	strb	r2, [r3, #16]
    device->MAGNITUDE2 = 0;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	2200      	movs	r2, #0
 80010a2:	745a      	strb	r2, [r3, #17]
}
 80010a4:	bf00      	nop
 80010a6:	370c      	adds	r7, #12
 80010a8:	46bd      	mov	sp, r7
 80010aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ae:	4770      	bx	lr

080010b0 <AS5600_Angle>:
float AS5600_Angle(struct AS5600* device)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b088      	sub	sp, #32
 80010b4:	af04      	add	r7, sp, #16
 80010b6:	6078      	str	r0, [r7, #4]
    uint16_t angle;
    HAL_I2C_Mem_Read(&hi2c1, device->ADDRESS << 1, device->ANGLE1, 1, (uint8_t*)&angle, 2, HAL_MAX_DELAY);
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	b29b      	uxth	r3, r3
 80010be:	005b      	lsls	r3, r3, #1
 80010c0:	b299      	uxth	r1, r3
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	7b1b      	ldrb	r3, [r3, #12]
 80010c6:	b29a      	uxth	r2, r3
 80010c8:	f04f 33ff 	mov.w	r3, #4294967295
 80010cc:	9302      	str	r3, [sp, #8]
 80010ce:	2302      	movs	r3, #2
 80010d0:	9301      	str	r3, [sp, #4]
 80010d2:	f107 030a 	add.w	r3, r7, #10
 80010d6:	9300      	str	r3, [sp, #0]
 80010d8:	2301      	movs	r3, #1
 80010da:	4815      	ldr	r0, [pc, #84]	; (8001130 <AS5600_Angle+0x80>)
 80010dc:	f001 ffe6 	bl	80030ac <HAL_I2C_Mem_Read>
    angle = (angle >> 8) | (angle << 8); // zamiana bitow LH
 80010e0:	897b      	ldrh	r3, [r7, #10]
 80010e2:	0a1b      	lsrs	r3, r3, #8
 80010e4:	b29b      	uxth	r3, r3
 80010e6:	b21a      	sxth	r2, r3
 80010e8:	897b      	ldrh	r3, [r7, #10]
 80010ea:	021b      	lsls	r3, r3, #8
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	b29b      	uxth	r3, r3
 80010f4:	817b      	strh	r3, [r7, #10]
    float angle_float = angle / 11.38;
 80010f6:	897b      	ldrh	r3, [r7, #10]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fa33 	bl	8000564 <__aeabi_i2d>
 80010fe:	a30a      	add	r3, pc, #40	; (adr r3, 8001128 <AS5600_Angle+0x78>)
 8001100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001104:	f7ff fbc2 	bl	800088c <__aeabi_ddiv>
 8001108:	4602      	mov	r2, r0
 800110a:	460b      	mov	r3, r1
 800110c:	4610      	mov	r0, r2
 800110e:	4619      	mov	r1, r3
 8001110:	f7ff fd8a 	bl	8000c28 <__aeabi_d2f>
 8001114:	4603      	mov	r3, r0
 8001116:	60fb      	str	r3, [r7, #12]
    return angle_float;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	ee07 3a90 	vmov	s15, r3
}
 800111e:	eeb0 0a67 	vmov.f32	s0, s15
 8001122:	3710      	adds	r7, #16
 8001124:	46bd      	mov	sp, r7
 8001126:	bd80      	pop	{r7, pc}
 8001128:	5c28f5c3 	.word	0x5c28f5c3
 800112c:	4026c28f 	.word	0x4026c28f
 8001130:	20000434 	.word	0x20000434

08001134 <HAL_TIM_PeriodElapsedCallback>:
  ******************************************************************************
**/
#include "interrupts.h"

extern struct AS5600 device;
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001134:	b580      	push	{r7, lr}
 8001136:	b08c      	sub	sp, #48	; 0x30
 8001138:	af02      	add	r7, sp, #8
 800113a:	6078      	str	r0, [r7, #4]
	  float zmienna = AS5600_Angle(&device);
 800113c:	4817      	ldr	r0, [pc, #92]	; (800119c <HAL_TIM_PeriodElapsedCallback+0x68>)
 800113e:	f7ff ffb7 	bl	80010b0 <AS5600_Angle>
 8001142:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	  char buffer[20];  // Adjust the size as needed
	  int len = snprintf(buffer, sizeof(buffer), "%f", zmienna);
 8001146:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001148:	f7ff fa1e 	bl	8000588 <__aeabi_f2d>
 800114c:	4602      	mov	r2, r0
 800114e:	460b      	mov	r3, r1
 8001150:	f107 000c 	add.w	r0, r7, #12
 8001154:	e9cd 2300 	strd	r2, r3, [sp]
 8001158:	4a11      	ldr	r2, [pc, #68]	; (80011a0 <HAL_TIM_PeriodElapsedCallback+0x6c>)
 800115a:	2114      	movs	r1, #20
 800115c:	f008 f828 	bl	80091b0 <sniprintf>
 8001160:	6238      	str	r0, [r7, #32]
	  buffer[len++] = '\r';
 8001162:	6a3b      	ldr	r3, [r7, #32]
 8001164:	1c5a      	adds	r2, r3, #1
 8001166:	623a      	str	r2, [r7, #32]
 8001168:	3328      	adds	r3, #40	; 0x28
 800116a:	443b      	add	r3, r7
 800116c:	220d      	movs	r2, #13
 800116e:	f803 2c1c 	strb.w	r2, [r3, #-28]
	  buffer[len++] = '\n';
 8001172:	6a3b      	ldr	r3, [r7, #32]
 8001174:	1c5a      	adds	r2, r3, #1
 8001176:	623a      	str	r2, [r7, #32]
 8001178:	3328      	adds	r3, #40	; 0x28
 800117a:	443b      	add	r3, r7
 800117c:	220a      	movs	r2, #10
 800117e:	f803 2c1c 	strb.w	r2, [r3, #-28]
	  HAL_UART_Transmit(&huart3, (uint8_t *)buffer, len, HAL_MAX_DELAY);
 8001182:	6a3b      	ldr	r3, [r7, #32]
 8001184:	b29a      	uxth	r2, r3
 8001186:	f107 010c 	add.w	r1, r7, #12
 800118a:	f04f 33ff 	mov.w	r3, #4294967295
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <HAL_TIM_PeriodElapsedCallback+0x70>)
 8001190:	f005 fcfe 	bl	8006b90 <HAL_UART_Transmit>
}
 8001194:	bf00      	nop
 8001196:	3728      	adds	r7, #40	; 0x28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000488 	.word	0x20000488
 80011a0:	0800cb70 	.word	0x0800cb70
 80011a4:	2000059c 	.word	0x2000059c

080011a8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80011ac:	4b1f      	ldr	r3, [pc, #124]	; (800122c <MX_ETH_Init+0x84>)
 80011ae:	4a20      	ldr	r2, [pc, #128]	; (8001230 <MX_ETH_Init+0x88>)
 80011b0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80011b2:	4b20      	ldr	r3, [pc, #128]	; (8001234 <MX_ETH_Init+0x8c>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80011b8:	4b1e      	ldr	r3, [pc, #120]	; (8001234 <MX_ETH_Init+0x8c>)
 80011ba:	2280      	movs	r2, #128	; 0x80
 80011bc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80011be:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <MX_ETH_Init+0x8c>)
 80011c0:	22e1      	movs	r2, #225	; 0xe1
 80011c2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80011c4:	4b1b      	ldr	r3, [pc, #108]	; (8001234 <MX_ETH_Init+0x8c>)
 80011c6:	2200      	movs	r2, #0
 80011c8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80011ca:	4b1a      	ldr	r3, [pc, #104]	; (8001234 <MX_ETH_Init+0x8c>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80011d0:	4b18      	ldr	r3, [pc, #96]	; (8001234 <MX_ETH_Init+0x8c>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80011d6:	4b15      	ldr	r3, [pc, #84]	; (800122c <MX_ETH_Init+0x84>)
 80011d8:	4a16      	ldr	r2, [pc, #88]	; (8001234 <MX_ETH_Init+0x8c>)
 80011da:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80011dc:	4b13      	ldr	r3, [pc, #76]	; (800122c <MX_ETH_Init+0x84>)
 80011de:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80011e2:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80011e4:	4b11      	ldr	r3, [pc, #68]	; (800122c <MX_ETH_Init+0x84>)
 80011e6:	4a14      	ldr	r2, [pc, #80]	; (8001238 <MX_ETH_Init+0x90>)
 80011e8:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80011ea:	4b10      	ldr	r3, [pc, #64]	; (800122c <MX_ETH_Init+0x84>)
 80011ec:	4a13      	ldr	r2, [pc, #76]	; (800123c <MX_ETH_Init+0x94>)
 80011ee:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80011f0:	4b0e      	ldr	r3, [pc, #56]	; (800122c <MX_ETH_Init+0x84>)
 80011f2:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80011f6:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80011f8:	480c      	ldr	r0, [pc, #48]	; (800122c <MX_ETH_Init+0x84>)
 80011fa:	f001 f9b7 	bl	800256c <HAL_ETH_Init>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001204:	f000 fad2 	bl	80017ac <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001208:	2238      	movs	r2, #56	; 0x38
 800120a:	2100      	movs	r1, #0
 800120c:	480c      	ldr	r0, [pc, #48]	; (8001240 <MX_ETH_Init+0x98>)
 800120e:	f008 f866 	bl	80092de <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001212:	4b0b      	ldr	r3, [pc, #44]	; (8001240 <MX_ETH_Init+0x98>)
 8001214:	2221      	movs	r2, #33	; 0x21
 8001216:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001218:	4b09      	ldr	r3, [pc, #36]	; (8001240 <MX_ETH_Init+0x98>)
 800121a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800121e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001220:	4b07      	ldr	r3, [pc, #28]	; (8001240 <MX_ETH_Init+0x98>)
 8001222:	2200      	movs	r2, #0
 8001224:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001226:	bf00      	nop
 8001228:	bd80      	pop	{r7, pc}
 800122a:	bf00      	nop
 800122c:	2000037c 	.word	0x2000037c
 8001230:	40028000 	.word	0x40028000
 8001234:	2000042c 	.word	0x2000042c
 8001238:	20000288 	.word	0x20000288
 800123c:	200001e8 	.word	0x200001e8
 8001240:	20000344 	.word	0x20000344

08001244 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b08e      	sub	sp, #56	; 0x38
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800124c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]
 800125a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	681b      	ldr	r3, [r3, #0]
 8001260:	4a4e      	ldr	r2, [pc, #312]	; (800139c <HAL_ETH_MspInit+0x158>)
 8001262:	4293      	cmp	r3, r2
 8001264:	f040 8096 	bne.w	8001394 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001268:	4b4d      	ldr	r3, [pc, #308]	; (80013a0 <HAL_ETH_MspInit+0x15c>)
 800126a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126c:	4a4c      	ldr	r2, [pc, #304]	; (80013a0 <HAL_ETH_MspInit+0x15c>)
 800126e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001272:	6313      	str	r3, [r2, #48]	; 0x30
 8001274:	4b4a      	ldr	r3, [pc, #296]	; (80013a0 <HAL_ETH_MspInit+0x15c>)
 8001276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001278:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800127c:	623b      	str	r3, [r7, #32]
 800127e:	6a3b      	ldr	r3, [r7, #32]
 8001280:	4b47      	ldr	r3, [pc, #284]	; (80013a0 <HAL_ETH_MspInit+0x15c>)
 8001282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001284:	4a46      	ldr	r2, [pc, #280]	; (80013a0 <HAL_ETH_MspInit+0x15c>)
 8001286:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800128a:	6313      	str	r3, [r2, #48]	; 0x30
 800128c:	4b44      	ldr	r3, [pc, #272]	; (80013a0 <HAL_ETH_MspInit+0x15c>)
 800128e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001290:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001294:	61fb      	str	r3, [r7, #28]
 8001296:	69fb      	ldr	r3, [r7, #28]
 8001298:	4b41      	ldr	r3, [pc, #260]	; (80013a0 <HAL_ETH_MspInit+0x15c>)
 800129a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129c:	4a40      	ldr	r2, [pc, #256]	; (80013a0 <HAL_ETH_MspInit+0x15c>)
 800129e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80012a2:	6313      	str	r3, [r2, #48]	; 0x30
 80012a4:	4b3e      	ldr	r3, [pc, #248]	; (80013a0 <HAL_ETH_MspInit+0x15c>)
 80012a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012ac:	61bb      	str	r3, [r7, #24]
 80012ae:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012b0:	4b3b      	ldr	r3, [pc, #236]	; (80013a0 <HAL_ETH_MspInit+0x15c>)
 80012b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b4:	4a3a      	ldr	r2, [pc, #232]	; (80013a0 <HAL_ETH_MspInit+0x15c>)
 80012b6:	f043 0304 	orr.w	r3, r3, #4
 80012ba:	6313      	str	r3, [r2, #48]	; 0x30
 80012bc:	4b38      	ldr	r3, [pc, #224]	; (80013a0 <HAL_ETH_MspInit+0x15c>)
 80012be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c0:	f003 0304 	and.w	r3, r3, #4
 80012c4:	617b      	str	r3, [r7, #20]
 80012c6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	4b35      	ldr	r3, [pc, #212]	; (80013a0 <HAL_ETH_MspInit+0x15c>)
 80012ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012cc:	4a34      	ldr	r2, [pc, #208]	; (80013a0 <HAL_ETH_MspInit+0x15c>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	6313      	str	r3, [r2, #48]	; 0x30
 80012d4:	4b32      	ldr	r3, [pc, #200]	; (80013a0 <HAL_ETH_MspInit+0x15c>)
 80012d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	613b      	str	r3, [r7, #16]
 80012de:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e0:	4b2f      	ldr	r3, [pc, #188]	; (80013a0 <HAL_ETH_MspInit+0x15c>)
 80012e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e4:	4a2e      	ldr	r2, [pc, #184]	; (80013a0 <HAL_ETH_MspInit+0x15c>)
 80012e6:	f043 0302 	orr.w	r3, r3, #2
 80012ea:	6313      	str	r3, [r2, #48]	; 0x30
 80012ec:	4b2c      	ldr	r3, [pc, #176]	; (80013a0 <HAL_ETH_MspInit+0x15c>)
 80012ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f0:	f003 0302 	and.w	r3, r3, #2
 80012f4:	60fb      	str	r3, [r7, #12]
 80012f6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012f8:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <HAL_ETH_MspInit+0x15c>)
 80012fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012fc:	4a28      	ldr	r2, [pc, #160]	; (80013a0 <HAL_ETH_MspInit+0x15c>)
 80012fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001302:	6313      	str	r3, [r2, #48]	; 0x30
 8001304:	4b26      	ldr	r3, [pc, #152]	; (80013a0 <HAL_ETH_MspInit+0x15c>)
 8001306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001308:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001310:	2332      	movs	r3, #50	; 0x32
 8001312:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001314:	2302      	movs	r3, #2
 8001316:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001318:	2300      	movs	r3, #0
 800131a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800131c:	2303      	movs	r3, #3
 800131e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001320:	230b      	movs	r3, #11
 8001322:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001324:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001328:	4619      	mov	r1, r3
 800132a:	481e      	ldr	r0, [pc, #120]	; (80013a4 <HAL_ETH_MspInit+0x160>)
 800132c:	f001 fc44 	bl	8002bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001330:	2386      	movs	r3, #134	; 0x86
 8001332:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001334:	2302      	movs	r3, #2
 8001336:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001338:	2300      	movs	r3, #0
 800133a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133c:	2303      	movs	r3, #3
 800133e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001340:	230b      	movs	r3, #11
 8001342:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001344:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001348:	4619      	mov	r1, r3
 800134a:	4817      	ldr	r0, [pc, #92]	; (80013a8 <HAL_ETH_MspInit+0x164>)
 800134c:	f001 fc34 	bl	8002bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001350:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001354:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001356:	2302      	movs	r3, #2
 8001358:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135a:	2300      	movs	r3, #0
 800135c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135e:	2303      	movs	r3, #3
 8001360:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001362:	230b      	movs	r3, #11
 8001364:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136a:	4619      	mov	r1, r3
 800136c:	480f      	ldr	r0, [pc, #60]	; (80013ac <HAL_ETH_MspInit+0x168>)
 800136e:	f001 fc23 	bl	8002bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001372:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001376:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001378:	2302      	movs	r3, #2
 800137a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800137c:	2300      	movs	r3, #0
 800137e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001380:	2303      	movs	r3, #3
 8001382:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001384:	230b      	movs	r3, #11
 8001386:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001388:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800138c:	4619      	mov	r1, r3
 800138e:	4808      	ldr	r0, [pc, #32]	; (80013b0 <HAL_ETH_MspInit+0x16c>)
 8001390:	f001 fc12 	bl	8002bb8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8001394:	bf00      	nop
 8001396:	3738      	adds	r7, #56	; 0x38
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	40028000 	.word	0x40028000
 80013a0:	40023800 	.word	0x40023800
 80013a4:	40020800 	.word	0x40020800
 80013a8:	40020000 	.word	0x40020000
 80013ac:	40020400 	.word	0x40020400
 80013b0:	40021800 	.word	0x40021800

080013b4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b08c      	sub	sp, #48	; 0x30
 80013b8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013ba:	f107 031c 	add.w	r3, r7, #28
 80013be:	2200      	movs	r2, #0
 80013c0:	601a      	str	r2, [r3, #0]
 80013c2:	605a      	str	r2, [r3, #4]
 80013c4:	609a      	str	r2, [r3, #8]
 80013c6:	60da      	str	r2, [r3, #12]
 80013c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ca:	4b54      	ldr	r3, [pc, #336]	; (800151c <MX_GPIO_Init+0x168>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ce:	4a53      	ldr	r2, [pc, #332]	; (800151c <MX_GPIO_Init+0x168>)
 80013d0:	f043 0304 	orr.w	r3, r3, #4
 80013d4:	6313      	str	r3, [r2, #48]	; 0x30
 80013d6:	4b51      	ldr	r3, [pc, #324]	; (800151c <MX_GPIO_Init+0x168>)
 80013d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013da:	f003 0304 	and.w	r3, r3, #4
 80013de:	61bb      	str	r3, [r7, #24]
 80013e0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013e2:	4b4e      	ldr	r3, [pc, #312]	; (800151c <MX_GPIO_Init+0x168>)
 80013e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e6:	4a4d      	ldr	r2, [pc, #308]	; (800151c <MX_GPIO_Init+0x168>)
 80013e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80013ec:	6313      	str	r3, [r2, #48]	; 0x30
 80013ee:	4b4b      	ldr	r3, [pc, #300]	; (800151c <MX_GPIO_Init+0x168>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fa:	4b48      	ldr	r3, [pc, #288]	; (800151c <MX_GPIO_Init+0x168>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	4a47      	ldr	r2, [pc, #284]	; (800151c <MX_GPIO_Init+0x168>)
 8001400:	f043 0301 	orr.w	r3, r3, #1
 8001404:	6313      	str	r3, [r2, #48]	; 0x30
 8001406:	4b45      	ldr	r3, [pc, #276]	; (800151c <MX_GPIO_Init+0x168>)
 8001408:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140a:	f003 0301 	and.w	r3, r3, #1
 800140e:	613b      	str	r3, [r7, #16]
 8001410:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001412:	4b42      	ldr	r3, [pc, #264]	; (800151c <MX_GPIO_Init+0x168>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001416:	4a41      	ldr	r2, [pc, #260]	; (800151c <MX_GPIO_Init+0x168>)
 8001418:	f043 0302 	orr.w	r3, r3, #2
 800141c:	6313      	str	r3, [r2, #48]	; 0x30
 800141e:	4b3f      	ldr	r3, [pc, #252]	; (800151c <MX_GPIO_Init+0x168>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001422:	f003 0302 	and.w	r3, r3, #2
 8001426:	60fb      	str	r3, [r7, #12]
 8001428:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800142a:	4b3c      	ldr	r3, [pc, #240]	; (800151c <MX_GPIO_Init+0x168>)
 800142c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800142e:	4a3b      	ldr	r2, [pc, #236]	; (800151c <MX_GPIO_Init+0x168>)
 8001430:	f043 0308 	orr.w	r3, r3, #8
 8001434:	6313      	str	r3, [r2, #48]	; 0x30
 8001436:	4b39      	ldr	r3, [pc, #228]	; (800151c <MX_GPIO_Init+0x168>)
 8001438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	60bb      	str	r3, [r7, #8]
 8001440:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001442:	4b36      	ldr	r3, [pc, #216]	; (800151c <MX_GPIO_Init+0x168>)
 8001444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001446:	4a35      	ldr	r2, [pc, #212]	; (800151c <MX_GPIO_Init+0x168>)
 8001448:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800144c:	6313      	str	r3, [r2, #48]	; 0x30
 800144e:	4b33      	ldr	r3, [pc, #204]	; (800151c <MX_GPIO_Init+0x168>)
 8001450:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001452:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001456:	607b      	str	r3, [r7, #4]
 8001458:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|Dir_Pin|LD2_Pin, GPIO_PIN_RESET);
 800145a:	2200      	movs	r2, #0
 800145c:	f24c 0181 	movw	r1, #49281	; 0xc081
 8001460:	482f      	ldr	r0, [pc, #188]	; (8001520 <MX_GPIO_Init+0x16c>)
 8001462:	f001 fd55 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001466:	2200      	movs	r2, #0
 8001468:	2140      	movs	r1, #64	; 0x40
 800146a:	482e      	ldr	r0, [pc, #184]	; (8001524 <MX_GPIO_Init+0x170>)
 800146c:	f001 fd50 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Debug_GPIO_Port, Debug_Pin, GPIO_PIN_RESET);
 8001470:	2200      	movs	r2, #0
 8001472:	2180      	movs	r1, #128	; 0x80
 8001474:	482c      	ldr	r0, [pc, #176]	; (8001528 <MX_GPIO_Init+0x174>)
 8001476:	f001 fd4b 	bl	8002f10 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800147a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800147e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001480:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001484:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800148a:	f107 031c 	add.w	r3, r7, #28
 800148e:	4619      	mov	r1, r3
 8001490:	4825      	ldr	r0, [pc, #148]	; (8001528 <MX_GPIO_Init+0x174>)
 8001492:	f001 fb91 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|Dir_Pin|LD2_Pin;
 8001496:	f24c 0381 	movw	r3, #49281	; 0xc081
 800149a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800149c:	2301      	movs	r3, #1
 800149e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014a0:	2300      	movs	r3, #0
 80014a2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014a4:	2300      	movs	r3, #0
 80014a6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014a8:	f107 031c 	add.w	r3, r7, #28
 80014ac:	4619      	mov	r1, r3
 80014ae:	481c      	ldr	r0, [pc, #112]	; (8001520 <MX_GPIO_Init+0x16c>)
 80014b0:	f001 fb82 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80014b4:	2340      	movs	r3, #64	; 0x40
 80014b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014b8:	2301      	movs	r3, #1
 80014ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014bc:	2300      	movs	r3, #0
 80014be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014c0:	2300      	movs	r3, #0
 80014c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80014c4:	f107 031c 	add.w	r3, r7, #28
 80014c8:	4619      	mov	r1, r3
 80014ca:	4816      	ldr	r0, [pc, #88]	; (8001524 <MX_GPIO_Init+0x170>)
 80014cc:	f001 fb74 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014d4:	2300      	movs	r3, #0
 80014d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d8:	2300      	movs	r3, #0
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80014dc:	f107 031c 	add.w	r3, r7, #28
 80014e0:	4619      	mov	r1, r3
 80014e2:	4810      	ldr	r0, [pc, #64]	; (8001524 <MX_GPIO_Init+0x170>)
 80014e4:	f001 fb68 	bl	8002bb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Debug_Pin;
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014ec:	2301      	movs	r3, #1
 80014ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f0:	2300      	movs	r3, #0
 80014f2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Debug_GPIO_Port, &GPIO_InitStruct);
 80014f8:	f107 031c 	add.w	r3, r7, #28
 80014fc:	4619      	mov	r1, r3
 80014fe:	480a      	ldr	r0, [pc, #40]	; (8001528 <MX_GPIO_Init+0x174>)
 8001500:	f001 fb5a 	bl	8002bb8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001504:	2200      	movs	r2, #0
 8001506:	2100      	movs	r1, #0
 8001508:	2028      	movs	r0, #40	; 0x28
 800150a:	f000 ff58 	bl	80023be <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800150e:	2028      	movs	r0, #40	; 0x28
 8001510:	f000 ff71 	bl	80023f6 <HAL_NVIC_EnableIRQ>

}
 8001514:	bf00      	nop
 8001516:	3730      	adds	r7, #48	; 0x30
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}
 800151c:	40023800 	.word	0x40023800
 8001520:	40020400 	.word	0x40020400
 8001524:	40021800 	.word	0x40021800
 8001528:	40020800 	.word	0x40020800

0800152c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <MX_I2C1_Init+0x74>)
 8001532:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <MX_I2C1_Init+0x78>)
 8001534:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <MX_I2C1_Init+0x74>)
 8001538:	4a1b      	ldr	r2, [pc, #108]	; (80015a8 <MX_I2C1_Init+0x7c>)
 800153a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800153c:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <MX_I2C1_Init+0x74>)
 800153e:	2200      	movs	r2, #0
 8001540:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001542:	4b17      	ldr	r3, [pc, #92]	; (80015a0 <MX_I2C1_Init+0x74>)
 8001544:	2201      	movs	r2, #1
 8001546:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001548:	4b15      	ldr	r3, [pc, #84]	; (80015a0 <MX_I2C1_Init+0x74>)
 800154a:	2200      	movs	r2, #0
 800154c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800154e:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_I2C1_Init+0x74>)
 8001550:	2200      	movs	r2, #0
 8001552:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001554:	4b12      	ldr	r3, [pc, #72]	; (80015a0 <MX_I2C1_Init+0x74>)
 8001556:	2200      	movs	r2, #0
 8001558:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800155a:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_I2C1_Init+0x74>)
 800155c:	2200      	movs	r2, #0
 800155e:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <MX_I2C1_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001566:	480e      	ldr	r0, [pc, #56]	; (80015a0 <MX_I2C1_Init+0x74>)
 8001568:	f001 fd10 	bl	8002f8c <HAL_I2C_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8001572:	f000 f91b 	bl	80017ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8001576:	2100      	movs	r1, #0
 8001578:	4809      	ldr	r0, [pc, #36]	; (80015a0 <MX_I2C1_Init+0x74>)
 800157a:	f002 fe53 	bl	8004224 <HAL_I2CEx_ConfigAnalogFilter>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d001      	beq.n	8001588 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8001584:	f000 f912 	bl	80017ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001588:	2100      	movs	r1, #0
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_I2C1_Init+0x74>)
 800158c:	f002 fe95 	bl	80042ba <HAL_I2CEx_ConfigDigitalFilter>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8001596:	f000 f909 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000434 	.word	0x20000434
 80015a4:	40005400 	.word	0x40005400
 80015a8:	00808cd2 	.word	0x00808cd2

080015ac <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b0aa      	sub	sp, #168	; 0xa8
 80015b0:	af00      	add	r7, sp, #0
 80015b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]
 80015be:	609a      	str	r2, [r3, #8]
 80015c0:	60da      	str	r2, [r3, #12]
 80015c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c4:	f107 0310 	add.w	r3, r7, #16
 80015c8:	2284      	movs	r2, #132	; 0x84
 80015ca:	2100      	movs	r1, #0
 80015cc:	4618      	mov	r0, r3
 80015ce:	f007 fe86 	bl	80092de <memset>
  if(i2cHandle->Instance==I2C1)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	4a2a      	ldr	r2, [pc, #168]	; (8001680 <HAL_I2C_MspInit+0xd4>)
 80015d8:	4293      	cmp	r3, r2
 80015da:	d14c      	bne.n	8001676 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80015dc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80015e0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80015e2:	2300      	movs	r3, #0
 80015e4:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e6:	f107 0310 	add.w	r3, r7, #16
 80015ea:	4618      	mov	r0, r3
 80015ec:	f003 fcd4 	bl	8004f98 <HAL_RCCEx_PeriphCLKConfig>
 80015f0:	4603      	mov	r3, r0
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d001      	beq.n	80015fa <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80015f6:	f000 f8d9 	bl	80017ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015fa:	4b22      	ldr	r3, [pc, #136]	; (8001684 <HAL_I2C_MspInit+0xd8>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	4a21      	ldr	r2, [pc, #132]	; (8001684 <HAL_I2C_MspInit+0xd8>)
 8001600:	f043 0302 	orr.w	r3, r3, #2
 8001604:	6313      	str	r3, [r2, #48]	; 0x30
 8001606:	4b1f      	ldr	r3, [pc, #124]	; (8001684 <HAL_I2C_MspInit+0xd8>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	60fb      	str	r3, [r7, #12]
 8001610:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001612:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001616:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800161a:	2312      	movs	r3, #18
 800161c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001620:	2300      	movs	r3, #0
 8001622:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001626:	2303      	movs	r3, #3
 8001628:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800162c:	2304      	movs	r3, #4
 800162e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001632:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001636:	4619      	mov	r1, r3
 8001638:	4813      	ldr	r0, [pc, #76]	; (8001688 <HAL_I2C_MspInit+0xdc>)
 800163a:	f001 fabd 	bl	8002bb8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800163e:	4b11      	ldr	r3, [pc, #68]	; (8001684 <HAL_I2C_MspInit+0xd8>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	4a10      	ldr	r2, [pc, #64]	; (8001684 <HAL_I2C_MspInit+0xd8>)
 8001644:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001648:	6413      	str	r3, [r2, #64]	; 0x40
 800164a:	4b0e      	ldr	r3, [pc, #56]	; (8001684 <HAL_I2C_MspInit+0xd8>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8001656:	2200      	movs	r2, #0
 8001658:	2100      	movs	r1, #0
 800165a:	201f      	movs	r0, #31
 800165c:	f000 feaf 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001660:	201f      	movs	r0, #31
 8001662:	f000 fec8 	bl	80023f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8001666:	2200      	movs	r2, #0
 8001668:	2100      	movs	r1, #0
 800166a:	2020      	movs	r0, #32
 800166c:	f000 fea7 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001670:	2020      	movs	r0, #32
 8001672:	f000 fec0 	bl	80023f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8001676:	bf00      	nop
 8001678:	37a8      	adds	r7, #168	; 0xa8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40005400 	.word	0x40005400
 8001684:	40023800 	.word	0x40023800
 8001688:	40020400 	.word	0x40020400

0800168c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800168c:	b580      	push	{r7, lr}
 800168e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001690:	f000 fd39 	bl	8002106 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001694:	f000 f822 	bl	80016dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001698:	f7ff fe8c 	bl	80013b4 <MX_GPIO_Init>
  MX_ETH_Init();
 800169c:	f7ff fd84 	bl	80011a8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80016a0:	f000 fbc8 	bl	8001e34 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80016a4:	f000 fc5e 	bl	8001f64 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80016a8:	f7ff ff40 	bl	800152c <MX_I2C1_Init>
  MX_TIM3_Init();
 80016ac:	f000 fa96 	bl	8001bdc <MX_TIM3_Init>
  MX_TIM9_Init();
 80016b0:	f000 fb0c 	bl	8001ccc <MX_TIM9_Init>
  MX_SPI1_Init();
 80016b4:	f000 f880 	bl	80017b8 <MX_SPI1_Init>
  MX_FATFS_Init();
 80016b8:	f006 fd7c 	bl	80081b4 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Init(&huart3);
 80016bc:	4804      	ldr	r0, [pc, #16]	; (80016d0 <main+0x44>)
 80016be:	f005 fa19 	bl	8006af4 <HAL_UART_Init>
  AS5600_Init(&device);
 80016c2:	4804      	ldr	r0, [pc, #16]	; (80016d4 <main+0x48>)
 80016c4:	f7ff fcb4 	bl	8001030 <AS5600_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 80016c8:	4803      	ldr	r0, [pc, #12]	; (80016d8 <main+0x4c>)
 80016ca:	f004 fa6b 	bl	8005ba4 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016ce:	e7fe      	b.n	80016ce <main+0x42>
 80016d0:	2000059c 	.word	0x2000059c
 80016d4:	20000488 	.word	0x20000488
 80016d8:	20000504 	.word	0x20000504

080016dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b094      	sub	sp, #80	; 0x50
 80016e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016e2:	f107 0320 	add.w	r3, r7, #32
 80016e6:	2230      	movs	r2, #48	; 0x30
 80016e8:	2100      	movs	r1, #0
 80016ea:	4618      	mov	r0, r3
 80016ec:	f007 fdf7 	bl	80092de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016f0:	f107 030c 	add.w	r3, r7, #12
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]
 80016f8:	605a      	str	r2, [r3, #4]
 80016fa:	609a      	str	r2, [r3, #8]
 80016fc:	60da      	str	r2, [r3, #12]
 80016fe:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001700:	f002 ff70 	bl	80045e4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001704:	4b27      	ldr	r3, [pc, #156]	; (80017a4 <SystemClock_Config+0xc8>)
 8001706:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001708:	4a26      	ldr	r2, [pc, #152]	; (80017a4 <SystemClock_Config+0xc8>)
 800170a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170e:	6413      	str	r3, [r2, #64]	; 0x40
 8001710:	4b24      	ldr	r3, [pc, #144]	; (80017a4 <SystemClock_Config+0xc8>)
 8001712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001714:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001718:	60bb      	str	r3, [r7, #8]
 800171a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800171c:	4b22      	ldr	r3, [pc, #136]	; (80017a8 <SystemClock_Config+0xcc>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001724:	4a20      	ldr	r2, [pc, #128]	; (80017a8 <SystemClock_Config+0xcc>)
 8001726:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800172a:	6013      	str	r3, [r2, #0]
 800172c:	4b1e      	ldr	r3, [pc, #120]	; (80017a8 <SystemClock_Config+0xcc>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001734:	607b      	str	r3, [r7, #4]
 8001736:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001738:	2301      	movs	r3, #1
 800173a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 800173c:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001740:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001742:	2302      	movs	r3, #2
 8001744:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001746:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800174a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 800174c:	2304      	movs	r3, #4
 800174e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001750:	2348      	movs	r3, #72	; 0x48
 8001752:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001754:	2302      	movs	r3, #2
 8001756:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001758:	2303      	movs	r3, #3
 800175a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800175c:	f107 0320 	add.w	r3, r7, #32
 8001760:	4618      	mov	r0, r3
 8001762:	f002 ff4f 	bl	8004604 <HAL_RCC_OscConfig>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800176c:	f000 f81e 	bl	80017ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001770:	230f      	movs	r3, #15
 8001772:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001774:	2302      	movs	r3, #2
 8001776:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800177c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001780:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001782:	2300      	movs	r3, #0
 8001784:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001786:	f107 030c 	add.w	r3, r7, #12
 800178a:	2102      	movs	r1, #2
 800178c:	4618      	mov	r0, r3
 800178e:	f003 f9dd 	bl	8004b4c <HAL_RCC_ClockConfig>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001798:	f000 f808 	bl	80017ac <Error_Handler>
  }
}
 800179c:	bf00      	nop
 800179e:	3750      	adds	r7, #80	; 0x50
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}
 80017a4:	40023800 	.word	0x40023800
 80017a8:	40007000 	.word	0x40007000

080017ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80017b0:	b672      	cpsid	i
}
 80017b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <Error_Handler+0x8>
	...

080017b8 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <MX_SPI1_Init+0x74>)
 80017be:	4a1c      	ldr	r2, [pc, #112]	; (8001830 <MX_SPI1_Init+0x78>)
 80017c0:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017c2:	4b1a      	ldr	r3, [pc, #104]	; (800182c <MX_SPI1_Init+0x74>)
 80017c4:	f44f 7282 	mov.w	r2, #260	; 0x104
 80017c8:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017ca:	4b18      	ldr	r3, [pc, #96]	; (800182c <MX_SPI1_Init+0x74>)
 80017cc:	2200      	movs	r2, #0
 80017ce:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017d0:	4b16      	ldr	r3, [pc, #88]	; (800182c <MX_SPI1_Init+0x74>)
 80017d2:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80017d6:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <MX_SPI1_Init+0x74>)
 80017da:	2200      	movs	r2, #0
 80017dc:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017de:	4b13      	ldr	r3, [pc, #76]	; (800182c <MX_SPI1_Init+0x74>)
 80017e0:	2200      	movs	r2, #0
 80017e2:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <MX_SPI1_Init+0x74>)
 80017e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ea:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <MX_SPI1_Init+0x74>)
 80017ee:	2230      	movs	r2, #48	; 0x30
 80017f0:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017f2:	4b0e      	ldr	r3, [pc, #56]	; (800182c <MX_SPI1_Init+0x74>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80017f8:	4b0c      	ldr	r3, [pc, #48]	; (800182c <MX_SPI1_Init+0x74>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <MX_SPI1_Init+0x74>)
 8001800:	2200      	movs	r2, #0
 8001802:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001804:	4b09      	ldr	r3, [pc, #36]	; (800182c <MX_SPI1_Init+0x74>)
 8001806:	2207      	movs	r2, #7
 8001808:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800180a:	4b08      	ldr	r3, [pc, #32]	; (800182c <MX_SPI1_Init+0x74>)
 800180c:	2200      	movs	r2, #0
 800180e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <MX_SPI1_Init+0x74>)
 8001812:	2208      	movs	r2, #8
 8001814:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001816:	4805      	ldr	r0, [pc, #20]	; (800182c <MX_SPI1_Init+0x74>)
 8001818:	f003 ffae 	bl	8005778 <HAL_SPI_Init>
 800181c:	4603      	mov	r3, r0
 800181e:	2b00      	cmp	r3, #0
 8001820:	d001      	beq.n	8001826 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001822:	f7ff ffc3 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001826:	bf00      	nop
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	2000049c 	.word	0x2000049c
 8001830:	40013000 	.word	0x40013000

08001834 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b08a      	sub	sp, #40	; 0x28
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183c:	f107 0314 	add.w	r3, r7, #20
 8001840:	2200      	movs	r2, #0
 8001842:	601a      	str	r2, [r3, #0]
 8001844:	605a      	str	r2, [r3, #4]
 8001846:	609a      	str	r2, [r3, #8]
 8001848:	60da      	str	r2, [r3, #12]
 800184a:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a29      	ldr	r2, [pc, #164]	; (80018f8 <HAL_SPI_MspInit+0xc4>)
 8001852:	4293      	cmp	r3, r2
 8001854:	d14b      	bne.n	80018ee <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001856:	4b29      	ldr	r3, [pc, #164]	; (80018fc <HAL_SPI_MspInit+0xc8>)
 8001858:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800185a:	4a28      	ldr	r2, [pc, #160]	; (80018fc <HAL_SPI_MspInit+0xc8>)
 800185c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001860:	6453      	str	r3, [r2, #68]	; 0x44
 8001862:	4b26      	ldr	r3, [pc, #152]	; (80018fc <HAL_SPI_MspInit+0xc8>)
 8001864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001866:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800186a:	613b      	str	r3, [r7, #16]
 800186c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800186e:	4b23      	ldr	r3, [pc, #140]	; (80018fc <HAL_SPI_MspInit+0xc8>)
 8001870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001872:	4a22      	ldr	r2, [pc, #136]	; (80018fc <HAL_SPI_MspInit+0xc8>)
 8001874:	f043 0301 	orr.w	r3, r3, #1
 8001878:	6313      	str	r3, [r2, #48]	; 0x30
 800187a:	4b20      	ldr	r3, [pc, #128]	; (80018fc <HAL_SPI_MspInit+0xc8>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	60fb      	str	r3, [r7, #12]
 8001884:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001886:	4b1d      	ldr	r3, [pc, #116]	; (80018fc <HAL_SPI_MspInit+0xc8>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	4a1c      	ldr	r2, [pc, #112]	; (80018fc <HAL_SPI_MspInit+0xc8>)
 800188c:	f043 0302 	orr.w	r3, r3, #2
 8001890:	6313      	str	r3, [r2, #48]	; 0x30
 8001892:	4b1a      	ldr	r3, [pc, #104]	; (80018fc <HAL_SPI_MspInit+0xc8>)
 8001894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001896:	f003 0302 	and.w	r3, r3, #2
 800189a:	60bb      	str	r3, [r7, #8]
 800189c:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 800189e:	2360      	movs	r3, #96	; 0x60
 80018a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a2:	2302      	movs	r3, #2
 80018a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018a6:	2300      	movs	r3, #0
 80018a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018aa:	2303      	movs	r3, #3
 80018ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018ae:	2305      	movs	r3, #5
 80018b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b2:	f107 0314 	add.w	r3, r7, #20
 80018b6:	4619      	mov	r1, r3
 80018b8:	4811      	ldr	r0, [pc, #68]	; (8001900 <HAL_SPI_MspInit+0xcc>)
 80018ba:	f001 f97d 	bl	8002bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80018be:	2320      	movs	r3, #32
 80018c0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c2:	2302      	movs	r3, #2
 80018c4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018c6:	2300      	movs	r3, #0
 80018c8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ca:	2303      	movs	r3, #3
 80018cc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80018ce:	2305      	movs	r3, #5
 80018d0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018d2:	f107 0314 	add.w	r3, r7, #20
 80018d6:	4619      	mov	r1, r3
 80018d8:	480a      	ldr	r0, [pc, #40]	; (8001904 <HAL_SPI_MspInit+0xd0>)
 80018da:	f001 f96d 	bl	8002bb8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 80018de:	2200      	movs	r2, #0
 80018e0:	2100      	movs	r1, #0
 80018e2:	2023      	movs	r0, #35	; 0x23
 80018e4:	f000 fd6b 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 80018e8:	2023      	movs	r0, #35	; 0x23
 80018ea:	f000 fd84 	bl	80023f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80018ee:	bf00      	nop
 80018f0:	3728      	adds	r7, #40	; 0x28
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	40013000 	.word	0x40013000
 80018fc:	40023800 	.word	0x40023800
 8001900:	40020000 	.word	0x40020000
 8001904:	40020400 	.word	0x40020400

08001908 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001908:	b480      	push	{r7}
 800190a:	b083      	sub	sp, #12
 800190c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800190e:	4b0f      	ldr	r3, [pc, #60]	; (800194c <HAL_MspInit+0x44>)
 8001910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001912:	4a0e      	ldr	r2, [pc, #56]	; (800194c <HAL_MspInit+0x44>)
 8001914:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001918:	6413      	str	r3, [r2, #64]	; 0x40
 800191a:	4b0c      	ldr	r3, [pc, #48]	; (800194c <HAL_MspInit+0x44>)
 800191c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001922:	607b      	str	r3, [r7, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001926:	4b09      	ldr	r3, [pc, #36]	; (800194c <HAL_MspInit+0x44>)
 8001928:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800192a:	4a08      	ldr	r2, [pc, #32]	; (800194c <HAL_MspInit+0x44>)
 800192c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001930:	6453      	str	r3, [r2, #68]	; 0x44
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_MspInit+0x44>)
 8001934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800193a:	603b      	str	r3, [r7, #0]
 800193c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800193e:	bf00      	nop
 8001940:	370c      	adds	r7, #12
 8001942:	46bd      	mov	sp, r7
 8001944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001948:	4770      	bx	lr
 800194a:	bf00      	nop
 800194c:	40023800 	.word	0x40023800

08001950 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001954:	e7fe      	b.n	8001954 <NMI_Handler+0x4>

08001956 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001956:	b480      	push	{r7}
 8001958:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800195a:	e7fe      	b.n	800195a <HardFault_Handler+0x4>

0800195c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001960:	e7fe      	b.n	8001960 <MemManage_Handler+0x4>

08001962 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001962:	b480      	push	{r7}
 8001964:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001966:	e7fe      	b.n	8001966 <BusFault_Handler+0x4>

08001968 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800196c:	e7fe      	b.n	800196c <UsageFault_Handler+0x4>

0800196e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800196e:	b480      	push	{r7}
 8001970:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001972:	bf00      	nop
 8001974:	46bd      	mov	sp, r7
 8001976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197a:	4770      	bx	lr

0800197c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr

0800198a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800198a:	b480      	push	{r7}
 800198c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800198e:	bf00      	nop
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800199c:	f000 fbf0 	bl	8002180 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	bd80      	pop	{r7, pc}

080019a4 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 80019a8:	4802      	ldr	r0, [pc, #8]	; (80019b4 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80019aa:	f004 f9d4 	bl	8005d56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	20000550 	.word	0x20000550

080019b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80019bc:	4802      	ldr	r0, [pc, #8]	; (80019c8 <TIM3_IRQHandler+0x10>)
 80019be:	f004 f9ca 	bl	8005d56 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80019c2:	bf00      	nop
 80019c4:	bd80      	pop	{r7, pc}
 80019c6:	bf00      	nop
 80019c8:	20000504 	.word	0x20000504

080019cc <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80019cc:	b580      	push	{r7, lr}
 80019ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80019d0:	4802      	ldr	r0, [pc, #8]	; (80019dc <I2C1_EV_IRQHandler+0x10>)
 80019d2:	f001 fc85 	bl	80032e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80019d6:	bf00      	nop
 80019d8:	bd80      	pop	{r7, pc}
 80019da:	bf00      	nop
 80019dc:	20000434 	.word	0x20000434

080019e0 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80019e4:	4802      	ldr	r0, [pc, #8]	; (80019f0 <I2C1_ER_IRQHandler+0x10>)
 80019e6:	f001 fc95 	bl	8003314 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000434 	.word	0x20000434

080019f4 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80019f4:	b580      	push	{r7, lr}
 80019f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80019f8:	4802      	ldr	r0, [pc, #8]	; (8001a04 <SPI1_IRQHandler+0x10>)
 80019fa:	f003 ff69 	bl	80058d0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80019fe:	bf00      	nop
 8001a00:	bd80      	pop	{r7, pc}
 8001a02:	bf00      	nop
 8001a04:	2000049c 	.word	0x2000049c

08001a08 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001a08:	b580      	push	{r7, lr}
 8001a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a0c:	4802      	ldr	r0, [pc, #8]	; (8001a18 <USART3_IRQHandler+0x10>)
 8001a0e:	f005 f943 	bl	8006c98 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a12:	bf00      	nop
 8001a14:	bd80      	pop	{r7, pc}
 8001a16:	bf00      	nop
 8001a18:	2000059c 	.word	0x2000059c

08001a1c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a1c:	b580      	push	{r7, lr}
 8001a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001a20:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a24:	f001 fa8e 	bl	8002f44 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a28:	bf00      	nop
 8001a2a:	bd80      	pop	{r7, pc}

08001a2c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  return 1;
 8001a30:	2301      	movs	r3, #1
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <_kill>:

int _kill(int pid, int sig)
{
 8001a3c:	b580      	push	{r7, lr}
 8001a3e:	b082      	sub	sp, #8
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a46:	f007 fc9d 	bl	8009384 <__errno>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2216      	movs	r2, #22
 8001a4e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a50:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3708      	adds	r7, #8
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <_exit>:

void _exit (int status)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b082      	sub	sp, #8
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295
 8001a68:	6878      	ldr	r0, [r7, #4]
 8001a6a:	f7ff ffe7 	bl	8001a3c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a6e:	e7fe      	b.n	8001a6e <_exit+0x12>

08001a70 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b086      	sub	sp, #24
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	e00a      	b.n	8001a98 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a82:	f3af 8000 	nop.w
 8001a86:	4601      	mov	r1, r0
 8001a88:	68bb      	ldr	r3, [r7, #8]
 8001a8a:	1c5a      	adds	r2, r3, #1
 8001a8c:	60ba      	str	r2, [r7, #8]
 8001a8e:	b2ca      	uxtb	r2, r1
 8001a90:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	3301      	adds	r3, #1
 8001a96:	617b      	str	r3, [r7, #20]
 8001a98:	697a      	ldr	r2, [r7, #20]
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	429a      	cmp	r2, r3
 8001a9e:	dbf0      	blt.n	8001a82 <_read+0x12>
  }

  return len;
 8001aa0:	687b      	ldr	r3, [r7, #4]
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3718      	adds	r7, #24
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab6:	2300      	movs	r3, #0
 8001ab8:	617b      	str	r3, [r7, #20]
 8001aba:	e009      	b.n	8001ad0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	1c5a      	adds	r2, r3, #1
 8001ac0:	60ba      	str	r2, [r7, #8]
 8001ac2:	781b      	ldrb	r3, [r3, #0]
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	3301      	adds	r3, #1
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	dbf1      	blt.n	8001abc <_write+0x12>
  }
  return len;
 8001ad8:	687b      	ldr	r3, [r7, #4]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <_close>:

int _close(int file)
{
 8001ae2:	b480      	push	{r7}
 8001ae4:	b083      	sub	sp, #12
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	370c      	adds	r7, #12
 8001af2:	46bd      	mov	sp, r7
 8001af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af8:	4770      	bx	lr

08001afa <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001afa:	b480      	push	{r7}
 8001afc:	b083      	sub	sp, #12
 8001afe:	af00      	add	r7, sp, #0
 8001b00:	6078      	str	r0, [r7, #4]
 8001b02:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b0a:	605a      	str	r2, [r3, #4]
  return 0;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	370c      	adds	r7, #12
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <_isatty>:

int _isatty(int file)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b22:	2301      	movs	r3, #1
}
 8001b24:	4618      	mov	r0, r3
 8001b26:	370c      	adds	r7, #12
 8001b28:	46bd      	mov	sp, r7
 8001b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2e:	4770      	bx	lr

08001b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b085      	sub	sp, #20
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	60f8      	str	r0, [r7, #12]
 8001b38:	60b9      	str	r1, [r7, #8]
 8001b3a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3714      	adds	r7, #20
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
	...

08001b4c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b086      	sub	sp, #24
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b54:	4a14      	ldr	r2, [pc, #80]	; (8001ba8 <_sbrk+0x5c>)
 8001b56:	4b15      	ldr	r3, [pc, #84]	; (8001bac <_sbrk+0x60>)
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b5c:	697b      	ldr	r3, [r7, #20]
 8001b5e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b60:	4b13      	ldr	r3, [pc, #76]	; (8001bb0 <_sbrk+0x64>)
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d102      	bne.n	8001b6e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b68:	4b11      	ldr	r3, [pc, #68]	; (8001bb0 <_sbrk+0x64>)
 8001b6a:	4a12      	ldr	r2, [pc, #72]	; (8001bb4 <_sbrk+0x68>)
 8001b6c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b6e:	4b10      	ldr	r3, [pc, #64]	; (8001bb0 <_sbrk+0x64>)
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	4413      	add	r3, r2
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	d207      	bcs.n	8001b8c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b7c:	f007 fc02 	bl	8009384 <__errno>
 8001b80:	4603      	mov	r3, r0
 8001b82:	220c      	movs	r2, #12
 8001b84:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	e009      	b.n	8001ba0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b8c:	4b08      	ldr	r3, [pc, #32]	; (8001bb0 <_sbrk+0x64>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b92:	4b07      	ldr	r3, [pc, #28]	; (8001bb0 <_sbrk+0x64>)
 8001b94:	681a      	ldr	r2, [r3, #0]
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	4413      	add	r3, r2
 8001b9a:	4a05      	ldr	r2, [pc, #20]	; (8001bb0 <_sbrk+0x64>)
 8001b9c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	20050000 	.word	0x20050000
 8001bac:	00000400 	.word	0x00000400
 8001bb0:	20000500 	.word	0x20000500
 8001bb4:	20000c90 	.word	0x20000c90

08001bb8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bbc:	4b06      	ldr	r3, [pc, #24]	; (8001bd8 <SystemInit+0x20>)
 8001bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bc2:	4a05      	ldr	r2, [pc, #20]	; (8001bd8 <SystemInit+0x20>)
 8001bc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001bc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bcc:	bf00      	nop
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd4:	4770      	bx	lr
 8001bd6:	bf00      	nop
 8001bd8:	e000ed00 	.word	0xe000ed00

08001bdc <MX_TIM3_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim9;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b08e      	sub	sp, #56	; 0x38
 8001be0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001be2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001be6:	2200      	movs	r2, #0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	605a      	str	r2, [r3, #4]
 8001bec:	609a      	str	r2, [r3, #8]
 8001bee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001bf0:	f107 031c 	add.w	r3, r7, #28
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	605a      	str	r2, [r3, #4]
 8001bfa:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001bfc:	463b      	mov	r3, r7
 8001bfe:	2200      	movs	r2, #0
 8001c00:	601a      	str	r2, [r3, #0]
 8001c02:	605a      	str	r2, [r3, #4]
 8001c04:	609a      	str	r2, [r3, #8]
 8001c06:	60da      	str	r2, [r3, #12]
 8001c08:	611a      	str	r2, [r3, #16]
 8001c0a:	615a      	str	r2, [r3, #20]
 8001c0c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c0e:	4b2d      	ldr	r3, [pc, #180]	; (8001cc4 <MX_TIM3_Init+0xe8>)
 8001c10:	4a2d      	ldr	r2, [pc, #180]	; (8001cc8 <MX_TIM3_Init+0xec>)
 8001c12:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8001c14:	4b2b      	ldr	r3, [pc, #172]	; (8001cc4 <MX_TIM3_Init+0xe8>)
 8001c16:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001c1a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c1c:	4b29      	ldr	r3, [pc, #164]	; (8001cc4 <MX_TIM3_Init+0xe8>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001c22:	4b28      	ldr	r3, [pc, #160]	; (8001cc4 <MX_TIM3_Init+0xe8>)
 8001c24:	2263      	movs	r2, #99	; 0x63
 8001c26:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c28:	4b26      	ldr	r3, [pc, #152]	; (8001cc4 <MX_TIM3_Init+0xe8>)
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c2e:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <MX_TIM3_Init+0xe8>)
 8001c30:	2200      	movs	r2, #0
 8001c32:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001c34:	4823      	ldr	r0, [pc, #140]	; (8001cc4 <MX_TIM3_Init+0xe8>)
 8001c36:	f003 ff5e 	bl	8005af6 <HAL_TIM_Base_Init>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d001      	beq.n	8001c44 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8001c40:	f7ff fdb4 	bl	80017ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001c44:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c48:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001c4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001c4e:	4619      	mov	r1, r3
 8001c50:	481c      	ldr	r0, [pc, #112]	; (8001cc4 <MX_TIM3_Init+0xe8>)
 8001c52:	f004 fa19 	bl	8006088 <HAL_TIM_ConfigClockSource>
 8001c56:	4603      	mov	r3, r0
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d001      	beq.n	8001c60 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8001c5c:	f7ff fda6 	bl	80017ac <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim3) != HAL_OK)
 8001c60:	4818      	ldr	r0, [pc, #96]	; (8001cc4 <MX_TIM3_Init+0xe8>)
 8001c62:	f004 f817 	bl	8005c94 <HAL_TIM_OC_Init>
 8001c66:	4603      	mov	r3, r0
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d001      	beq.n	8001c70 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8001c6c:	f7ff fd9e 	bl	80017ac <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001c70:	2300      	movs	r3, #0
 8001c72:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001c74:	2300      	movs	r3, #0
 8001c76:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001c78:	f107 031c 	add.w	r3, r7, #28
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4811      	ldr	r0, [pc, #68]	; (8001cc4 <MX_TIM3_Init+0xe8>)
 8001c80:	f004 fe8c 	bl	800699c <HAL_TIMEx_MasterConfigSynchronization>
 8001c84:	4603      	mov	r3, r0
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d001      	beq.n	8001c8e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 8001c8a:	f7ff fd8f 	bl	80017ac <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 8001c8e:	2300      	movs	r3, #0
 8001c90:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001c96:	2300      	movs	r3, #0
 8001c98:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_OC_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001c9e:	463b      	mov	r3, r7
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	4807      	ldr	r0, [pc, #28]	; (8001cc4 <MX_TIM3_Init+0xe8>)
 8001ca6:	f004 f975 	bl	8005f94 <HAL_TIM_OC_ConfigChannel>
 8001caa:	4603      	mov	r3, r0
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d001      	beq.n	8001cb4 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8001cb0:	f7ff fd7c 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001cb4:	4803      	ldr	r0, [pc, #12]	; (8001cc4 <MX_TIM3_Init+0xe8>)
 8001cb6:	f000 f885 	bl	8001dc4 <HAL_TIM_MspPostInit>

}
 8001cba:	bf00      	nop
 8001cbc:	3738      	adds	r7, #56	; 0x38
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	20000504 	.word	0x20000504
 8001cc8:	40000400 	.word	0x40000400

08001ccc <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b084      	sub	sp, #16
 8001cd0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cd2:	463b      	mov	r3, r7
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
 8001cdc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001cde:	4b16      	ldr	r3, [pc, #88]	; (8001d38 <MX_TIM9_Init+0x6c>)
 8001ce0:	4a16      	ldr	r2, [pc, #88]	; (8001d3c <MX_TIM9_Init+0x70>)
 8001ce2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 719;
 8001ce4:	4b14      	ldr	r3, [pc, #80]	; (8001d38 <MX_TIM9_Init+0x6c>)
 8001ce6:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001cea:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cec:	4b12      	ldr	r3, [pc, #72]	; (8001d38 <MX_TIM9_Init+0x6c>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 99;
 8001cf2:	4b11      	ldr	r3, [pc, #68]	; (8001d38 <MX_TIM9_Init+0x6c>)
 8001cf4:	2263      	movs	r2, #99	; 0x63
 8001cf6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cf8:	4b0f      	ldr	r3, [pc, #60]	; (8001d38 <MX_TIM9_Init+0x6c>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cfe:	4b0e      	ldr	r3, [pc, #56]	; (8001d38 <MX_TIM9_Init+0x6c>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001d04:	480c      	ldr	r0, [pc, #48]	; (8001d38 <MX_TIM9_Init+0x6c>)
 8001d06:	f003 fef6 	bl	8005af6 <HAL_TIM_Base_Init>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d001      	beq.n	8001d14 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001d10:	f7ff fd4c 	bl	80017ac <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d18:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001d1a:	463b      	mov	r3, r7
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4806      	ldr	r0, [pc, #24]	; (8001d38 <MX_TIM9_Init+0x6c>)
 8001d20:	f004 f9b2 	bl	8006088 <HAL_TIM_ConfigClockSource>
 8001d24:	4603      	mov	r3, r0
 8001d26:	2b00      	cmp	r3, #0
 8001d28:	d001      	beq.n	8001d2e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001d2a:	f7ff fd3f 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001d2e:	bf00      	nop
 8001d30:	3710      	adds	r7, #16
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
 8001d36:	bf00      	nop
 8001d38:	20000550 	.word	0x20000550
 8001d3c:	40014000 	.word	0x40014000

08001d40 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b084      	sub	sp, #16
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a1a      	ldr	r2, [pc, #104]	; (8001db8 <HAL_TIM_Base_MspInit+0x78>)
 8001d4e:	4293      	cmp	r3, r2
 8001d50:	d114      	bne.n	8001d7c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d52:	4b1a      	ldr	r3, [pc, #104]	; (8001dbc <HAL_TIM_Base_MspInit+0x7c>)
 8001d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d56:	4a19      	ldr	r2, [pc, #100]	; (8001dbc <HAL_TIM_Base_MspInit+0x7c>)
 8001d58:	f043 0302 	orr.w	r3, r3, #2
 8001d5c:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5e:	4b17      	ldr	r3, [pc, #92]	; (8001dbc <HAL_TIM_Base_MspInit+0x7c>)
 8001d60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d62:	f003 0302 	and.w	r3, r3, #2
 8001d66:	60fb      	str	r3, [r7, #12]
 8001d68:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001d6a:	2200      	movs	r2, #0
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	201d      	movs	r0, #29
 8001d70:	f000 fb25 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001d74:	201d      	movs	r0, #29
 8001d76:	f000 fb3e 	bl	80023f6 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001d7a:	e018      	b.n	8001dae <HAL_TIM_Base_MspInit+0x6e>
  else if(tim_baseHandle->Instance==TIM9)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	4a0f      	ldr	r2, [pc, #60]	; (8001dc0 <HAL_TIM_Base_MspInit+0x80>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d113      	bne.n	8001dae <HAL_TIM_Base_MspInit+0x6e>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001d86:	4b0d      	ldr	r3, [pc, #52]	; (8001dbc <HAL_TIM_Base_MspInit+0x7c>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	4a0c      	ldr	r2, [pc, #48]	; (8001dbc <HAL_TIM_Base_MspInit+0x7c>)
 8001d8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d90:	6453      	str	r3, [r2, #68]	; 0x44
 8001d92:	4b0a      	ldr	r3, [pc, #40]	; (8001dbc <HAL_TIM_Base_MspInit+0x7c>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d9a:	60bb      	str	r3, [r7, #8]
 8001d9c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2100      	movs	r1, #0
 8001da2:	2018      	movs	r0, #24
 8001da4:	f000 fb0b 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001da8:	2018      	movs	r0, #24
 8001daa:	f000 fb24 	bl	80023f6 <HAL_NVIC_EnableIRQ>
}
 8001dae:	bf00      	nop
 8001db0:	3710      	adds	r7, #16
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40000400 	.word	0x40000400
 8001dbc:	40023800 	.word	0x40023800
 8001dc0:	40014000 	.word	0x40014000

08001dc4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	b088      	sub	sp, #32
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dcc:	f107 030c 	add.w	r3, r7, #12
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]
 8001dd4:	605a      	str	r2, [r3, #4]
 8001dd6:	609a      	str	r2, [r3, #8]
 8001dd8:	60da      	str	r2, [r3, #12]
 8001dda:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM3)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a11      	ldr	r2, [pc, #68]	; (8001e28 <HAL_TIM_MspPostInit+0x64>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d11b      	bne.n	8001e1e <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001de6:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <HAL_TIM_MspPostInit+0x68>)
 8001de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dea:	4a10      	ldr	r2, [pc, #64]	; (8001e2c <HAL_TIM_MspPostInit+0x68>)
 8001dec:	f043 0304 	orr.w	r3, r3, #4
 8001df0:	6313      	str	r3, [r2, #48]	; 0x30
 8001df2:	4b0e      	ldr	r3, [pc, #56]	; (8001e2c <HAL_TIM_MspPostInit+0x68>)
 8001df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001df6:	f003 0304 	and.w	r3, r3, #4
 8001dfa:	60bb      	str	r3, [r7, #8]
 8001dfc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001dfe:	2340      	movs	r3, #64	; 0x40
 8001e00:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e02:	2302      	movs	r3, #2
 8001e04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e0a:	2300      	movs	r3, #0
 8001e0c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001e0e:	2302      	movs	r3, #2
 8001e10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e12:	f107 030c 	add.w	r3, r7, #12
 8001e16:	4619      	mov	r1, r3
 8001e18:	4805      	ldr	r0, [pc, #20]	; (8001e30 <HAL_TIM_MspPostInit+0x6c>)
 8001e1a:	f000 fecd 	bl	8002bb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001e1e:	bf00      	nop
 8001e20:	3720      	adds	r7, #32
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	40000400 	.word	0x40000400
 8001e2c:	40023800 	.word	0x40023800
 8001e30:	40020800 	.word	0x40020800

08001e34 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001e38:	4b14      	ldr	r3, [pc, #80]	; (8001e8c <MX_USART3_UART_Init+0x58>)
 8001e3a:	4a15      	ldr	r2, [pc, #84]	; (8001e90 <MX_USART3_UART_Init+0x5c>)
 8001e3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001e3e:	4b13      	ldr	r3, [pc, #76]	; (8001e8c <MX_USART3_UART_Init+0x58>)
 8001e40:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001e44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001e46:	4b11      	ldr	r3, [pc, #68]	; (8001e8c <MX_USART3_UART_Init+0x58>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	; (8001e8c <MX_USART3_UART_Init+0x58>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001e52:	4b0e      	ldr	r3, [pc, #56]	; (8001e8c <MX_USART3_UART_Init+0x58>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001e58:	4b0c      	ldr	r3, [pc, #48]	; (8001e8c <MX_USART3_UART_Init+0x58>)
 8001e5a:	220c      	movs	r2, #12
 8001e5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001e5e:	4b0b      	ldr	r3, [pc, #44]	; (8001e8c <MX_USART3_UART_Init+0x58>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001e64:	4b09      	ldr	r3, [pc, #36]	; (8001e8c <MX_USART3_UART_Init+0x58>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001e6a:	4b08      	ldr	r3, [pc, #32]	; (8001e8c <MX_USART3_UART_Init+0x58>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001e70:	4b06      	ldr	r3, [pc, #24]	; (8001e8c <MX_USART3_UART_Init+0x58>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001e76:	4805      	ldr	r0, [pc, #20]	; (8001e8c <MX_USART3_UART_Init+0x58>)
 8001e78:	f004 fe3c 	bl	8006af4 <HAL_UART_Init>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d001      	beq.n	8001e86 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001e82:	f7ff fc93 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	2000059c 	.word	0x2000059c
 8001e90:	40004800 	.word	0x40004800

08001e94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b0aa      	sub	sp, #168	; 0xa8
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e9c:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	601a      	str	r2, [r3, #0]
 8001ea4:	605a      	str	r2, [r3, #4]
 8001ea6:	609a      	str	r2, [r3, #8]
 8001ea8:	60da      	str	r2, [r3, #12]
 8001eaa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001eac:	f107 0310 	add.w	r3, r7, #16
 8001eb0:	2284      	movs	r2, #132	; 0x84
 8001eb2:	2100      	movs	r1, #0
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f007 fa12 	bl	80092de <memset>
  if(uartHandle->Instance==USART3)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	4a26      	ldr	r2, [pc, #152]	; (8001f58 <HAL_UART_MspInit+0xc4>)
 8001ec0:	4293      	cmp	r3, r2
 8001ec2:	d144      	bne.n	8001f4e <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001ec4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001ec8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ece:	f107 0310 	add.w	r3, r7, #16
 8001ed2:	4618      	mov	r0, r3
 8001ed4:	f003 f860 	bl	8004f98 <HAL_RCCEx_PeriphCLKConfig>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001ede:	f7ff fc65 	bl	80017ac <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001ee2:	4b1e      	ldr	r3, [pc, #120]	; (8001f5c <HAL_UART_MspInit+0xc8>)
 8001ee4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ee6:	4a1d      	ldr	r2, [pc, #116]	; (8001f5c <HAL_UART_MspInit+0xc8>)
 8001ee8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001eec:	6413      	str	r3, [r2, #64]	; 0x40
 8001eee:	4b1b      	ldr	r3, [pc, #108]	; (8001f5c <HAL_UART_MspInit+0xc8>)
 8001ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ef2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001ef6:	60fb      	str	r3, [r7, #12]
 8001ef8:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001efa:	4b18      	ldr	r3, [pc, #96]	; (8001f5c <HAL_UART_MspInit+0xc8>)
 8001efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001efe:	4a17      	ldr	r2, [pc, #92]	; (8001f5c <HAL_UART_MspInit+0xc8>)
 8001f00:	f043 0308 	orr.w	r3, r3, #8
 8001f04:	6313      	str	r3, [r2, #48]	; 0x30
 8001f06:	4b15      	ldr	r3, [pc, #84]	; (8001f5c <HAL_UART_MspInit+0xc8>)
 8001f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	60bb      	str	r3, [r7, #8]
 8001f10:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f12:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f16:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f1a:	2302      	movs	r3, #2
 8001f1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f20:	2301      	movs	r3, #1
 8001f22:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f26:	2303      	movs	r3, #3
 8001f28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f2c:	2307      	movs	r3, #7
 8001f2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f32:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001f36:	4619      	mov	r1, r3
 8001f38:	4809      	ldr	r0, [pc, #36]	; (8001f60 <HAL_UART_MspInit+0xcc>)
 8001f3a:	f000 fe3d 	bl	8002bb8 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	2100      	movs	r1, #0
 8001f42:	2027      	movs	r0, #39	; 0x27
 8001f44:	f000 fa3b 	bl	80023be <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f48:	2027      	movs	r0, #39	; 0x27
 8001f4a:	f000 fa54 	bl	80023f6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f4e:	bf00      	nop
 8001f50:	37a8      	adds	r7, #168	; 0xa8
 8001f52:	46bd      	mov	sp, r7
 8001f54:	bd80      	pop	{r7, pc}
 8001f56:	bf00      	nop
 8001f58:	40004800 	.word	0x40004800
 8001f5c:	40023800 	.word	0x40023800
 8001f60:	40020c00 	.word	0x40020c00

08001f64 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001f68:	4b14      	ldr	r3, [pc, #80]	; (8001fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f6a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001f6e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001f70:	4b12      	ldr	r3, [pc, #72]	; (8001fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f72:	2206      	movs	r2, #6
 8001f74:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001f76:	4b11      	ldr	r3, [pc, #68]	; (8001fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f78:	2202      	movs	r2, #2
 8001f7a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001f7c:	4b0f      	ldr	r3, [pc, #60]	; (8001fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f7e:	2200      	movs	r2, #0
 8001f80:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001f82:	4b0e      	ldr	r3, [pc, #56]	; (8001fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f84:	2202      	movs	r2, #2
 8001f86:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001f88:	4b0c      	ldr	r3, [pc, #48]	; (8001fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001f8e:	4b0b      	ldr	r3, [pc, #44]	; (8001fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f96:	2200      	movs	r2, #0
 8001f98:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001f9a:	4b08      	ldr	r3, [pc, #32]	; (8001fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001f9c:	2201      	movs	r2, #1
 8001f9e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8001fa0:	4b06      	ldr	r3, [pc, #24]	; (8001fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001fa6:	4805      	ldr	r0, [pc, #20]	; (8001fbc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fa8:	f002 f9d3 	bl	8004352 <HAL_PCD_Init>
 8001fac:	4603      	mov	r3, r0
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001fb2:	f7ff fbfb 	bl	80017ac <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001fb6:	bf00      	nop
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	20000624 	.word	0x20000624

08001fc0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001fc0:	b580      	push	{r7, lr}
 8001fc2:	b0ac      	sub	sp, #176	; 0xb0
 8001fc4:	af00      	add	r7, sp, #0
 8001fc6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fc8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8001fcc:	2200      	movs	r2, #0
 8001fce:	601a      	str	r2, [r3, #0]
 8001fd0:	605a      	str	r2, [r3, #4]
 8001fd2:	609a      	str	r2, [r3, #8]
 8001fd4:	60da      	str	r2, [r3, #12]
 8001fd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001fd8:	f107 0318 	add.w	r3, r7, #24
 8001fdc:	2284      	movs	r2, #132	; 0x84
 8001fde:	2100      	movs	r1, #0
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	f007 f97c 	bl	80092de <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001fee:	d159      	bne.n	80020a4 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001ff0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8001ff4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001ffc:	f107 0318 	add.w	r3, r7, #24
 8002000:	4618      	mov	r0, r3
 8002002:	f002 ffc9 	bl	8004f98 <HAL_RCCEx_PeriphCLKConfig>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800200c:	f7ff fbce 	bl	80017ac <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002010:	4b26      	ldr	r3, [pc, #152]	; (80020ac <HAL_PCD_MspInit+0xec>)
 8002012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002014:	4a25      	ldr	r2, [pc, #148]	; (80020ac <HAL_PCD_MspInit+0xec>)
 8002016:	f043 0301 	orr.w	r3, r3, #1
 800201a:	6313      	str	r3, [r2, #48]	; 0x30
 800201c:	4b23      	ldr	r3, [pc, #140]	; (80020ac <HAL_PCD_MspInit+0xec>)
 800201e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002020:	f003 0301 	and.w	r3, r3, #1
 8002024:	617b      	str	r3, [r7, #20]
 8002026:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002028:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800202c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002030:	2302      	movs	r3, #2
 8002032:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002036:	2300      	movs	r3, #0
 8002038:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800203c:	2303      	movs	r3, #3
 800203e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8002042:	230a      	movs	r3, #10
 8002044:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002048:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800204c:	4619      	mov	r1, r3
 800204e:	4818      	ldr	r0, [pc, #96]	; (80020b0 <HAL_PCD_MspInit+0xf0>)
 8002050:	f000 fdb2 	bl	8002bb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8002054:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002058:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800205c:	2300      	movs	r3, #0
 800205e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002062:	2300      	movs	r3, #0
 8002064:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002068:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800206c:	4619      	mov	r1, r3
 800206e:	4810      	ldr	r0, [pc, #64]	; (80020b0 <HAL_PCD_MspInit+0xf0>)
 8002070:	f000 fda2 	bl	8002bb8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8002074:	4b0d      	ldr	r3, [pc, #52]	; (80020ac <HAL_PCD_MspInit+0xec>)
 8002076:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002078:	4a0c      	ldr	r2, [pc, #48]	; (80020ac <HAL_PCD_MspInit+0xec>)
 800207a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800207e:	6353      	str	r3, [r2, #52]	; 0x34
 8002080:	4b0a      	ldr	r3, [pc, #40]	; (80020ac <HAL_PCD_MspInit+0xec>)
 8002082:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002088:	613b      	str	r3, [r7, #16]
 800208a:	693b      	ldr	r3, [r7, #16]
 800208c:	4b07      	ldr	r3, [pc, #28]	; (80020ac <HAL_PCD_MspInit+0xec>)
 800208e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002090:	4a06      	ldr	r2, [pc, #24]	; (80020ac <HAL_PCD_MspInit+0xec>)
 8002092:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002096:	6453      	str	r3, [r2, #68]	; 0x44
 8002098:	4b04      	ldr	r3, [pc, #16]	; (80020ac <HAL_PCD_MspInit+0xec>)
 800209a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80020a0:	60fb      	str	r3, [r7, #12]
 80020a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80020a4:	bf00      	nop
 80020a6:	37b0      	adds	r7, #176	; 0xb0
 80020a8:	46bd      	mov	sp, r7
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	40023800 	.word	0x40023800
 80020b0:	40020000 	.word	0x40020000

080020b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80020b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80020ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80020b8:	480d      	ldr	r0, [pc, #52]	; (80020f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80020ba:	490e      	ldr	r1, [pc, #56]	; (80020f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80020bc:	4a0e      	ldr	r2, [pc, #56]	; (80020f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80020be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80020c0:	e002      	b.n	80020c8 <LoopCopyDataInit>

080020c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80020c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80020c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80020c6:	3304      	adds	r3, #4

080020c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80020c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80020ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80020cc:	d3f9      	bcc.n	80020c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80020ce:	4a0b      	ldr	r2, [pc, #44]	; (80020fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80020d0:	4c0b      	ldr	r4, [pc, #44]	; (8002100 <LoopFillZerobss+0x26>)
  movs r3, #0
 80020d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80020d4:	e001      	b.n	80020da <LoopFillZerobss>

080020d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80020d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80020d8:	3204      	adds	r2, #4

080020da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80020da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80020dc:	d3fb      	bcc.n	80020d6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80020de:	f7ff fd6b 	bl	8001bb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80020e2:	f007 f955 	bl	8009390 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80020e6:	f7ff fad1 	bl	800168c <main>
  bx  lr    
 80020ea:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80020ec:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80020f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80020f4:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 80020f8:	0800cfc8 	.word	0x0800cfc8
  ldr r2, =_sbss
 80020fc:	20000328 	.word	0x20000328
  ldr r4, =_ebss
 8002100:	20000c90 	.word	0x20000c90

08002104 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002104:	e7fe      	b.n	8002104 <ADC_IRQHandler>

08002106 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800210a:	2003      	movs	r0, #3
 800210c:	f000 f94c 	bl	80023a8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002110:	2000      	movs	r0, #0
 8002112:	f000 f805 	bl	8002120 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002116:	f7ff fbf7 	bl	8001908 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800211a:	2300      	movs	r3, #0
}
 800211c:	4618      	mov	r0, r3
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b082      	sub	sp, #8
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002128:	4b12      	ldr	r3, [pc, #72]	; (8002174 <HAL_InitTick+0x54>)
 800212a:	681a      	ldr	r2, [r3, #0]
 800212c:	4b12      	ldr	r3, [pc, #72]	; (8002178 <HAL_InitTick+0x58>)
 800212e:	781b      	ldrb	r3, [r3, #0]
 8002130:	4619      	mov	r1, r3
 8002132:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002136:	fbb3 f3f1 	udiv	r3, r3, r1
 800213a:	fbb2 f3f3 	udiv	r3, r2, r3
 800213e:	4618      	mov	r0, r3
 8002140:	f000 f967 	bl	8002412 <HAL_SYSTICK_Config>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800214a:	2301      	movs	r3, #1
 800214c:	e00e      	b.n	800216c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2b0f      	cmp	r3, #15
 8002152:	d80a      	bhi.n	800216a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002154:	2200      	movs	r2, #0
 8002156:	6879      	ldr	r1, [r7, #4]
 8002158:	f04f 30ff 	mov.w	r0, #4294967295
 800215c:	f000 f92f 	bl	80023be <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002160:	4a06      	ldr	r2, [pc, #24]	; (800217c <HAL_InitTick+0x5c>)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002166:	2300      	movs	r3, #0
 8002168:	e000      	b.n	800216c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800216a:	2301      	movs	r3, #1
}
 800216c:	4618      	mov	r0, r3
 800216e:	3708      	adds	r7, #8
 8002170:	46bd      	mov	sp, r7
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20000000 	.word	0x20000000
 8002178:	20000008 	.word	0x20000008
 800217c:	20000004 	.word	0x20000004

08002180 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002184:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_IncTick+0x20>)
 8002186:	781b      	ldrb	r3, [r3, #0]
 8002188:	461a      	mov	r2, r3
 800218a:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <HAL_IncTick+0x24>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4413      	add	r3, r2
 8002190:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <HAL_IncTick+0x24>)
 8002192:	6013      	str	r3, [r2, #0]
}
 8002194:	bf00      	nop
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr
 800219e:	bf00      	nop
 80021a0:	20000008 	.word	0x20000008
 80021a4:	20000b2c 	.word	0x20000b2c

080021a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80021a8:	b480      	push	{r7}
 80021aa:	af00      	add	r7, sp, #0
  return uwTick;
 80021ac:	4b03      	ldr	r3, [pc, #12]	; (80021bc <HAL_GetTick+0x14>)
 80021ae:	681b      	ldr	r3, [r3, #0]
}
 80021b0:	4618      	mov	r0, r3
 80021b2:	46bd      	mov	sp, r7
 80021b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b8:	4770      	bx	lr
 80021ba:	bf00      	nop
 80021bc:	20000b2c 	.word	0x20000b2c

080021c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80021c8:	f7ff ffee 	bl	80021a8 <HAL_GetTick>
 80021cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021d8:	d005      	beq.n	80021e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80021da:	4b0a      	ldr	r3, [pc, #40]	; (8002204 <HAL_Delay+0x44>)
 80021dc:	781b      	ldrb	r3, [r3, #0]
 80021de:	461a      	mov	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4413      	add	r3, r2
 80021e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80021e6:	bf00      	nop
 80021e8:	f7ff ffde 	bl	80021a8 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	68bb      	ldr	r3, [r7, #8]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	68fa      	ldr	r2, [r7, #12]
 80021f4:	429a      	cmp	r2, r3
 80021f6:	d8f7      	bhi.n	80021e8 <HAL_Delay+0x28>
  {
  }
}
 80021f8:	bf00      	nop
 80021fa:	bf00      	nop
 80021fc:	3710      	adds	r7, #16
 80021fe:	46bd      	mov	sp, r7
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000008 	.word	0x20000008

08002208 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002208:	b480      	push	{r7}
 800220a:	b085      	sub	sp, #20
 800220c:	af00      	add	r7, sp, #0
 800220e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002218:	4b0b      	ldr	r3, [pc, #44]	; (8002248 <__NVIC_SetPriorityGrouping+0x40>)
 800221a:	68db      	ldr	r3, [r3, #12]
 800221c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800221e:	68ba      	ldr	r2, [r7, #8]
 8002220:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002224:	4013      	ands	r3, r2
 8002226:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800222c:	68bb      	ldr	r3, [r7, #8]
 800222e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002230:	4b06      	ldr	r3, [pc, #24]	; (800224c <__NVIC_SetPriorityGrouping+0x44>)
 8002232:	4313      	orrs	r3, r2
 8002234:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002236:	4a04      	ldr	r2, [pc, #16]	; (8002248 <__NVIC_SetPriorityGrouping+0x40>)
 8002238:	68bb      	ldr	r3, [r7, #8]
 800223a:	60d3      	str	r3, [r2, #12]
}
 800223c:	bf00      	nop
 800223e:	3714      	adds	r7, #20
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr
 8002248:	e000ed00 	.word	0xe000ed00
 800224c:	05fa0000 	.word	0x05fa0000

08002250 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002250:	b480      	push	{r7}
 8002252:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002254:	4b04      	ldr	r3, [pc, #16]	; (8002268 <__NVIC_GetPriorityGrouping+0x18>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	0a1b      	lsrs	r3, r3, #8
 800225a:	f003 0307 	and.w	r3, r3, #7
}
 800225e:	4618      	mov	r0, r3
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr
 8002268:	e000ed00 	.word	0xe000ed00

0800226c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800226c:	b480      	push	{r7}
 800226e:	b083      	sub	sp, #12
 8002270:	af00      	add	r7, sp, #0
 8002272:	4603      	mov	r3, r0
 8002274:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002276:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800227a:	2b00      	cmp	r3, #0
 800227c:	db0b      	blt.n	8002296 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800227e:	79fb      	ldrb	r3, [r7, #7]
 8002280:	f003 021f 	and.w	r2, r3, #31
 8002284:	4907      	ldr	r1, [pc, #28]	; (80022a4 <__NVIC_EnableIRQ+0x38>)
 8002286:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800228a:	095b      	lsrs	r3, r3, #5
 800228c:	2001      	movs	r0, #1
 800228e:	fa00 f202 	lsl.w	r2, r0, r2
 8002292:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002296:	bf00      	nop
 8002298:	370c      	adds	r7, #12
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	e000e100 	.word	0xe000e100

080022a8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b083      	sub	sp, #12
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	4603      	mov	r3, r0
 80022b0:	6039      	str	r1, [r7, #0]
 80022b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	db0a      	blt.n	80022d2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	b2da      	uxtb	r2, r3
 80022c0:	490c      	ldr	r1, [pc, #48]	; (80022f4 <__NVIC_SetPriority+0x4c>)
 80022c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022c6:	0112      	lsls	r2, r2, #4
 80022c8:	b2d2      	uxtb	r2, r2
 80022ca:	440b      	add	r3, r1
 80022cc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80022d0:	e00a      	b.n	80022e8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	b2da      	uxtb	r2, r3
 80022d6:	4908      	ldr	r1, [pc, #32]	; (80022f8 <__NVIC_SetPriority+0x50>)
 80022d8:	79fb      	ldrb	r3, [r7, #7]
 80022da:	f003 030f 	and.w	r3, r3, #15
 80022de:	3b04      	subs	r3, #4
 80022e0:	0112      	lsls	r2, r2, #4
 80022e2:	b2d2      	uxtb	r2, r2
 80022e4:	440b      	add	r3, r1
 80022e6:	761a      	strb	r2, [r3, #24]
}
 80022e8:	bf00      	nop
 80022ea:	370c      	adds	r7, #12
 80022ec:	46bd      	mov	sp, r7
 80022ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f2:	4770      	bx	lr
 80022f4:	e000e100 	.word	0xe000e100
 80022f8:	e000ed00 	.word	0xe000ed00

080022fc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b089      	sub	sp, #36	; 0x24
 8002300:	af00      	add	r7, sp, #0
 8002302:	60f8      	str	r0, [r7, #12]
 8002304:	60b9      	str	r1, [r7, #8]
 8002306:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	f003 0307 	and.w	r3, r3, #7
 800230e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002310:	69fb      	ldr	r3, [r7, #28]
 8002312:	f1c3 0307 	rsb	r3, r3, #7
 8002316:	2b04      	cmp	r3, #4
 8002318:	bf28      	it	cs
 800231a:	2304      	movcs	r3, #4
 800231c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	3304      	adds	r3, #4
 8002322:	2b06      	cmp	r3, #6
 8002324:	d902      	bls.n	800232c <NVIC_EncodePriority+0x30>
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	3b03      	subs	r3, #3
 800232a:	e000      	b.n	800232e <NVIC_EncodePriority+0x32>
 800232c:	2300      	movs	r3, #0
 800232e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002330:	f04f 32ff 	mov.w	r2, #4294967295
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	fa02 f303 	lsl.w	r3, r2, r3
 800233a:	43da      	mvns	r2, r3
 800233c:	68bb      	ldr	r3, [r7, #8]
 800233e:	401a      	ands	r2, r3
 8002340:	697b      	ldr	r3, [r7, #20]
 8002342:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002344:	f04f 31ff 	mov.w	r1, #4294967295
 8002348:	697b      	ldr	r3, [r7, #20]
 800234a:	fa01 f303 	lsl.w	r3, r1, r3
 800234e:	43d9      	mvns	r1, r3
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002354:	4313      	orrs	r3, r2
         );
}
 8002356:	4618      	mov	r0, r3
 8002358:	3724      	adds	r7, #36	; 0x24
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
	...

08002364 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b082      	sub	sp, #8
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	3b01      	subs	r3, #1
 8002370:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002374:	d301      	bcc.n	800237a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002376:	2301      	movs	r3, #1
 8002378:	e00f      	b.n	800239a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800237a:	4a0a      	ldr	r2, [pc, #40]	; (80023a4 <SysTick_Config+0x40>)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	3b01      	subs	r3, #1
 8002380:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002382:	210f      	movs	r1, #15
 8002384:	f04f 30ff 	mov.w	r0, #4294967295
 8002388:	f7ff ff8e 	bl	80022a8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800238c:	4b05      	ldr	r3, [pc, #20]	; (80023a4 <SysTick_Config+0x40>)
 800238e:	2200      	movs	r2, #0
 8002390:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002392:	4b04      	ldr	r3, [pc, #16]	; (80023a4 <SysTick_Config+0x40>)
 8002394:	2207      	movs	r2, #7
 8002396:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002398:	2300      	movs	r3, #0
}
 800239a:	4618      	mov	r0, r3
 800239c:	3708      	adds	r7, #8
 800239e:	46bd      	mov	sp, r7
 80023a0:	bd80      	pop	{r7, pc}
 80023a2:	bf00      	nop
 80023a4:	e000e010 	.word	0xe000e010

080023a8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023a8:	b580      	push	{r7, lr}
 80023aa:	b082      	sub	sp, #8
 80023ac:	af00      	add	r7, sp, #0
 80023ae:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80023b0:	6878      	ldr	r0, [r7, #4]
 80023b2:	f7ff ff29 	bl	8002208 <__NVIC_SetPriorityGrouping>
}
 80023b6:	bf00      	nop
 80023b8:	3708      	adds	r7, #8
 80023ba:	46bd      	mov	sp, r7
 80023bc:	bd80      	pop	{r7, pc}

080023be <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80023be:	b580      	push	{r7, lr}
 80023c0:	b086      	sub	sp, #24
 80023c2:	af00      	add	r7, sp, #0
 80023c4:	4603      	mov	r3, r0
 80023c6:	60b9      	str	r1, [r7, #8]
 80023c8:	607a      	str	r2, [r7, #4]
 80023ca:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80023cc:	2300      	movs	r3, #0
 80023ce:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80023d0:	f7ff ff3e 	bl	8002250 <__NVIC_GetPriorityGrouping>
 80023d4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80023d6:	687a      	ldr	r2, [r7, #4]
 80023d8:	68b9      	ldr	r1, [r7, #8]
 80023da:	6978      	ldr	r0, [r7, #20]
 80023dc:	f7ff ff8e 	bl	80022fc <NVIC_EncodePriority>
 80023e0:	4602      	mov	r2, r0
 80023e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80023e6:	4611      	mov	r1, r2
 80023e8:	4618      	mov	r0, r3
 80023ea:	f7ff ff5d 	bl	80022a8 <__NVIC_SetPriority>
}
 80023ee:	bf00      	nop
 80023f0:	3718      	adds	r7, #24
 80023f2:	46bd      	mov	sp, r7
 80023f4:	bd80      	pop	{r7, pc}

080023f6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80023f6:	b580      	push	{r7, lr}
 80023f8:	b082      	sub	sp, #8
 80023fa:	af00      	add	r7, sp, #0
 80023fc:	4603      	mov	r3, r0
 80023fe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002400:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff ff31 	bl	800226c <__NVIC_EnableIRQ>
}
 800240a:	bf00      	nop
 800240c:	3708      	adds	r7, #8
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}

08002412 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002412:	b580      	push	{r7, lr}
 8002414:	b082      	sub	sp, #8
 8002416:	af00      	add	r7, sp, #0
 8002418:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800241a:	6878      	ldr	r0, [r7, #4]
 800241c:	f7ff ffa2 	bl	8002364 <SysTick_Config>
 8002420:	4603      	mov	r3, r0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3708      	adds	r7, #8
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}

0800242a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800242a:	b580      	push	{r7, lr}
 800242c:	b084      	sub	sp, #16
 800242e:	af00      	add	r7, sp, #0
 8002430:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002436:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002438:	f7ff feb6 	bl	80021a8 <HAL_GetTick>
 800243c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002444:	b2db      	uxtb	r3, r3
 8002446:	2b02      	cmp	r3, #2
 8002448:	d008      	beq.n	800245c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	2280      	movs	r2, #128	; 0x80
 800244e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	2200      	movs	r2, #0
 8002454:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002458:	2301      	movs	r3, #1
 800245a:	e052      	b.n	8002502 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	681a      	ldr	r2, [r3, #0]
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f022 0216 	bic.w	r2, r2, #22
 800246a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	695a      	ldr	r2, [r3, #20]
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800247a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002480:	2b00      	cmp	r3, #0
 8002482:	d103      	bne.n	800248c <HAL_DMA_Abort+0x62>
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002488:	2b00      	cmp	r3, #0
 800248a:	d007      	beq.n	800249c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0208 	bic.w	r2, r2, #8
 800249a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f022 0201 	bic.w	r2, r2, #1
 80024aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ac:	e013      	b.n	80024d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024ae:	f7ff fe7b 	bl	80021a8 <HAL_GetTick>
 80024b2:	4602      	mov	r2, r0
 80024b4:	68bb      	ldr	r3, [r7, #8]
 80024b6:	1ad3      	subs	r3, r2, r3
 80024b8:	2b05      	cmp	r3, #5
 80024ba:	d90c      	bls.n	80024d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	2220      	movs	r2, #32
 80024c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2203      	movs	r2, #3
 80024c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2200      	movs	r2, #0
 80024ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80024d2:	2303      	movs	r3, #3
 80024d4:	e015      	b.n	8002502 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f003 0301 	and.w	r3, r3, #1
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d1e4      	bne.n	80024ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80024e8:	223f      	movs	r2, #63	; 0x3f
 80024ea:	409a      	lsls	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2201      	movs	r2, #1
 80024f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	2200      	movs	r2, #0
 80024fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002500:	2300      	movs	r3, #0
}
 8002502:	4618      	mov	r0, r3
 8002504:	3710      	adds	r7, #16
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800250a:	b480      	push	{r7}
 800250c:	b083      	sub	sp, #12
 800250e:	af00      	add	r7, sp, #0
 8002510:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002518:	b2db      	uxtb	r3, r3
 800251a:	2b02      	cmp	r3, #2
 800251c:	d004      	beq.n	8002528 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	2280      	movs	r2, #128	; 0x80
 8002522:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002524:	2301      	movs	r3, #1
 8002526:	e00c      	b.n	8002542 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	2205      	movs	r2, #5
 800252c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	681a      	ldr	r2, [r3, #0]
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f022 0201 	bic.w	r2, r2, #1
 800253e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	370c      	adds	r7, #12
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr

0800254e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800254e:	b480      	push	{r7}
 8002550:	b083      	sub	sp, #12
 8002552:	af00      	add	r7, sp, #0
 8002554:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800255c:	b2db      	uxtb	r3, r3
}
 800255e:	4618      	mov	r0, r3
 8002560:	370c      	adds	r7, #12
 8002562:	46bd      	mov	sp, r7
 8002564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002568:	4770      	bx	lr
	...

0800256c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2b00      	cmp	r3, #0
 8002578:	d101      	bne.n	800257e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800257a:	2301      	movs	r3, #1
 800257c:	e06a      	b.n	8002654 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002584:	2b00      	cmp	r3, #0
 8002586:	d106      	bne.n	8002596 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	2223      	movs	r2, #35	; 0x23
 800258c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f7fe fe57 	bl	8001244 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002596:	4b31      	ldr	r3, [pc, #196]	; (800265c <HAL_ETH_Init+0xf0>)
 8002598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259a:	4a30      	ldr	r2, [pc, #192]	; (800265c <HAL_ETH_Init+0xf0>)
 800259c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025a0:	6453      	str	r3, [r2, #68]	; 0x44
 80025a2:	4b2e      	ldr	r3, [pc, #184]	; (800265c <HAL_ETH_Init+0xf0>)
 80025a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025aa:	60bb      	str	r3, [r7, #8]
 80025ac:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80025ae:	4b2c      	ldr	r3, [pc, #176]	; (8002660 <HAL_ETH_Init+0xf4>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	4a2b      	ldr	r2, [pc, #172]	; (8002660 <HAL_ETH_Init+0xf4>)
 80025b4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80025b8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80025ba:	4b29      	ldr	r3, [pc, #164]	; (8002660 <HAL_ETH_Init+0xf4>)
 80025bc:	685a      	ldr	r2, [r3, #4]
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	689b      	ldr	r3, [r3, #8]
 80025c2:	4927      	ldr	r1, [pc, #156]	; (8002660 <HAL_ETH_Init+0xf4>)
 80025c4:	4313      	orrs	r3, r2
 80025c6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80025c8:	4b25      	ldr	r3, [pc, #148]	; (8002660 <HAL_ETH_Init+0xf4>)
 80025ca:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	687a      	ldr	r2, [r7, #4]
 80025d8:	6812      	ldr	r2, [r2, #0]
 80025da:	f043 0301 	orr.w	r3, r3, #1
 80025de:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80025e2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80025e4:	f7ff fde0 	bl	80021a8 <HAL_GetTick>
 80025e8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80025ea:	e011      	b.n	8002610 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80025ec:	f7ff fddc 	bl	80021a8 <HAL_GetTick>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	1ad3      	subs	r3, r2, r3
 80025f6:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80025fa:	d909      	bls.n	8002610 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2204      	movs	r2, #4
 8002600:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	22e0      	movs	r2, #224	; 0xe0
 8002608:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	e021      	b.n	8002654 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b00      	cmp	r3, #0
 8002620:	d1e4      	bne.n	80025ec <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002622:	6878      	ldr	r0, [r7, #4]
 8002624:	f000 f958 	bl	80028d8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002628:	6878      	ldr	r0, [r7, #4]
 800262a:	f000 f9ff 	bl	8002a2c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800262e:	6878      	ldr	r0, [r7, #4]
 8002630:	f000 fa55 	bl	8002ade <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	461a      	mov	r2, r3
 800263a:	2100      	movs	r1, #0
 800263c:	6878      	ldr	r0, [r7, #4]
 800263e:	f000 f9bd 	bl	80029bc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	2200      	movs	r2, #0
 8002646:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2210      	movs	r2, #16
 800264e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8002652:	2300      	movs	r3, #0
}
 8002654:	4618      	mov	r0, r3
 8002656:	3710      	adds	r7, #16
 8002658:	46bd      	mov	sp, r7
 800265a:	bd80      	pop	{r7, pc}
 800265c:	40023800 	.word	0x40023800
 8002660:	40013800 	.word	0x40013800

08002664 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002664:	b580      	push	{r7, lr}
 8002666:	b084      	sub	sp, #16
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4b51      	ldr	r3, [pc, #324]	; (80027c0 <ETH_SetMACConfig+0x15c>)
 800267a:	4013      	ands	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	7c1b      	ldrb	r3, [r3, #16]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d102      	bne.n	800268c <ETH_SetMACConfig+0x28>
 8002686:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800268a:	e000      	b.n	800268e <ETH_SetMACConfig+0x2a>
 800268c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	7c5b      	ldrb	r3, [r3, #17]
 8002692:	2b00      	cmp	r3, #0
 8002694:	d102      	bne.n	800269c <ETH_SetMACConfig+0x38>
 8002696:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800269a:	e000      	b.n	800269e <ETH_SetMACConfig+0x3a>
 800269c:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800269e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80026a4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80026a6:	683b      	ldr	r3, [r7, #0]
 80026a8:	7fdb      	ldrb	r3, [r3, #31]
 80026aa:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80026ac:	431a      	orrs	r2, r3
                        macconf->Speed |
 80026ae:	683b      	ldr	r3, [r7, #0]
 80026b0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80026b2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026b4:	683a      	ldr	r2, [r7, #0]
 80026b6:	7f92      	ldrb	r2, [r2, #30]
 80026b8:	2a00      	cmp	r2, #0
 80026ba:	d102      	bne.n	80026c2 <ETH_SetMACConfig+0x5e>
 80026bc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80026c0:	e000      	b.n	80026c4 <ETH_SetMACConfig+0x60>
 80026c2:	2200      	movs	r2, #0
                        macconf->Speed |
 80026c4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026c6:	683b      	ldr	r3, [r7, #0]
 80026c8:	7f1b      	ldrb	r3, [r3, #28]
 80026ca:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80026cc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80026d2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	791b      	ldrb	r3, [r3, #4]
 80026d8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80026da:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026dc:	683a      	ldr	r2, [r7, #0]
 80026de:	f892 2020 	ldrb.w	r2, [r2, #32]
 80026e2:	2a00      	cmp	r2, #0
 80026e4:	d102      	bne.n	80026ec <ETH_SetMACConfig+0x88>
 80026e6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80026ea:	e000      	b.n	80026ee <ETH_SetMACConfig+0x8a>
 80026ec:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80026ee:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	7bdb      	ldrb	r3, [r3, #15]
 80026f4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80026f6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80026fc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002704:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002706:	4313      	orrs	r3, r2
 8002708:	68fa      	ldr	r2, [r7, #12]
 800270a:	4313      	orrs	r3, r2
 800270c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800271e:	2001      	movs	r0, #1
 8002720:	f7ff fd4e 	bl	80021c0 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	68fa      	ldr	r2, [r7, #12]
 800272a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	699b      	ldr	r3, [r3, #24]
 8002732:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002734:	68fa      	ldr	r2, [r7, #12]
 8002736:	f64f 7341 	movw	r3, #65345	; 0xff41
 800273a:	4013      	ands	r3, r2
 800273c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002742:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002744:	683a      	ldr	r2, [r7, #0]
 8002746:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800274a:	2a00      	cmp	r2, #0
 800274c:	d101      	bne.n	8002752 <ETH_SetMACConfig+0xee>
 800274e:	2280      	movs	r2, #128	; 0x80
 8002750:	e000      	b.n	8002754 <ETH_SetMACConfig+0xf0>
 8002752:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002754:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800275a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002762:	2a01      	cmp	r2, #1
 8002764:	d101      	bne.n	800276a <ETH_SetMACConfig+0x106>
 8002766:	2208      	movs	r2, #8
 8002768:	e000      	b.n	800276c <ETH_SetMACConfig+0x108>
 800276a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800276c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800276e:	683a      	ldr	r2, [r7, #0]
 8002770:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002774:	2a01      	cmp	r2, #1
 8002776:	d101      	bne.n	800277c <ETH_SetMACConfig+0x118>
 8002778:	2204      	movs	r2, #4
 800277a:	e000      	b.n	800277e <ETH_SetMACConfig+0x11a>
 800277c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800277e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002780:	683a      	ldr	r2, [r7, #0]
 8002782:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002786:	2a01      	cmp	r2, #1
 8002788:	d101      	bne.n	800278e <ETH_SetMACConfig+0x12a>
 800278a:	2202      	movs	r2, #2
 800278c:	e000      	b.n	8002790 <ETH_SetMACConfig+0x12c>
 800278e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002790:	4313      	orrs	r3, r2
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	4313      	orrs	r3, r2
 8002796:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68fa      	ldr	r2, [r7, #12]
 800279e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027a8:	2001      	movs	r0, #1
 80027aa:	f7ff fd09 	bl	80021c0 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	619a      	str	r2, [r3, #24]
}
 80027b6:	bf00      	nop
 80027b8:	3710      	adds	r7, #16
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	ff20810f 	.word	0xff20810f

080027c4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b084      	sub	sp, #16
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]
 80027cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80027da:	68fa      	ldr	r2, [r7, #12]
 80027dc:	4b3d      	ldr	r3, [pc, #244]	; (80028d4 <ETH_SetDMAConfig+0x110>)
 80027de:	4013      	ands	r3, r2
 80027e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	7b1b      	ldrb	r3, [r3, #12]
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d102      	bne.n	80027f0 <ETH_SetDMAConfig+0x2c>
 80027ea:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80027ee:	e000      	b.n	80027f2 <ETH_SetDMAConfig+0x2e>
 80027f0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	7b5b      	ldrb	r3, [r3, #13]
 80027f6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80027f8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80027fa:	683a      	ldr	r2, [r7, #0]
 80027fc:	7f52      	ldrb	r2, [r2, #29]
 80027fe:	2a00      	cmp	r2, #0
 8002800:	d102      	bne.n	8002808 <ETH_SetDMAConfig+0x44>
 8002802:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002806:	e000      	b.n	800280a <ETH_SetDMAConfig+0x46>
 8002808:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800280a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	7b9b      	ldrb	r3, [r3, #14]
 8002810:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002812:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002818:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800281a:	683b      	ldr	r3, [r7, #0]
 800281c:	7f1b      	ldrb	r3, [r3, #28]
 800281e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002820:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002822:	683b      	ldr	r3, [r7, #0]
 8002824:	7f9b      	ldrb	r3, [r3, #30]
 8002826:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002828:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800282a:	683b      	ldr	r3, [r7, #0]
 800282c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 800282e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002836:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002838:	4313      	orrs	r3, r2
 800283a:	68fa      	ldr	r2, [r7, #12]
 800283c:	4313      	orrs	r3, r2
 800283e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002848:	461a      	mov	r2, r3
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800285a:	2001      	movs	r0, #1
 800285c:	f7ff fcb0 	bl	80021c0 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002868:	461a      	mov	r2, r3
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	791b      	ldrb	r3, [r3, #4]
 8002872:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002874:	683b      	ldr	r3, [r7, #0]
 8002876:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002878:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800287e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002884:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800288c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800288e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002894:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002896:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800289c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800289e:	687a      	ldr	r2, [r7, #4]
 80028a0:	6812      	ldr	r2, [r2, #0]
 80028a2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028a6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028aa:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80028b8:	2001      	movs	r0, #1
 80028ba:	f7ff fc81 	bl	80021c0 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028c6:	461a      	mov	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	6013      	str	r3, [r2, #0]
}
 80028cc:	bf00      	nop
 80028ce:	3710      	adds	r7, #16
 80028d0:	46bd      	mov	sp, r7
 80028d2:	bd80      	pop	{r7, pc}
 80028d4:	f8de3f23 	.word	0xf8de3f23

080028d8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b0a6      	sub	sp, #152	; 0x98
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80028e0:	2301      	movs	r3, #1
 80028e2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80028e6:	2301      	movs	r3, #1
 80028e8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80028ec:	2300      	movs	r3, #0
 80028ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80028f0:	2300      	movs	r3, #0
 80028f2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80028f6:	2301      	movs	r3, #1
 80028f8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80028fc:	2300      	movs	r3, #0
 80028fe:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002902:	2301      	movs	r3, #1
 8002904:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002908:	2300      	movs	r3, #0
 800290a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 800290e:	2300      	movs	r3, #0
 8002910:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002914:	2300      	movs	r3, #0
 8002916:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002918:	2300      	movs	r3, #0
 800291a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 800291e:	2300      	movs	r3, #0
 8002920:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002922:	2300      	movs	r3, #0
 8002924:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002928:	2300      	movs	r3, #0
 800292a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 800292e:	2300      	movs	r3, #0
 8002930:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002934:	2300      	movs	r3, #0
 8002936:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800293a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800293e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002940:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002944:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002946:	2300      	movs	r3, #0
 8002948:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 800294c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002950:	4619      	mov	r1, r3
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f7ff fe86 	bl	8002664 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002958:	2301      	movs	r3, #1
 800295a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 800295c:	2301      	movs	r3, #1
 800295e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002960:	2301      	movs	r3, #1
 8002962:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002966:	2301      	movs	r3, #1
 8002968:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800296a:	2300      	movs	r3, #0
 800296c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 800296e:	2300      	movs	r3, #0
 8002970:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002974:	2300      	movs	r3, #0
 8002976:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800297a:	2300      	movs	r3, #0
 800297c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 800297e:	2301      	movs	r3, #1
 8002980:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002984:	2301      	movs	r3, #1
 8002986:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002988:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800298c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800298e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002992:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002994:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002998:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 800299a:	2301      	movs	r3, #1
 800299c:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80029a0:	2300      	movs	r3, #0
 80029a2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80029a4:	2300      	movs	r3, #0
 80029a6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80029a8:	f107 0308 	add.w	r3, r7, #8
 80029ac:	4619      	mov	r1, r3
 80029ae:	6878      	ldr	r0, [r7, #4]
 80029b0:	f7ff ff08 	bl	80027c4 <ETH_SetDMAConfig>
}
 80029b4:	bf00      	nop
 80029b6:	3798      	adds	r7, #152	; 0x98
 80029b8:	46bd      	mov	sp, r7
 80029ba:	bd80      	pop	{r7, pc}

080029bc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80029bc:	b480      	push	{r7}
 80029be:	b087      	sub	sp, #28
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	60f8      	str	r0, [r7, #12]
 80029c4:	60b9      	str	r1, [r7, #8]
 80029c6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	3305      	adds	r3, #5
 80029cc:	781b      	ldrb	r3, [r3, #0]
 80029ce:	021b      	lsls	r3, r3, #8
 80029d0:	687a      	ldr	r2, [r7, #4]
 80029d2:	3204      	adds	r2, #4
 80029d4:	7812      	ldrb	r2, [r2, #0]
 80029d6:	4313      	orrs	r3, r2
 80029d8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	4b11      	ldr	r3, [pc, #68]	; (8002a24 <ETH_MACAddressConfig+0x68>)
 80029de:	4413      	add	r3, r2
 80029e0:	461a      	mov	r2, r3
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	3303      	adds	r3, #3
 80029ea:	781b      	ldrb	r3, [r3, #0]
 80029ec:	061a      	lsls	r2, r3, #24
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	3302      	adds	r3, #2
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	041b      	lsls	r3, r3, #16
 80029f6:	431a      	orrs	r2, r3
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	3301      	adds	r3, #1
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	021b      	lsls	r3, r3, #8
 8002a00:	4313      	orrs	r3, r2
 8002a02:	687a      	ldr	r2, [r7, #4]
 8002a04:	7812      	ldrb	r2, [r2, #0]
 8002a06:	4313      	orrs	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <ETH_MACAddressConfig+0x6c>)
 8002a0e:	4413      	add	r3, r2
 8002a10:	461a      	mov	r2, r3
 8002a12:	697b      	ldr	r3, [r7, #20]
 8002a14:	6013      	str	r3, [r2, #0]
}
 8002a16:	bf00      	nop
 8002a18:	371c      	adds	r7, #28
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	40028040 	.word	0x40028040
 8002a28:	40028044 	.word	0x40028044

08002a2c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	b085      	sub	sp, #20
 8002a30:	af00      	add	r7, sp, #0
 8002a32:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002a34:	2300      	movs	r3, #0
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	e03e      	b.n	8002ab8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68d9      	ldr	r1, [r3, #12]
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4613      	mov	r3, r2
 8002a42:	009b      	lsls	r3, r3, #2
 8002a44:	4413      	add	r3, r2
 8002a46:	00db      	lsls	r3, r3, #3
 8002a48:	440b      	add	r3, r1
 8002a4a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	2200      	movs	r2, #0
 8002a50:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002a52:	68bb      	ldr	r3, [r7, #8]
 8002a54:	2200      	movs	r2, #0
 8002a56:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002a58:	68bb      	ldr	r3, [r7, #8]
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	2200      	movs	r2, #0
 8002a62:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002a64:	68b9      	ldr	r1, [r7, #8]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	68fa      	ldr	r2, [r7, #12]
 8002a6a:	3206      	adds	r2, #6
 8002a6c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002a78:	68bb      	ldr	r3, [r7, #8]
 8002a7a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d80c      	bhi.n	8002a9c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	68d9      	ldr	r1, [r3, #12]
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	4613      	mov	r3, r2
 8002a8c:	009b      	lsls	r3, r3, #2
 8002a8e:	4413      	add	r3, r2
 8002a90:	00db      	lsls	r3, r3, #3
 8002a92:	440b      	add	r3, r1
 8002a94:	461a      	mov	r2, r3
 8002a96:	68bb      	ldr	r3, [r7, #8]
 8002a98:	60da      	str	r2, [r3, #12]
 8002a9a:	e004      	b.n	8002aa6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	68db      	ldr	r3, [r3, #12]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	68bb      	ldr	r3, [r7, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002aa6:	68bb      	ldr	r3, [r7, #8]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002aae:	68bb      	ldr	r3, [r7, #8]
 8002ab0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	3301      	adds	r3, #1
 8002ab6:	60fb      	str	r3, [r7, #12]
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	2b03      	cmp	r3, #3
 8002abc:	d9bd      	bls.n	8002a3a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	68da      	ldr	r2, [r3, #12]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ad0:	611a      	str	r2, [r3, #16]
}
 8002ad2:	bf00      	nop
 8002ad4:	3714      	adds	r7, #20
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b085      	sub	sp, #20
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	e046      	b.n	8002b7a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6919      	ldr	r1, [r3, #16]
 8002af0:	68fa      	ldr	r2, [r7, #12]
 8002af2:	4613      	mov	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	4413      	add	r3, r2
 8002af8:	00db      	lsls	r3, r3, #3
 8002afa:	440b      	add	r3, r1
 8002afc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	2200      	movs	r2, #0
 8002b08:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002b0a:	68bb      	ldr	r3, [r7, #8]
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	2200      	movs	r2, #0
 8002b14:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2200      	movs	r2, #0
 8002b1a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002b1c:	68bb      	ldr	r3, [r7, #8]
 8002b1e:	2200      	movs	r2, #0
 8002b20:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002b28:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002b2a:	68bb      	ldr	r3, [r7, #8]
 8002b2c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002b30:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002b32:	68bb      	ldr	r3, [r7, #8]
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002b3e:	68b9      	ldr	r1, [r7, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	68fa      	ldr	r2, [r7, #12]
 8002b44:	3212      	adds	r2, #18
 8002b46:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	2b02      	cmp	r3, #2
 8002b4e:	d80c      	bhi.n	8002b6a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6919      	ldr	r1, [r3, #16]
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	1c5a      	adds	r2, r3, #1
 8002b58:	4613      	mov	r3, r2
 8002b5a:	009b      	lsls	r3, r3, #2
 8002b5c:	4413      	add	r3, r2
 8002b5e:	00db      	lsls	r3, r3, #3
 8002b60:	440b      	add	r3, r1
 8002b62:	461a      	mov	r2, r3
 8002b64:	68bb      	ldr	r3, [r7, #8]
 8002b66:	60da      	str	r2, [r3, #12]
 8002b68:	e004      	b.n	8002b74 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	461a      	mov	r2, r3
 8002b70:	68bb      	ldr	r3, [r7, #8]
 8002b72:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	3301      	adds	r3, #1
 8002b78:	60fb      	str	r3, [r7, #12]
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	2b03      	cmp	r3, #3
 8002b7e:	d9b5      	bls.n	8002aec <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2200      	movs	r2, #0
 8002b84:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2200      	movs	r2, #0
 8002b8a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	2200      	movs	r2, #0
 8002b96:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	691a      	ldr	r2, [r3, #16]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002baa:	60da      	str	r2, [r3, #12]
}
 8002bac:	bf00      	nop
 8002bae:	3714      	adds	r7, #20
 8002bb0:	46bd      	mov	sp, r7
 8002bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb6:	4770      	bx	lr

08002bb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002bb8:	b480      	push	{r7}
 8002bba:	b089      	sub	sp, #36	; 0x24
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
 8002bc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002bca:	2300      	movs	r3, #0
 8002bcc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
 8002bd6:	e175      	b.n	8002ec4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002bd8:	2201      	movs	r2, #1
 8002bda:	69fb      	ldr	r3, [r7, #28]
 8002bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002be0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	4013      	ands	r3, r2
 8002bea:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002bec:	693a      	ldr	r2, [r7, #16]
 8002bee:	697b      	ldr	r3, [r7, #20]
 8002bf0:	429a      	cmp	r2, r3
 8002bf2:	f040 8164 	bne.w	8002ebe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	685b      	ldr	r3, [r3, #4]
 8002bfa:	f003 0303 	and.w	r3, r3, #3
 8002bfe:	2b01      	cmp	r3, #1
 8002c00:	d005      	beq.n	8002c0e <HAL_GPIO_Init+0x56>
 8002c02:	683b      	ldr	r3, [r7, #0]
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	f003 0303 	and.w	r3, r3, #3
 8002c0a:	2b02      	cmp	r3, #2
 8002c0c:	d130      	bne.n	8002c70 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	005b      	lsls	r3, r3, #1
 8002c18:	2203      	movs	r2, #3
 8002c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c1e:	43db      	mvns	r3, r3
 8002c20:	69ba      	ldr	r2, [r7, #24]
 8002c22:	4013      	ands	r3, r2
 8002c24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	68da      	ldr	r2, [r3, #12]
 8002c2a:	69fb      	ldr	r3, [r7, #28]
 8002c2c:	005b      	lsls	r3, r3, #1
 8002c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c32:	69ba      	ldr	r2, [r7, #24]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	69ba      	ldr	r2, [r7, #24]
 8002c3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	685b      	ldr	r3, [r3, #4]
 8002c42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c44:	2201      	movs	r2, #1
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	fa02 f303 	lsl.w	r3, r2, r3
 8002c4c:	43db      	mvns	r3, r3
 8002c4e:	69ba      	ldr	r2, [r7, #24]
 8002c50:	4013      	ands	r3, r2
 8002c52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	091b      	lsrs	r3, r3, #4
 8002c5a:	f003 0201 	and.w	r2, r3, #1
 8002c5e:	69fb      	ldr	r3, [r7, #28]
 8002c60:	fa02 f303 	lsl.w	r3, r2, r3
 8002c64:	69ba      	ldr	r2, [r7, #24]
 8002c66:	4313      	orrs	r3, r2
 8002c68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	69ba      	ldr	r2, [r7, #24]
 8002c6e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c70:	683b      	ldr	r3, [r7, #0]
 8002c72:	685b      	ldr	r3, [r3, #4]
 8002c74:	f003 0303 	and.w	r3, r3, #3
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	d017      	beq.n	8002cac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	68db      	ldr	r3, [r3, #12]
 8002c80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	005b      	lsls	r3, r3, #1
 8002c86:	2203      	movs	r2, #3
 8002c88:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8c:	43db      	mvns	r3, r3
 8002c8e:	69ba      	ldr	r2, [r7, #24]
 8002c90:	4013      	ands	r3, r2
 8002c92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	689a      	ldr	r2, [r3, #8]
 8002c98:	69fb      	ldr	r3, [r7, #28]
 8002c9a:	005b      	lsls	r3, r3, #1
 8002c9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69ba      	ldr	r2, [r7, #24]
 8002caa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	685b      	ldr	r3, [r3, #4]
 8002cb0:	f003 0303 	and.w	r3, r3, #3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d123      	bne.n	8002d00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002cb8:	69fb      	ldr	r3, [r7, #28]
 8002cba:	08da      	lsrs	r2, r3, #3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	3208      	adds	r2, #8
 8002cc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002cc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	f003 0307 	and.w	r3, r3, #7
 8002ccc:	009b      	lsls	r3, r3, #2
 8002cce:	220f      	movs	r2, #15
 8002cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd4:	43db      	mvns	r3, r3
 8002cd6:	69ba      	ldr	r2, [r7, #24]
 8002cd8:	4013      	ands	r3, r2
 8002cda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	691a      	ldr	r2, [r3, #16]
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	f003 0307 	and.w	r3, r3, #7
 8002ce6:	009b      	lsls	r3, r3, #2
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002cf2:	69fb      	ldr	r3, [r7, #28]
 8002cf4:	08da      	lsrs	r2, r3, #3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	3208      	adds	r2, #8
 8002cfa:	69b9      	ldr	r1, [r7, #24]
 8002cfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	2203      	movs	r2, #3
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	43db      	mvns	r3, r3
 8002d12:	69ba      	ldr	r2, [r7, #24]
 8002d14:	4013      	ands	r3, r2
 8002d16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f003 0203 	and.w	r2, r3, #3
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	005b      	lsls	r3, r3, #1
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	69ba      	ldr	r2, [r7, #24]
 8002d32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	f000 80be 	beq.w	8002ebe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d42:	4b66      	ldr	r3, [pc, #408]	; (8002edc <HAL_GPIO_Init+0x324>)
 8002d44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d46:	4a65      	ldr	r2, [pc, #404]	; (8002edc <HAL_GPIO_Init+0x324>)
 8002d48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002d4c:	6453      	str	r3, [r2, #68]	; 0x44
 8002d4e:	4b63      	ldr	r3, [pc, #396]	; (8002edc <HAL_GPIO_Init+0x324>)
 8002d50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d56:	60fb      	str	r3, [r7, #12]
 8002d58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002d5a:	4a61      	ldr	r2, [pc, #388]	; (8002ee0 <HAL_GPIO_Init+0x328>)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	089b      	lsrs	r3, r3, #2
 8002d60:	3302      	adds	r3, #2
 8002d62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002d68:	69fb      	ldr	r3, [r7, #28]
 8002d6a:	f003 0303 	and.w	r3, r3, #3
 8002d6e:	009b      	lsls	r3, r3, #2
 8002d70:	220f      	movs	r2, #15
 8002d72:	fa02 f303 	lsl.w	r3, r2, r3
 8002d76:	43db      	mvns	r3, r3
 8002d78:	69ba      	ldr	r2, [r7, #24]
 8002d7a:	4013      	ands	r3, r2
 8002d7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	4a58      	ldr	r2, [pc, #352]	; (8002ee4 <HAL_GPIO_Init+0x32c>)
 8002d82:	4293      	cmp	r3, r2
 8002d84:	d037      	beq.n	8002df6 <HAL_GPIO_Init+0x23e>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4a57      	ldr	r2, [pc, #348]	; (8002ee8 <HAL_GPIO_Init+0x330>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d031      	beq.n	8002df2 <HAL_GPIO_Init+0x23a>
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	4a56      	ldr	r2, [pc, #344]	; (8002eec <HAL_GPIO_Init+0x334>)
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d02b      	beq.n	8002dee <HAL_GPIO_Init+0x236>
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	4a55      	ldr	r2, [pc, #340]	; (8002ef0 <HAL_GPIO_Init+0x338>)
 8002d9a:	4293      	cmp	r3, r2
 8002d9c:	d025      	beq.n	8002dea <HAL_GPIO_Init+0x232>
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	4a54      	ldr	r2, [pc, #336]	; (8002ef4 <HAL_GPIO_Init+0x33c>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d01f      	beq.n	8002de6 <HAL_GPIO_Init+0x22e>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a53      	ldr	r2, [pc, #332]	; (8002ef8 <HAL_GPIO_Init+0x340>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d019      	beq.n	8002de2 <HAL_GPIO_Init+0x22a>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a52      	ldr	r2, [pc, #328]	; (8002efc <HAL_GPIO_Init+0x344>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d013      	beq.n	8002dde <HAL_GPIO_Init+0x226>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a51      	ldr	r2, [pc, #324]	; (8002f00 <HAL_GPIO_Init+0x348>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d00d      	beq.n	8002dda <HAL_GPIO_Init+0x222>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a50      	ldr	r2, [pc, #320]	; (8002f04 <HAL_GPIO_Init+0x34c>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d007      	beq.n	8002dd6 <HAL_GPIO_Init+0x21e>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4f      	ldr	r2, [pc, #316]	; (8002f08 <HAL_GPIO_Init+0x350>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d101      	bne.n	8002dd2 <HAL_GPIO_Init+0x21a>
 8002dce:	2309      	movs	r3, #9
 8002dd0:	e012      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002dd2:	230a      	movs	r3, #10
 8002dd4:	e010      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002dd6:	2308      	movs	r3, #8
 8002dd8:	e00e      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002dda:	2307      	movs	r3, #7
 8002ddc:	e00c      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002dde:	2306      	movs	r3, #6
 8002de0:	e00a      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002de2:	2305      	movs	r3, #5
 8002de4:	e008      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002de6:	2304      	movs	r3, #4
 8002de8:	e006      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002dea:	2303      	movs	r3, #3
 8002dec:	e004      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002dee:	2302      	movs	r3, #2
 8002df0:	e002      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002df2:	2301      	movs	r3, #1
 8002df4:	e000      	b.n	8002df8 <HAL_GPIO_Init+0x240>
 8002df6:	2300      	movs	r3, #0
 8002df8:	69fa      	ldr	r2, [r7, #28]
 8002dfa:	f002 0203 	and.w	r2, r2, #3
 8002dfe:	0092      	lsls	r2, r2, #2
 8002e00:	4093      	lsls	r3, r2
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	4313      	orrs	r3, r2
 8002e06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002e08:	4935      	ldr	r1, [pc, #212]	; (8002ee0 <HAL_GPIO_Init+0x328>)
 8002e0a:	69fb      	ldr	r3, [r7, #28]
 8002e0c:	089b      	lsrs	r3, r3, #2
 8002e0e:	3302      	adds	r3, #2
 8002e10:	69ba      	ldr	r2, [r7, #24]
 8002e12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e16:	4b3d      	ldr	r3, [pc, #244]	; (8002f0c <HAL_GPIO_Init+0x354>)
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e1c:	693b      	ldr	r3, [r7, #16]
 8002e1e:	43db      	mvns	r3, r3
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	4013      	ands	r3, r2
 8002e24:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002e26:	683b      	ldr	r3, [r7, #0]
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d003      	beq.n	8002e3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002e32:	69ba      	ldr	r2, [r7, #24]
 8002e34:	693b      	ldr	r3, [r7, #16]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e3a:	4a34      	ldr	r2, [pc, #208]	; (8002f0c <HAL_GPIO_Init+0x354>)
 8002e3c:	69bb      	ldr	r3, [r7, #24]
 8002e3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e40:	4b32      	ldr	r3, [pc, #200]	; (8002f0c <HAL_GPIO_Init+0x354>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	43db      	mvns	r3, r3
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685b      	ldr	r3, [r3, #4]
 8002e54:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d003      	beq.n	8002e64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002e5c:	69ba      	ldr	r2, [r7, #24]
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	4313      	orrs	r3, r2
 8002e62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e64:	4a29      	ldr	r2, [pc, #164]	; (8002f0c <HAL_GPIO_Init+0x354>)
 8002e66:	69bb      	ldr	r3, [r7, #24]
 8002e68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e6a:	4b28      	ldr	r3, [pc, #160]	; (8002f0c <HAL_GPIO_Init+0x354>)
 8002e6c:	685b      	ldr	r3, [r3, #4]
 8002e6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e70:	693b      	ldr	r3, [r7, #16]
 8002e72:	43db      	mvns	r3, r3
 8002e74:	69ba      	ldr	r2, [r7, #24]
 8002e76:	4013      	ands	r3, r2
 8002e78:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d003      	beq.n	8002e8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002e86:	69ba      	ldr	r2, [r7, #24]
 8002e88:	693b      	ldr	r3, [r7, #16]
 8002e8a:	4313      	orrs	r3, r2
 8002e8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e8e:	4a1f      	ldr	r2, [pc, #124]	; (8002f0c <HAL_GPIO_Init+0x354>)
 8002e90:	69bb      	ldr	r3, [r7, #24]
 8002e92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002e94:	4b1d      	ldr	r3, [pc, #116]	; (8002f0c <HAL_GPIO_Init+0x354>)
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d003      	beq.n	8002eb8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002eb0:	69ba      	ldr	r2, [r7, #24]
 8002eb2:	693b      	ldr	r3, [r7, #16]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002eb8:	4a14      	ldr	r2, [pc, #80]	; (8002f0c <HAL_GPIO_Init+0x354>)
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	3301      	adds	r3, #1
 8002ec2:	61fb      	str	r3, [r7, #28]
 8002ec4:	69fb      	ldr	r3, [r7, #28]
 8002ec6:	2b0f      	cmp	r3, #15
 8002ec8:	f67f ae86 	bls.w	8002bd8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002ecc:	bf00      	nop
 8002ece:	bf00      	nop
 8002ed0:	3724      	adds	r7, #36	; 0x24
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed8:	4770      	bx	lr
 8002eda:	bf00      	nop
 8002edc:	40023800 	.word	0x40023800
 8002ee0:	40013800 	.word	0x40013800
 8002ee4:	40020000 	.word	0x40020000
 8002ee8:	40020400 	.word	0x40020400
 8002eec:	40020800 	.word	0x40020800
 8002ef0:	40020c00 	.word	0x40020c00
 8002ef4:	40021000 	.word	0x40021000
 8002ef8:	40021400 	.word	0x40021400
 8002efc:	40021800 	.word	0x40021800
 8002f00:	40021c00 	.word	0x40021c00
 8002f04:	40022000 	.word	0x40022000
 8002f08:	40022400 	.word	0x40022400
 8002f0c:	40013c00 	.word	0x40013c00

08002f10 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	807b      	strh	r3, [r7, #2]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f20:	787b      	ldrb	r3, [r7, #1]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d003      	beq.n	8002f2e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f26:	887a      	ldrh	r2, [r7, #2]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8002f2c:	e003      	b.n	8002f36 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8002f2e:	887b      	ldrh	r3, [r7, #2]
 8002f30:	041a      	lsls	r2, r3, #16
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	619a      	str	r2, [r3, #24]
}
 8002f36:	bf00      	nop
 8002f38:	370c      	adds	r7, #12
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr
	...

08002f44 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002f4e:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f50:	695a      	ldr	r2, [r3, #20]
 8002f52:	88fb      	ldrh	r3, [r7, #6]
 8002f54:	4013      	ands	r3, r2
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d006      	beq.n	8002f68 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002f5a:	4a05      	ldr	r2, [pc, #20]	; (8002f70 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002f5c:	88fb      	ldrh	r3, [r7, #6]
 8002f5e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002f60:	88fb      	ldrh	r3, [r7, #6]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f000 f806 	bl	8002f74 <HAL_GPIO_EXTI_Callback>
  }
}
 8002f68:	bf00      	nop
 8002f6a:	3708      	adds	r7, #8
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	40013c00 	.word	0x40013c00

08002f74 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	4603      	mov	r3, r0
 8002f7c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002f7e:	bf00      	nop
 8002f80:	370c      	adds	r7, #12
 8002f82:	46bd      	mov	sp, r7
 8002f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f88:	4770      	bx	lr
	...

08002f8c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b082      	sub	sp, #8
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f9a:	2301      	movs	r3, #1
 8002f9c:	e07f      	b.n	800309e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002fa4:	b2db      	uxtb	r3, r3
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d106      	bne.n	8002fb8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f7fe fafa 	bl	80015ac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	2224      	movs	r2, #36	; 0x24
 8002fbc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	681a      	ldr	r2, [r3, #0]
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f022 0201 	bic.w	r2, r2, #1
 8002fce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	685a      	ldr	r2, [r3, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002fdc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	689a      	ldr	r2, [r3, #8]
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002fec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	68db      	ldr	r3, [r3, #12]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d107      	bne.n	8003006 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	689a      	ldr	r2, [r3, #8]
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003002:	609a      	str	r2, [r3, #8]
 8003004:	e006      	b.n	8003014 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689a      	ldr	r2, [r3, #8]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003012:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	68db      	ldr	r3, [r3, #12]
 8003018:	2b02      	cmp	r3, #2
 800301a:	d104      	bne.n	8003026 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003024:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6859      	ldr	r1, [r3, #4]
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	4b1d      	ldr	r3, [pc, #116]	; (80030a8 <HAL_I2C_Init+0x11c>)
 8003032:	430b      	orrs	r3, r1
 8003034:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003044:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	691a      	ldr	r2, [r3, #16]
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	695b      	ldr	r3, [r3, #20]
 800304e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	699b      	ldr	r3, [r3, #24]
 8003056:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	69d9      	ldr	r1, [r3, #28]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6a1a      	ldr	r2, [r3, #32]
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	430a      	orrs	r2, r1
 800306e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	681a      	ldr	r2, [r3, #0]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f042 0201 	orr.w	r2, r2, #1
 800307e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	2200      	movs	r2, #0
 8003084:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2220      	movs	r2, #32
 800308a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	2200      	movs	r2, #0
 8003092:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	2200      	movs	r2, #0
 8003098:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800309c:	2300      	movs	r3, #0
}
 800309e:	4618      	mov	r0, r3
 80030a0:	3708      	adds	r7, #8
 80030a2:	46bd      	mov	sp, r7
 80030a4:	bd80      	pop	{r7, pc}
 80030a6:	bf00      	nop
 80030a8:	02008000 	.word	0x02008000

080030ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af02      	add	r7, sp, #8
 80030b2:	60f8      	str	r0, [r7, #12]
 80030b4:	4608      	mov	r0, r1
 80030b6:	4611      	mov	r1, r2
 80030b8:	461a      	mov	r2, r3
 80030ba:	4603      	mov	r3, r0
 80030bc:	817b      	strh	r3, [r7, #10]
 80030be:	460b      	mov	r3, r1
 80030c0:	813b      	strh	r3, [r7, #8]
 80030c2:	4613      	mov	r3, r2
 80030c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80030cc:	b2db      	uxtb	r3, r3
 80030ce:	2b20      	cmp	r3, #32
 80030d0:	f040 80fd 	bne.w	80032ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80030d4:	6a3b      	ldr	r3, [r7, #32]
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d002      	beq.n	80030e0 <HAL_I2C_Mem_Read+0x34>
 80030da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d105      	bne.n	80030ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80030e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	e0f1      	b.n	80032d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80030f2:	2b01      	cmp	r3, #1
 80030f4:	d101      	bne.n	80030fa <HAL_I2C_Mem_Read+0x4e>
 80030f6:	2302      	movs	r3, #2
 80030f8:	e0ea      	b.n	80032d0 <HAL_I2C_Mem_Read+0x224>
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	2201      	movs	r2, #1
 80030fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003102:	f7ff f851 	bl	80021a8 <HAL_GetTick>
 8003106:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003108:	697b      	ldr	r3, [r7, #20]
 800310a:	9300      	str	r3, [sp, #0]
 800310c:	2319      	movs	r3, #25
 800310e:	2201      	movs	r2, #1
 8003110:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003114:	68f8      	ldr	r0, [r7, #12]
 8003116:	f000 fe58 	bl	8003dca <I2C_WaitOnFlagUntilTimeout>
 800311a:	4603      	mov	r3, r0
 800311c:	2b00      	cmp	r3, #0
 800311e:	d001      	beq.n	8003124 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003120:	2301      	movs	r3, #1
 8003122:	e0d5      	b.n	80032d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	2222      	movs	r2, #34	; 0x22
 8003128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	2240      	movs	r2, #64	; 0x40
 8003130:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	2200      	movs	r2, #0
 8003138:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	6a3a      	ldr	r2, [r7, #32]
 800313e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003144:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	2200      	movs	r2, #0
 800314a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800314c:	88f8      	ldrh	r0, [r7, #6]
 800314e:	893a      	ldrh	r2, [r7, #8]
 8003150:	8979      	ldrh	r1, [r7, #10]
 8003152:	697b      	ldr	r3, [r7, #20]
 8003154:	9301      	str	r3, [sp, #4]
 8003156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003158:	9300      	str	r3, [sp, #0]
 800315a:	4603      	mov	r3, r0
 800315c:	68f8      	ldr	r0, [r7, #12]
 800315e:	f000 fa6d 	bl	800363c <I2C_RequestMemoryRead>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d005      	beq.n	8003174 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2200      	movs	r2, #0
 800316c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003170:	2301      	movs	r3, #1
 8003172:	e0ad      	b.n	80032d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003178:	b29b      	uxth	r3, r3
 800317a:	2bff      	cmp	r3, #255	; 0xff
 800317c:	d90e      	bls.n	800319c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	22ff      	movs	r2, #255	; 0xff
 8003182:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003188:	b2da      	uxtb	r2, r3
 800318a:	8979      	ldrh	r1, [r7, #10]
 800318c:	4b52      	ldr	r3, [pc, #328]	; (80032d8 <HAL_I2C_Mem_Read+0x22c>)
 800318e:	9300      	str	r3, [sp, #0]
 8003190:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003194:	68f8      	ldr	r0, [r7, #12]
 8003196:	f000 ffb5 	bl	8004104 <I2C_TransferConfig>
 800319a:	e00f      	b.n	80031bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031a0:	b29a      	uxth	r2, r3
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031aa:	b2da      	uxtb	r2, r3
 80031ac:	8979      	ldrh	r1, [r7, #10]
 80031ae:	4b4a      	ldr	r3, [pc, #296]	; (80032d8 <HAL_I2C_Mem_Read+0x22c>)
 80031b0:	9300      	str	r3, [sp, #0]
 80031b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f000 ffa4 	bl	8004104 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80031bc:	697b      	ldr	r3, [r7, #20]
 80031be:	9300      	str	r3, [sp, #0]
 80031c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031c2:	2200      	movs	r2, #0
 80031c4:	2104      	movs	r1, #4
 80031c6:	68f8      	ldr	r0, [r7, #12]
 80031c8:	f000 fdff 	bl	8003dca <I2C_WaitOnFlagUntilTimeout>
 80031cc:	4603      	mov	r3, r0
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d001      	beq.n	80031d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e07c      	b.n	80032d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e0:	b2d2      	uxtb	r2, r2
 80031e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e8:	1c5a      	adds	r2, r3, #1
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80031f2:	3b01      	subs	r3, #1
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031fe:	b29b      	uxth	r3, r3
 8003200:	3b01      	subs	r3, #1
 8003202:	b29a      	uxth	r2, r3
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800320c:	b29b      	uxth	r3, r3
 800320e:	2b00      	cmp	r3, #0
 8003210:	d034      	beq.n	800327c <HAL_I2C_Mem_Read+0x1d0>
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003216:	2b00      	cmp	r3, #0
 8003218:	d130      	bne.n	800327c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	9300      	str	r3, [sp, #0]
 800321e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003220:	2200      	movs	r2, #0
 8003222:	2180      	movs	r1, #128	; 0x80
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f000 fdd0 	bl	8003dca <I2C_WaitOnFlagUntilTimeout>
 800322a:	4603      	mov	r3, r0
 800322c:	2b00      	cmp	r3, #0
 800322e:	d001      	beq.n	8003234 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003230:	2301      	movs	r3, #1
 8003232:	e04d      	b.n	80032d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003238:	b29b      	uxth	r3, r3
 800323a:	2bff      	cmp	r3, #255	; 0xff
 800323c:	d90e      	bls.n	800325c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	22ff      	movs	r2, #255	; 0xff
 8003242:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003248:	b2da      	uxtb	r2, r3
 800324a:	8979      	ldrh	r1, [r7, #10]
 800324c:	2300      	movs	r3, #0
 800324e:	9300      	str	r3, [sp, #0]
 8003250:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 ff55 	bl	8004104 <I2C_TransferConfig>
 800325a:	e00f      	b.n	800327c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003260:	b29a      	uxth	r2, r3
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800326a:	b2da      	uxtb	r2, r3
 800326c:	8979      	ldrh	r1, [r7, #10]
 800326e:	2300      	movs	r3, #0
 8003270:	9300      	str	r3, [sp, #0]
 8003272:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003276:	68f8      	ldr	r0, [r7, #12]
 8003278:	f000 ff44 	bl	8004104 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003280:	b29b      	uxth	r3, r3
 8003282:	2b00      	cmp	r3, #0
 8003284:	d19a      	bne.n	80031bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003286:	697a      	ldr	r2, [r7, #20]
 8003288:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800328a:	68f8      	ldr	r0, [r7, #12]
 800328c:	f000 fe1d 	bl	8003eca <I2C_WaitOnSTOPFlagUntilTimeout>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d001      	beq.n	800329a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e01a      	b.n	80032d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2220      	movs	r2, #32
 80032a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	6859      	ldr	r1, [r3, #4]
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	4b0b      	ldr	r3, [pc, #44]	; (80032dc <HAL_I2C_Mem_Read+0x230>)
 80032ae:	400b      	ands	r3, r1
 80032b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2220      	movs	r2, #32
 80032b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	2200      	movs	r2, #0
 80032c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80032ca:	2300      	movs	r3, #0
 80032cc:	e000      	b.n	80032d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80032ce:	2302      	movs	r3, #2
  }
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3718      	adds	r7, #24
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	80002400 	.word	0x80002400
 80032dc:	fe00e800 	.word	0xfe00e800

080032e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b084      	sub	sp, #16
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	699b      	ldr	r3, [r3, #24]
 80032ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d005      	beq.n	800330c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003304:	68ba      	ldr	r2, [r7, #8]
 8003306:	68f9      	ldr	r1, [r7, #12]
 8003308:	6878      	ldr	r0, [r7, #4]
 800330a:	4798      	blx	r3
  }
}
 800330c:	bf00      	nop
 800330e:	3710      	adds	r7, #16
 8003310:	46bd      	mov	sp, r7
 8003312:	bd80      	pop	{r7, pc}

08003314 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003314:	b580      	push	{r7, lr}
 8003316:	b086      	sub	sp, #24
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	699b      	ldr	r3, [r3, #24]
 8003322:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003332:	2b00      	cmp	r3, #0
 8003334:	d00f      	beq.n	8003356 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003336:	693b      	ldr	r3, [r7, #16]
 8003338:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00a      	beq.n	8003356 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003344:	f043 0201 	orr.w	r2, r3, #1
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003354:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003356:	697b      	ldr	r3, [r7, #20]
 8003358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800335c:	2b00      	cmp	r3, #0
 800335e:	d00f      	beq.n	8003380 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800336e:	f043 0208 	orr.w	r2, r3, #8
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800337e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00f      	beq.n	80033aa <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003390:	2b00      	cmp	r3, #0
 8003392:	d00a      	beq.n	80033aa <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003398:	f043 0202 	orr.w	r2, r3, #2
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033a8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80033ae:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 030b 	and.w	r3, r3, #11
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80033ba:	68f9      	ldr	r1, [r7, #12]
 80033bc:	6878      	ldr	r0, [r7, #4]
 80033be:	f000 fbcb 	bl	8003b58 <I2C_ITError>
  }
}
 80033c2:	bf00      	nop
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033ca:	b480      	push	{r7}
 80033cc:	b083      	sub	sp, #12
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80033d2:	bf00      	nop
 80033d4:	370c      	adds	r7, #12
 80033d6:	46bd      	mov	sp, r7
 80033d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033dc:	4770      	bx	lr

080033de <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80033de:	b480      	push	{r7}
 80033e0:	b083      	sub	sp, #12
 80033e2:	af00      	add	r7, sp, #0
 80033e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80033e6:	bf00      	nop
 80033e8:	370c      	adds	r7, #12
 80033ea:	46bd      	mov	sp, r7
 80033ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033f0:	4770      	bx	lr

080033f2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80033f2:	b480      	push	{r7}
 80033f4:	b083      	sub	sp, #12
 80033f6:	af00      	add	r7, sp, #0
 80033f8:	6078      	str	r0, [r7, #4]
 80033fa:	460b      	mov	r3, r1
 80033fc:	70fb      	strb	r3, [r7, #3]
 80033fe:	4613      	mov	r3, r2
 8003400:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003402:	bf00      	nop
 8003404:	370c      	adds	r7, #12
 8003406:	46bd      	mov	sp, r7
 8003408:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340c:	4770      	bx	lr

0800340e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800340e:	b480      	push	{r7}
 8003410:	b083      	sub	sp, #12
 8003412:	af00      	add	r7, sp, #0
 8003414:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003416:	bf00      	nop
 8003418:	370c      	adds	r7, #12
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr

08003422 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003422:	b480      	push	{r7}
 8003424:	b083      	sub	sp, #12
 8003426:	af00      	add	r7, sp, #0
 8003428:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800342a:	bf00      	nop
 800342c:	370c      	adds	r7, #12
 800342e:	46bd      	mov	sp, r7
 8003430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003434:	4770      	bx	lr

08003436 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003436:	b480      	push	{r7}
 8003438:	b083      	sub	sp, #12
 800343a:	af00      	add	r7, sp, #0
 800343c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800343e:	bf00      	nop
 8003440:	370c      	adds	r7, #12
 8003442:	46bd      	mov	sp, r7
 8003444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003448:	4770      	bx	lr

0800344a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800344a:	b580      	push	{r7, lr}
 800344c:	b086      	sub	sp, #24
 800344e:	af00      	add	r7, sp, #0
 8003450:	60f8      	str	r0, [r7, #12]
 8003452:	60b9      	str	r1, [r7, #8]
 8003454:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003466:	2b01      	cmp	r3, #1
 8003468:	d101      	bne.n	800346e <I2C_Slave_ISR_IT+0x24>
 800346a:	2302      	movs	r3, #2
 800346c:	e0e1      	b.n	8003632 <I2C_Slave_ISR_IT+0x1e8>
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	2201      	movs	r2, #1
 8003472:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003476:	693b      	ldr	r3, [r7, #16]
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003486:	2b00      	cmp	r3, #0
 8003488:	d003      	beq.n	8003492 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800348a:	6939      	ldr	r1, [r7, #16]
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 fa09 	bl	80038a4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003492:	693b      	ldr	r3, [r7, #16]
 8003494:	f003 0310 	and.w	r3, r3, #16
 8003498:	2b00      	cmp	r3, #0
 800349a:	d04b      	beq.n	8003534 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d046      	beq.n	8003534 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034aa:	b29b      	uxth	r3, r3
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d128      	bne.n	8003502 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	2b28      	cmp	r3, #40	; 0x28
 80034ba:	d108      	bne.n	80034ce <I2C_Slave_ISR_IT+0x84>
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80034c2:	d104      	bne.n	80034ce <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80034c4:	6939      	ldr	r1, [r7, #16]
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 faf2 	bl	8003ab0 <I2C_ITListenCplt>
 80034cc:	e031      	b.n	8003532 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80034ce:	68fb      	ldr	r3, [r7, #12]
 80034d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b29      	cmp	r3, #41	; 0x29
 80034d8:	d10e      	bne.n	80034f8 <I2C_Slave_ISR_IT+0xae>
 80034da:	697b      	ldr	r3, [r7, #20]
 80034dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80034e0:	d00a      	beq.n	80034f8 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	2210      	movs	r2, #16
 80034e8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f000 fc2b 	bl	8003d46 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80034f0:	68f8      	ldr	r0, [r7, #12]
 80034f2:	f000 f97b 	bl	80037ec <I2C_ITSlaveSeqCplt>
 80034f6:	e01c      	b.n	8003532 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	2210      	movs	r2, #16
 80034fe:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003500:	e08f      	b.n	8003622 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	2210      	movs	r2, #16
 8003508:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350e:	f043 0204 	orr.w	r2, r3, #4
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	2b00      	cmp	r3, #0
 800351a:	d003      	beq.n	8003524 <I2C_Slave_ISR_IT+0xda>
 800351c:	697b      	ldr	r3, [r7, #20]
 800351e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003522:	d17e      	bne.n	8003622 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003528:	4619      	mov	r1, r3
 800352a:	68f8      	ldr	r0, [r7, #12]
 800352c:	f000 fb14 	bl	8003b58 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003530:	e077      	b.n	8003622 <I2C_Slave_ISR_IT+0x1d8>
 8003532:	e076      	b.n	8003622 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003534:	693b      	ldr	r3, [r7, #16]
 8003536:	f003 0304 	and.w	r3, r3, #4
 800353a:	2b00      	cmp	r3, #0
 800353c:	d02f      	beq.n	800359e <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003544:	2b00      	cmp	r3, #0
 8003546:	d02a      	beq.n	800359e <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800354c:	b29b      	uxth	r3, r3
 800354e:	2b00      	cmp	r3, #0
 8003550:	d018      	beq.n	8003584 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800355c:	b2d2      	uxtb	r2, r2
 800355e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003564:	1c5a      	adds	r2, r3, #1
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356e:	3b01      	subs	r3, #1
 8003570:	b29a      	uxth	r2, r3
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800357a:	b29b      	uxth	r3, r3
 800357c:	3b01      	subs	r3, #1
 800357e:	b29a      	uxth	r2, r3
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003588:	b29b      	uxth	r3, r3
 800358a:	2b00      	cmp	r3, #0
 800358c:	d14b      	bne.n	8003626 <I2C_Slave_ISR_IT+0x1dc>
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003594:	d047      	beq.n	8003626 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003596:	68f8      	ldr	r0, [r7, #12]
 8003598:	f000 f928 	bl	80037ec <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800359c:	e043      	b.n	8003626 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	f003 0308 	and.w	r3, r3, #8
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d009      	beq.n	80035bc <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d004      	beq.n	80035bc <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80035b2:	6939      	ldr	r1, [r7, #16]
 80035b4:	68f8      	ldr	r0, [r7, #12]
 80035b6:	f000 f895 	bl	80036e4 <I2C_ITAddrCplt>
 80035ba:	e035      	b.n	8003628 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f003 0302 	and.w	r3, r3, #2
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d030      	beq.n	8003628 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d02b      	beq.n	8003628 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035d4:	b29b      	uxth	r3, r3
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d018      	beq.n	800360c <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035de:	781a      	ldrb	r2, [r3, #0]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035ea:	1c5a      	adds	r2, r3, #1
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035f4:	b29b      	uxth	r3, r3
 80035f6:	3b01      	subs	r3, #1
 80035f8:	b29a      	uxth	r2, r3
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003602:	3b01      	subs	r3, #1
 8003604:	b29a      	uxth	r2, r3
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	851a      	strh	r2, [r3, #40]	; 0x28
 800360a:	e00d      	b.n	8003628 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003612:	d002      	beq.n	800361a <I2C_Slave_ISR_IT+0x1d0>
 8003614:	697b      	ldr	r3, [r7, #20]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d106      	bne.n	8003628 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800361a:	68f8      	ldr	r0, [r7, #12]
 800361c:	f000 f8e6 	bl	80037ec <I2C_ITSlaveSeqCplt>
 8003620:	e002      	b.n	8003628 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8003622:	bf00      	nop
 8003624:	e000      	b.n	8003628 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8003626:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	2200      	movs	r2, #0
 800362c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3718      	adds	r7, #24
 8003636:	46bd      	mov	sp, r7
 8003638:	bd80      	pop	{r7, pc}
	...

0800363c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	b086      	sub	sp, #24
 8003640:	af02      	add	r7, sp, #8
 8003642:	60f8      	str	r0, [r7, #12]
 8003644:	4608      	mov	r0, r1
 8003646:	4611      	mov	r1, r2
 8003648:	461a      	mov	r2, r3
 800364a:	4603      	mov	r3, r0
 800364c:	817b      	strh	r3, [r7, #10]
 800364e:	460b      	mov	r3, r1
 8003650:	813b      	strh	r3, [r7, #8]
 8003652:	4613      	mov	r3, r2
 8003654:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003656:	88fb      	ldrh	r3, [r7, #6]
 8003658:	b2da      	uxtb	r2, r3
 800365a:	8979      	ldrh	r1, [r7, #10]
 800365c:	4b20      	ldr	r3, [pc, #128]	; (80036e0 <I2C_RequestMemoryRead+0xa4>)
 800365e:	9300      	str	r3, [sp, #0]
 8003660:	2300      	movs	r3, #0
 8003662:	68f8      	ldr	r0, [r7, #12]
 8003664:	f000 fd4e 	bl	8004104 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003668:	69fa      	ldr	r2, [r7, #28]
 800366a:	69b9      	ldr	r1, [r7, #24]
 800366c:	68f8      	ldr	r0, [r7, #12]
 800366e:	f000 fbec 	bl	8003e4a <I2C_WaitOnTXISFlagUntilTimeout>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d001      	beq.n	800367c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003678:	2301      	movs	r3, #1
 800367a:	e02c      	b.n	80036d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800367c:	88fb      	ldrh	r3, [r7, #6]
 800367e:	2b01      	cmp	r3, #1
 8003680:	d105      	bne.n	800368e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003682:	893b      	ldrh	r3, [r7, #8]
 8003684:	b2da      	uxtb	r2, r3
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	629a      	str	r2, [r3, #40]	; 0x28
 800368c:	e015      	b.n	80036ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800368e:	893b      	ldrh	r3, [r7, #8]
 8003690:	0a1b      	lsrs	r3, r3, #8
 8003692:	b29b      	uxth	r3, r3
 8003694:	b2da      	uxtb	r2, r3
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800369c:	69fa      	ldr	r2, [r7, #28]
 800369e:	69b9      	ldr	r1, [r7, #24]
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 fbd2 	bl	8003e4a <I2C_WaitOnTXISFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d001      	beq.n	80036b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80036ac:	2301      	movs	r3, #1
 80036ae:	e012      	b.n	80036d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80036b0:	893b      	ldrh	r3, [r7, #8]
 80036b2:	b2da      	uxtb	r2, r3
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80036ba:	69fb      	ldr	r3, [r7, #28]
 80036bc:	9300      	str	r3, [sp, #0]
 80036be:	69bb      	ldr	r3, [r7, #24]
 80036c0:	2200      	movs	r2, #0
 80036c2:	2140      	movs	r1, #64	; 0x40
 80036c4:	68f8      	ldr	r0, [r7, #12]
 80036c6:	f000 fb80 	bl	8003dca <I2C_WaitOnFlagUntilTimeout>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e000      	b.n	80036d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80036d4:	2300      	movs	r3, #0
}
 80036d6:	4618      	mov	r0, r3
 80036d8:	3710      	adds	r7, #16
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}
 80036de:	bf00      	nop
 80036e0:	80002000 	.word	0x80002000

080036e4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b084      	sub	sp, #16
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
 80036ec:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036f4:	b2db      	uxtb	r3, r3
 80036f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80036fa:	2b28      	cmp	r3, #40	; 0x28
 80036fc:	d16a      	bne.n	80037d4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	681b      	ldr	r3, [r3, #0]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	0c1b      	lsrs	r3, r3, #16
 8003706:	b2db      	uxtb	r3, r3
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	699b      	ldr	r3, [r3, #24]
 8003714:	0c1b      	lsrs	r3, r3, #16
 8003716:	b29b      	uxth	r3, r3
 8003718:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800371c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	689b      	ldr	r3, [r3, #8]
 8003724:	b29b      	uxth	r3, r3
 8003726:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800372a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
 8003732:	b29b      	uxth	r3, r3
 8003734:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003738:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	2b02      	cmp	r3, #2
 8003740:	d138      	bne.n	80037b4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003742:	897b      	ldrh	r3, [r7, #10]
 8003744:	09db      	lsrs	r3, r3, #7
 8003746:	b29a      	uxth	r2, r3
 8003748:	89bb      	ldrh	r3, [r7, #12]
 800374a:	4053      	eors	r3, r2
 800374c:	b29b      	uxth	r3, r3
 800374e:	f003 0306 	and.w	r3, r3, #6
 8003752:	2b00      	cmp	r3, #0
 8003754:	d11c      	bne.n	8003790 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003756:	897b      	ldrh	r3, [r7, #10]
 8003758:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800375e:	1c5a      	adds	r2, r3, #1
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003768:	2b02      	cmp	r3, #2
 800376a:	d13b      	bne.n	80037e4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	2200      	movs	r2, #0
 8003770:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	2208      	movs	r2, #8
 8003778:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	2200      	movs	r2, #0
 800377e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003782:	89ba      	ldrh	r2, [r7, #12]
 8003784:	7bfb      	ldrb	r3, [r7, #15]
 8003786:	4619      	mov	r1, r3
 8003788:	6878      	ldr	r0, [r7, #4]
 800378a:	f7ff fe32 	bl	80033f2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800378e:	e029      	b.n	80037e4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003790:	893b      	ldrh	r3, [r7, #8]
 8003792:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003794:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003798:	6878      	ldr	r0, [r7, #4]
 800379a:	f000 fce5 	bl	8004168 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	2200      	movs	r2, #0
 80037a2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80037a6:	89ba      	ldrh	r2, [r7, #12]
 80037a8:	7bfb      	ldrb	r3, [r7, #15]
 80037aa:	4619      	mov	r1, r3
 80037ac:	6878      	ldr	r0, [r7, #4]
 80037ae:	f7ff fe20 	bl	80033f2 <HAL_I2C_AddrCallback>
}
 80037b2:	e017      	b.n	80037e4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80037b4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80037b8:	6878      	ldr	r0, [r7, #4]
 80037ba:	f000 fcd5 	bl	8004168 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2200      	movs	r2, #0
 80037c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80037c6:	89ba      	ldrh	r2, [r7, #12]
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	4619      	mov	r1, r3
 80037cc:	6878      	ldr	r0, [r7, #4]
 80037ce:	f7ff fe10 	bl	80033f2 <HAL_I2C_AddrCallback>
}
 80037d2:	e007      	b.n	80037e4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	2208      	movs	r2, #8
 80037da:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80037e4:	bf00      	nop
 80037e6:	3710      	adds	r7, #16
 80037e8:	46bd      	mov	sp, r7
 80037ea:	bd80      	pop	{r7, pc}

080037ec <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b084      	sub	sp, #16
 80037f0:	af00      	add	r7, sp, #0
 80037f2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2200      	movs	r2, #0
 8003800:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d008      	beq.n	8003820 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800381c:	601a      	str	r2, [r3, #0]
 800381e:	e00c      	b.n	800383a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003826:	2b00      	cmp	r3, #0
 8003828:	d007      	beq.n	800383a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681a      	ldr	r2, [r3, #0]
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003838:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003840:	b2db      	uxtb	r3, r3
 8003842:	2b29      	cmp	r3, #41	; 0x29
 8003844:	d112      	bne.n	800386c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	2228      	movs	r2, #40	; 0x28
 800384a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2221      	movs	r2, #33	; 0x21
 8003852:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003854:	2101      	movs	r1, #1
 8003856:	6878      	ldr	r0, [r7, #4]
 8003858:	f000 fc86 	bl	8004168 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2200      	movs	r2, #0
 8003860:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003864:	6878      	ldr	r0, [r7, #4]
 8003866:	f7ff fdb0 	bl	80033ca <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800386a:	e017      	b.n	800389c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b2a      	cmp	r3, #42	; 0x2a
 8003876:	d111      	bne.n	800389c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	2228      	movs	r2, #40	; 0x28
 800387c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	2222      	movs	r2, #34	; 0x22
 8003884:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003886:	2102      	movs	r1, #2
 8003888:	6878      	ldr	r0, [r7, #4]
 800388a:	f000 fc6d 	bl	8004168 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	2200      	movs	r2, #0
 8003892:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f7ff fda1 	bl	80033de <HAL_I2C_SlaveRxCpltCallback>
}
 800389c:	bf00      	nop
 800389e:	3710      	adds	r7, #16
 80038a0:	46bd      	mov	sp, r7
 80038a2:	bd80      	pop	{r7, pc}

080038a4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	b086      	sub	sp, #24
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80038c0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	2220      	movs	r2, #32
 80038c8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80038ca:	7bfb      	ldrb	r3, [r7, #15]
 80038cc:	2b21      	cmp	r3, #33	; 0x21
 80038ce:	d002      	beq.n	80038d6 <I2C_ITSlaveCplt+0x32>
 80038d0:	7bfb      	ldrb	r3, [r7, #15]
 80038d2:	2b29      	cmp	r3, #41	; 0x29
 80038d4:	d108      	bne.n	80038e8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80038d6:	f248 0101 	movw	r1, #32769	; 0x8001
 80038da:	6878      	ldr	r0, [r7, #4]
 80038dc:	f000 fc44 	bl	8004168 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2221      	movs	r2, #33	; 0x21
 80038e4:	631a      	str	r2, [r3, #48]	; 0x30
 80038e6:	e00d      	b.n	8003904 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
 80038ea:	2b22      	cmp	r3, #34	; 0x22
 80038ec:	d002      	beq.n	80038f4 <I2C_ITSlaveCplt+0x50>
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
 80038f0:	2b2a      	cmp	r3, #42	; 0x2a
 80038f2:	d107      	bne.n	8003904 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 80038f4:	f248 0102 	movw	r1, #32770	; 0x8002
 80038f8:	6878      	ldr	r0, [r7, #4]
 80038fa:	f000 fc35 	bl	8004168 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2222      	movs	r2, #34	; 0x22
 8003902:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	685a      	ldr	r2, [r3, #4]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003912:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6859      	ldr	r1, [r3, #4]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	4b62      	ldr	r3, [pc, #392]	; (8003aa8 <I2C_ITSlaveCplt+0x204>)
 8003920:	400b      	ands	r3, r1
 8003922:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003924:	6878      	ldr	r0, [r7, #4]
 8003926:	f000 fa0e 	bl	8003d46 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800392a:	693b      	ldr	r3, [r7, #16]
 800392c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d013      	beq.n	800395c <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	681a      	ldr	r2, [r3, #0]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003942:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003948:	2b00      	cmp	r3, #0
 800394a:	d01f      	beq.n	800398c <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	b29a      	uxth	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	855a      	strh	r2, [r3, #42]	; 0x2a
 800395a:	e017      	b.n	800398c <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800395c:	693b      	ldr	r3, [r7, #16]
 800395e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003962:	2b00      	cmp	r3, #0
 8003964:	d012      	beq.n	800398c <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	681a      	ldr	r2, [r3, #0]
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003974:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800397a:	2b00      	cmp	r3, #0
 800397c:	d006      	beq.n	800398c <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	b29a      	uxth	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800398c:	697b      	ldr	r3, [r7, #20]
 800398e:	f003 0304 	and.w	r3, r3, #4
 8003992:	2b00      	cmp	r3, #0
 8003994:	d020      	beq.n	80039d8 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f023 0304 	bic.w	r3, r3, #4
 800399c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039a8:	b2d2      	uxtb	r2, r2
 80039aa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b0:	1c5a      	adds	r2, r3, #1
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d00c      	beq.n	80039d8 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039ce:	b29b      	uxth	r3, r3
 80039d0:	3b01      	subs	r3, #1
 80039d2:	b29a      	uxth	r2, r3
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039dc:	b29b      	uxth	r3, r3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d005      	beq.n	80039ee <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039e6:	f043 0204 	orr.w	r2, r3, #4
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	2200      	movs	r2, #0
 80039f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d010      	beq.n	8003a26 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a08:	4619      	mov	r1, r3
 8003a0a:	6878      	ldr	r0, [r7, #4]
 8003a0c:	f000 f8a4 	bl	8003b58 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a16:	b2db      	uxtb	r3, r3
 8003a18:	2b28      	cmp	r3, #40	; 0x28
 8003a1a:	d141      	bne.n	8003aa0 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003a1c:	6979      	ldr	r1, [r7, #20]
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f846 	bl	8003ab0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003a24:	e03c      	b.n	8003aa0 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a2e:	d014      	beq.n	8003a5a <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff fedb 	bl	80037ec <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	4a1c      	ldr	r2, [pc, #112]	; (8003aac <I2C_ITSlaveCplt+0x208>)
 8003a3a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2220      	movs	r2, #32
 8003a40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2200      	movs	r2, #0
 8003a48:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003a52:	6878      	ldr	r0, [r7, #4]
 8003a54:	f7ff fcdb 	bl	800340e <HAL_I2C_ListenCpltCallback>
}
 8003a58:	e022      	b.n	8003aa0 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003a60:	b2db      	uxtb	r3, r3
 8003a62:	2b22      	cmp	r3, #34	; 0x22
 8003a64:	d10e      	bne.n	8003a84 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2200      	movs	r2, #0
 8003a72:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2200      	movs	r2, #0
 8003a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003a7c:	6878      	ldr	r0, [r7, #4]
 8003a7e:	f7ff fcae 	bl	80033de <HAL_I2C_SlaveRxCpltCallback>
}
 8003a82:	e00d      	b.n	8003aa0 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2220      	movs	r2, #32
 8003a88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2200      	movs	r2, #0
 8003a96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003a9a:	6878      	ldr	r0, [r7, #4]
 8003a9c:	f7ff fc95 	bl	80033ca <HAL_I2C_SlaveTxCpltCallback>
}
 8003aa0:	bf00      	nop
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	fe00e800 	.word	0xfe00e800
 8003aac:	ffff0000 	.word	0xffff0000

08003ab0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
 8003ab8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a25      	ldr	r2, [pc, #148]	; (8003b54 <I2C_ITListenCplt+0xa4>)
 8003abe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2220      	movs	r2, #32
 8003aca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	f003 0304 	and.w	r3, r3, #4
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d022      	beq.n	8003b2c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af0:	b2d2      	uxtb	r2, r2
 8003af2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003af8:	1c5a      	adds	r2, r3, #1
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d012      	beq.n	8003b2c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	b29a      	uxth	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b16:	b29b      	uxth	r3, r3
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b24:	f043 0204 	orr.w	r2, r3, #4
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b2c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003b30:	6878      	ldr	r0, [r7, #4]
 8003b32:	f000 fb19 	bl	8004168 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2210      	movs	r2, #16
 8003b3c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003b46:	6878      	ldr	r0, [r7, #4]
 8003b48:	f7ff fc61 	bl	800340e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003b4c:	bf00      	nop
 8003b4e:	3708      	adds	r7, #8
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bd80      	pop	{r7, pc}
 8003b54:	ffff0000 	.word	0xffff0000

08003b58 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b084      	sub	sp, #16
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	6078      	str	r0, [r7, #4]
 8003b60:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	4a5d      	ldr	r2, [pc, #372]	; (8003cec <I2C_ITError+0x194>)
 8003b76:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	431a      	orrs	r2, r3
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003b8a:	7bfb      	ldrb	r3, [r7, #15]
 8003b8c:	2b28      	cmp	r3, #40	; 0x28
 8003b8e:	d005      	beq.n	8003b9c <I2C_ITError+0x44>
 8003b90:	7bfb      	ldrb	r3, [r7, #15]
 8003b92:	2b29      	cmp	r3, #41	; 0x29
 8003b94:	d002      	beq.n	8003b9c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003b96:	7bfb      	ldrb	r3, [r7, #15]
 8003b98:	2b2a      	cmp	r3, #42	; 0x2a
 8003b9a:	d10b      	bne.n	8003bb4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003b9c:	2103      	movs	r1, #3
 8003b9e:	6878      	ldr	r0, [r7, #4]
 8003ba0:	f000 fae2 	bl	8004168 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2228      	movs	r2, #40	; 0x28
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	4a50      	ldr	r2, [pc, #320]	; (8003cf0 <I2C_ITError+0x198>)
 8003bb0:	635a      	str	r2, [r3, #52]	; 0x34
 8003bb2:	e011      	b.n	8003bd8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003bb4:	f248 0103 	movw	r1, #32771	; 0x8003
 8003bb8:	6878      	ldr	r0, [r7, #4]
 8003bba:	f000 fad5 	bl	8004168 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc4:	b2db      	uxtb	r3, r3
 8003bc6:	2b60      	cmp	r3, #96	; 0x60
 8003bc8:	d003      	beq.n	8003bd2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2220      	movs	r2, #32
 8003bce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bdc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d039      	beq.n	8003c5a <I2C_ITError+0x102>
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	2b11      	cmp	r3, #17
 8003bea:	d002      	beq.n	8003bf2 <I2C_ITError+0x9a>
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	2b21      	cmp	r3, #33	; 0x21
 8003bf0:	d133      	bne.n	8003c5a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003bfc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c00:	d107      	bne.n	8003c12 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	681a      	ldr	r2, [r3, #0]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c10:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c16:	4618      	mov	r0, r3
 8003c18:	f7fe fc99 	bl	800254e <HAL_DMA_GetState>
 8003c1c:	4603      	mov	r3, r0
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d017      	beq.n	8003c52 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c26:	4a33      	ldr	r2, [pc, #204]	; (8003cf4 <I2C_ITError+0x19c>)
 8003c28:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fe fc67 	bl	800250a <HAL_DMA_Abort_IT>
 8003c3c:	4603      	mov	r3, r0
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d04d      	beq.n	8003cde <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c48:	687a      	ldr	r2, [r7, #4]
 8003c4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003c4c:	4610      	mov	r0, r2
 8003c4e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c50:	e045      	b.n	8003cde <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003c52:	6878      	ldr	r0, [r7, #4]
 8003c54:	f000 f850 	bl	8003cf8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003c58:	e041      	b.n	8003cde <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d039      	beq.n	8003cd6 <I2C_ITError+0x17e>
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	2b12      	cmp	r3, #18
 8003c66:	d002      	beq.n	8003c6e <I2C_ITError+0x116>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	2b22      	cmp	r3, #34	; 0x22
 8003c6c:	d133      	bne.n	8003cd6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c7c:	d107      	bne.n	8003c8e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681a      	ldr	r2, [r3, #0]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c8c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c92:	4618      	mov	r0, r3
 8003c94:	f7fe fc5b 	bl	800254e <HAL_DMA_GetState>
 8003c98:	4603      	mov	r3, r0
 8003c9a:	2b01      	cmp	r3, #1
 8003c9c:	d017      	beq.n	8003cce <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ca2:	4a14      	ldr	r2, [pc, #80]	; (8003cf4 <I2C_ITError+0x19c>)
 8003ca4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cb2:	4618      	mov	r0, r3
 8003cb4:	f7fe fc29 	bl	800250a <HAL_DMA_Abort_IT>
 8003cb8:	4603      	mov	r3, r0
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d011      	beq.n	8003ce2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cc4:	687a      	ldr	r2, [r7, #4]
 8003cc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ccc:	e009      	b.n	8003ce2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003cce:	6878      	ldr	r0, [r7, #4]
 8003cd0:	f000 f812 	bl	8003cf8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003cd4:	e005      	b.n	8003ce2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003cd6:	6878      	ldr	r0, [r7, #4]
 8003cd8:	f000 f80e 	bl	8003cf8 <I2C_TreatErrorCallback>
  }
}
 8003cdc:	e002      	b.n	8003ce4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003cde:	bf00      	nop
 8003ce0:	e000      	b.n	8003ce4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ce2:	bf00      	nop
}
 8003ce4:	bf00      	nop
 8003ce6:	3710      	adds	r7, #16
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}
 8003cec:	ffff0000 	.word	0xffff0000
 8003cf0:	0800344b 	.word	0x0800344b
 8003cf4:	08003d8f 	.word	0x08003d8f

08003cf8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	2b60      	cmp	r3, #96	; 0x60
 8003d0a:	d10e      	bne.n	8003d2a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	2220      	movs	r2, #32
 8003d10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003d22:	6878      	ldr	r0, [r7, #4]
 8003d24:	f7ff fb87 	bl	8003436 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d28:	e009      	b.n	8003d3e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003d38:	6878      	ldr	r0, [r7, #4]
 8003d3a:	f7ff fb72 	bl	8003422 <HAL_I2C_ErrorCallback>
}
 8003d3e:	bf00      	nop
 8003d40:	3708      	adds	r7, #8
 8003d42:	46bd      	mov	sp, r7
 8003d44:	bd80      	pop	{r7, pc}

08003d46 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003d46:	b480      	push	{r7}
 8003d48:	b083      	sub	sp, #12
 8003d4a:	af00      	add	r7, sp, #0
 8003d4c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	699b      	ldr	r3, [r3, #24]
 8003d54:	f003 0302 	and.w	r3, r3, #2
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d103      	bne.n	8003d64 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	2200      	movs	r2, #0
 8003d62:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	f003 0301 	and.w	r3, r3, #1
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d007      	beq.n	8003d82 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699a      	ldr	r2, [r3, #24]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f042 0201 	orr.w	r2, r2, #1
 8003d80:	619a      	str	r2, [r3, #24]
  }
}
 8003d82:	bf00      	nop
 8003d84:	370c      	adds	r7, #12
 8003d86:	46bd      	mov	sp, r7
 8003d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8c:	4770      	bx	lr

08003d8e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003d8e:	b580      	push	{r7, lr}
 8003d90:	b084      	sub	sp, #16
 8003d92:	af00      	add	r7, sp, #0
 8003d94:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d9a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003da8:	2200      	movs	r2, #0
 8003daa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d003      	beq.n	8003dbc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003db8:	2200      	movs	r2, #0
 8003dba:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8003dbc:	68f8      	ldr	r0, [r7, #12]
 8003dbe:	f7ff ff9b 	bl	8003cf8 <I2C_TreatErrorCallback>
}
 8003dc2:	bf00      	nop
 8003dc4:	3710      	adds	r7, #16
 8003dc6:	46bd      	mov	sp, r7
 8003dc8:	bd80      	pop	{r7, pc}

08003dca <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8003dca:	b580      	push	{r7, lr}
 8003dcc:	b084      	sub	sp, #16
 8003dce:	af00      	add	r7, sp, #0
 8003dd0:	60f8      	str	r0, [r7, #12]
 8003dd2:	60b9      	str	r1, [r7, #8]
 8003dd4:	603b      	str	r3, [r7, #0]
 8003dd6:	4613      	mov	r3, r2
 8003dd8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003dda:	e022      	b.n	8003e22 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003de2:	d01e      	beq.n	8003e22 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003de4:	f7fe f9e0 	bl	80021a8 <HAL_GetTick>
 8003de8:	4602      	mov	r2, r0
 8003dea:	69bb      	ldr	r3, [r7, #24]
 8003dec:	1ad3      	subs	r3, r2, r3
 8003dee:	683a      	ldr	r2, [r7, #0]
 8003df0:	429a      	cmp	r2, r3
 8003df2:	d302      	bcc.n	8003dfa <I2C_WaitOnFlagUntilTimeout+0x30>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d113      	bne.n	8003e22 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003dfe:	f043 0220 	orr.w	r2, r3, #32
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	2220      	movs	r2, #32
 8003e0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8003e1e:	2301      	movs	r3, #1
 8003e20:	e00f      	b.n	8003e42 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	699a      	ldr	r2, [r3, #24]
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4013      	ands	r3, r2
 8003e2c:	68ba      	ldr	r2, [r7, #8]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	bf0c      	ite	eq
 8003e32:	2301      	moveq	r3, #1
 8003e34:	2300      	movne	r3, #0
 8003e36:	b2db      	uxtb	r3, r3
 8003e38:	461a      	mov	r2, r3
 8003e3a:	79fb      	ldrb	r3, [r7, #7]
 8003e3c:	429a      	cmp	r2, r3
 8003e3e:	d0cd      	beq.n	8003ddc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003e40:	2300      	movs	r3, #0
}
 8003e42:	4618      	mov	r0, r3
 8003e44:	3710      	adds	r7, #16
 8003e46:	46bd      	mov	sp, r7
 8003e48:	bd80      	pop	{r7, pc}

08003e4a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003e4a:	b580      	push	{r7, lr}
 8003e4c:	b084      	sub	sp, #16
 8003e4e:	af00      	add	r7, sp, #0
 8003e50:	60f8      	str	r0, [r7, #12]
 8003e52:	60b9      	str	r1, [r7, #8]
 8003e54:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003e56:	e02c      	b.n	8003eb2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003e58:	687a      	ldr	r2, [r7, #4]
 8003e5a:	68b9      	ldr	r1, [r7, #8]
 8003e5c:	68f8      	ldr	r0, [r7, #12]
 8003e5e:	f000 f871 	bl	8003f44 <I2C_IsErrorOccurred>
 8003e62:	4603      	mov	r3, r0
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d001      	beq.n	8003e6c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e02a      	b.n	8003ec2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e6c:	68bb      	ldr	r3, [r7, #8]
 8003e6e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e72:	d01e      	beq.n	8003eb2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e74:	f7fe f998 	bl	80021a8 <HAL_GetTick>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	1ad3      	subs	r3, r2, r3
 8003e7e:	68ba      	ldr	r2, [r7, #8]
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d302      	bcc.n	8003e8a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8003e84:	68bb      	ldr	r3, [r7, #8]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d113      	bne.n	8003eb2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e8e:	f043 0220 	orr.w	r2, r3, #32
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e007      	b.n	8003ec2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	f003 0302 	and.w	r3, r3, #2
 8003ebc:	2b02      	cmp	r3, #2
 8003ebe:	d1cb      	bne.n	8003e58 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3710      	adds	r7, #16
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}

08003eca <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8003eca:	b580      	push	{r7, lr}
 8003ecc:	b084      	sub	sp, #16
 8003ece:	af00      	add	r7, sp, #0
 8003ed0:	60f8      	str	r0, [r7, #12]
 8003ed2:	60b9      	str	r1, [r7, #8]
 8003ed4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003ed6:	e028      	b.n	8003f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ed8:	687a      	ldr	r2, [r7, #4]
 8003eda:	68b9      	ldr	r1, [r7, #8]
 8003edc:	68f8      	ldr	r0, [r7, #12]
 8003ede:	f000 f831 	bl	8003f44 <I2C_IsErrorOccurred>
 8003ee2:	4603      	mov	r3, r0
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d001      	beq.n	8003eec <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8003ee8:	2301      	movs	r3, #1
 8003eea:	e026      	b.n	8003f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eec:	f7fe f95c 	bl	80021a8 <HAL_GetTick>
 8003ef0:	4602      	mov	r2, r0
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	1ad3      	subs	r3, r2, r3
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d302      	bcc.n	8003f02 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d113      	bne.n	8003f2a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003f06:	f043 0220 	orr.w	r2, r3, #32
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2220      	movs	r2, #32
 8003f12:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	2200      	movs	r2, #0
 8003f1a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	e007      	b.n	8003f3a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	699b      	ldr	r3, [r3, #24]
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b20      	cmp	r3, #32
 8003f36:	d1cf      	bne.n	8003ed8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8003f38:	2300      	movs	r3, #0
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	3710      	adds	r7, #16
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	bd80      	pop	{r7, pc}
	...

08003f44 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f44:	b580      	push	{r7, lr}
 8003f46:	b08a      	sub	sp, #40	; 0x28
 8003f48:	af00      	add	r7, sp, #0
 8003f4a:	60f8      	str	r0, [r7, #12]
 8003f4c:	60b9      	str	r1, [r7, #8]
 8003f4e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f50:	2300      	movs	r3, #0
 8003f52:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	699b      	ldr	r3, [r3, #24]
 8003f5c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8003f66:	69bb      	ldr	r3, [r7, #24]
 8003f68:	f003 0310 	and.w	r3, r3, #16
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d068      	beq.n	8004042 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	2210      	movs	r2, #16
 8003f76:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8003f78:	e049      	b.n	800400e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f80:	d045      	beq.n	800400e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003f82:	f7fe f911 	bl	80021a8 <HAL_GetTick>
 8003f86:	4602      	mov	r2, r0
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	1ad3      	subs	r3, r2, r3
 8003f8c:	68ba      	ldr	r2, [r7, #8]
 8003f8e:	429a      	cmp	r2, r3
 8003f90:	d302      	bcc.n	8003f98 <I2C_IsErrorOccurred+0x54>
 8003f92:	68bb      	ldr	r3, [r7, #8]
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d13a      	bne.n	800400e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	685b      	ldr	r3, [r3, #4]
 8003f9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003fa2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003faa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	699b      	ldr	r3, [r3, #24]
 8003fb2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003fb6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fba:	d121      	bne.n	8004000 <I2C_IsErrorOccurred+0xbc>
 8003fbc:	697b      	ldr	r3, [r7, #20]
 8003fbe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003fc2:	d01d      	beq.n	8004000 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8003fc4:	7cfb      	ldrb	r3, [r7, #19]
 8003fc6:	2b20      	cmp	r3, #32
 8003fc8:	d01a      	beq.n	8004000 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	685a      	ldr	r2, [r3, #4]
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003fd8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8003fda:	f7fe f8e5 	bl	80021a8 <HAL_GetTick>
 8003fde:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8003fe0:	e00e      	b.n	8004000 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8003fe2:	f7fe f8e1 	bl	80021a8 <HAL_GetTick>
 8003fe6:	4602      	mov	r2, r0
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	1ad3      	subs	r3, r2, r3
 8003fec:	2b19      	cmp	r3, #25
 8003fee:	d907      	bls.n	8004000 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8003ff0:	6a3b      	ldr	r3, [r7, #32]
 8003ff2:	f043 0320 	orr.w	r3, r3, #32
 8003ff6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8003ffe:	e006      	b.n	800400e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	699b      	ldr	r3, [r3, #24]
 8004006:	f003 0320 	and.w	r3, r3, #32
 800400a:	2b20      	cmp	r3, #32
 800400c:	d1e9      	bne.n	8003fe2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	699b      	ldr	r3, [r3, #24]
 8004014:	f003 0320 	and.w	r3, r3, #32
 8004018:	2b20      	cmp	r3, #32
 800401a:	d003      	beq.n	8004024 <I2C_IsErrorOccurred+0xe0>
 800401c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004020:	2b00      	cmp	r3, #0
 8004022:	d0aa      	beq.n	8003f7a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004024:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004028:	2b00      	cmp	r3, #0
 800402a:	d103      	bne.n	8004034 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	2220      	movs	r2, #32
 8004032:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004034:	6a3b      	ldr	r3, [r7, #32]
 8004036:	f043 0304 	orr.w	r3, r3, #4
 800403a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	699b      	ldr	r3, [r3, #24]
 8004048:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800404a:	69bb      	ldr	r3, [r7, #24]
 800404c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00b      	beq.n	800406c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004054:	6a3b      	ldr	r3, [r7, #32]
 8004056:	f043 0301 	orr.w	r3, r3, #1
 800405a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004064:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004066:	2301      	movs	r3, #1
 8004068:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800406c:	69bb      	ldr	r3, [r7, #24]
 800406e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00b      	beq.n	800408e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004076:	6a3b      	ldr	r3, [r7, #32]
 8004078:	f043 0308 	orr.w	r3, r3, #8
 800407c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004086:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800408e:	69bb      	ldr	r3, [r7, #24]
 8004090:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00b      	beq.n	80040b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004098:	6a3b      	ldr	r3, [r7, #32]
 800409a:	f043 0302 	orr.w	r3, r3, #2
 800409e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80040a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80040aa:	2301      	movs	r3, #1
 80040ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80040b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	d01c      	beq.n	80040f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f7ff fe44 	bl	8003d46 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	6859      	ldr	r1, [r3, #4]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	4b0d      	ldr	r3, [pc, #52]	; (8004100 <I2C_IsErrorOccurred+0x1bc>)
 80040ca:	400b      	ands	r3, r1
 80040cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040d2:	6a3b      	ldr	r3, [r7, #32]
 80040d4:	431a      	orrs	r2, r3
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	2200      	movs	r2, #0
 80040e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	2200      	movs	r2, #0
 80040ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80040f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80040f6:	4618      	mov	r0, r3
 80040f8:	3728      	adds	r7, #40	; 0x28
 80040fa:	46bd      	mov	sp, r7
 80040fc:	bd80      	pop	{r7, pc}
 80040fe:	bf00      	nop
 8004100:	fe00e800 	.word	0xfe00e800

08004104 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004104:	b480      	push	{r7}
 8004106:	b087      	sub	sp, #28
 8004108:	af00      	add	r7, sp, #0
 800410a:	60f8      	str	r0, [r7, #12]
 800410c:	607b      	str	r3, [r7, #4]
 800410e:	460b      	mov	r3, r1
 8004110:	817b      	strh	r3, [r7, #10]
 8004112:	4613      	mov	r3, r2
 8004114:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004116:	897b      	ldrh	r3, [r7, #10]
 8004118:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800411c:	7a7b      	ldrb	r3, [r7, #9]
 800411e:	041b      	lsls	r3, r3, #16
 8004120:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004124:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800412a:	6a3b      	ldr	r3, [r7, #32]
 800412c:	4313      	orrs	r3, r2
 800412e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004132:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	685a      	ldr	r2, [r3, #4]
 800413a:	6a3b      	ldr	r3, [r7, #32]
 800413c:	0d5b      	lsrs	r3, r3, #21
 800413e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004142:	4b08      	ldr	r3, [pc, #32]	; (8004164 <I2C_TransferConfig+0x60>)
 8004144:	430b      	orrs	r3, r1
 8004146:	43db      	mvns	r3, r3
 8004148:	ea02 0103 	and.w	r1, r2, r3
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	697a      	ldr	r2, [r7, #20]
 8004152:	430a      	orrs	r2, r1
 8004154:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004156:	bf00      	nop
 8004158:	371c      	adds	r7, #28
 800415a:	46bd      	mov	sp, r7
 800415c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004160:	4770      	bx	lr
 8004162:	bf00      	nop
 8004164:	03ff63ff 	.word	0x03ff63ff

08004168 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
 8004170:	460b      	mov	r3, r1
 8004172:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004174:	2300      	movs	r3, #0
 8004176:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004178:	887b      	ldrh	r3, [r7, #2]
 800417a:	f003 0301 	and.w	r3, r3, #1
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00f      	beq.n	80041a2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004188:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004190:	b2db      	uxtb	r3, r3
 8004192:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004196:	2b28      	cmp	r3, #40	; 0x28
 8004198:	d003      	beq.n	80041a2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80041a0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80041a2:	887b      	ldrh	r3, [r7, #2]
 80041a4:	f003 0302 	and.w	r3, r3, #2
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d00f      	beq.n	80041cc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80041b2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80041ba:	b2db      	uxtb	r3, r3
 80041bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80041c0:	2b28      	cmp	r3, #40	; 0x28
 80041c2:	d003      	beq.n	80041cc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80041ca:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80041cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	da03      	bge.n	80041dc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80041da:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80041dc:	887b      	ldrh	r3, [r7, #2]
 80041de:	2b10      	cmp	r3, #16
 80041e0:	d103      	bne.n	80041ea <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80041e8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80041ea:	887b      	ldrh	r3, [r7, #2]
 80041ec:	2b20      	cmp	r3, #32
 80041ee:	d103      	bne.n	80041f8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	f043 0320 	orr.w	r3, r3, #32
 80041f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80041f8:	887b      	ldrh	r3, [r7, #2]
 80041fa:	2b40      	cmp	r3, #64	; 0x40
 80041fc:	d103      	bne.n	8004206 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004204:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	6819      	ldr	r1, [r3, #0]
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	43da      	mvns	r2, r3
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	400a      	ands	r2, r1
 8004216:	601a      	str	r2, [r3, #0]
}
 8004218:	bf00      	nop
 800421a:	3714      	adds	r7, #20
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004224:	b480      	push	{r7}
 8004226:	b083      	sub	sp, #12
 8004228:	af00      	add	r7, sp, #0
 800422a:	6078      	str	r0, [r7, #4]
 800422c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004234:	b2db      	uxtb	r3, r3
 8004236:	2b20      	cmp	r3, #32
 8004238:	d138      	bne.n	80042ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004244:	2302      	movs	r3, #2
 8004246:	e032      	b.n	80042ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	2201      	movs	r2, #1
 800424c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2224      	movs	r2, #36	; 0x24
 8004254:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	681a      	ldr	r2, [r3, #0]
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f022 0201 	bic.w	r2, r2, #1
 8004266:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	681a      	ldr	r2, [r3, #0]
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004276:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	6819      	ldr	r1, [r3, #0]
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	683a      	ldr	r2, [r7, #0]
 8004284:	430a      	orrs	r2, r1
 8004286:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	681a      	ldr	r2, [r3, #0]
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	f042 0201 	orr.w	r2, r2, #1
 8004296:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2220      	movs	r2, #32
 800429c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80042a8:	2300      	movs	r3, #0
 80042aa:	e000      	b.n	80042ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80042ac:	2302      	movs	r3, #2
  }
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	370c      	adds	r7, #12
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr

080042ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80042ba:	b480      	push	{r7}
 80042bc:	b085      	sub	sp, #20
 80042be:	af00      	add	r7, sp, #0
 80042c0:	6078      	str	r0, [r7, #4]
 80042c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80042ca:	b2db      	uxtb	r3, r3
 80042cc:	2b20      	cmp	r3, #32
 80042ce:	d139      	bne.n	8004344 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d101      	bne.n	80042de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80042da:	2302      	movs	r3, #2
 80042dc:	e033      	b.n	8004346 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2224      	movs	r2, #36	; 0x24
 80042ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	681a      	ldr	r2, [r3, #0]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0201 	bic.w	r2, r2, #1
 80042fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800430c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	021b      	lsls	r3, r3, #8
 8004312:	68fa      	ldr	r2, [r7, #12]
 8004314:	4313      	orrs	r3, r2
 8004316:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	68fa      	ldr	r2, [r7, #12]
 800431e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f042 0201 	orr.w	r2, r2, #1
 800432e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	2220      	movs	r2, #32
 8004334:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	2200      	movs	r2, #0
 800433c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004340:	2300      	movs	r3, #0
 8004342:	e000      	b.n	8004346 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004344:	2302      	movs	r3, #2
  }
}
 8004346:	4618      	mov	r0, r3
 8004348:	3714      	adds	r7, #20
 800434a:	46bd      	mov	sp, r7
 800434c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004350:	4770      	bx	lr

08004352 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004352:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004354:	b08f      	sub	sp, #60	; 0x3c
 8004356:	af0a      	add	r7, sp, #40	; 0x28
 8004358:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	2b00      	cmp	r3, #0
 800435e:	d101      	bne.n	8004364 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004360:	2301      	movs	r3, #1
 8004362:	e116      	b.n	8004592 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004370:	b2db      	uxtb	r3, r3
 8004372:	2b00      	cmp	r3, #0
 8004374:	d106      	bne.n	8004384 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2200      	movs	r2, #0
 800437a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800437e:	6878      	ldr	r0, [r7, #4]
 8004380:	f7fd fe1e 	bl	8001fc0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2203      	movs	r2, #3
 8004388:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004390:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004394:	2b00      	cmp	r3, #0
 8004396:	d102      	bne.n	800439e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	2200      	movs	r2, #0
 800439c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f003 fc6a 	bl	8007c7c <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	603b      	str	r3, [r7, #0]
 80043ae:	687e      	ldr	r6, [r7, #4]
 80043b0:	466d      	mov	r5, sp
 80043b2:	f106 0410 	add.w	r4, r6, #16
 80043b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80043bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80043be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80043c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80043c6:	1d33      	adds	r3, r6, #4
 80043c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80043ca:	6838      	ldr	r0, [r7, #0]
 80043cc:	f003 fbfe 	bl	8007bcc <USB_CoreInit>
 80043d0:	4603      	mov	r3, r0
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	2202      	movs	r2, #2
 80043da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80043de:	2301      	movs	r3, #1
 80043e0:	e0d7      	b.n	8004592 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	2100      	movs	r1, #0
 80043e8:	4618      	mov	r0, r3
 80043ea:	f003 fc58 	bl	8007c9e <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80043ee:	2300      	movs	r3, #0
 80043f0:	73fb      	strb	r3, [r7, #15]
 80043f2:	e04a      	b.n	800448a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80043f4:	7bfa      	ldrb	r2, [r7, #15]
 80043f6:	6879      	ldr	r1, [r7, #4]
 80043f8:	4613      	mov	r3, r2
 80043fa:	00db      	lsls	r3, r3, #3
 80043fc:	4413      	add	r3, r2
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	440b      	add	r3, r1
 8004402:	333d      	adds	r3, #61	; 0x3d
 8004404:	2201      	movs	r2, #1
 8004406:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004408:	7bfa      	ldrb	r2, [r7, #15]
 800440a:	6879      	ldr	r1, [r7, #4]
 800440c:	4613      	mov	r3, r2
 800440e:	00db      	lsls	r3, r3, #3
 8004410:	4413      	add	r3, r2
 8004412:	009b      	lsls	r3, r3, #2
 8004414:	440b      	add	r3, r1
 8004416:	333c      	adds	r3, #60	; 0x3c
 8004418:	7bfa      	ldrb	r2, [r7, #15]
 800441a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800441c:	7bfa      	ldrb	r2, [r7, #15]
 800441e:	7bfb      	ldrb	r3, [r7, #15]
 8004420:	b298      	uxth	r0, r3
 8004422:	6879      	ldr	r1, [r7, #4]
 8004424:	4613      	mov	r3, r2
 8004426:	00db      	lsls	r3, r3, #3
 8004428:	4413      	add	r3, r2
 800442a:	009b      	lsls	r3, r3, #2
 800442c:	440b      	add	r3, r1
 800442e:	3344      	adds	r3, #68	; 0x44
 8004430:	4602      	mov	r2, r0
 8004432:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004434:	7bfa      	ldrb	r2, [r7, #15]
 8004436:	6879      	ldr	r1, [r7, #4]
 8004438:	4613      	mov	r3, r2
 800443a:	00db      	lsls	r3, r3, #3
 800443c:	4413      	add	r3, r2
 800443e:	009b      	lsls	r3, r3, #2
 8004440:	440b      	add	r3, r1
 8004442:	3340      	adds	r3, #64	; 0x40
 8004444:	2200      	movs	r2, #0
 8004446:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004448:	7bfa      	ldrb	r2, [r7, #15]
 800444a:	6879      	ldr	r1, [r7, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	00db      	lsls	r3, r3, #3
 8004450:	4413      	add	r3, r2
 8004452:	009b      	lsls	r3, r3, #2
 8004454:	440b      	add	r3, r1
 8004456:	3348      	adds	r3, #72	; 0x48
 8004458:	2200      	movs	r2, #0
 800445a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800445c:	7bfa      	ldrb	r2, [r7, #15]
 800445e:	6879      	ldr	r1, [r7, #4]
 8004460:	4613      	mov	r3, r2
 8004462:	00db      	lsls	r3, r3, #3
 8004464:	4413      	add	r3, r2
 8004466:	009b      	lsls	r3, r3, #2
 8004468:	440b      	add	r3, r1
 800446a:	334c      	adds	r3, #76	; 0x4c
 800446c:	2200      	movs	r2, #0
 800446e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004470:	7bfa      	ldrb	r2, [r7, #15]
 8004472:	6879      	ldr	r1, [r7, #4]
 8004474:	4613      	mov	r3, r2
 8004476:	00db      	lsls	r3, r3, #3
 8004478:	4413      	add	r3, r2
 800447a:	009b      	lsls	r3, r3, #2
 800447c:	440b      	add	r3, r1
 800447e:	3354      	adds	r3, #84	; 0x54
 8004480:	2200      	movs	r2, #0
 8004482:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004484:	7bfb      	ldrb	r3, [r7, #15]
 8004486:	3301      	adds	r3, #1
 8004488:	73fb      	strb	r3, [r7, #15]
 800448a:	7bfa      	ldrb	r2, [r7, #15]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	429a      	cmp	r2, r3
 8004492:	d3af      	bcc.n	80043f4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004494:	2300      	movs	r3, #0
 8004496:	73fb      	strb	r3, [r7, #15]
 8004498:	e044      	b.n	8004524 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800449a:	7bfa      	ldrb	r2, [r7, #15]
 800449c:	6879      	ldr	r1, [r7, #4]
 800449e:	4613      	mov	r3, r2
 80044a0:	00db      	lsls	r3, r3, #3
 80044a2:	4413      	add	r3, r2
 80044a4:	009b      	lsls	r3, r3, #2
 80044a6:	440b      	add	r3, r1
 80044a8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80044ac:	2200      	movs	r2, #0
 80044ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80044b0:	7bfa      	ldrb	r2, [r7, #15]
 80044b2:	6879      	ldr	r1, [r7, #4]
 80044b4:	4613      	mov	r3, r2
 80044b6:	00db      	lsls	r3, r3, #3
 80044b8:	4413      	add	r3, r2
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	440b      	add	r3, r1
 80044be:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80044c2:	7bfa      	ldrb	r2, [r7, #15]
 80044c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80044c6:	7bfa      	ldrb	r2, [r7, #15]
 80044c8:	6879      	ldr	r1, [r7, #4]
 80044ca:	4613      	mov	r3, r2
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	4413      	add	r3, r2
 80044d0:	009b      	lsls	r3, r3, #2
 80044d2:	440b      	add	r3, r1
 80044d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80044d8:	2200      	movs	r2, #0
 80044da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80044dc:	7bfa      	ldrb	r2, [r7, #15]
 80044de:	6879      	ldr	r1, [r7, #4]
 80044e0:	4613      	mov	r3, r2
 80044e2:	00db      	lsls	r3, r3, #3
 80044e4:	4413      	add	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	440b      	add	r3, r1
 80044ea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80044ee:	2200      	movs	r2, #0
 80044f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80044f2:	7bfa      	ldrb	r2, [r7, #15]
 80044f4:	6879      	ldr	r1, [r7, #4]
 80044f6:	4613      	mov	r3, r2
 80044f8:	00db      	lsls	r3, r3, #3
 80044fa:	4413      	add	r3, r2
 80044fc:	009b      	lsls	r3, r3, #2
 80044fe:	440b      	add	r3, r1
 8004500:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004504:	2200      	movs	r2, #0
 8004506:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004508:	7bfa      	ldrb	r2, [r7, #15]
 800450a:	6879      	ldr	r1, [r7, #4]
 800450c:	4613      	mov	r3, r2
 800450e:	00db      	lsls	r3, r3, #3
 8004510:	4413      	add	r3, r2
 8004512:	009b      	lsls	r3, r3, #2
 8004514:	440b      	add	r3, r1
 8004516:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800451a:	2200      	movs	r2, #0
 800451c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800451e:	7bfb      	ldrb	r3, [r7, #15]
 8004520:	3301      	adds	r3, #1
 8004522:	73fb      	strb	r3, [r7, #15]
 8004524:	7bfa      	ldrb	r2, [r7, #15]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	429a      	cmp	r2, r3
 800452c:	d3b5      	bcc.n	800449a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	603b      	str	r3, [r7, #0]
 8004534:	687e      	ldr	r6, [r7, #4]
 8004536:	466d      	mov	r5, sp
 8004538:	f106 0410 	add.w	r4, r6, #16
 800453c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800453e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004540:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004542:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004544:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004548:	e885 0003 	stmia.w	r5, {r0, r1}
 800454c:	1d33      	adds	r3, r6, #4
 800454e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004550:	6838      	ldr	r0, [r7, #0]
 8004552:	f003 fbf1 	bl	8007d38 <USB_DevInit>
 8004556:	4603      	mov	r3, r0
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2202      	movs	r2, #2
 8004560:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004564:	2301      	movs	r3, #1
 8004566:	e014      	b.n	8004592 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	2200      	movs	r2, #0
 800456c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2201      	movs	r2, #1
 8004574:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800457c:	2b01      	cmp	r3, #1
 800457e:	d102      	bne.n	8004586 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f000 f80b 	bl	800459c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f003 fdaf 	bl	80080ee <USB_DevDisconnect>

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800459c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	699b      	ldr	r3, [r3, #24]
 80045be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80045ca:	4b05      	ldr	r3, [pc, #20]	; (80045e0 <HAL_PCDEx_ActivateLPM+0x44>)
 80045cc:	4313      	orrs	r3, r2
 80045ce:	68fa      	ldr	r2, [r7, #12]
 80045d0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	3714      	adds	r7, #20
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr
 80045e0:	10000003 	.word	0x10000003

080045e4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80045e4:	b480      	push	{r7}
 80045e6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80045e8:	4b05      	ldr	r3, [pc, #20]	; (8004600 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045ea:	681b      	ldr	r3, [r3, #0]
 80045ec:	4a04      	ldr	r2, [pc, #16]	; (8004600 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80045ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045f2:	6013      	str	r3, [r2, #0]
}
 80045f4:	bf00      	nop
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40007000 	.word	0x40007000

08004604 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004604:	b580      	push	{r7, lr}
 8004606:	b086      	sub	sp, #24
 8004608:	af00      	add	r7, sp, #0
 800460a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800460c:	2300      	movs	r3, #0
 800460e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2b00      	cmp	r3, #0
 8004614:	d101      	bne.n	800461a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e291      	b.n	8004b3e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	f000 8087 	beq.w	8004736 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004628:	4b96      	ldr	r3, [pc, #600]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 800462a:	689b      	ldr	r3, [r3, #8]
 800462c:	f003 030c 	and.w	r3, r3, #12
 8004630:	2b04      	cmp	r3, #4
 8004632:	d00c      	beq.n	800464e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004634:	4b93      	ldr	r3, [pc, #588]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f003 030c 	and.w	r3, r3, #12
 800463c:	2b08      	cmp	r3, #8
 800463e:	d112      	bne.n	8004666 <HAL_RCC_OscConfig+0x62>
 8004640:	4b90      	ldr	r3, [pc, #576]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004648:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800464c:	d10b      	bne.n	8004666 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800464e:	4b8d      	ldr	r3, [pc, #564]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 8004650:	681b      	ldr	r3, [r3, #0]
 8004652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004656:	2b00      	cmp	r3, #0
 8004658:	d06c      	beq.n	8004734 <HAL_RCC_OscConfig+0x130>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	2b00      	cmp	r3, #0
 8004660:	d168      	bne.n	8004734 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004662:	2301      	movs	r3, #1
 8004664:	e26b      	b.n	8004b3e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	685b      	ldr	r3, [r3, #4]
 800466a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800466e:	d106      	bne.n	800467e <HAL_RCC_OscConfig+0x7a>
 8004670:	4b84      	ldr	r3, [pc, #528]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	4a83      	ldr	r2, [pc, #524]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 8004676:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	e02e      	b.n	80046dc <HAL_RCC_OscConfig+0xd8>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	685b      	ldr	r3, [r3, #4]
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10c      	bne.n	80046a0 <HAL_RCC_OscConfig+0x9c>
 8004686:	4b7f      	ldr	r3, [pc, #508]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	4a7e      	ldr	r2, [pc, #504]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 800468c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	4b7c      	ldr	r3, [pc, #496]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a7b      	ldr	r2, [pc, #492]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 8004698:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800469c:	6013      	str	r3, [r2, #0]
 800469e:	e01d      	b.n	80046dc <HAL_RCC_OscConfig+0xd8>
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	685b      	ldr	r3, [r3, #4]
 80046a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80046a8:	d10c      	bne.n	80046c4 <HAL_RCC_OscConfig+0xc0>
 80046aa:	4b76      	ldr	r3, [pc, #472]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	4a75      	ldr	r2, [pc, #468]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 80046b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80046b4:	6013      	str	r3, [r2, #0]
 80046b6:	4b73      	ldr	r3, [pc, #460]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a72      	ldr	r2, [pc, #456]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 80046bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80046c0:	6013      	str	r3, [r2, #0]
 80046c2:	e00b      	b.n	80046dc <HAL_RCC_OscConfig+0xd8>
 80046c4:	4b6f      	ldr	r3, [pc, #444]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	4a6e      	ldr	r2, [pc, #440]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 80046ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046ce:	6013      	str	r3, [r2, #0]
 80046d0:	4b6c      	ldr	r3, [pc, #432]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	4a6b      	ldr	r2, [pc, #428]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 80046d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	685b      	ldr	r3, [r3, #4]
 80046e0:	2b00      	cmp	r3, #0
 80046e2:	d013      	beq.n	800470c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80046e4:	f7fd fd60 	bl	80021a8 <HAL_GetTick>
 80046e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046ea:	e008      	b.n	80046fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046ec:	f7fd fd5c 	bl	80021a8 <HAL_GetTick>
 80046f0:	4602      	mov	r2, r0
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	1ad3      	subs	r3, r2, r3
 80046f6:	2b64      	cmp	r3, #100	; 0x64
 80046f8:	d901      	bls.n	80046fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80046fa:	2303      	movs	r3, #3
 80046fc:	e21f      	b.n	8004b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046fe:	4b61      	ldr	r3, [pc, #388]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004706:	2b00      	cmp	r3, #0
 8004708:	d0f0      	beq.n	80046ec <HAL_RCC_OscConfig+0xe8>
 800470a:	e014      	b.n	8004736 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800470c:	f7fd fd4c 	bl	80021a8 <HAL_GetTick>
 8004710:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004712:	e008      	b.n	8004726 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004714:	f7fd fd48 	bl	80021a8 <HAL_GetTick>
 8004718:	4602      	mov	r2, r0
 800471a:	693b      	ldr	r3, [r7, #16]
 800471c:	1ad3      	subs	r3, r2, r3
 800471e:	2b64      	cmp	r3, #100	; 0x64
 8004720:	d901      	bls.n	8004726 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004722:	2303      	movs	r3, #3
 8004724:	e20b      	b.n	8004b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004726:	4b57      	ldr	r3, [pc, #348]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800472e:	2b00      	cmp	r3, #0
 8004730:	d1f0      	bne.n	8004714 <HAL_RCC_OscConfig+0x110>
 8004732:	e000      	b.n	8004736 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004734:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0302 	and.w	r3, r3, #2
 800473e:	2b00      	cmp	r3, #0
 8004740:	d069      	beq.n	8004816 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004742:	4b50      	ldr	r3, [pc, #320]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 8004744:	689b      	ldr	r3, [r3, #8]
 8004746:	f003 030c 	and.w	r3, r3, #12
 800474a:	2b00      	cmp	r3, #0
 800474c:	d00b      	beq.n	8004766 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800474e:	4b4d      	ldr	r3, [pc, #308]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 8004750:	689b      	ldr	r3, [r3, #8]
 8004752:	f003 030c 	and.w	r3, r3, #12
 8004756:	2b08      	cmp	r3, #8
 8004758:	d11c      	bne.n	8004794 <HAL_RCC_OscConfig+0x190>
 800475a:	4b4a      	ldr	r3, [pc, #296]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004762:	2b00      	cmp	r3, #0
 8004764:	d116      	bne.n	8004794 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004766:	4b47      	ldr	r3, [pc, #284]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 0302 	and.w	r3, r3, #2
 800476e:	2b00      	cmp	r3, #0
 8004770:	d005      	beq.n	800477e <HAL_RCC_OscConfig+0x17a>
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	2b01      	cmp	r3, #1
 8004778:	d001      	beq.n	800477e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800477a:	2301      	movs	r3, #1
 800477c:	e1df      	b.n	8004b3e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800477e:	4b41      	ldr	r3, [pc, #260]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
 800478a:	00db      	lsls	r3, r3, #3
 800478c:	493d      	ldr	r1, [pc, #244]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 800478e:	4313      	orrs	r3, r2
 8004790:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004792:	e040      	b.n	8004816 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d023      	beq.n	80047e4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800479c:	4b39      	ldr	r3, [pc, #228]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	4a38      	ldr	r2, [pc, #224]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 80047a2:	f043 0301 	orr.w	r3, r3, #1
 80047a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047a8:	f7fd fcfe 	bl	80021a8 <HAL_GetTick>
 80047ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047ae:	e008      	b.n	80047c2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047b0:	f7fd fcfa 	bl	80021a8 <HAL_GetTick>
 80047b4:	4602      	mov	r2, r0
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	1ad3      	subs	r3, r2, r3
 80047ba:	2b02      	cmp	r3, #2
 80047bc:	d901      	bls.n	80047c2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80047be:	2303      	movs	r3, #3
 80047c0:	e1bd      	b.n	8004b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80047c2:	4b30      	ldr	r3, [pc, #192]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f003 0302 	and.w	r3, r3, #2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d0f0      	beq.n	80047b0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80047ce:	4b2d      	ldr	r3, [pc, #180]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	00db      	lsls	r3, r3, #3
 80047dc:	4929      	ldr	r1, [pc, #164]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 80047de:	4313      	orrs	r3, r2
 80047e0:	600b      	str	r3, [r1, #0]
 80047e2:	e018      	b.n	8004816 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047e4:	4b27      	ldr	r3, [pc, #156]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	4a26      	ldr	r2, [pc, #152]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 80047ea:	f023 0301 	bic.w	r3, r3, #1
 80047ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047f0:	f7fd fcda 	bl	80021a8 <HAL_GetTick>
 80047f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047f6:	e008      	b.n	800480a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047f8:	f7fd fcd6 	bl	80021a8 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	693b      	ldr	r3, [r7, #16]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	2b02      	cmp	r3, #2
 8004804:	d901      	bls.n	800480a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004806:	2303      	movs	r3, #3
 8004808:	e199      	b.n	8004b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800480a:	4b1e      	ldr	r3, [pc, #120]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	f003 0302 	and.w	r3, r3, #2
 8004812:	2b00      	cmp	r3, #0
 8004814:	d1f0      	bne.n	80047f8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	f003 0308 	and.w	r3, r3, #8
 800481e:	2b00      	cmp	r3, #0
 8004820:	d038      	beq.n	8004894 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d019      	beq.n	800485e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800482a:	4b16      	ldr	r3, [pc, #88]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 800482c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800482e:	4a15      	ldr	r2, [pc, #84]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 8004830:	f043 0301 	orr.w	r3, r3, #1
 8004834:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004836:	f7fd fcb7 	bl	80021a8 <HAL_GetTick>
 800483a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800483c:	e008      	b.n	8004850 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800483e:	f7fd fcb3 	bl	80021a8 <HAL_GetTick>
 8004842:	4602      	mov	r2, r0
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	1ad3      	subs	r3, r2, r3
 8004848:	2b02      	cmp	r3, #2
 800484a:	d901      	bls.n	8004850 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800484c:	2303      	movs	r3, #3
 800484e:	e176      	b.n	8004b3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004850:	4b0c      	ldr	r3, [pc, #48]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 8004852:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d0f0      	beq.n	800483e <HAL_RCC_OscConfig+0x23a>
 800485c:	e01a      	b.n	8004894 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800485e:	4b09      	ldr	r3, [pc, #36]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 8004860:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004862:	4a08      	ldr	r2, [pc, #32]	; (8004884 <HAL_RCC_OscConfig+0x280>)
 8004864:	f023 0301 	bic.w	r3, r3, #1
 8004868:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800486a:	f7fd fc9d 	bl	80021a8 <HAL_GetTick>
 800486e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004870:	e00a      	b.n	8004888 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004872:	f7fd fc99 	bl	80021a8 <HAL_GetTick>
 8004876:	4602      	mov	r2, r0
 8004878:	693b      	ldr	r3, [r7, #16]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	2b02      	cmp	r3, #2
 800487e:	d903      	bls.n	8004888 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004880:	2303      	movs	r3, #3
 8004882:	e15c      	b.n	8004b3e <HAL_RCC_OscConfig+0x53a>
 8004884:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004888:	4b91      	ldr	r3, [pc, #580]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 800488a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800488c:	f003 0302 	and.w	r3, r3, #2
 8004890:	2b00      	cmp	r3, #0
 8004892:	d1ee      	bne.n	8004872 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f003 0304 	and.w	r3, r3, #4
 800489c:	2b00      	cmp	r3, #0
 800489e:	f000 80a4 	beq.w	80049ea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80048a2:	4b8b      	ldr	r3, [pc, #556]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 80048a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d10d      	bne.n	80048ca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80048ae:	4b88      	ldr	r3, [pc, #544]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 80048b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b2:	4a87      	ldr	r2, [pc, #540]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 80048b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048b8:	6413      	str	r3, [r2, #64]	; 0x40
 80048ba:	4b85      	ldr	r3, [pc, #532]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 80048bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048c2:	60bb      	str	r3, [r7, #8]
 80048c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80048c6:	2301      	movs	r3, #1
 80048c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048ca:	4b82      	ldr	r3, [pc, #520]	; (8004ad4 <HAL_RCC_OscConfig+0x4d0>)
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d118      	bne.n	8004908 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80048d6:	4b7f      	ldr	r3, [pc, #508]	; (8004ad4 <HAL_RCC_OscConfig+0x4d0>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	4a7e      	ldr	r2, [pc, #504]	; (8004ad4 <HAL_RCC_OscConfig+0x4d0>)
 80048dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048e2:	f7fd fc61 	bl	80021a8 <HAL_GetTick>
 80048e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048e8:	e008      	b.n	80048fc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ea:	f7fd fc5d 	bl	80021a8 <HAL_GetTick>
 80048ee:	4602      	mov	r2, r0
 80048f0:	693b      	ldr	r3, [r7, #16]
 80048f2:	1ad3      	subs	r3, r2, r3
 80048f4:	2b64      	cmp	r3, #100	; 0x64
 80048f6:	d901      	bls.n	80048fc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e120      	b.n	8004b3e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80048fc:	4b75      	ldr	r3, [pc, #468]	; (8004ad4 <HAL_RCC_OscConfig+0x4d0>)
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004904:	2b00      	cmp	r3, #0
 8004906:	d0f0      	beq.n	80048ea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689b      	ldr	r3, [r3, #8]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d106      	bne.n	800491e <HAL_RCC_OscConfig+0x31a>
 8004910:	4b6f      	ldr	r3, [pc, #444]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 8004912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004914:	4a6e      	ldr	r2, [pc, #440]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 8004916:	f043 0301 	orr.w	r3, r3, #1
 800491a:	6713      	str	r3, [r2, #112]	; 0x70
 800491c:	e02d      	b.n	800497a <HAL_RCC_OscConfig+0x376>
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	689b      	ldr	r3, [r3, #8]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d10c      	bne.n	8004940 <HAL_RCC_OscConfig+0x33c>
 8004926:	4b6a      	ldr	r3, [pc, #424]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 8004928:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800492a:	4a69      	ldr	r2, [pc, #420]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 800492c:	f023 0301 	bic.w	r3, r3, #1
 8004930:	6713      	str	r3, [r2, #112]	; 0x70
 8004932:	4b67      	ldr	r3, [pc, #412]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 8004934:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004936:	4a66      	ldr	r2, [pc, #408]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 8004938:	f023 0304 	bic.w	r3, r3, #4
 800493c:	6713      	str	r3, [r2, #112]	; 0x70
 800493e:	e01c      	b.n	800497a <HAL_RCC_OscConfig+0x376>
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	2b05      	cmp	r3, #5
 8004946:	d10c      	bne.n	8004962 <HAL_RCC_OscConfig+0x35e>
 8004948:	4b61      	ldr	r3, [pc, #388]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 800494a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800494c:	4a60      	ldr	r2, [pc, #384]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 800494e:	f043 0304 	orr.w	r3, r3, #4
 8004952:	6713      	str	r3, [r2, #112]	; 0x70
 8004954:	4b5e      	ldr	r3, [pc, #376]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 8004956:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004958:	4a5d      	ldr	r2, [pc, #372]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 800495a:	f043 0301 	orr.w	r3, r3, #1
 800495e:	6713      	str	r3, [r2, #112]	; 0x70
 8004960:	e00b      	b.n	800497a <HAL_RCC_OscConfig+0x376>
 8004962:	4b5b      	ldr	r3, [pc, #364]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 8004964:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004966:	4a5a      	ldr	r2, [pc, #360]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 8004968:	f023 0301 	bic.w	r3, r3, #1
 800496c:	6713      	str	r3, [r2, #112]	; 0x70
 800496e:	4b58      	ldr	r3, [pc, #352]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 8004970:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004972:	4a57      	ldr	r2, [pc, #348]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 8004974:	f023 0304 	bic.w	r3, r3, #4
 8004978:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	689b      	ldr	r3, [r3, #8]
 800497e:	2b00      	cmp	r3, #0
 8004980:	d015      	beq.n	80049ae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004982:	f7fd fc11 	bl	80021a8 <HAL_GetTick>
 8004986:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004988:	e00a      	b.n	80049a0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800498a:	f7fd fc0d 	bl	80021a8 <HAL_GetTick>
 800498e:	4602      	mov	r2, r0
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	1ad3      	subs	r3, r2, r3
 8004994:	f241 3288 	movw	r2, #5000	; 0x1388
 8004998:	4293      	cmp	r3, r2
 800499a:	d901      	bls.n	80049a0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 800499c:	2303      	movs	r3, #3
 800499e:	e0ce      	b.n	8004b3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80049a0:	4b4b      	ldr	r3, [pc, #300]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 80049a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049a4:	f003 0302 	and.w	r3, r3, #2
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d0ee      	beq.n	800498a <HAL_RCC_OscConfig+0x386>
 80049ac:	e014      	b.n	80049d8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80049ae:	f7fd fbfb 	bl	80021a8 <HAL_GetTick>
 80049b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049b4:	e00a      	b.n	80049cc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80049b6:	f7fd fbf7 	bl	80021a8 <HAL_GetTick>
 80049ba:	4602      	mov	r2, r0
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80049c4:	4293      	cmp	r3, r2
 80049c6:	d901      	bls.n	80049cc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80049c8:	2303      	movs	r3, #3
 80049ca:	e0b8      	b.n	8004b3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80049cc:	4b40      	ldr	r3, [pc, #256]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 80049ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80049d0:	f003 0302 	and.w	r3, r3, #2
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d1ee      	bne.n	80049b6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80049d8:	7dfb      	ldrb	r3, [r7, #23]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d105      	bne.n	80049ea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049de:	4b3c      	ldr	r3, [pc, #240]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 80049e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049e2:	4a3b      	ldr	r2, [pc, #236]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 80049e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	699b      	ldr	r3, [r3, #24]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	f000 80a4 	beq.w	8004b3c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049f4:	4b36      	ldr	r3, [pc, #216]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 80049f6:	689b      	ldr	r3, [r3, #8]
 80049f8:	f003 030c 	and.w	r3, r3, #12
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d06b      	beq.n	8004ad8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	2b02      	cmp	r3, #2
 8004a06:	d149      	bne.n	8004a9c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a08:	4b31      	ldr	r3, [pc, #196]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	4a30      	ldr	r2, [pc, #192]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 8004a0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004a12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a14:	f7fd fbc8 	bl	80021a8 <HAL_GetTick>
 8004a18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a1a:	e008      	b.n	8004a2e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a1c:	f7fd fbc4 	bl	80021a8 <HAL_GetTick>
 8004a20:	4602      	mov	r2, r0
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	1ad3      	subs	r3, r2, r3
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	d901      	bls.n	8004a2e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004a2a:	2303      	movs	r3, #3
 8004a2c:	e087      	b.n	8004b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004a2e:	4b28      	ldr	r3, [pc, #160]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d1f0      	bne.n	8004a1c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	69da      	ldr	r2, [r3, #28]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6a1b      	ldr	r3, [r3, #32]
 8004a42:	431a      	orrs	r2, r3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	019b      	lsls	r3, r3, #6
 8004a4a:	431a      	orrs	r2, r3
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a50:	085b      	lsrs	r3, r3, #1
 8004a52:	3b01      	subs	r3, #1
 8004a54:	041b      	lsls	r3, r3, #16
 8004a56:	431a      	orrs	r2, r3
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5c:	061b      	lsls	r3, r3, #24
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	4a1b      	ldr	r2, [pc, #108]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 8004a62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a66:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a68:	4b19      	ldr	r3, [pc, #100]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a18      	ldr	r2, [pc, #96]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 8004a6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a74:	f7fd fb98 	bl	80021a8 <HAL_GetTick>
 8004a78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a7a:	e008      	b.n	8004a8e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a7c:	f7fd fb94 	bl	80021a8 <HAL_GetTick>
 8004a80:	4602      	mov	r2, r0
 8004a82:	693b      	ldr	r3, [r7, #16]
 8004a84:	1ad3      	subs	r3, r2, r3
 8004a86:	2b02      	cmp	r3, #2
 8004a88:	d901      	bls.n	8004a8e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004a8a:	2303      	movs	r3, #3
 8004a8c:	e057      	b.n	8004b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a8e:	4b10      	ldr	r3, [pc, #64]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d0f0      	beq.n	8004a7c <HAL_RCC_OscConfig+0x478>
 8004a9a:	e04f      	b.n	8004b3c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a9c:	4b0c      	ldr	r3, [pc, #48]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a0b      	ldr	r2, [pc, #44]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 8004aa2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa8:	f7fd fb7e 	bl	80021a8 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ab0:	f7fd fb7a 	bl	80021a8 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e03d      	b.n	8004b3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004ac2:	4b03      	ldr	r3, [pc, #12]	; (8004ad0 <HAL_RCC_OscConfig+0x4cc>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d1f0      	bne.n	8004ab0 <HAL_RCC_OscConfig+0x4ac>
 8004ace:	e035      	b.n	8004b3c <HAL_RCC_OscConfig+0x538>
 8004ad0:	40023800 	.word	0x40023800
 8004ad4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004ad8:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <HAL_RCC_OscConfig+0x544>)
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	699b      	ldr	r3, [r3, #24]
 8004ae2:	2b01      	cmp	r3, #1
 8004ae4:	d028      	beq.n	8004b38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d121      	bne.n	8004b38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d11a      	bne.n	8004b38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b02:	68fa      	ldr	r2, [r7, #12]
 8004b04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004b08:	4013      	ands	r3, r2
 8004b0a:	687a      	ldr	r2, [r7, #4]
 8004b0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004b0e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004b10:	4293      	cmp	r3, r2
 8004b12:	d111      	bne.n	8004b38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004b1e:	085b      	lsrs	r3, r3, #1
 8004b20:	3b01      	subs	r3, #1
 8004b22:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004b24:	429a      	cmp	r2, r3
 8004b26:	d107      	bne.n	8004b38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004b28:	68fb      	ldr	r3, [r7, #12]
 8004b2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b32:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d001      	beq.n	8004b3c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004b38:	2301      	movs	r3, #1
 8004b3a:	e000      	b.n	8004b3e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004b3c:	2300      	movs	r3, #0
}
 8004b3e:	4618      	mov	r0, r3
 8004b40:	3718      	adds	r7, #24
 8004b42:	46bd      	mov	sp, r7
 8004b44:	bd80      	pop	{r7, pc}
 8004b46:	bf00      	nop
 8004b48:	40023800 	.word	0x40023800

08004b4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b084      	sub	sp, #16
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004b56:	2300      	movs	r3, #0
 8004b58:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d101      	bne.n	8004b64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004b60:	2301      	movs	r3, #1
 8004b62:	e0d0      	b.n	8004d06 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004b64:	4b6a      	ldr	r3, [pc, #424]	; (8004d10 <HAL_RCC_ClockConfig+0x1c4>)
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	f003 030f 	and.w	r3, r3, #15
 8004b6c:	683a      	ldr	r2, [r7, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d910      	bls.n	8004b94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b72:	4b67      	ldr	r3, [pc, #412]	; (8004d10 <HAL_RCC_ClockConfig+0x1c4>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f023 020f 	bic.w	r2, r3, #15
 8004b7a:	4965      	ldr	r1, [pc, #404]	; (8004d10 <HAL_RCC_ClockConfig+0x1c4>)
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	4313      	orrs	r3, r2
 8004b80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b82:	4b63      	ldr	r3, [pc, #396]	; (8004d10 <HAL_RCC_ClockConfig+0x1c4>)
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	f003 030f 	and.w	r3, r3, #15
 8004b8a:	683a      	ldr	r2, [r7, #0]
 8004b8c:	429a      	cmp	r2, r3
 8004b8e:	d001      	beq.n	8004b94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004b90:	2301      	movs	r3, #1
 8004b92:	e0b8      	b.n	8004d06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0302 	and.w	r3, r3, #2
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d020      	beq.n	8004be2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f003 0304 	and.w	r3, r3, #4
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d005      	beq.n	8004bb8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004bac:	4b59      	ldr	r3, [pc, #356]	; (8004d14 <HAL_RCC_ClockConfig+0x1c8>)
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	4a58      	ldr	r2, [pc, #352]	; (8004d14 <HAL_RCC_ClockConfig+0x1c8>)
 8004bb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004bb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f003 0308 	and.w	r3, r3, #8
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004bc4:	4b53      	ldr	r3, [pc, #332]	; (8004d14 <HAL_RCC_ClockConfig+0x1c8>)
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	4a52      	ldr	r2, [pc, #328]	; (8004d14 <HAL_RCC_ClockConfig+0x1c8>)
 8004bca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004bce:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004bd0:	4b50      	ldr	r3, [pc, #320]	; (8004d14 <HAL_RCC_ClockConfig+0x1c8>)
 8004bd2:	689b      	ldr	r3, [r3, #8]
 8004bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	494d      	ldr	r1, [pc, #308]	; (8004d14 <HAL_RCC_ClockConfig+0x1c8>)
 8004bde:	4313      	orrs	r3, r2
 8004be0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	f003 0301 	and.w	r3, r3, #1
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d040      	beq.n	8004c70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d107      	bne.n	8004c06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004bf6:	4b47      	ldr	r3, [pc, #284]	; (8004d14 <HAL_RCC_ClockConfig+0x1c8>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d115      	bne.n	8004c2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c02:	2301      	movs	r3, #1
 8004c04:	e07f      	b.n	8004d06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	685b      	ldr	r3, [r3, #4]
 8004c0a:	2b02      	cmp	r3, #2
 8004c0c:	d107      	bne.n	8004c1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c0e:	4b41      	ldr	r3, [pc, #260]	; (8004d14 <HAL_RCC_ClockConfig+0x1c8>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d109      	bne.n	8004c2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	e073      	b.n	8004d06 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c1e:	4b3d      	ldr	r3, [pc, #244]	; (8004d14 <HAL_RCC_ClockConfig+0x1c8>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0302 	and.w	r3, r3, #2
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d101      	bne.n	8004c2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e06b      	b.n	8004d06 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c2e:	4b39      	ldr	r3, [pc, #228]	; (8004d14 <HAL_RCC_ClockConfig+0x1c8>)
 8004c30:	689b      	ldr	r3, [r3, #8]
 8004c32:	f023 0203 	bic.w	r2, r3, #3
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	4936      	ldr	r1, [pc, #216]	; (8004d14 <HAL_RCC_ClockConfig+0x1c8>)
 8004c3c:	4313      	orrs	r3, r2
 8004c3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004c40:	f7fd fab2 	bl	80021a8 <HAL_GetTick>
 8004c44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c46:	e00a      	b.n	8004c5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c48:	f7fd faae 	bl	80021a8 <HAL_GetTick>
 8004c4c:	4602      	mov	r2, r0
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	1ad3      	subs	r3, r2, r3
 8004c52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c56:	4293      	cmp	r3, r2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e053      	b.n	8004d06 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c5e:	4b2d      	ldr	r3, [pc, #180]	; (8004d14 <HAL_RCC_ClockConfig+0x1c8>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 020c 	and.w	r2, r3, #12
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	009b      	lsls	r3, r3, #2
 8004c6c:	429a      	cmp	r2, r3
 8004c6e:	d1eb      	bne.n	8004c48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c70:	4b27      	ldr	r3, [pc, #156]	; (8004d10 <HAL_RCC_ClockConfig+0x1c4>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	f003 030f 	and.w	r3, r3, #15
 8004c78:	683a      	ldr	r2, [r7, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d210      	bcs.n	8004ca0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c7e:	4b24      	ldr	r3, [pc, #144]	; (8004d10 <HAL_RCC_ClockConfig+0x1c4>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f023 020f 	bic.w	r2, r3, #15
 8004c86:	4922      	ldr	r1, [pc, #136]	; (8004d10 <HAL_RCC_ClockConfig+0x1c4>)
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c8e:	4b20      	ldr	r3, [pc, #128]	; (8004d10 <HAL_RCC_ClockConfig+0x1c4>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f003 030f 	and.w	r3, r3, #15
 8004c96:	683a      	ldr	r2, [r7, #0]
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d001      	beq.n	8004ca0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004c9c:	2301      	movs	r3, #1
 8004c9e:	e032      	b.n	8004d06 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0304 	and.w	r3, r3, #4
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d008      	beq.n	8004cbe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cac:	4b19      	ldr	r3, [pc, #100]	; (8004d14 <HAL_RCC_ClockConfig+0x1c8>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	68db      	ldr	r3, [r3, #12]
 8004cb8:	4916      	ldr	r1, [pc, #88]	; (8004d14 <HAL_RCC_ClockConfig+0x1c8>)
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	f003 0308 	and.w	r3, r3, #8
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d009      	beq.n	8004cde <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004cca:	4b12      	ldr	r3, [pc, #72]	; (8004d14 <HAL_RCC_ClockConfig+0x1c8>)
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	00db      	lsls	r3, r3, #3
 8004cd8:	490e      	ldr	r1, [pc, #56]	; (8004d14 <HAL_RCC_ClockConfig+0x1c8>)
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004cde:	f000 f821 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 8004ce2:	4602      	mov	r2, r0
 8004ce4:	4b0b      	ldr	r3, [pc, #44]	; (8004d14 <HAL_RCC_ClockConfig+0x1c8>)
 8004ce6:	689b      	ldr	r3, [r3, #8]
 8004ce8:	091b      	lsrs	r3, r3, #4
 8004cea:	f003 030f 	and.w	r3, r3, #15
 8004cee:	490a      	ldr	r1, [pc, #40]	; (8004d18 <HAL_RCC_ClockConfig+0x1cc>)
 8004cf0:	5ccb      	ldrb	r3, [r1, r3]
 8004cf2:	fa22 f303 	lsr.w	r3, r2, r3
 8004cf6:	4a09      	ldr	r2, [pc, #36]	; (8004d1c <HAL_RCC_ClockConfig+0x1d0>)
 8004cf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004cfa:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <HAL_RCC_ClockConfig+0x1d4>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	4618      	mov	r0, r3
 8004d00:	f7fd fa0e 	bl	8002120 <HAL_InitTick>

  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3710      	adds	r7, #16
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	bd80      	pop	{r7, pc}
 8004d0e:	bf00      	nop
 8004d10:	40023c00 	.word	0x40023c00
 8004d14:	40023800 	.word	0x40023800
 8004d18:	0800cb74 	.word	0x0800cb74
 8004d1c:	20000000 	.word	0x20000000
 8004d20:	20000004 	.word	0x20000004

08004d24 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d28:	b094      	sub	sp, #80	; 0x50
 8004d2a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004d2c:	2300      	movs	r3, #0
 8004d2e:	647b      	str	r3, [r7, #68]	; 0x44
 8004d30:	2300      	movs	r3, #0
 8004d32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004d34:	2300      	movs	r3, #0
 8004d36:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004d38:	2300      	movs	r3, #0
 8004d3a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004d3c:	4b79      	ldr	r3, [pc, #484]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d3e:	689b      	ldr	r3, [r3, #8]
 8004d40:	f003 030c 	and.w	r3, r3, #12
 8004d44:	2b08      	cmp	r3, #8
 8004d46:	d00d      	beq.n	8004d64 <HAL_RCC_GetSysClockFreq+0x40>
 8004d48:	2b08      	cmp	r3, #8
 8004d4a:	f200 80e1 	bhi.w	8004f10 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d002      	beq.n	8004d58 <HAL_RCC_GetSysClockFreq+0x34>
 8004d52:	2b04      	cmp	r3, #4
 8004d54:	d003      	beq.n	8004d5e <HAL_RCC_GetSysClockFreq+0x3a>
 8004d56:	e0db      	b.n	8004f10 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004d58:	4b73      	ldr	r3, [pc, #460]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x204>)
 8004d5a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d5c:	e0db      	b.n	8004f16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004d5e:	4b73      	ldr	r3, [pc, #460]	; (8004f2c <HAL_RCC_GetSysClockFreq+0x208>)
 8004d60:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004d62:	e0d8      	b.n	8004f16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004d64:	4b6f      	ldr	r3, [pc, #444]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d6c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004d6e:	4b6d      	ldr	r3, [pc, #436]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d063      	beq.n	8004e42 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004d7a:	4b6a      	ldr	r3, [pc, #424]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	099b      	lsrs	r3, r3, #6
 8004d80:	2200      	movs	r2, #0
 8004d82:	63bb      	str	r3, [r7, #56]	; 0x38
 8004d84:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004d86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004d8c:	633b      	str	r3, [r7, #48]	; 0x30
 8004d8e:	2300      	movs	r3, #0
 8004d90:	637b      	str	r3, [r7, #52]	; 0x34
 8004d92:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004d96:	4622      	mov	r2, r4
 8004d98:	462b      	mov	r3, r5
 8004d9a:	f04f 0000 	mov.w	r0, #0
 8004d9e:	f04f 0100 	mov.w	r1, #0
 8004da2:	0159      	lsls	r1, r3, #5
 8004da4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004da8:	0150      	lsls	r0, r2, #5
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	4621      	mov	r1, r4
 8004db0:	1a51      	subs	r1, r2, r1
 8004db2:	6139      	str	r1, [r7, #16]
 8004db4:	4629      	mov	r1, r5
 8004db6:	eb63 0301 	sbc.w	r3, r3, r1
 8004dba:	617b      	str	r3, [r7, #20]
 8004dbc:	f04f 0200 	mov.w	r2, #0
 8004dc0:	f04f 0300 	mov.w	r3, #0
 8004dc4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004dc8:	4659      	mov	r1, fp
 8004dca:	018b      	lsls	r3, r1, #6
 8004dcc:	4651      	mov	r1, sl
 8004dce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8004dd2:	4651      	mov	r1, sl
 8004dd4:	018a      	lsls	r2, r1, #6
 8004dd6:	4651      	mov	r1, sl
 8004dd8:	ebb2 0801 	subs.w	r8, r2, r1
 8004ddc:	4659      	mov	r1, fp
 8004dde:	eb63 0901 	sbc.w	r9, r3, r1
 8004de2:	f04f 0200 	mov.w	r2, #0
 8004de6:	f04f 0300 	mov.w	r3, #0
 8004dea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004dee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004df2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004df6:	4690      	mov	r8, r2
 8004df8:	4699      	mov	r9, r3
 8004dfa:	4623      	mov	r3, r4
 8004dfc:	eb18 0303 	adds.w	r3, r8, r3
 8004e00:	60bb      	str	r3, [r7, #8]
 8004e02:	462b      	mov	r3, r5
 8004e04:	eb49 0303 	adc.w	r3, r9, r3
 8004e08:	60fb      	str	r3, [r7, #12]
 8004e0a:	f04f 0200 	mov.w	r2, #0
 8004e0e:	f04f 0300 	mov.w	r3, #0
 8004e12:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8004e16:	4629      	mov	r1, r5
 8004e18:	024b      	lsls	r3, r1, #9
 8004e1a:	4621      	mov	r1, r4
 8004e1c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004e20:	4621      	mov	r1, r4
 8004e22:	024a      	lsls	r2, r1, #9
 8004e24:	4610      	mov	r0, r2
 8004e26:	4619      	mov	r1, r3
 8004e28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	62bb      	str	r3, [r7, #40]	; 0x28
 8004e2e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e30:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004e34:	f7fb ff48 	bl	8000cc8 <__aeabi_uldivmod>
 8004e38:	4602      	mov	r2, r0
 8004e3a:	460b      	mov	r3, r1
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e40:	e058      	b.n	8004ef4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004e42:	4b38      	ldr	r3, [pc, #224]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	099b      	lsrs	r3, r3, #6
 8004e48:	2200      	movs	r2, #0
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	4611      	mov	r1, r2
 8004e4e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8004e52:	623b      	str	r3, [r7, #32]
 8004e54:	2300      	movs	r3, #0
 8004e56:	627b      	str	r3, [r7, #36]	; 0x24
 8004e58:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004e5c:	4642      	mov	r2, r8
 8004e5e:	464b      	mov	r3, r9
 8004e60:	f04f 0000 	mov.w	r0, #0
 8004e64:	f04f 0100 	mov.w	r1, #0
 8004e68:	0159      	lsls	r1, r3, #5
 8004e6a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004e6e:	0150      	lsls	r0, r2, #5
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4641      	mov	r1, r8
 8004e76:	ebb2 0a01 	subs.w	sl, r2, r1
 8004e7a:	4649      	mov	r1, r9
 8004e7c:	eb63 0b01 	sbc.w	fp, r3, r1
 8004e80:	f04f 0200 	mov.w	r2, #0
 8004e84:	f04f 0300 	mov.w	r3, #0
 8004e88:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004e8c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004e90:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004e94:	ebb2 040a 	subs.w	r4, r2, sl
 8004e98:	eb63 050b 	sbc.w	r5, r3, fp
 8004e9c:	f04f 0200 	mov.w	r2, #0
 8004ea0:	f04f 0300 	mov.w	r3, #0
 8004ea4:	00eb      	lsls	r3, r5, #3
 8004ea6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004eaa:	00e2      	lsls	r2, r4, #3
 8004eac:	4614      	mov	r4, r2
 8004eae:	461d      	mov	r5, r3
 8004eb0:	4643      	mov	r3, r8
 8004eb2:	18e3      	adds	r3, r4, r3
 8004eb4:	603b      	str	r3, [r7, #0]
 8004eb6:	464b      	mov	r3, r9
 8004eb8:	eb45 0303 	adc.w	r3, r5, r3
 8004ebc:	607b      	str	r3, [r7, #4]
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	f04f 0300 	mov.w	r3, #0
 8004ec6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004eca:	4629      	mov	r1, r5
 8004ecc:	028b      	lsls	r3, r1, #10
 8004ece:	4621      	mov	r1, r4
 8004ed0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004ed4:	4621      	mov	r1, r4
 8004ed6:	028a      	lsls	r2, r1, #10
 8004ed8:	4610      	mov	r0, r2
 8004eda:	4619      	mov	r1, r3
 8004edc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004ede:	2200      	movs	r2, #0
 8004ee0:	61bb      	str	r3, [r7, #24]
 8004ee2:	61fa      	str	r2, [r7, #28]
 8004ee4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ee8:	f7fb feee 	bl	8000cc8 <__aeabi_uldivmod>
 8004eec:	4602      	mov	r2, r0
 8004eee:	460b      	mov	r3, r1
 8004ef0:	4613      	mov	r3, r2
 8004ef2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8004ef4:	4b0b      	ldr	r3, [pc, #44]	; (8004f24 <HAL_RCC_GetSysClockFreq+0x200>)
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	0c1b      	lsrs	r3, r3, #16
 8004efa:	f003 0303 	and.w	r3, r3, #3
 8004efe:	3301      	adds	r3, #1
 8004f00:	005b      	lsls	r3, r3, #1
 8004f02:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8004f04:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004f06:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004f08:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f0c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f0e:	e002      	b.n	8004f16 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004f10:	4b05      	ldr	r3, [pc, #20]	; (8004f28 <HAL_RCC_GetSysClockFreq+0x204>)
 8004f12:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004f14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004f16:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004f18:	4618      	mov	r0, r3
 8004f1a:	3750      	adds	r7, #80	; 0x50
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f22:	bf00      	nop
 8004f24:	40023800 	.word	0x40023800
 8004f28:	00f42400 	.word	0x00f42400
 8004f2c:	007a1200 	.word	0x007a1200

08004f30 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004f30:	b480      	push	{r7}
 8004f32:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004f34:	4b03      	ldr	r3, [pc, #12]	; (8004f44 <HAL_RCC_GetHCLKFreq+0x14>)
 8004f36:	681b      	ldr	r3, [r3, #0]
}
 8004f38:	4618      	mov	r0, r3
 8004f3a:	46bd      	mov	sp, r7
 8004f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f40:	4770      	bx	lr
 8004f42:	bf00      	nop
 8004f44:	20000000 	.word	0x20000000

08004f48 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004f4c:	f7ff fff0 	bl	8004f30 <HAL_RCC_GetHCLKFreq>
 8004f50:	4602      	mov	r2, r0
 8004f52:	4b05      	ldr	r3, [pc, #20]	; (8004f68 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	0a9b      	lsrs	r3, r3, #10
 8004f58:	f003 0307 	and.w	r3, r3, #7
 8004f5c:	4903      	ldr	r1, [pc, #12]	; (8004f6c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004f5e:	5ccb      	ldrb	r3, [r1, r3]
 8004f60:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f64:	4618      	mov	r0, r3
 8004f66:	bd80      	pop	{r7, pc}
 8004f68:	40023800 	.word	0x40023800
 8004f6c:	0800cb84 	.word	0x0800cb84

08004f70 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004f74:	f7ff ffdc 	bl	8004f30 <HAL_RCC_GetHCLKFreq>
 8004f78:	4602      	mov	r2, r0
 8004f7a:	4b05      	ldr	r3, [pc, #20]	; (8004f90 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	0b5b      	lsrs	r3, r3, #13
 8004f80:	f003 0307 	and.w	r3, r3, #7
 8004f84:	4903      	ldr	r1, [pc, #12]	; (8004f94 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004f86:	5ccb      	ldrb	r3, [r1, r3]
 8004f88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	bd80      	pop	{r7, pc}
 8004f90:	40023800 	.word	0x40023800
 8004f94:	0800cb84 	.word	0x0800cb84

08004f98 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b088      	sub	sp, #32
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8004fa0:	2300      	movs	r3, #0
 8004fa2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8004fac:	2300      	movs	r3, #0
 8004fae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	f003 0301 	and.w	r3, r3, #1
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d012      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004fc0:	4b69      	ldr	r3, [pc, #420]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc2:	689b      	ldr	r3, [r3, #8]
 8004fc4:	4a68      	ldr	r2, [pc, #416]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fc6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004fca:	6093      	str	r3, [r2, #8]
 8004fcc:	4b66      	ldr	r3, [pc, #408]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fce:	689a      	ldr	r2, [r3, #8]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd4:	4964      	ldr	r1, [pc, #400]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004fd6:	4313      	orrs	r3, r2
 8004fd8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d101      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8004fe2:	2301      	movs	r3, #1
 8004fe4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d017      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004ff2:	4b5d      	ldr	r3, [pc, #372]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8004ff4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8004ff8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005000:	4959      	ldr	r1, [pc, #356]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005002:	4313      	orrs	r3, r2
 8005004:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800500c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005010:	d101      	bne.n	8005016 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005012:	2301      	movs	r3, #1
 8005014:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800501a:	2b00      	cmp	r3, #0
 800501c:	d101      	bne.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800501e:	2301      	movs	r3, #1
 8005020:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800502a:	2b00      	cmp	r3, #0
 800502c:	d017      	beq.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800502e:	4b4e      	ldr	r3, [pc, #312]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005030:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005034:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503c:	494a      	ldr	r1, [pc, #296]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800503e:	4313      	orrs	r3, r2
 8005040:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005048:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800504c:	d101      	bne.n	8005052 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800504e:	2301      	movs	r3, #1
 8005050:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005056:	2b00      	cmp	r3, #0
 8005058:	d101      	bne.n	800505e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800505a:	2301      	movs	r3, #1
 800505c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005066:	2b00      	cmp	r3, #0
 8005068:	d001      	beq.n	800506e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800506a:	2301      	movs	r3, #1
 800506c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f003 0320 	and.w	r3, r3, #32
 8005076:	2b00      	cmp	r3, #0
 8005078:	f000 808b 	beq.w	8005192 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800507c:	4b3a      	ldr	r3, [pc, #232]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800507e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005080:	4a39      	ldr	r2, [pc, #228]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005082:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005086:	6413      	str	r3, [r2, #64]	; 0x40
 8005088:	4b37      	ldr	r3, [pc, #220]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800508a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800508c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005090:	60bb      	str	r3, [r7, #8]
 8005092:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005094:	4b35      	ldr	r3, [pc, #212]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	4a34      	ldr	r2, [pc, #208]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800509a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800509e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050a0:	f7fd f882 	bl	80021a8 <HAL_GetTick>
 80050a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80050a8:	f7fd f87e 	bl	80021a8 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	697b      	ldr	r3, [r7, #20]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b64      	cmp	r3, #100	; 0x64
 80050b4:	d901      	bls.n	80050ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e357      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80050ba:	4b2c      	ldr	r3, [pc, #176]	; (800516c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80050c6:	4b28      	ldr	r3, [pc, #160]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d035      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050de:	693a      	ldr	r2, [r7, #16]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d02e      	beq.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80050e4:	4b20      	ldr	r3, [pc, #128]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80050ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80050ee:	4b1e      	ldr	r3, [pc, #120]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050f2:	4a1d      	ldr	r2, [pc, #116]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80050fa:	4b1b      	ldr	r3, [pc, #108]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80050fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050fe:	4a1a      	ldr	r2, [pc, #104]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005100:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005104:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005106:	4a18      	ldr	r2, [pc, #96]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800510c:	4b16      	ldr	r3, [pc, #88]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800510e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005110:	f003 0301 	and.w	r3, r3, #1
 8005114:	2b01      	cmp	r3, #1
 8005116:	d114      	bne.n	8005142 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005118:	f7fd f846 	bl	80021a8 <HAL_GetTick>
 800511c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800511e:	e00a      	b.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005120:	f7fd f842 	bl	80021a8 <HAL_GetTick>
 8005124:	4602      	mov	r2, r0
 8005126:	697b      	ldr	r3, [r7, #20]
 8005128:	1ad3      	subs	r3, r2, r3
 800512a:	f241 3288 	movw	r2, #5000	; 0x1388
 800512e:	4293      	cmp	r3, r2
 8005130:	d901      	bls.n	8005136 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005132:	2303      	movs	r3, #3
 8005134:	e319      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005136:	4b0c      	ldr	r3, [pc, #48]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005138:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800513a:	f003 0302 	and.w	r3, r3, #2
 800513e:	2b00      	cmp	r3, #0
 8005140:	d0ee      	beq.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005146:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800514a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800514e:	d111      	bne.n	8005174 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005150:	4b05      	ldr	r3, [pc, #20]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005152:	689b      	ldr	r3, [r3, #8]
 8005154:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800515c:	4b04      	ldr	r3, [pc, #16]	; (8005170 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800515e:	400b      	ands	r3, r1
 8005160:	4901      	ldr	r1, [pc, #4]	; (8005168 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005162:	4313      	orrs	r3, r2
 8005164:	608b      	str	r3, [r1, #8]
 8005166:	e00b      	b.n	8005180 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005168:	40023800 	.word	0x40023800
 800516c:	40007000 	.word	0x40007000
 8005170:	0ffffcff 	.word	0x0ffffcff
 8005174:	4baa      	ldr	r3, [pc, #680]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005176:	689b      	ldr	r3, [r3, #8]
 8005178:	4aa9      	ldr	r2, [pc, #676]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800517a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800517e:	6093      	str	r3, [r2, #8]
 8005180:	4ba7      	ldr	r3, [pc, #668]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005182:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005188:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800518c:	49a4      	ldr	r1, [pc, #656]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800518e:	4313      	orrs	r3, r2
 8005190:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	f003 0310 	and.w	r3, r3, #16
 800519a:	2b00      	cmp	r3, #0
 800519c:	d010      	beq.n	80051c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800519e:	4ba0      	ldr	r3, [pc, #640]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051a4:	4a9e      	ldr	r2, [pc, #632]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80051ae:	4b9c      	ldr	r3, [pc, #624]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051b8:	4999      	ldr	r1, [pc, #612]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051ba:	4313      	orrs	r3, r2
 80051bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	681b      	ldr	r3, [r3, #0]
 80051c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d00a      	beq.n	80051e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80051cc:	4b94      	ldr	r3, [pc, #592]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051da:	4991      	ldr	r1, [pc, #580]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051dc:	4313      	orrs	r3, r2
 80051de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d00a      	beq.n	8005204 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80051ee:	4b8c      	ldr	r3, [pc, #560]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80051fc:	4988      	ldr	r1, [pc, #544]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005210:	4b83      	ldr	r3, [pc, #524]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005212:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005216:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800521e:	4980      	ldr	r1, [pc, #512]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005220:	4313      	orrs	r3, r2
 8005222:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005232:	4b7b      	ldr	r3, [pc, #492]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005234:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005238:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005240:	4977      	ldr	r1, [pc, #476]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005242:	4313      	orrs	r3, r2
 8005244:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00a      	beq.n	800526a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005254:	4b72      	ldr	r3, [pc, #456]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800525a:	f023 0203 	bic.w	r2, r3, #3
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005262:	496f      	ldr	r1, [pc, #444]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005264:	4313      	orrs	r3, r2
 8005266:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	681b      	ldr	r3, [r3, #0]
 800526e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005276:	4b6a      	ldr	r3, [pc, #424]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005278:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800527c:	f023 020c 	bic.w	r2, r3, #12
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005284:	4966      	ldr	r1, [pc, #408]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005286:	4313      	orrs	r3, r2
 8005288:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00a      	beq.n	80052ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005298:	4b61      	ldr	r3, [pc, #388]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800529a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800529e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80052a6:	495e      	ldr	r1, [pc, #376]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052a8:	4313      	orrs	r3, r2
 80052aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80052ba:	4b59      	ldr	r3, [pc, #356]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80052c8:	4955      	ldr	r1, [pc, #340]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052ca:	4313      	orrs	r3, r2
 80052cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d00a      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80052dc:	4b50      	ldr	r3, [pc, #320]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80052e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80052ea:	494d      	ldr	r1, [pc, #308]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80052ec:	4313      	orrs	r3, r2
 80052ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80052fe:	4b48      	ldr	r3, [pc, #288]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005300:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005304:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800530c:	4944      	ldr	r1, [pc, #272]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800530e:	4313      	orrs	r3, r2
 8005310:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800531c:	2b00      	cmp	r3, #0
 800531e:	d00a      	beq.n	8005336 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005320:	4b3f      	ldr	r3, [pc, #252]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005322:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005326:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800532e:	493c      	ldr	r1, [pc, #240]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005330:	4313      	orrs	r3, r2
 8005332:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800533e:	2b00      	cmp	r3, #0
 8005340:	d00a      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005342:	4b37      	ldr	r3, [pc, #220]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005348:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005350:	4933      	ldr	r1, [pc, #204]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005352:	4313      	orrs	r3, r2
 8005354:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005360:	2b00      	cmp	r3, #0
 8005362:	d00a      	beq.n	800537a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005364:	4b2e      	ldr	r3, [pc, #184]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005366:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800536a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005372:	492b      	ldr	r1, [pc, #172]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005374:	4313      	orrs	r3, r2
 8005376:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005382:	2b00      	cmp	r3, #0
 8005384:	d011      	beq.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005386:	4b26      	ldr	r3, [pc, #152]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800538c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005394:	4922      	ldr	r1, [pc, #136]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005396:	4313      	orrs	r3, r2
 8005398:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80053a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80053a4:	d101      	bne.n	80053aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80053a6:	2301      	movs	r3, #1
 80053a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f003 0308 	and.w	r3, r3, #8
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d001      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80053b6:	2301      	movs	r3, #1
 80053b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d00a      	beq.n	80053dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80053c6:	4b16      	ldr	r3, [pc, #88]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80053d4:	4912      	ldr	r1, [pc, #72]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053d6:	4313      	orrs	r3, r2
 80053d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d00b      	beq.n	8005400 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80053e8:	4b0d      	ldr	r3, [pc, #52]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80053f8:	4909      	ldr	r1, [pc, #36]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053fa:	4313      	orrs	r3, r2
 80053fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005400:	69fb      	ldr	r3, [r7, #28]
 8005402:	2b01      	cmp	r3, #1
 8005404:	d006      	beq.n	8005414 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800540e:	2b00      	cmp	r3, #0
 8005410:	f000 80d9 	beq.w	80055c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005414:	4b02      	ldr	r3, [pc, #8]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	4a01      	ldr	r2, [pc, #4]	; (8005420 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800541a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800541e:	e001      	b.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005420:	40023800 	.word	0x40023800
 8005424:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005426:	f7fc febf 	bl	80021a8 <HAL_GetTick>
 800542a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800542c:	e008      	b.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800542e:	f7fc febb 	bl	80021a8 <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	697b      	ldr	r3, [r7, #20]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b64      	cmp	r3, #100	; 0x64
 800543a:	d901      	bls.n	8005440 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e194      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005440:	4b6c      	ldr	r3, [pc, #432]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005448:	2b00      	cmp	r3, #0
 800544a:	d1f0      	bne.n	800542e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f003 0301 	and.w	r3, r3, #1
 8005454:	2b00      	cmp	r3, #0
 8005456:	d021      	beq.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800545c:	2b00      	cmp	r3, #0
 800545e:	d11d      	bne.n	800549c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005460:	4b64      	ldr	r3, [pc, #400]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005462:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005466:	0c1b      	lsrs	r3, r3, #16
 8005468:	f003 0303 	and.w	r3, r3, #3
 800546c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800546e:	4b61      	ldr	r3, [pc, #388]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005474:	0e1b      	lsrs	r3, r3, #24
 8005476:	f003 030f 	and.w	r3, r3, #15
 800547a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	685b      	ldr	r3, [r3, #4]
 8005480:	019a      	lsls	r2, r3, #6
 8005482:	693b      	ldr	r3, [r7, #16]
 8005484:	041b      	lsls	r3, r3, #16
 8005486:	431a      	orrs	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	061b      	lsls	r3, r3, #24
 800548c:	431a      	orrs	r2, r3
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	071b      	lsls	r3, r3, #28
 8005494:	4957      	ldr	r1, [pc, #348]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005496:	4313      	orrs	r3, r2
 8005498:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d004      	beq.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054b0:	d00a      	beq.n	80054c8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d02e      	beq.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054c6:	d129      	bne.n	800551c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80054c8:	4b4a      	ldr	r3, [pc, #296]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054ce:	0c1b      	lsrs	r3, r3, #16
 80054d0:	f003 0303 	and.w	r3, r3, #3
 80054d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80054d6:	4b47      	ldr	r3, [pc, #284]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80054dc:	0f1b      	lsrs	r3, r3, #28
 80054de:	f003 0307 	and.w	r3, r3, #7
 80054e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	685b      	ldr	r3, [r3, #4]
 80054e8:	019a      	lsls	r2, r3, #6
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	041b      	lsls	r3, r3, #16
 80054ee:	431a      	orrs	r2, r3
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	68db      	ldr	r3, [r3, #12]
 80054f4:	061b      	lsls	r3, r3, #24
 80054f6:	431a      	orrs	r2, r3
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	071b      	lsls	r3, r3, #28
 80054fc:	493d      	ldr	r1, [pc, #244]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005504:	4b3b      	ldr	r3, [pc, #236]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005506:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800550a:	f023 021f 	bic.w	r2, r3, #31
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005512:	3b01      	subs	r3, #1
 8005514:	4937      	ldr	r1, [pc, #220]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005516:	4313      	orrs	r3, r2
 8005518:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005524:	2b00      	cmp	r3, #0
 8005526:	d01d      	beq.n	8005564 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005528:	4b32      	ldr	r3, [pc, #200]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800552a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800552e:	0e1b      	lsrs	r3, r3, #24
 8005530:	f003 030f 	and.w	r3, r3, #15
 8005534:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005536:	4b2f      	ldr	r3, [pc, #188]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005538:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800553c:	0f1b      	lsrs	r3, r3, #28
 800553e:	f003 0307 	and.w	r3, r3, #7
 8005542:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	019a      	lsls	r2, r3, #6
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	691b      	ldr	r3, [r3, #16]
 800554e:	041b      	lsls	r3, r3, #16
 8005550:	431a      	orrs	r2, r3
 8005552:	693b      	ldr	r3, [r7, #16]
 8005554:	061b      	lsls	r3, r3, #24
 8005556:	431a      	orrs	r2, r3
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	071b      	lsls	r3, r3, #28
 800555c:	4925      	ldr	r1, [pc, #148]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800555e:	4313      	orrs	r3, r2
 8005560:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800556c:	2b00      	cmp	r3, #0
 800556e:	d011      	beq.n	8005594 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	019a      	lsls	r2, r3, #6
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	691b      	ldr	r3, [r3, #16]
 800557a:	041b      	lsls	r3, r3, #16
 800557c:	431a      	orrs	r2, r3
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	68db      	ldr	r3, [r3, #12]
 8005582:	061b      	lsls	r3, r3, #24
 8005584:	431a      	orrs	r2, r3
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	689b      	ldr	r3, [r3, #8]
 800558a:	071b      	lsls	r3, r3, #28
 800558c:	4919      	ldr	r1, [pc, #100]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800558e:	4313      	orrs	r3, r2
 8005590:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005594:	4b17      	ldr	r3, [pc, #92]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	4a16      	ldr	r2, [pc, #88]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800559a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800559e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055a0:	f7fc fe02 	bl	80021a8 <HAL_GetTick>
 80055a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055a6:	e008      	b.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80055a8:	f7fc fdfe 	bl	80021a8 <HAL_GetTick>
 80055ac:	4602      	mov	r2, r0
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	1ad3      	subs	r3, r2, r3
 80055b2:	2b64      	cmp	r3, #100	; 0x64
 80055b4:	d901      	bls.n	80055ba <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055b6:	2303      	movs	r3, #3
 80055b8:	e0d7      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80055ba:	4b0e      	ldr	r3, [pc, #56]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d0f0      	beq.n	80055a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	2b01      	cmp	r3, #1
 80055ca:	f040 80cd 	bne.w	8005768 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80055ce:	4b09      	ldr	r3, [pc, #36]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	4a08      	ldr	r2, [pc, #32]	; (80055f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80055d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80055d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055da:	f7fc fde5 	bl	80021a8 <HAL_GetTick>
 80055de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055e0:	e00a      	b.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80055e2:	f7fc fde1 	bl	80021a8 <HAL_GetTick>
 80055e6:	4602      	mov	r2, r0
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	1ad3      	subs	r3, r2, r3
 80055ec:	2b64      	cmp	r3, #100	; 0x64
 80055ee:	d903      	bls.n	80055f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80055f0:	2303      	movs	r3, #3
 80055f2:	e0ba      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80055f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80055f8:	4b5e      	ldr	r3, [pc, #376]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005600:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005604:	d0ed      	beq.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d003      	beq.n	800561a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005616:	2b00      	cmp	r3, #0
 8005618:	d009      	beq.n	800562e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005622:	2b00      	cmp	r3, #0
 8005624:	d02e      	beq.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562a:	2b00      	cmp	r3, #0
 800562c:	d12a      	bne.n	8005684 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800562e:	4b51      	ldr	r3, [pc, #324]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005630:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005634:	0c1b      	lsrs	r3, r3, #16
 8005636:	f003 0303 	and.w	r3, r3, #3
 800563a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800563c:	4b4d      	ldr	r3, [pc, #308]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800563e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005642:	0f1b      	lsrs	r3, r3, #28
 8005644:	f003 0307 	and.w	r3, r3, #7
 8005648:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	695b      	ldr	r3, [r3, #20]
 800564e:	019a      	lsls	r2, r3, #6
 8005650:	693b      	ldr	r3, [r7, #16]
 8005652:	041b      	lsls	r3, r3, #16
 8005654:	431a      	orrs	r2, r3
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	699b      	ldr	r3, [r3, #24]
 800565a:	061b      	lsls	r3, r3, #24
 800565c:	431a      	orrs	r2, r3
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	071b      	lsls	r3, r3, #28
 8005662:	4944      	ldr	r1, [pc, #272]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005664:	4313      	orrs	r3, r2
 8005666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800566a:	4b42      	ldr	r3, [pc, #264]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800566c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005670:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005678:	3b01      	subs	r3, #1
 800567a:	021b      	lsls	r3, r3, #8
 800567c:	493d      	ldr	r1, [pc, #244]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800567e:	4313      	orrs	r3, r2
 8005680:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800568c:	2b00      	cmp	r3, #0
 800568e:	d022      	beq.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005694:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005698:	d11d      	bne.n	80056d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800569a:	4b36      	ldr	r3, [pc, #216]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800569c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056a0:	0e1b      	lsrs	r3, r3, #24
 80056a2:	f003 030f 	and.w	r3, r3, #15
 80056a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80056a8:	4b32      	ldr	r3, [pc, #200]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056ae:	0f1b      	lsrs	r3, r3, #28
 80056b0:	f003 0307 	and.w	r3, r3, #7
 80056b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	695b      	ldr	r3, [r3, #20]
 80056ba:	019a      	lsls	r2, r3, #6
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6a1b      	ldr	r3, [r3, #32]
 80056c0:	041b      	lsls	r3, r3, #16
 80056c2:	431a      	orrs	r2, r3
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	061b      	lsls	r3, r3, #24
 80056c8:	431a      	orrs	r2, r3
 80056ca:	68fb      	ldr	r3, [r7, #12]
 80056cc:	071b      	lsls	r3, r3, #28
 80056ce:	4929      	ldr	r1, [pc, #164]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056d0:	4313      	orrs	r3, r2
 80056d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	f003 0308 	and.w	r3, r3, #8
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d028      	beq.n	8005734 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80056e2:	4b24      	ldr	r3, [pc, #144]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056e8:	0e1b      	lsrs	r3, r3, #24
 80056ea:	f003 030f 	and.w	r3, r3, #15
 80056ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80056f0:	4b20      	ldr	r3, [pc, #128]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80056f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80056f6:	0c1b      	lsrs	r3, r3, #16
 80056f8:	f003 0303 	and.w	r3, r3, #3
 80056fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	019a      	lsls	r2, r3, #6
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	041b      	lsls	r3, r3, #16
 8005708:	431a      	orrs	r2, r3
 800570a:	693b      	ldr	r3, [r7, #16]
 800570c:	061b      	lsls	r3, r3, #24
 800570e:	431a      	orrs	r2, r3
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	69db      	ldr	r3, [r3, #28]
 8005714:	071b      	lsls	r3, r3, #28
 8005716:	4917      	ldr	r1, [pc, #92]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005718:	4313      	orrs	r3, r2
 800571a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800571e:	4b15      	ldr	r3, [pc, #84]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005720:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005724:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572c:	4911      	ldr	r1, [pc, #68]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800572e:	4313      	orrs	r3, r2
 8005730:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005734:	4b0f      	ldr	r3, [pc, #60]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	4a0e      	ldr	r2, [pc, #56]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800573a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800573e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005740:	f7fc fd32 	bl	80021a8 <HAL_GetTick>
 8005744:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005746:	e008      	b.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005748:	f7fc fd2e 	bl	80021a8 <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	2b64      	cmp	r3, #100	; 0x64
 8005754:	d901      	bls.n	800575a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005756:	2303      	movs	r3, #3
 8005758:	e007      	b.n	800576a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800575a:	4b06      	ldr	r3, [pc, #24]	; (8005774 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005762:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005766:	d1ef      	bne.n	8005748 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3720      	adds	r7, #32
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	40023800 	.word	0x40023800

08005778 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b084      	sub	sp, #16
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d101      	bne.n	800578a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005786:	2301      	movs	r3, #1
 8005788:	e09d      	b.n	80058c6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800578e:	2b00      	cmp	r3, #0
 8005790:	d108      	bne.n	80057a4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	685b      	ldr	r3, [r3, #4]
 8005796:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800579a:	d009      	beq.n	80057b0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2200      	movs	r2, #0
 80057a0:	61da      	str	r2, [r3, #28]
 80057a2:	e005      	b.n	80057b0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2200      	movs	r2, #0
 80057ae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2200      	movs	r2, #0
 80057b4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 80057bc:	b2db      	uxtb	r3, r3
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d106      	bne.n	80057d0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	2200      	movs	r2, #0
 80057c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80057ca:	6878      	ldr	r0, [r7, #4]
 80057cc:	f7fc f832 	bl	8001834 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2202      	movs	r2, #2
 80057d4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	681a      	ldr	r2, [r3, #0]
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80057e6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80057f0:	d902      	bls.n	80057f8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80057f2:	2300      	movs	r3, #0
 80057f4:	60fb      	str	r3, [r7, #12]
 80057f6:	e002      	b.n	80057fe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80057f8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057fc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	68db      	ldr	r3, [r3, #12]
 8005802:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005806:	d007      	beq.n	8005818 <HAL_SPI_Init+0xa0>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	68db      	ldr	r3, [r3, #12]
 800580c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005810:	d002      	beq.n	8005818 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	2200      	movs	r2, #0
 8005816:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	685b      	ldr	r3, [r3, #4]
 800581c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	689b      	ldr	r3, [r3, #8]
 8005824:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005828:	431a      	orrs	r2, r3
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
 800582e:	f003 0302 	and.w	r3, r3, #2
 8005832:	431a      	orrs	r2, r3
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	695b      	ldr	r3, [r3, #20]
 8005838:	f003 0301 	and.w	r3, r3, #1
 800583c:	431a      	orrs	r2, r3
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005846:	431a      	orrs	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	69db      	ldr	r3, [r3, #28]
 800584c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005850:	431a      	orrs	r2, r3
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6a1b      	ldr	r3, [r3, #32]
 8005856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800585a:	ea42 0103 	orr.w	r1, r2, r3
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005862:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	430a      	orrs	r2, r1
 800586c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	0c1b      	lsrs	r3, r3, #16
 8005874:	f003 0204 	and.w	r2, r3, #4
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800587c:	f003 0310 	and.w	r3, r3, #16
 8005880:	431a      	orrs	r2, r3
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005886:	f003 0308 	and.w	r3, r3, #8
 800588a:	431a      	orrs	r2, r3
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005894:	ea42 0103 	orr.w	r1, r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	430a      	orrs	r2, r1
 80058a4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	69da      	ldr	r2, [r3, #28]
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058b4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2201      	movs	r2, #1
 80058c0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 80058c4:	2300      	movs	r3, #0
}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3710      	adds	r7, #16
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}
	...

080058d0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80058d0:	b580      	push	{r7, lr}
 80058d2:	b088      	sub	sp, #32
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	685b      	ldr	r3, [r3, #4]
 80058de:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	689b      	ldr	r3, [r3, #8]
 80058e6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d10e      	bne.n	8005910 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80058f2:	69bb      	ldr	r3, [r7, #24]
 80058f4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d009      	beq.n	8005910 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80058fc:	69fb      	ldr	r3, [r7, #28]
 80058fe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005902:	2b00      	cmp	r3, #0
 8005904:	d004      	beq.n	8005910 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800590a:	6878      	ldr	r0, [r7, #4]
 800590c:	4798      	blx	r3
    return;
 800590e:	e0ce      	b.n	8005aae <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	f003 0302 	and.w	r3, r3, #2
 8005916:	2b00      	cmp	r3, #0
 8005918:	d009      	beq.n	800592e <HAL_SPI_IRQHandler+0x5e>
 800591a:	69fb      	ldr	r3, [r7, #28]
 800591c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005920:	2b00      	cmp	r3, #0
 8005922:	d004      	beq.n	800592e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	4798      	blx	r3
    return;
 800592c:	e0bf      	b.n	8005aae <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800592e:	69bb      	ldr	r3, [r7, #24]
 8005930:	f003 0320 	and.w	r3, r3, #32
 8005934:	2b00      	cmp	r3, #0
 8005936:	d10a      	bne.n	800594e <HAL_SPI_IRQHandler+0x7e>
 8005938:	69bb      	ldr	r3, [r7, #24]
 800593a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593e:	2b00      	cmp	r3, #0
 8005940:	d105      	bne.n	800594e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005942:	69bb      	ldr	r3, [r7, #24]
 8005944:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005948:	2b00      	cmp	r3, #0
 800594a:	f000 80b0 	beq.w	8005aae <HAL_SPI_IRQHandler+0x1de>
 800594e:	69fb      	ldr	r3, [r7, #28]
 8005950:	f003 0320 	and.w	r3, r3, #32
 8005954:	2b00      	cmp	r3, #0
 8005956:	f000 80aa 	beq.w	8005aae <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800595a:	69bb      	ldr	r3, [r7, #24]
 800595c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005960:	2b00      	cmp	r3, #0
 8005962:	d023      	beq.n	80059ac <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800596a:	b2db      	uxtb	r3, r3
 800596c:	2b03      	cmp	r3, #3
 800596e:	d011      	beq.n	8005994 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005974:	f043 0204 	orr.w	r2, r3, #4
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800597c:	2300      	movs	r3, #0
 800597e:	617b      	str	r3, [r7, #20]
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	68db      	ldr	r3, [r3, #12]
 8005986:	617b      	str	r3, [r7, #20]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	689b      	ldr	r3, [r3, #8]
 800598e:	617b      	str	r3, [r7, #20]
 8005990:	697b      	ldr	r3, [r7, #20]
 8005992:	e00b      	b.n	80059ac <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005994:	2300      	movs	r3, #0
 8005996:	613b      	str	r3, [r7, #16]
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	613b      	str	r3, [r7, #16]
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	689b      	ldr	r3, [r3, #8]
 80059a6:	613b      	str	r3, [r7, #16]
 80059a8:	693b      	ldr	r3, [r7, #16]
        return;
 80059aa:	e080      	b.n	8005aae <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 80059ac:	69bb      	ldr	r3, [r7, #24]
 80059ae:	f003 0320 	and.w	r3, r3, #32
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d014      	beq.n	80059e0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ba:	f043 0201 	orr.w	r2, r3, #1
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 80059c2:	2300      	movs	r3, #0
 80059c4:	60fb      	str	r3, [r7, #12]
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	689b      	ldr	r3, [r3, #8]
 80059cc:	60fb      	str	r3, [r7, #12]
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059dc:	601a      	str	r2, [r3, #0]
 80059de:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 80059e0:	69bb      	ldr	r3, [r7, #24]
 80059e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d00c      	beq.n	8005a04 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80059ee:	f043 0208 	orr.w	r2, r3, #8
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 80059f6:	2300      	movs	r3, #0
 80059f8:	60bb      	str	r3, [r7, #8]
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	60bb      	str	r3, [r7, #8]
 8005a02:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d04f      	beq.n	8005aac <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	685a      	ldr	r2, [r3, #4]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005a1a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005a24:	69fb      	ldr	r3, [r7, #28]
 8005a26:	f003 0302 	and.w	r3, r3, #2
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d104      	bne.n	8005a38 <HAL_SPI_IRQHandler+0x168>
 8005a2e:	69fb      	ldr	r3, [r7, #28]
 8005a30:	f003 0301 	and.w	r3, r3, #1
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d034      	beq.n	8005aa2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f022 0203 	bic.w	r2, r2, #3
 8005a46:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d011      	beq.n	8005a74 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a54:	4a17      	ldr	r2, [pc, #92]	; (8005ab4 <HAL_SPI_IRQHandler+0x1e4>)
 8005a56:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a5c:	4618      	mov	r0, r3
 8005a5e:	f7fc fd54 	bl	800250a <HAL_DMA_Abort_IT>
 8005a62:	4603      	mov	r3, r0
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d005      	beq.n	8005a74 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d016      	beq.n	8005aaa <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a80:	4a0c      	ldr	r2, [pc, #48]	; (8005ab4 <HAL_SPI_IRQHandler+0x1e4>)
 8005a82:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005a88:	4618      	mov	r0, r3
 8005a8a:	f7fc fd3e 	bl	800250a <HAL_DMA_Abort_IT>
 8005a8e:	4603      	mov	r3, r0
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d00a      	beq.n	8005aaa <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005a98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005aa0:	e003      	b.n	8005aaa <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005aa2:	6878      	ldr	r0, [r7, #4]
 8005aa4:	f000 f808 	bl	8005ab8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005aa8:	e000      	b.n	8005aac <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005aaa:	bf00      	nop
    return;
 8005aac:	bf00      	nop
  }
}
 8005aae:	3720      	adds	r7, #32
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	bd80      	pop	{r7, pc}
 8005ab4:	08005acd 	.word	0x08005acd

08005ab8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005ab8:	b480      	push	{r7}
 8005aba:	b083      	sub	sp, #12
 8005abc:	af00      	add	r7, sp, #0
 8005abe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005ac0:	bf00      	nop
 8005ac2:	370c      	adds	r7, #12
 8005ac4:	46bd      	mov	sp, r7
 8005ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aca:	4770      	bx	lr

08005acc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005acc:	b580      	push	{r7, lr}
 8005ace:	b084      	sub	sp, #16
 8005ad0:	af00      	add	r7, sp, #0
 8005ad2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	2200      	movs	r2, #0
 8005ade:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2200      	movs	r2, #0
 8005ae6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f7ff ffe5 	bl	8005ab8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005aee:	bf00      	nop
 8005af0:	3710      	adds	r7, #16
 8005af2:	46bd      	mov	sp, r7
 8005af4:	bd80      	pop	{r7, pc}

08005af6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005af6:	b580      	push	{r7, lr}
 8005af8:	b082      	sub	sp, #8
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d101      	bne.n	8005b08 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005b04:	2301      	movs	r3, #1
 8005b06:	e049      	b.n	8005b9c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b0e:	b2db      	uxtb	r3, r3
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d106      	bne.n	8005b22 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005b1c:	6878      	ldr	r0, [r7, #4]
 8005b1e:	f7fc f90f 	bl	8001d40 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2202      	movs	r2, #2
 8005b26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681a      	ldr	r2, [r3, #0]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	3304      	adds	r3, #4
 8005b32:	4619      	mov	r1, r3
 8005b34:	4610      	mov	r0, r2
 8005b36:	f000 fb99 	bl	800626c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2201      	movs	r2, #1
 8005b3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2201      	movs	r2, #1
 8005b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2201      	movs	r2, #1
 8005b4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	2201      	movs	r2, #1
 8005b56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2201      	movs	r2, #1
 8005b5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	2201      	movs	r2, #1
 8005b66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	2201      	movs	r2, #1
 8005b76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	2201      	movs	r2, #1
 8005b7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	2201      	movs	r2, #1
 8005b86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	2201      	movs	r2, #1
 8005b8e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	2201      	movs	r2, #1
 8005b96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3708      	adds	r7, #8
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ba4:	b480      	push	{r7}
 8005ba6:	b085      	sub	sp, #20
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d001      	beq.n	8005bbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005bb8:	2301      	movs	r3, #1
 8005bba:	e054      	b.n	8005c66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2202      	movs	r2, #2
 8005bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	68da      	ldr	r2, [r3, #12]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	f042 0201 	orr.w	r2, r2, #1
 8005bd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	4a26      	ldr	r2, [pc, #152]	; (8005c74 <HAL_TIM_Base_Start_IT+0xd0>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d022      	beq.n	8005c24 <HAL_TIM_Base_Start_IT+0x80>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005be6:	d01d      	beq.n	8005c24 <HAL_TIM_Base_Start_IT+0x80>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a22      	ldr	r2, [pc, #136]	; (8005c78 <HAL_TIM_Base_Start_IT+0xd4>)
 8005bee:	4293      	cmp	r3, r2
 8005bf0:	d018      	beq.n	8005c24 <HAL_TIM_Base_Start_IT+0x80>
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	4a21      	ldr	r2, [pc, #132]	; (8005c7c <HAL_TIM_Base_Start_IT+0xd8>)
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d013      	beq.n	8005c24 <HAL_TIM_Base_Start_IT+0x80>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	4a1f      	ldr	r2, [pc, #124]	; (8005c80 <HAL_TIM_Base_Start_IT+0xdc>)
 8005c02:	4293      	cmp	r3, r2
 8005c04:	d00e      	beq.n	8005c24 <HAL_TIM_Base_Start_IT+0x80>
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a1e      	ldr	r2, [pc, #120]	; (8005c84 <HAL_TIM_Base_Start_IT+0xe0>)
 8005c0c:	4293      	cmp	r3, r2
 8005c0e:	d009      	beq.n	8005c24 <HAL_TIM_Base_Start_IT+0x80>
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	4a1c      	ldr	r2, [pc, #112]	; (8005c88 <HAL_TIM_Base_Start_IT+0xe4>)
 8005c16:	4293      	cmp	r3, r2
 8005c18:	d004      	beq.n	8005c24 <HAL_TIM_Base_Start_IT+0x80>
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	4a1b      	ldr	r2, [pc, #108]	; (8005c8c <HAL_TIM_Base_Start_IT+0xe8>)
 8005c20:	4293      	cmp	r3, r2
 8005c22:	d115      	bne.n	8005c50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	689a      	ldr	r2, [r3, #8]
 8005c2a:	4b19      	ldr	r3, [pc, #100]	; (8005c90 <HAL_TIM_Base_Start_IT+0xec>)
 8005c2c:	4013      	ands	r3, r2
 8005c2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	2b06      	cmp	r3, #6
 8005c34:	d015      	beq.n	8005c62 <HAL_TIM_Base_Start_IT+0xbe>
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005c3c:	d011      	beq.n	8005c62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	681a      	ldr	r2, [r3, #0]
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	f042 0201 	orr.w	r2, r2, #1
 8005c4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c4e:	e008      	b.n	8005c62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	681a      	ldr	r2, [r3, #0]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	f042 0201 	orr.w	r2, r2, #1
 8005c5e:	601a      	str	r2, [r3, #0]
 8005c60:	e000      	b.n	8005c64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005c62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005c64:	2300      	movs	r3, #0
}
 8005c66:	4618      	mov	r0, r3
 8005c68:	3714      	adds	r7, #20
 8005c6a:	46bd      	mov	sp, r7
 8005c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c70:	4770      	bx	lr
 8005c72:	bf00      	nop
 8005c74:	40010000 	.word	0x40010000
 8005c78:	40000400 	.word	0x40000400
 8005c7c:	40000800 	.word	0x40000800
 8005c80:	40000c00 	.word	0x40000c00
 8005c84:	40010400 	.word	0x40010400
 8005c88:	40014000 	.word	0x40014000
 8005c8c:	40001800 	.word	0x40001800
 8005c90:	00010007 	.word	0x00010007

08005c94 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b082      	sub	sp, #8
 8005c98:	af00      	add	r7, sp, #0
 8005c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d101      	bne.n	8005ca6 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	e049      	b.n	8005d3a <HAL_TIM_OC_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cac:	b2db      	uxtb	r3, r3
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d106      	bne.n	8005cc0 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	2200      	movs	r2, #0
 8005cb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8005cba:	6878      	ldr	r0, [r7, #4]
 8005cbc:	f000 f841 	bl	8005d42 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	2202      	movs	r2, #2
 8005cc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681a      	ldr	r2, [r3, #0]
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	3304      	adds	r3, #4
 8005cd0:	4619      	mov	r1, r3
 8005cd2:	4610      	mov	r0, r2
 8005cd4:	f000 faca 	bl	800626c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	2201      	movs	r2, #1
 8005cdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2201      	movs	r2, #1
 8005cec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2201      	movs	r2, #1
 8005cf4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2201      	movs	r2, #1
 8005cfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	2201      	movs	r2, #1
 8005d04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2201      	movs	r2, #1
 8005d0c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	2201      	movs	r2, #1
 8005d14:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d18:	687b      	ldr	r3, [r7, #4]
 8005d1a:	2201      	movs	r2, #1
 8005d1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2201      	movs	r2, #1
 8005d24:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2201      	movs	r2, #1
 8005d2c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	2201      	movs	r2, #1
 8005d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d38:	2300      	movs	r3, #0
}
 8005d3a:	4618      	mov	r0, r3
 8005d3c:	3708      	adds	r7, #8
 8005d3e:	46bd      	mov	sp, r7
 8005d40:	bd80      	pop	{r7, pc}

08005d42 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d56:	b580      	push	{r7, lr}
 8005d58:	b082      	sub	sp, #8
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	f003 0302 	and.w	r3, r3, #2
 8005d68:	2b02      	cmp	r3, #2
 8005d6a:	d122      	bne.n	8005db2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	68db      	ldr	r3, [r3, #12]
 8005d72:	f003 0302 	and.w	r3, r3, #2
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d11b      	bne.n	8005db2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f06f 0202 	mvn.w	r2, #2
 8005d82:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2201      	movs	r2, #1
 8005d88:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	699b      	ldr	r3, [r3, #24]
 8005d90:	f003 0303 	and.w	r3, r3, #3
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d003      	beq.n	8005da0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d98:	6878      	ldr	r0, [r7, #4]
 8005d9a:	f000 fa49 	bl	8006230 <HAL_TIM_IC_CaptureCallback>
 8005d9e:	e005      	b.n	8005dac <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005da0:	6878      	ldr	r0, [r7, #4]
 8005da2:	f000 fa3b 	bl	800621c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f000 fa4c 	bl	8006244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2200      	movs	r2, #0
 8005db0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	691b      	ldr	r3, [r3, #16]
 8005db8:	f003 0304 	and.w	r3, r3, #4
 8005dbc:	2b04      	cmp	r3, #4
 8005dbe:	d122      	bne.n	8005e06 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	68db      	ldr	r3, [r3, #12]
 8005dc6:	f003 0304 	and.w	r3, r3, #4
 8005dca:	2b04      	cmp	r3, #4
 8005dcc:	d11b      	bne.n	8005e06 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	f06f 0204 	mvn.w	r2, #4
 8005dd6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dd8:	687b      	ldr	r3, [r7, #4]
 8005dda:	2202      	movs	r2, #2
 8005ddc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d003      	beq.n	8005df4 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dec:	6878      	ldr	r0, [r7, #4]
 8005dee:	f000 fa1f 	bl	8006230 <HAL_TIM_IC_CaptureCallback>
 8005df2:	e005      	b.n	8005e00 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005df4:	6878      	ldr	r0, [r7, #4]
 8005df6:	f000 fa11 	bl	800621c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fa22 	bl	8006244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2200      	movs	r2, #0
 8005e04:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	691b      	ldr	r3, [r3, #16]
 8005e0c:	f003 0308 	and.w	r3, r3, #8
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d122      	bne.n	8005e5a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	68db      	ldr	r3, [r3, #12]
 8005e1a:	f003 0308 	and.w	r3, r3, #8
 8005e1e:	2b08      	cmp	r3, #8
 8005e20:	d11b      	bne.n	8005e5a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	f06f 0208 	mvn.w	r2, #8
 8005e2a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	2204      	movs	r2, #4
 8005e30:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	69db      	ldr	r3, [r3, #28]
 8005e38:	f003 0303 	and.w	r3, r3, #3
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d003      	beq.n	8005e48 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e40:	6878      	ldr	r0, [r7, #4]
 8005e42:	f000 f9f5 	bl	8006230 <HAL_TIM_IC_CaptureCallback>
 8005e46:	e005      	b.n	8005e54 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f000 f9e7 	bl	800621c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e4e:	6878      	ldr	r0, [r7, #4]
 8005e50:	f000 f9f8 	bl	8006244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2200      	movs	r2, #0
 8005e58:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	691b      	ldr	r3, [r3, #16]
 8005e60:	f003 0310 	and.w	r3, r3, #16
 8005e64:	2b10      	cmp	r3, #16
 8005e66:	d122      	bne.n	8005eae <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	68db      	ldr	r3, [r3, #12]
 8005e6e:	f003 0310 	and.w	r3, r3, #16
 8005e72:	2b10      	cmp	r3, #16
 8005e74:	d11b      	bne.n	8005eae <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f06f 0210 	mvn.w	r2, #16
 8005e7e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2208      	movs	r2, #8
 8005e84:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	681b      	ldr	r3, [r3, #0]
 8005e8a:	69db      	ldr	r3, [r3, #28]
 8005e8c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d003      	beq.n	8005e9c <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e94:	6878      	ldr	r0, [r7, #4]
 8005e96:	f000 f9cb 	bl	8006230 <HAL_TIM_IC_CaptureCallback>
 8005e9a:	e005      	b.n	8005ea8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e9c:	6878      	ldr	r0, [r7, #4]
 8005e9e:	f000 f9bd 	bl	800621c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f000 f9ce 	bl	8006244 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2200      	movs	r2, #0
 8005eac:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	691b      	ldr	r3, [r3, #16]
 8005eb4:	f003 0301 	and.w	r3, r3, #1
 8005eb8:	2b01      	cmp	r3, #1
 8005eba:	d10e      	bne.n	8005eda <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	68db      	ldr	r3, [r3, #12]
 8005ec2:	f003 0301 	and.w	r3, r3, #1
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	d107      	bne.n	8005eda <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f06f 0201 	mvn.w	r2, #1
 8005ed2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f7fb f92d 	bl	8001134 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	691b      	ldr	r3, [r3, #16]
 8005ee0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ee4:	2b80      	cmp	r3, #128	; 0x80
 8005ee6:	d10e      	bne.n	8005f06 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68db      	ldr	r3, [r3, #12]
 8005eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef2:	2b80      	cmp	r3, #128	; 0x80
 8005ef4:	d107      	bne.n	8005f06 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005efe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005f00:	6878      	ldr	r0, [r7, #4]
 8005f02:	f000 fde3 	bl	8006acc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	691b      	ldr	r3, [r3, #16]
 8005f0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005f14:	d10e      	bne.n	8005f34 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005f20:	2b80      	cmp	r3, #128	; 0x80
 8005f22:	d107      	bne.n	8005f34 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005f2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005f2e:	6878      	ldr	r0, [r7, #4]
 8005f30:	f000 fdd6 	bl	8006ae0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	691b      	ldr	r3, [r3, #16]
 8005f3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f3e:	2b40      	cmp	r3, #64	; 0x40
 8005f40:	d10e      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f4c:	2b40      	cmp	r3, #64	; 0x40
 8005f4e:	d107      	bne.n	8005f60 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f5a:	6878      	ldr	r0, [r7, #4]
 8005f5c:	f000 f97c 	bl	8006258 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	691b      	ldr	r3, [r3, #16]
 8005f66:	f003 0320 	and.w	r3, r3, #32
 8005f6a:	2b20      	cmp	r3, #32
 8005f6c:	d10e      	bne.n	8005f8c <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	68db      	ldr	r3, [r3, #12]
 8005f74:	f003 0320 	and.w	r3, r3, #32
 8005f78:	2b20      	cmp	r3, #32
 8005f7a:	d107      	bne.n	8005f8c <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	681b      	ldr	r3, [r3, #0]
 8005f80:	f06f 0220 	mvn.w	r2, #32
 8005f84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	f000 fd96 	bl	8006ab8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f8c:	bf00      	nop
 8005f8e:	3708      	adds	r7, #8
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           const TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005faa:	2b01      	cmp	r3, #1
 8005fac:	d101      	bne.n	8005fb2 <HAL_TIM_OC_ConfigChannel+0x1e>
 8005fae:	2302      	movs	r3, #2
 8005fb0:	e066      	b.n	8006080 <HAL_TIM_OC_ConfigChannel+0xec>
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	2201      	movs	r2, #1
 8005fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2b14      	cmp	r3, #20
 8005fbe:	d857      	bhi.n	8006070 <HAL_TIM_OC_ConfigChannel+0xdc>
 8005fc0:	a201      	add	r2, pc, #4	; (adr r2, 8005fc8 <HAL_TIM_OC_ConfigChannel+0x34>)
 8005fc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc6:	bf00      	nop
 8005fc8:	0800601d 	.word	0x0800601d
 8005fcc:	08006071 	.word	0x08006071
 8005fd0:	08006071 	.word	0x08006071
 8005fd4:	08006071 	.word	0x08006071
 8005fd8:	0800602b 	.word	0x0800602b
 8005fdc:	08006071 	.word	0x08006071
 8005fe0:	08006071 	.word	0x08006071
 8005fe4:	08006071 	.word	0x08006071
 8005fe8:	08006039 	.word	0x08006039
 8005fec:	08006071 	.word	0x08006071
 8005ff0:	08006071 	.word	0x08006071
 8005ff4:	08006071 	.word	0x08006071
 8005ff8:	08006047 	.word	0x08006047
 8005ffc:	08006071 	.word	0x08006071
 8006000:	08006071 	.word	0x08006071
 8006004:	08006071 	.word	0x08006071
 8006008:	08006055 	.word	0x08006055
 800600c:	08006071 	.word	0x08006071
 8006010:	08006071 	.word	0x08006071
 8006014:	08006071 	.word	0x08006071
 8006018:	08006063 	.word	0x08006063
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	68b9      	ldr	r1, [r7, #8]
 8006022:	4618      	mov	r0, r3
 8006024:	f000 f9c2 	bl	80063ac <TIM_OC1_SetConfig>
      break;
 8006028:	e025      	b.n	8006076 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	681b      	ldr	r3, [r3, #0]
 800602e:	68b9      	ldr	r1, [r7, #8]
 8006030:	4618      	mov	r0, r3
 8006032:	f000 fa2d 	bl	8006490 <TIM_OC2_SetConfig>
      break;
 8006036:	e01e      	b.n	8006076 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	681b      	ldr	r3, [r3, #0]
 800603c:	68b9      	ldr	r1, [r7, #8]
 800603e:	4618      	mov	r0, r3
 8006040:	f000 fa9e 	bl	8006580 <TIM_OC3_SetConfig>
      break;
 8006044:	e017      	b.n	8006076 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	68b9      	ldr	r1, [r7, #8]
 800604c:	4618      	mov	r0, r3
 800604e:	f000 fb0d 	bl	800666c <TIM_OC4_SetConfig>
      break;
 8006052:	e010      	b.n	8006076 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 5 in Output Compare */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	68b9      	ldr	r1, [r7, #8]
 800605a:	4618      	mov	r0, r3
 800605c:	f000 fb5e 	bl	800671c <TIM_OC5_SetConfig>
      break;
 8006060:	e009      	b.n	8006076 <HAL_TIM_OC_ConfigChannel+0xe2>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 6 in Output Compare */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68b9      	ldr	r1, [r7, #8]
 8006068:	4618      	mov	r0, r3
 800606a:	f000 fba9 	bl	80067c0 <TIM_OC6_SetConfig>
      break;
 800606e:	e002      	b.n	8006076 <HAL_TIM_OC_ConfigChannel+0xe2>
    }

    default:
      status = HAL_ERROR;
 8006070:	2301      	movs	r3, #1
 8006072:	75fb      	strb	r3, [r7, #23]
      break;
 8006074:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800607e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3718      	adds	r7, #24
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <HAL_TIM_ConfigClockSource+0x1c>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e0b4      	b.n	800620e <HAL_TIM_ConfigClockSource+0x186>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060bc:	68ba      	ldr	r2, [r7, #8]
 80060be:	4b56      	ldr	r3, [pc, #344]	; (8006218 <HAL_TIM_ConfigClockSource+0x190>)
 80060c0:	4013      	ands	r3, r2
 80060c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060dc:	d03e      	beq.n	800615c <HAL_TIM_ConfigClockSource+0xd4>
 80060de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e2:	f200 8087 	bhi.w	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 80060e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ea:	f000 8086 	beq.w	80061fa <HAL_TIM_ConfigClockSource+0x172>
 80060ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f2:	d87f      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 80060f4:	2b70      	cmp	r3, #112	; 0x70
 80060f6:	d01a      	beq.n	800612e <HAL_TIM_ConfigClockSource+0xa6>
 80060f8:	2b70      	cmp	r3, #112	; 0x70
 80060fa:	d87b      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 80060fc:	2b60      	cmp	r3, #96	; 0x60
 80060fe:	d050      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0x11a>
 8006100:	2b60      	cmp	r3, #96	; 0x60
 8006102:	d877      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 8006104:	2b50      	cmp	r3, #80	; 0x50
 8006106:	d03c      	beq.n	8006182 <HAL_TIM_ConfigClockSource+0xfa>
 8006108:	2b50      	cmp	r3, #80	; 0x50
 800610a:	d873      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 800610c:	2b40      	cmp	r3, #64	; 0x40
 800610e:	d058      	beq.n	80061c2 <HAL_TIM_ConfigClockSource+0x13a>
 8006110:	2b40      	cmp	r3, #64	; 0x40
 8006112:	d86f      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 8006114:	2b30      	cmp	r3, #48	; 0x30
 8006116:	d064      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x15a>
 8006118:	2b30      	cmp	r3, #48	; 0x30
 800611a:	d86b      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 800611c:	2b20      	cmp	r3, #32
 800611e:	d060      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x15a>
 8006120:	2b20      	cmp	r3, #32
 8006122:	d867      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 8006124:	2b00      	cmp	r3, #0
 8006126:	d05c      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x15a>
 8006128:	2b10      	cmp	r3, #16
 800612a:	d05a      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x15a>
 800612c:	e062      	b.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800613e:	f000 fc0d 	bl	800695c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006150:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	609a      	str	r2, [r3, #8]
      break;
 800615a:	e04f      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800616c:	f000 fbf6 	bl	800695c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800617e:	609a      	str	r2, [r3, #8]
      break;
 8006180:	e03c      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800618e:	461a      	mov	r2, r3
 8006190:	f000 fb6a 	bl	8006868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2150      	movs	r1, #80	; 0x50
 800619a:	4618      	mov	r0, r3
 800619c:	f000 fbc3 	bl	8006926 <TIM_ITRx_SetConfig>
      break;
 80061a0:	e02c      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80061ae:	461a      	mov	r2, r3
 80061b0:	f000 fb89 	bl	80068c6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2160      	movs	r1, #96	; 0x60
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fbb3 	bl	8006926 <TIM_ITRx_SetConfig>
      break;
 80061c0:	e01c      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80061ce:	461a      	mov	r2, r3
 80061d0:	f000 fb4a 	bl	8006868 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2140      	movs	r1, #64	; 0x40
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fba3 	bl	8006926 <TIM_ITRx_SetConfig>
      break;
 80061e0:	e00c      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4619      	mov	r1, r3
 80061ec:	4610      	mov	r0, r2
 80061ee:	f000 fb9a 	bl	8006926 <TIM_ITRx_SetConfig>
      break;
 80061f2:	e003      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	73fb      	strb	r3, [r7, #15]
      break;
 80061f8:	e000      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80061fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800620c:	7bfb      	ldrb	r3, [r7, #15]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}
 8006216:	bf00      	nop
 8006218:	fffeff88 	.word	0xfffeff88

0800621c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800626c:	b480      	push	{r7}
 800626e:	b085      	sub	sp, #20
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
 8006274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	4a40      	ldr	r2, [pc, #256]	; (8006380 <TIM_Base_SetConfig+0x114>)
 8006280:	4293      	cmp	r3, r2
 8006282:	d013      	beq.n	80062ac <TIM_Base_SetConfig+0x40>
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800628a:	d00f      	beq.n	80062ac <TIM_Base_SetConfig+0x40>
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	4a3d      	ldr	r2, [pc, #244]	; (8006384 <TIM_Base_SetConfig+0x118>)
 8006290:	4293      	cmp	r3, r2
 8006292:	d00b      	beq.n	80062ac <TIM_Base_SetConfig+0x40>
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	4a3c      	ldr	r2, [pc, #240]	; (8006388 <TIM_Base_SetConfig+0x11c>)
 8006298:	4293      	cmp	r3, r2
 800629a:	d007      	beq.n	80062ac <TIM_Base_SetConfig+0x40>
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	4a3b      	ldr	r2, [pc, #236]	; (800638c <TIM_Base_SetConfig+0x120>)
 80062a0:	4293      	cmp	r3, r2
 80062a2:	d003      	beq.n	80062ac <TIM_Base_SetConfig+0x40>
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	4a3a      	ldr	r2, [pc, #232]	; (8006390 <TIM_Base_SetConfig+0x124>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d108      	bne.n	80062be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	68fa      	ldr	r2, [r7, #12]
 80062ba:	4313      	orrs	r3, r2
 80062bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a2f      	ldr	r2, [pc, #188]	; (8006380 <TIM_Base_SetConfig+0x114>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d02b      	beq.n	800631e <TIM_Base_SetConfig+0xb2>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062cc:	d027      	beq.n	800631e <TIM_Base_SetConfig+0xb2>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a2c      	ldr	r2, [pc, #176]	; (8006384 <TIM_Base_SetConfig+0x118>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d023      	beq.n	800631e <TIM_Base_SetConfig+0xb2>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a2b      	ldr	r2, [pc, #172]	; (8006388 <TIM_Base_SetConfig+0x11c>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d01f      	beq.n	800631e <TIM_Base_SetConfig+0xb2>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a2a      	ldr	r2, [pc, #168]	; (800638c <TIM_Base_SetConfig+0x120>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d01b      	beq.n	800631e <TIM_Base_SetConfig+0xb2>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a29      	ldr	r2, [pc, #164]	; (8006390 <TIM_Base_SetConfig+0x124>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d017      	beq.n	800631e <TIM_Base_SetConfig+0xb2>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	4a28      	ldr	r2, [pc, #160]	; (8006394 <TIM_Base_SetConfig+0x128>)
 80062f2:	4293      	cmp	r3, r2
 80062f4:	d013      	beq.n	800631e <TIM_Base_SetConfig+0xb2>
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	4a27      	ldr	r2, [pc, #156]	; (8006398 <TIM_Base_SetConfig+0x12c>)
 80062fa:	4293      	cmp	r3, r2
 80062fc:	d00f      	beq.n	800631e <TIM_Base_SetConfig+0xb2>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	4a26      	ldr	r2, [pc, #152]	; (800639c <TIM_Base_SetConfig+0x130>)
 8006302:	4293      	cmp	r3, r2
 8006304:	d00b      	beq.n	800631e <TIM_Base_SetConfig+0xb2>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	4a25      	ldr	r2, [pc, #148]	; (80063a0 <TIM_Base_SetConfig+0x134>)
 800630a:	4293      	cmp	r3, r2
 800630c:	d007      	beq.n	800631e <TIM_Base_SetConfig+0xb2>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	4a24      	ldr	r2, [pc, #144]	; (80063a4 <TIM_Base_SetConfig+0x138>)
 8006312:	4293      	cmp	r3, r2
 8006314:	d003      	beq.n	800631e <TIM_Base_SetConfig+0xb2>
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	4a23      	ldr	r2, [pc, #140]	; (80063a8 <TIM_Base_SetConfig+0x13c>)
 800631a:	4293      	cmp	r3, r2
 800631c:	d108      	bne.n	8006330 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006324:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006326:	683b      	ldr	r3, [r7, #0]
 8006328:	68db      	ldr	r3, [r3, #12]
 800632a:	68fa      	ldr	r2, [r7, #12]
 800632c:	4313      	orrs	r3, r2
 800632e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	695b      	ldr	r3, [r3, #20]
 800633a:	4313      	orrs	r3, r2
 800633c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	68fa      	ldr	r2, [r7, #12]
 8006342:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006344:	683b      	ldr	r3, [r7, #0]
 8006346:	689a      	ldr	r2, [r3, #8]
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	4a0a      	ldr	r2, [pc, #40]	; (8006380 <TIM_Base_SetConfig+0x114>)
 8006358:	4293      	cmp	r3, r2
 800635a:	d003      	beq.n	8006364 <TIM_Base_SetConfig+0xf8>
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	4a0c      	ldr	r2, [pc, #48]	; (8006390 <TIM_Base_SetConfig+0x124>)
 8006360:	4293      	cmp	r3, r2
 8006362:	d103      	bne.n	800636c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	691a      	ldr	r2, [r3, #16]
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	615a      	str	r2, [r3, #20]
}
 8006372:	bf00      	nop
 8006374:	3714      	adds	r7, #20
 8006376:	46bd      	mov	sp, r7
 8006378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800637c:	4770      	bx	lr
 800637e:	bf00      	nop
 8006380:	40010000 	.word	0x40010000
 8006384:	40000400 	.word	0x40000400
 8006388:	40000800 	.word	0x40000800
 800638c:	40000c00 	.word	0x40000c00
 8006390:	40010400 	.word	0x40010400
 8006394:	40014000 	.word	0x40014000
 8006398:	40014400 	.word	0x40014400
 800639c:	40014800 	.word	0x40014800
 80063a0:	40001800 	.word	0x40001800
 80063a4:	40001c00 	.word	0x40001c00
 80063a8:	40002000 	.word	0x40002000

080063ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b087      	sub	sp, #28
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
 80063b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	f023 0201 	bic.w	r2, r3, #1
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	6a1b      	ldr	r3, [r3, #32]
 80063c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	699b      	ldr	r3, [r3, #24]
 80063d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80063d4:	68fa      	ldr	r2, [r7, #12]
 80063d6:	4b2b      	ldr	r3, [pc, #172]	; (8006484 <TIM_OC1_SetConfig+0xd8>)
 80063d8:	4013      	ands	r3, r2
 80063da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	f023 0303 	bic.w	r3, r3, #3
 80063e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	68fa      	ldr	r2, [r7, #12]
 80063ea:	4313      	orrs	r3, r2
 80063ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	f023 0302 	bic.w	r3, r3, #2
 80063f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	689b      	ldr	r3, [r3, #8]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	4a21      	ldr	r2, [pc, #132]	; (8006488 <TIM_OC1_SetConfig+0xdc>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d003      	beq.n	8006410 <TIM_OC1_SetConfig+0x64>
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	4a20      	ldr	r2, [pc, #128]	; (800648c <TIM_OC1_SetConfig+0xe0>)
 800640c:	4293      	cmp	r3, r2
 800640e:	d10c      	bne.n	800642a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f023 0308 	bic.w	r3, r3, #8
 8006416:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	68db      	ldr	r3, [r3, #12]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	4313      	orrs	r3, r2
 8006420:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006422:	697b      	ldr	r3, [r7, #20]
 8006424:	f023 0304 	bic.w	r3, r3, #4
 8006428:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	4a16      	ldr	r2, [pc, #88]	; (8006488 <TIM_OC1_SetConfig+0xdc>)
 800642e:	4293      	cmp	r3, r2
 8006430:	d003      	beq.n	800643a <TIM_OC1_SetConfig+0x8e>
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	4a15      	ldr	r2, [pc, #84]	; (800648c <TIM_OC1_SetConfig+0xe0>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d111      	bne.n	800645e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800643a:	693b      	ldr	r3, [r7, #16]
 800643c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006440:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006442:	693b      	ldr	r3, [r7, #16]
 8006444:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006448:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	695b      	ldr	r3, [r3, #20]
 800644e:	693a      	ldr	r2, [r7, #16]
 8006450:	4313      	orrs	r3, r2
 8006452:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006454:	683b      	ldr	r3, [r7, #0]
 8006456:	699b      	ldr	r3, [r3, #24]
 8006458:	693a      	ldr	r2, [r7, #16]
 800645a:	4313      	orrs	r3, r2
 800645c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	693a      	ldr	r2, [r7, #16]
 8006462:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	68fa      	ldr	r2, [r7, #12]
 8006468:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	685a      	ldr	r2, [r3, #4]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	697a      	ldr	r2, [r7, #20]
 8006476:	621a      	str	r2, [r3, #32]
}
 8006478:	bf00      	nop
 800647a:	371c      	adds	r7, #28
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr
 8006484:	fffeff8f 	.word	0xfffeff8f
 8006488:	40010000 	.word	0x40010000
 800648c:	40010400 	.word	0x40010400

08006490 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	6078      	str	r0, [r7, #4]
 8006498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6a1b      	ldr	r3, [r3, #32]
 800649e:	f023 0210 	bic.w	r2, r3, #16
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a1b      	ldr	r3, [r3, #32]
 80064aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685b      	ldr	r3, [r3, #4]
 80064b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	4b2e      	ldr	r3, [pc, #184]	; (8006574 <TIM_OC2_SetConfig+0xe4>)
 80064bc:	4013      	ands	r3, r2
 80064be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80064c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80064c8:	683b      	ldr	r3, [r7, #0]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	021b      	lsls	r3, r3, #8
 80064ce:	68fa      	ldr	r2, [r7, #12]
 80064d0:	4313      	orrs	r3, r2
 80064d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	f023 0320 	bic.w	r3, r3, #32
 80064da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80064dc:	683b      	ldr	r3, [r7, #0]
 80064de:	689b      	ldr	r3, [r3, #8]
 80064e0:	011b      	lsls	r3, r3, #4
 80064e2:	697a      	ldr	r2, [r7, #20]
 80064e4:	4313      	orrs	r3, r2
 80064e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a23      	ldr	r2, [pc, #140]	; (8006578 <TIM_OC2_SetConfig+0xe8>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d003      	beq.n	80064f8 <TIM_OC2_SetConfig+0x68>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a22      	ldr	r2, [pc, #136]	; (800657c <TIM_OC2_SetConfig+0xec>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d10d      	bne.n	8006514 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80064fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	68db      	ldr	r3, [r3, #12]
 8006504:	011b      	lsls	r3, r3, #4
 8006506:	697a      	ldr	r2, [r7, #20]
 8006508:	4313      	orrs	r3, r2
 800650a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800650c:	697b      	ldr	r3, [r7, #20]
 800650e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006512:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	4a18      	ldr	r2, [pc, #96]	; (8006578 <TIM_OC2_SetConfig+0xe8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d003      	beq.n	8006524 <TIM_OC2_SetConfig+0x94>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	4a17      	ldr	r2, [pc, #92]	; (800657c <TIM_OC2_SetConfig+0xec>)
 8006520:	4293      	cmp	r3, r2
 8006522:	d113      	bne.n	800654c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800652a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800652c:	693b      	ldr	r3, [r7, #16]
 800652e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006532:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	695b      	ldr	r3, [r3, #20]
 8006538:	009b      	lsls	r3, r3, #2
 800653a:	693a      	ldr	r2, [r7, #16]
 800653c:	4313      	orrs	r3, r2
 800653e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006540:	683b      	ldr	r3, [r7, #0]
 8006542:	699b      	ldr	r3, [r3, #24]
 8006544:	009b      	lsls	r3, r3, #2
 8006546:	693a      	ldr	r2, [r7, #16]
 8006548:	4313      	orrs	r3, r2
 800654a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	693a      	ldr	r2, [r7, #16]
 8006550:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	68fa      	ldr	r2, [r7, #12]
 8006556:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	685a      	ldr	r2, [r3, #4]
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	697a      	ldr	r2, [r7, #20]
 8006564:	621a      	str	r2, [r3, #32]
}
 8006566:	bf00      	nop
 8006568:	371c      	adds	r7, #28
 800656a:	46bd      	mov	sp, r7
 800656c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006570:	4770      	bx	lr
 8006572:	bf00      	nop
 8006574:	feff8fff 	.word	0xfeff8fff
 8006578:	40010000 	.word	0x40010000
 800657c:	40010400 	.word	0x40010400

08006580 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006580:	b480      	push	{r7}
 8006582:	b087      	sub	sp, #28
 8006584:	af00      	add	r7, sp, #0
 8006586:	6078      	str	r0, [r7, #4]
 8006588:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	6a1b      	ldr	r3, [r3, #32]
 800658e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6a1b      	ldr	r3, [r3, #32]
 800659a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	685b      	ldr	r3, [r3, #4]
 80065a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	69db      	ldr	r3, [r3, #28]
 80065a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80065a8:	68fa      	ldr	r2, [r7, #12]
 80065aa:	4b2d      	ldr	r3, [pc, #180]	; (8006660 <TIM_OC3_SetConfig+0xe0>)
 80065ac:	4013      	ands	r3, r2
 80065ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f023 0303 	bic.w	r3, r3, #3
 80065b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68fa      	ldr	r2, [r7, #12]
 80065be:	4313      	orrs	r3, r2
 80065c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80065c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	689b      	ldr	r3, [r3, #8]
 80065ce:	021b      	lsls	r3, r3, #8
 80065d0:	697a      	ldr	r2, [r7, #20]
 80065d2:	4313      	orrs	r3, r2
 80065d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	4a22      	ldr	r2, [pc, #136]	; (8006664 <TIM_OC3_SetConfig+0xe4>)
 80065da:	4293      	cmp	r3, r2
 80065dc:	d003      	beq.n	80065e6 <TIM_OC3_SetConfig+0x66>
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	4a21      	ldr	r2, [pc, #132]	; (8006668 <TIM_OC3_SetConfig+0xe8>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d10d      	bne.n	8006602 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80065ec:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80065ee:	683b      	ldr	r3, [r7, #0]
 80065f0:	68db      	ldr	r3, [r3, #12]
 80065f2:	021b      	lsls	r3, r3, #8
 80065f4:	697a      	ldr	r2, [r7, #20]
 80065f6:	4313      	orrs	r3, r2
 80065f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80065fa:	697b      	ldr	r3, [r7, #20]
 80065fc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	4a17      	ldr	r2, [pc, #92]	; (8006664 <TIM_OC3_SetConfig+0xe4>)
 8006606:	4293      	cmp	r3, r2
 8006608:	d003      	beq.n	8006612 <TIM_OC3_SetConfig+0x92>
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	4a16      	ldr	r2, [pc, #88]	; (8006668 <TIM_OC3_SetConfig+0xe8>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d113      	bne.n	800663a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006622:	683b      	ldr	r3, [r7, #0]
 8006624:	695b      	ldr	r3, [r3, #20]
 8006626:	011b      	lsls	r3, r3, #4
 8006628:	693a      	ldr	r2, [r7, #16]
 800662a:	4313      	orrs	r3, r2
 800662c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	699b      	ldr	r3, [r3, #24]
 8006632:	011b      	lsls	r3, r3, #4
 8006634:	693a      	ldr	r2, [r7, #16]
 8006636:	4313      	orrs	r3, r2
 8006638:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	693a      	ldr	r2, [r7, #16]
 800663e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	68fa      	ldr	r2, [r7, #12]
 8006644:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006646:	683b      	ldr	r3, [r7, #0]
 8006648:	685a      	ldr	r2, [r3, #4]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	697a      	ldr	r2, [r7, #20]
 8006652:	621a      	str	r2, [r3, #32]
}
 8006654:	bf00      	nop
 8006656:	371c      	adds	r7, #28
 8006658:	46bd      	mov	sp, r7
 800665a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800665e:	4770      	bx	lr
 8006660:	fffeff8f 	.word	0xfffeff8f
 8006664:	40010000 	.word	0x40010000
 8006668:	40010400 	.word	0x40010400

0800666c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800666c:	b480      	push	{r7}
 800666e:	b087      	sub	sp, #28
 8006670:	af00      	add	r7, sp, #0
 8006672:	6078      	str	r0, [r7, #4]
 8006674:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	6a1b      	ldr	r3, [r3, #32]
 800667a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	6a1b      	ldr	r3, [r3, #32]
 8006686:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	685b      	ldr	r3, [r3, #4]
 800668c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	69db      	ldr	r3, [r3, #28]
 8006692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006694:	68fa      	ldr	r2, [r7, #12]
 8006696:	4b1e      	ldr	r3, [pc, #120]	; (8006710 <TIM_OC4_SetConfig+0xa4>)
 8006698:	4013      	ands	r3, r2
 800669a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066a2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80066a4:	683b      	ldr	r3, [r7, #0]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	021b      	lsls	r3, r3, #8
 80066aa:	68fa      	ldr	r2, [r7, #12]
 80066ac:	4313      	orrs	r3, r2
 80066ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80066b0:	693b      	ldr	r3, [r7, #16]
 80066b2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80066b6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80066b8:	683b      	ldr	r3, [r7, #0]
 80066ba:	689b      	ldr	r3, [r3, #8]
 80066bc:	031b      	lsls	r3, r3, #12
 80066be:	693a      	ldr	r2, [r7, #16]
 80066c0:	4313      	orrs	r3, r2
 80066c2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	4a13      	ldr	r2, [pc, #76]	; (8006714 <TIM_OC4_SetConfig+0xa8>)
 80066c8:	4293      	cmp	r3, r2
 80066ca:	d003      	beq.n	80066d4 <TIM_OC4_SetConfig+0x68>
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	4a12      	ldr	r2, [pc, #72]	; (8006718 <TIM_OC4_SetConfig+0xac>)
 80066d0:	4293      	cmp	r3, r2
 80066d2:	d109      	bne.n	80066e8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80066d4:	697b      	ldr	r3, [r7, #20]
 80066d6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80066da:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80066dc:	683b      	ldr	r3, [r7, #0]
 80066de:	695b      	ldr	r3, [r3, #20]
 80066e0:	019b      	lsls	r3, r3, #6
 80066e2:	697a      	ldr	r2, [r7, #20]
 80066e4:	4313      	orrs	r3, r2
 80066e6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	697a      	ldr	r2, [r7, #20]
 80066ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	68fa      	ldr	r2, [r7, #12]
 80066f2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	693a      	ldr	r2, [r7, #16]
 8006700:	621a      	str	r2, [r3, #32]
}
 8006702:	bf00      	nop
 8006704:	371c      	adds	r7, #28
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
 800670e:	bf00      	nop
 8006710:	feff8fff 	.word	0xfeff8fff
 8006714:	40010000 	.word	0x40010000
 8006718:	40010400 	.word	0x40010400

0800671c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800671c:	b480      	push	{r7}
 800671e:	b087      	sub	sp, #28
 8006720:	af00      	add	r7, sp, #0
 8006722:	6078      	str	r0, [r7, #4]
 8006724:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6a1b      	ldr	r3, [r3, #32]
 800672a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6a1b      	ldr	r3, [r3, #32]
 8006736:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006738:	687b      	ldr	r3, [r7, #4]
 800673a:	685b      	ldr	r3, [r3, #4]
 800673c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006742:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006744:	68fa      	ldr	r2, [r7, #12]
 8006746:	4b1b      	ldr	r3, [pc, #108]	; (80067b4 <TIM_OC5_SetConfig+0x98>)
 8006748:	4013      	ands	r3, r2
 800674a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800674c:	683b      	ldr	r3, [r7, #0]
 800674e:	681b      	ldr	r3, [r3, #0]
 8006750:	68fa      	ldr	r2, [r7, #12]
 8006752:	4313      	orrs	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006756:	693b      	ldr	r3, [r7, #16]
 8006758:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 800675c:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	689b      	ldr	r3, [r3, #8]
 8006762:	041b      	lsls	r3, r3, #16
 8006764:	693a      	ldr	r2, [r7, #16]
 8006766:	4313      	orrs	r3, r2
 8006768:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	4a12      	ldr	r2, [pc, #72]	; (80067b8 <TIM_OC5_SetConfig+0x9c>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d003      	beq.n	800677a <TIM_OC5_SetConfig+0x5e>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	4a11      	ldr	r2, [pc, #68]	; (80067bc <TIM_OC5_SetConfig+0xa0>)
 8006776:	4293      	cmp	r3, r2
 8006778:	d109      	bne.n	800678e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800677a:	697b      	ldr	r3, [r7, #20]
 800677c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006780:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006782:	683b      	ldr	r3, [r7, #0]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	021b      	lsls	r3, r3, #8
 8006788:	697a      	ldr	r2, [r7, #20]
 800678a:	4313      	orrs	r3, r2
 800678c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	697a      	ldr	r2, [r7, #20]
 8006792:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	685a      	ldr	r2, [r3, #4]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	693a      	ldr	r2, [r7, #16]
 80067a6:	621a      	str	r2, [r3, #32]
}
 80067a8:	bf00      	nop
 80067aa:	371c      	adds	r7, #28
 80067ac:	46bd      	mov	sp, r7
 80067ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067b2:	4770      	bx	lr
 80067b4:	fffeff8f 	.word	0xfffeff8f
 80067b8:	40010000 	.word	0x40010000
 80067bc:	40010400 	.word	0x40010400

080067c0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b087      	sub	sp, #28
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
 80067c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a1b      	ldr	r3, [r3, #32]
 80067ce:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6a1b      	ldr	r3, [r3, #32]
 80067da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80067e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80067e8:	68fa      	ldr	r2, [r7, #12]
 80067ea:	4b1c      	ldr	r3, [pc, #112]	; (800685c <TIM_OC6_SetConfig+0x9c>)
 80067ec:	4013      	ands	r3, r2
 80067ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	681b      	ldr	r3, [r3, #0]
 80067f4:	021b      	lsls	r3, r3, #8
 80067f6:	68fa      	ldr	r2, [r7, #12]
 80067f8:	4313      	orrs	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006802:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006804:	683b      	ldr	r3, [r7, #0]
 8006806:	689b      	ldr	r3, [r3, #8]
 8006808:	051b      	lsls	r3, r3, #20
 800680a:	693a      	ldr	r2, [r7, #16]
 800680c:	4313      	orrs	r3, r2
 800680e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	4a13      	ldr	r2, [pc, #76]	; (8006860 <TIM_OC6_SetConfig+0xa0>)
 8006814:	4293      	cmp	r3, r2
 8006816:	d003      	beq.n	8006820 <TIM_OC6_SetConfig+0x60>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4a12      	ldr	r2, [pc, #72]	; (8006864 <TIM_OC6_SetConfig+0xa4>)
 800681c:	4293      	cmp	r3, r2
 800681e:	d109      	bne.n	8006834 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006820:	697b      	ldr	r3, [r7, #20]
 8006822:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006826:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006828:	683b      	ldr	r3, [r7, #0]
 800682a:	695b      	ldr	r3, [r3, #20]
 800682c:	029b      	lsls	r3, r3, #10
 800682e:	697a      	ldr	r2, [r7, #20]
 8006830:	4313      	orrs	r3, r2
 8006832:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	697a      	ldr	r2, [r7, #20]
 8006838:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	68fa      	ldr	r2, [r7, #12]
 800683e:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	685a      	ldr	r2, [r3, #4]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	693a      	ldr	r2, [r7, #16]
 800684c:	621a      	str	r2, [r3, #32]
}
 800684e:	bf00      	nop
 8006850:	371c      	adds	r7, #28
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr
 800685a:	bf00      	nop
 800685c:	feff8fff 	.word	0xfeff8fff
 8006860:	40010000 	.word	0x40010000
 8006864:	40010400 	.word	0x40010400

08006868 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006868:	b480      	push	{r7}
 800686a:	b087      	sub	sp, #28
 800686c:	af00      	add	r7, sp, #0
 800686e:	60f8      	str	r0, [r7, #12]
 8006870:	60b9      	str	r1, [r7, #8]
 8006872:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	6a1b      	ldr	r3, [r3, #32]
 8006878:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800687a:	68fb      	ldr	r3, [r7, #12]
 800687c:	6a1b      	ldr	r3, [r3, #32]
 800687e:	f023 0201 	bic.w	r2, r3, #1
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006886:	68fb      	ldr	r3, [r7, #12]
 8006888:	699b      	ldr	r3, [r3, #24]
 800688a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800688c:	693b      	ldr	r3, [r7, #16]
 800688e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006892:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	011b      	lsls	r3, r3, #4
 8006898:	693a      	ldr	r2, [r7, #16]
 800689a:	4313      	orrs	r3, r2
 800689c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	f023 030a 	bic.w	r3, r3, #10
 80068a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80068a6:	697a      	ldr	r2, [r7, #20]
 80068a8:	68bb      	ldr	r3, [r7, #8]
 80068aa:	4313      	orrs	r3, r2
 80068ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	693a      	ldr	r2, [r7, #16]
 80068b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80068b4:	68fb      	ldr	r3, [r7, #12]
 80068b6:	697a      	ldr	r2, [r7, #20]
 80068b8:	621a      	str	r2, [r3, #32]
}
 80068ba:	bf00      	nop
 80068bc:	371c      	adds	r7, #28
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80068c6:	b480      	push	{r7}
 80068c8:	b087      	sub	sp, #28
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	60f8      	str	r0, [r7, #12]
 80068ce:	60b9      	str	r1, [r7, #8]
 80068d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80068d2:	68fb      	ldr	r3, [r7, #12]
 80068d4:	6a1b      	ldr	r3, [r3, #32]
 80068d6:	f023 0210 	bic.w	r2, r3, #16
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	699b      	ldr	r3, [r3, #24]
 80068e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	6a1b      	ldr	r3, [r3, #32]
 80068e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	031b      	lsls	r3, r3, #12
 80068f6:	697a      	ldr	r2, [r7, #20]
 80068f8:	4313      	orrs	r3, r2
 80068fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80068fc:	693b      	ldr	r3, [r7, #16]
 80068fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006902:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006904:	68bb      	ldr	r3, [r7, #8]
 8006906:	011b      	lsls	r3, r3, #4
 8006908:	693a      	ldr	r2, [r7, #16]
 800690a:	4313      	orrs	r3, r2
 800690c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800690e:	68fb      	ldr	r3, [r7, #12]
 8006910:	697a      	ldr	r2, [r7, #20]
 8006912:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006914:	68fb      	ldr	r3, [r7, #12]
 8006916:	693a      	ldr	r2, [r7, #16]
 8006918:	621a      	str	r2, [r3, #32]
}
 800691a:	bf00      	nop
 800691c:	371c      	adds	r7, #28
 800691e:	46bd      	mov	sp, r7
 8006920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006924:	4770      	bx	lr

08006926 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006926:	b480      	push	{r7}
 8006928:	b085      	sub	sp, #20
 800692a:	af00      	add	r7, sp, #0
 800692c:	6078      	str	r0, [r7, #4]
 800692e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	689b      	ldr	r3, [r3, #8]
 8006934:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800693c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800693e:	683a      	ldr	r2, [r7, #0]
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	4313      	orrs	r3, r2
 8006944:	f043 0307 	orr.w	r3, r3, #7
 8006948:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	68fa      	ldr	r2, [r7, #12]
 800694e:	609a      	str	r2, [r3, #8]
}
 8006950:	bf00      	nop
 8006952:	3714      	adds	r7, #20
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr

0800695c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800695c:	b480      	push	{r7}
 800695e:	b087      	sub	sp, #28
 8006960:	af00      	add	r7, sp, #0
 8006962:	60f8      	str	r0, [r7, #12]
 8006964:	60b9      	str	r1, [r7, #8]
 8006966:	607a      	str	r2, [r7, #4]
 8006968:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	689b      	ldr	r3, [r3, #8]
 800696e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006976:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	021a      	lsls	r2, r3, #8
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	431a      	orrs	r2, r3
 8006980:	68bb      	ldr	r3, [r7, #8]
 8006982:	4313      	orrs	r3, r2
 8006984:	697a      	ldr	r2, [r7, #20]
 8006986:	4313      	orrs	r3, r2
 8006988:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	697a      	ldr	r2, [r7, #20]
 800698e:	609a      	str	r2, [r3, #8]
}
 8006990:	bf00      	nop
 8006992:	371c      	adds	r7, #28
 8006994:	46bd      	mov	sp, r7
 8006996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699a:	4770      	bx	lr

0800699c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800699c:	b480      	push	{r7}
 800699e:	b085      	sub	sp, #20
 80069a0:	af00      	add	r7, sp, #0
 80069a2:	6078      	str	r0, [r7, #4]
 80069a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d101      	bne.n	80069b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80069b0:	2302      	movs	r3, #2
 80069b2:	e06d      	b.n	8006a90 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2201      	movs	r2, #1
 80069b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	685b      	ldr	r3, [r3, #4]
 80069ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	689b      	ldr	r3, [r3, #8]
 80069d2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	4a30      	ldr	r2, [pc, #192]	; (8006a9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80069da:	4293      	cmp	r3, r2
 80069dc:	d004      	beq.n	80069e8 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	4a2f      	ldr	r2, [pc, #188]	; (8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80069e4:	4293      	cmp	r3, r2
 80069e6:	d108      	bne.n	80069fa <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80069ee:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80069f0:	683b      	ldr	r3, [r7, #0]
 80069f2:	685b      	ldr	r3, [r3, #4]
 80069f4:	68fa      	ldr	r2, [r7, #12]
 80069f6:	4313      	orrs	r3, r2
 80069f8:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a00:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006a02:	683b      	ldr	r3, [r7, #0]
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	68fa      	ldr	r2, [r7, #12]
 8006a08:	4313      	orrs	r3, r2
 8006a0a:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	68fa      	ldr	r2, [r7, #12]
 8006a12:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	4a20      	ldr	r2, [pc, #128]	; (8006a9c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006a1a:	4293      	cmp	r3, r2
 8006a1c:	d022      	beq.n	8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006a26:	d01d      	beq.n	8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	4a1d      	ldr	r2, [pc, #116]	; (8006aa4 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006a2e:	4293      	cmp	r3, r2
 8006a30:	d018      	beq.n	8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a1c      	ldr	r2, [pc, #112]	; (8006aa8 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d013      	beq.n	8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	4a1a      	ldr	r2, [pc, #104]	; (8006aac <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006a42:	4293      	cmp	r3, r2
 8006a44:	d00e      	beq.n	8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	4a15      	ldr	r2, [pc, #84]	; (8006aa0 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d009      	beq.n	8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	4a16      	ldr	r2, [pc, #88]	; (8006ab0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006a56:	4293      	cmp	r3, r2
 8006a58:	d004      	beq.n	8006a64 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	4a15      	ldr	r2, [pc, #84]	; (8006ab4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006a60:	4293      	cmp	r3, r2
 8006a62:	d10c      	bne.n	8006a7e <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a6a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	68ba      	ldr	r2, [r7, #8]
 8006a72:	4313      	orrs	r3, r2
 8006a74:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	68ba      	ldr	r2, [r7, #8]
 8006a7c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	2201      	movs	r2, #1
 8006a82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006a8e:	2300      	movs	r3, #0
}
 8006a90:	4618      	mov	r0, r3
 8006a92:	3714      	adds	r7, #20
 8006a94:	46bd      	mov	sp, r7
 8006a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9a:	4770      	bx	lr
 8006a9c:	40010000 	.word	0x40010000
 8006aa0:	40010400 	.word	0x40010400
 8006aa4:	40000400 	.word	0x40000400
 8006aa8:	40000800 	.word	0x40000800
 8006aac:	40000c00 	.word	0x40000c00
 8006ab0:	40014000 	.word	0x40014000
 8006ab4:	40001800 	.word	0x40001800

08006ab8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b083      	sub	sp, #12
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006ac0:	bf00      	nop
 8006ac2:	370c      	adds	r7, #12
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aca:	4770      	bx	lr

08006acc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006acc:	b480      	push	{r7}
 8006ace:	b083      	sub	sp, #12
 8006ad0:	af00      	add	r7, sp, #0
 8006ad2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006ad4:	bf00      	nop
 8006ad6:	370c      	adds	r7, #12
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ade:	4770      	bx	lr

08006ae0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006ae0:	b480      	push	{r7}
 8006ae2:	b083      	sub	sp, #12
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006ae8:	bf00      	nop
 8006aea:	370c      	adds	r7, #12
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006af4:	b580      	push	{r7, lr}
 8006af6:	b082      	sub	sp, #8
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d101      	bne.n	8006b06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006b02:	2301      	movs	r3, #1
 8006b04:	e040      	b.n	8006b88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d106      	bne.n	8006b1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2200      	movs	r2, #0
 8006b12:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006b16:	6878      	ldr	r0, [r7, #4]
 8006b18:	f7fb f9bc 	bl	8001e94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	2224      	movs	r2, #36	; 0x24
 8006b20:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	681b      	ldr	r3, [r3, #0]
 8006b26:	681a      	ldr	r2, [r3, #0]
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	f022 0201 	bic.w	r2, r2, #1
 8006b30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fba2 	bl	800727c <UART_SetConfig>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b01      	cmp	r3, #1
 8006b3c:	d101      	bne.n	8006b42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006b3e:	2301      	movs	r3, #1
 8006b40:	e022      	b.n	8006b88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d002      	beq.n	8006b50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006b4a:	6878      	ldr	r0, [r7, #4]
 8006b4c:	f000 fdfa 	bl	8007744 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	685a      	ldr	r2, [r3, #4]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006b5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	689a      	ldr	r2, [r3, #8]
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006b6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	f042 0201 	orr.w	r2, r2, #1
 8006b7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	f000 fe81 	bl	8007888 <UART_CheckIdleState>
 8006b86:	4603      	mov	r3, r0
}
 8006b88:	4618      	mov	r0, r3
 8006b8a:	3708      	adds	r7, #8
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}

08006b90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b08a      	sub	sp, #40	; 0x28
 8006b94:	af02      	add	r7, sp, #8
 8006b96:	60f8      	str	r0, [r7, #12]
 8006b98:	60b9      	str	r1, [r7, #8]
 8006b9a:	603b      	str	r3, [r7, #0]
 8006b9c:	4613      	mov	r3, r2
 8006b9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8006ba4:	2b20      	cmp	r3, #32
 8006ba6:	d171      	bne.n	8006c8c <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8006ba8:	68bb      	ldr	r3, [r7, #8]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d002      	beq.n	8006bb4 <HAL_UART_Transmit+0x24>
 8006bae:	88fb      	ldrh	r3, [r7, #6]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d101      	bne.n	8006bb8 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	e06a      	b.n	8006c8e <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	2200      	movs	r2, #0
 8006bbc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	2221      	movs	r2, #33	; 0x21
 8006bc4:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006bc6:	f7fb faef 	bl	80021a8 <HAL_GetTick>
 8006bca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	88fa      	ldrh	r2, [r7, #6]
 8006bd0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	88fa      	ldrh	r2, [r7, #6]
 8006bd8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	689b      	ldr	r3, [r3, #8]
 8006be0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006be4:	d108      	bne.n	8006bf8 <HAL_UART_Transmit+0x68>
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	691b      	ldr	r3, [r3, #16]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d104      	bne.n	8006bf8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8006bee:	2300      	movs	r3, #0
 8006bf0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006bf2:	68bb      	ldr	r3, [r7, #8]
 8006bf4:	61bb      	str	r3, [r7, #24]
 8006bf6:	e003      	b.n	8006c00 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8006bf8:	68bb      	ldr	r3, [r7, #8]
 8006bfa:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006c00:	e02c      	b.n	8006c5c <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006c02:	683b      	ldr	r3, [r7, #0]
 8006c04:	9300      	str	r3, [sp, #0]
 8006c06:	697b      	ldr	r3, [r7, #20]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	2180      	movs	r1, #128	; 0x80
 8006c0c:	68f8      	ldr	r0, [r7, #12]
 8006c0e:	f000 fe72 	bl	80078f6 <UART_WaitOnFlagUntilTimeout>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8006c18:	2303      	movs	r3, #3
 8006c1a:	e038      	b.n	8006c8e <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8006c1c:	69fb      	ldr	r3, [r7, #28]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d10b      	bne.n	8006c3a <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006c22:	69bb      	ldr	r3, [r7, #24]
 8006c24:	881b      	ldrh	r3, [r3, #0]
 8006c26:	461a      	mov	r2, r3
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006c30:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006c32:	69bb      	ldr	r3, [r7, #24]
 8006c34:	3302      	adds	r3, #2
 8006c36:	61bb      	str	r3, [r7, #24]
 8006c38:	e007      	b.n	8006c4a <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006c3a:	69fb      	ldr	r3, [r7, #28]
 8006c3c:	781a      	ldrb	r2, [r3, #0]
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006c44:	69fb      	ldr	r3, [r7, #28]
 8006c46:	3301      	adds	r3, #1
 8006c48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	3b01      	subs	r3, #1
 8006c54:	b29a      	uxth	r2, r3
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8006c62:	b29b      	uxth	r3, r3
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d1cc      	bne.n	8006c02 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006c68:	683b      	ldr	r3, [r7, #0]
 8006c6a:	9300      	str	r3, [sp, #0]
 8006c6c:	697b      	ldr	r3, [r7, #20]
 8006c6e:	2200      	movs	r2, #0
 8006c70:	2140      	movs	r1, #64	; 0x40
 8006c72:	68f8      	ldr	r0, [r7, #12]
 8006c74:	f000 fe3f 	bl	80078f6 <UART_WaitOnFlagUntilTimeout>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d001      	beq.n	8006c82 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8006c7e:	2303      	movs	r3, #3
 8006c80:	e005      	b.n	8006c8e <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2220      	movs	r2, #32
 8006c86:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8006c88:	2300      	movs	r3, #0
 8006c8a:	e000      	b.n	8006c8e <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8006c8c:	2302      	movs	r3, #2
  }
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3720      	adds	r7, #32
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
	...

08006c98 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b0ba      	sub	sp, #232	; 0xe8
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	69db      	ldr	r3, [r3, #28]
 8006ca6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689b      	ldr	r3, [r3, #8]
 8006cba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006cbe:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006cc2:	f640 030f 	movw	r3, #2063	; 0x80f
 8006cc6:	4013      	ands	r3, r2
 8006cc8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006ccc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d115      	bne.n	8006d00 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006cd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd8:	f003 0320 	and.w	r3, r3, #32
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d00f      	beq.n	8006d00 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006ce0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ce4:	f003 0320 	and.w	r3, r3, #32
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d009      	beq.n	8006d00 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	f000 8297 	beq.w	8007224 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 8006cf6:	687b      	ldr	r3, [r7, #4]
 8006cf8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006cfa:	6878      	ldr	r0, [r7, #4]
 8006cfc:	4798      	blx	r3
      }
      return;
 8006cfe:	e291      	b.n	8007224 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006d00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	f000 8117 	beq.w	8006f38 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006d0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d0e:	f003 0301 	and.w	r3, r3, #1
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d106      	bne.n	8006d24 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006d16:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006d1a:	4b85      	ldr	r3, [pc, #532]	; (8006f30 <HAL_UART_IRQHandler+0x298>)
 8006d1c:	4013      	ands	r3, r2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f000 810a 	beq.w	8006f38 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006d24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d28:	f003 0301 	and.w	r3, r3, #1
 8006d2c:	2b00      	cmp	r3, #0
 8006d2e:	d011      	beq.n	8006d54 <HAL_UART_IRQHandler+0xbc>
 8006d30:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006d34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d00b      	beq.n	8006d54 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2201      	movs	r2, #1
 8006d42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d4a:	f043 0201 	orr.w	r2, r3, #1
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d58:	f003 0302 	and.w	r3, r3, #2
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d011      	beq.n	8006d84 <HAL_UART_IRQHandler+0xec>
 8006d60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d64:	f003 0301 	and.w	r3, r3, #1
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d00b      	beq.n	8006d84 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2202      	movs	r2, #2
 8006d72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006d7a:	f043 0204 	orr.w	r2, r3, #4
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006d84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d88:	f003 0304 	and.w	r3, r3, #4
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d011      	beq.n	8006db4 <HAL_UART_IRQHandler+0x11c>
 8006d90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006d94:	f003 0301 	and.w	r3, r3, #1
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	d00b      	beq.n	8006db4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006d9c:	687b      	ldr	r3, [r7, #4]
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	2204      	movs	r2, #4
 8006da2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006daa:	f043 0202 	orr.w	r2, r3, #2
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006db4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006db8:	f003 0308 	and.w	r3, r3, #8
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d017      	beq.n	8006df0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006dc0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006dc4:	f003 0320 	and.w	r3, r3, #32
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d105      	bne.n	8006dd8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006dcc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006dd0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00b      	beq.n	8006df0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	2208      	movs	r2, #8
 8006dde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006de6:	f043 0208 	orr.w	r2, r3, #8
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006df0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006df4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d012      	beq.n	8006e22 <HAL_UART_IRQHandler+0x18a>
 8006dfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e00:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d00c      	beq.n	8006e22 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006e10:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e18:	f043 0220 	orr.w	r2, r3, #32
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	f000 81fd 	beq.w	8007228 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e32:	f003 0320 	and.w	r3, r3, #32
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d00d      	beq.n	8006e56 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e3a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e3e:	f003 0320 	and.w	r3, r3, #32
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d007      	beq.n	8006e56 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d003      	beq.n	8006e56 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8006e52:	6878      	ldr	r0, [r7, #4]
 8006e54:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8006e5c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	689b      	ldr	r3, [r3, #8]
 8006e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e6a:	2b40      	cmp	r3, #64	; 0x40
 8006e6c:	d005      	beq.n	8006e7a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006e6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006e72:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d04f      	beq.n	8006f1a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f000 fe01 	bl	8007a82 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	689b      	ldr	r3, [r3, #8]
 8006e86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006e8a:	2b40      	cmp	r3, #64	; 0x40
 8006e8c:	d141      	bne.n	8006f12 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	3308      	adds	r3, #8
 8006e94:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e98:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006e9c:	e853 3f00 	ldrex	r3, [r3]
 8006ea0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ea4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ea8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006eac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	3308      	adds	r3, #8
 8006eb6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006eba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006ebe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006ec6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006ed2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d1d9      	bne.n	8006e8e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d013      	beq.n	8006f0a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ee6:	4a13      	ldr	r2, [pc, #76]	; (8006f34 <HAL_UART_IRQHandler+0x29c>)
 8006ee8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006eee:	4618      	mov	r0, r3
 8006ef0:	f7fb fb0b 	bl	800250a <HAL_DMA_Abort_IT>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d017      	beq.n	8006f2a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006efe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8006f04:	4610      	mov	r0, r2
 8006f06:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f08:	e00f      	b.n	8006f2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006f0a:	6878      	ldr	r0, [r7, #4]
 8006f0c:	f000 f9a0 	bl	8007250 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f10:	e00b      	b.n	8006f2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006f12:	6878      	ldr	r0, [r7, #4]
 8006f14:	f000 f99c 	bl	8007250 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f18:	e007      	b.n	8006f2a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006f1a:	6878      	ldr	r0, [r7, #4]
 8006f1c:	f000 f998 	bl	8007250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	2200      	movs	r2, #0
 8006f24:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8006f28:	e17e      	b.n	8007228 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f2a:	bf00      	nop
    return;
 8006f2c:	e17c      	b.n	8007228 <HAL_UART_IRQHandler+0x590>
 8006f2e:	bf00      	nop
 8006f30:	04000120 	.word	0x04000120
 8006f34:	08007b4b 	.word	0x08007b4b

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006f3c:	2b01      	cmp	r3, #1
 8006f3e:	f040 814c 	bne.w	80071da <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006f42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f46:	f003 0310 	and.w	r3, r3, #16
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	f000 8145 	beq.w	80071da <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006f50:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f54:	f003 0310 	and.w	r3, r3, #16
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	f000 813e 	beq.w	80071da <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	681b      	ldr	r3, [r3, #0]
 8006f62:	2210      	movs	r2, #16
 8006f64:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	689b      	ldr	r3, [r3, #8]
 8006f6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f70:	2b40      	cmp	r3, #64	; 0x40
 8006f72:	f040 80b6 	bne.w	80070e2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	685b      	ldr	r3, [r3, #4]
 8006f7e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006f82:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 8150 	beq.w	800722c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8006f92:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006f96:	429a      	cmp	r2, r3
 8006f98:	f080 8148 	bcs.w	800722c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006fa2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006faa:	69db      	ldr	r3, [r3, #28]
 8006fac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006fb0:	f000 8086 	beq.w	80070c0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fbc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006fc0:	e853 3f00 	ldrex	r3, [r3]
 8006fc4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006fc8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006fcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fd0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	461a      	mov	r2, r3
 8006fda:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006fde:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006fe2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006fea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006fee:	e841 2300 	strex	r3, r2, [r1]
 8006ff2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ff6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d1da      	bne.n	8006fb4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	3308      	adds	r3, #8
 8007004:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007006:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007008:	e853 3f00 	ldrex	r3, [r3]
 800700c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800700e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007010:	f023 0301 	bic.w	r3, r3, #1
 8007014:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	3308      	adds	r3, #8
 800701e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007022:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007026:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007028:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800702a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800702e:	e841 2300 	strex	r3, r2, [r1]
 8007032:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007034:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007036:	2b00      	cmp	r3, #0
 8007038:	d1e1      	bne.n	8006ffe <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	3308      	adds	r3, #8
 8007040:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007042:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007044:	e853 3f00 	ldrex	r3, [r3]
 8007048:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800704a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800704c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007050:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	3308      	adds	r3, #8
 800705a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800705e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007060:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007062:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007064:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007066:	e841 2300 	strex	r3, r2, [r1]
 800706a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800706c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800706e:	2b00      	cmp	r3, #0
 8007070:	d1e3      	bne.n	800703a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2220      	movs	r2, #32
 8007076:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	2200      	movs	r2, #0
 800707e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007086:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007088:	e853 3f00 	ldrex	r3, [r3]
 800708c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800708e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007090:	f023 0310 	bic.w	r3, r3, #16
 8007094:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	461a      	mov	r2, r3
 800709e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80070a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80070a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80070a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80070aa:	e841 2300 	strex	r3, r2, [r1]
 80070ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80070b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1e4      	bne.n	8007080 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80070ba:	4618      	mov	r0, r3
 80070bc:	f7fb f9b5 	bl	800242a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2202      	movs	r2, #2
 80070c4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	1ad3      	subs	r3, r2, r3
 80070d6:	b29b      	uxth	r3, r3
 80070d8:	4619      	mov	r1, r3
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 f8c2 	bl	8007264 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80070e0:	e0a4      	b.n	800722c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070ee:	b29b      	uxth	r3, r3
 80070f0:	1ad3      	subs	r3, r2, r3
 80070f2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	2b00      	cmp	r3, #0
 8007100:	f000 8096 	beq.w	8007230 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007104:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007108:	2b00      	cmp	r3, #0
 800710a:	f000 8091 	beq.w	8007230 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007114:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007116:	e853 3f00 	ldrex	r3, [r3]
 800711a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800711c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800711e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007122:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	461a      	mov	r2, r3
 800712c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007130:	647b      	str	r3, [r7, #68]	; 0x44
 8007132:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007134:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007136:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007138:	e841 2300 	strex	r3, r2, [r1]
 800713c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800713e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007140:	2b00      	cmp	r3, #0
 8007142:	d1e4      	bne.n	800710e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	3308      	adds	r3, #8
 800714a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800714c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800714e:	e853 3f00 	ldrex	r3, [r3]
 8007152:	623b      	str	r3, [r7, #32]
   return(result);
 8007154:	6a3b      	ldr	r3, [r7, #32]
 8007156:	f023 0301 	bic.w	r3, r3, #1
 800715a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	3308      	adds	r3, #8
 8007164:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007168:	633a      	str	r2, [r7, #48]	; 0x30
 800716a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800716c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800716e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007170:	e841 2300 	strex	r3, r2, [r1]
 8007174:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007176:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007178:	2b00      	cmp	r3, #0
 800717a:	d1e3      	bne.n	8007144 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2220      	movs	r2, #32
 8007180:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	2200      	movs	r2, #0
 8007188:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	e853 3f00 	ldrex	r3, [r3]
 800719c:	60fb      	str	r3, [r7, #12]
   return(result);
 800719e:	68fb      	ldr	r3, [r7, #12]
 80071a0:	f023 0310 	bic.w	r3, r3, #16
 80071a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	461a      	mov	r2, r3
 80071ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80071b2:	61fb      	str	r3, [r7, #28]
 80071b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071b6:	69b9      	ldr	r1, [r7, #24]
 80071b8:	69fa      	ldr	r2, [r7, #28]
 80071ba:	e841 2300 	strex	r3, r2, [r1]
 80071be:	617b      	str	r3, [r7, #20]
   return(result);
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1e4      	bne.n	8007190 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2202      	movs	r2, #2
 80071ca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80071cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80071d0:	4619      	mov	r1, r3
 80071d2:	6878      	ldr	r0, [r7, #4]
 80071d4:	f000 f846 	bl	8007264 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80071d8:	e02a      	b.n	8007230 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80071da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80071de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d00e      	beq.n	8007204 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80071e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80071ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d008      	beq.n	8007204 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d01c      	beq.n	8007234 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80071fe:	6878      	ldr	r0, [r7, #4]
 8007200:	4798      	blx	r3
    }
    return;
 8007202:	e017      	b.n	8007234 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007204:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007208:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800720c:	2b00      	cmp	r3, #0
 800720e:	d012      	beq.n	8007236 <HAL_UART_IRQHandler+0x59e>
 8007210:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007214:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00c      	beq.n	8007236 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fcaa 	bl	8007b76 <UART_EndTransmit_IT>
    return;
 8007222:	e008      	b.n	8007236 <HAL_UART_IRQHandler+0x59e>
      return;
 8007224:	bf00      	nop
 8007226:	e006      	b.n	8007236 <HAL_UART_IRQHandler+0x59e>
    return;
 8007228:	bf00      	nop
 800722a:	e004      	b.n	8007236 <HAL_UART_IRQHandler+0x59e>
      return;
 800722c:	bf00      	nop
 800722e:	e002      	b.n	8007236 <HAL_UART_IRQHandler+0x59e>
      return;
 8007230:	bf00      	nop
 8007232:	e000      	b.n	8007236 <HAL_UART_IRQHandler+0x59e>
    return;
 8007234:	bf00      	nop
  }

}
 8007236:	37e8      	adds	r7, #232	; 0xe8
 8007238:	46bd      	mov	sp, r7
 800723a:	bd80      	pop	{r7, pc}

0800723c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800723c:	b480      	push	{r7}
 800723e:	b083      	sub	sp, #12
 8007240:	af00      	add	r7, sp, #0
 8007242:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007244:	bf00      	nop
 8007246:	370c      	adds	r7, #12
 8007248:	46bd      	mov	sp, r7
 800724a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800724e:	4770      	bx	lr

08007250 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007250:	b480      	push	{r7}
 8007252:	b083      	sub	sp, #12
 8007254:	af00      	add	r7, sp, #0
 8007256:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007258:	bf00      	nop
 800725a:	370c      	adds	r7, #12
 800725c:	46bd      	mov	sp, r7
 800725e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007262:	4770      	bx	lr

08007264 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007264:	b480      	push	{r7}
 8007266:	b083      	sub	sp, #12
 8007268:	af00      	add	r7, sp, #0
 800726a:	6078      	str	r0, [r7, #4]
 800726c:	460b      	mov	r3, r1
 800726e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007270:	bf00      	nop
 8007272:	370c      	adds	r7, #12
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr

0800727c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800727c:	b580      	push	{r7, lr}
 800727e:	b088      	sub	sp, #32
 8007280:	af00      	add	r7, sp, #0
 8007282:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007284:	2300      	movs	r3, #0
 8007286:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	689a      	ldr	r2, [r3, #8]
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	691b      	ldr	r3, [r3, #16]
 8007290:	431a      	orrs	r2, r3
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	431a      	orrs	r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	69db      	ldr	r3, [r3, #28]
 800729c:	4313      	orrs	r3, r2
 800729e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	681a      	ldr	r2, [r3, #0]
 80072a6:	4ba6      	ldr	r3, [pc, #664]	; (8007540 <UART_SetConfig+0x2c4>)
 80072a8:	4013      	ands	r3, r2
 80072aa:	687a      	ldr	r2, [r7, #4]
 80072ac:	6812      	ldr	r2, [r2, #0]
 80072ae:	6979      	ldr	r1, [r7, #20]
 80072b0:	430b      	orrs	r3, r1
 80072b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685b      	ldr	r3, [r3, #4]
 80072ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	68da      	ldr	r2, [r3, #12]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	430a      	orrs	r2, r1
 80072c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	699b      	ldr	r3, [r3, #24]
 80072ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6a1b      	ldr	r3, [r3, #32]
 80072d4:	697a      	ldr	r2, [r7, #20]
 80072d6:	4313      	orrs	r3, r2
 80072d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	681b      	ldr	r3, [r3, #0]
 80072de:	689b      	ldr	r3, [r3, #8]
 80072e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	697a      	ldr	r2, [r7, #20]
 80072ea:	430a      	orrs	r2, r1
 80072ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	4a94      	ldr	r2, [pc, #592]	; (8007544 <UART_SetConfig+0x2c8>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d120      	bne.n	800733a <UART_SetConfig+0xbe>
 80072f8:	4b93      	ldr	r3, [pc, #588]	; (8007548 <UART_SetConfig+0x2cc>)
 80072fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80072fe:	f003 0303 	and.w	r3, r3, #3
 8007302:	2b03      	cmp	r3, #3
 8007304:	d816      	bhi.n	8007334 <UART_SetConfig+0xb8>
 8007306:	a201      	add	r2, pc, #4	; (adr r2, 800730c <UART_SetConfig+0x90>)
 8007308:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800730c:	0800731d 	.word	0x0800731d
 8007310:	08007329 	.word	0x08007329
 8007314:	08007323 	.word	0x08007323
 8007318:	0800732f 	.word	0x0800732f
 800731c:	2301      	movs	r3, #1
 800731e:	77fb      	strb	r3, [r7, #31]
 8007320:	e150      	b.n	80075c4 <UART_SetConfig+0x348>
 8007322:	2302      	movs	r3, #2
 8007324:	77fb      	strb	r3, [r7, #31]
 8007326:	e14d      	b.n	80075c4 <UART_SetConfig+0x348>
 8007328:	2304      	movs	r3, #4
 800732a:	77fb      	strb	r3, [r7, #31]
 800732c:	e14a      	b.n	80075c4 <UART_SetConfig+0x348>
 800732e:	2308      	movs	r3, #8
 8007330:	77fb      	strb	r3, [r7, #31]
 8007332:	e147      	b.n	80075c4 <UART_SetConfig+0x348>
 8007334:	2310      	movs	r3, #16
 8007336:	77fb      	strb	r3, [r7, #31]
 8007338:	e144      	b.n	80075c4 <UART_SetConfig+0x348>
 800733a:	687b      	ldr	r3, [r7, #4]
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4a83      	ldr	r2, [pc, #524]	; (800754c <UART_SetConfig+0x2d0>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d132      	bne.n	80073aa <UART_SetConfig+0x12e>
 8007344:	4b80      	ldr	r3, [pc, #512]	; (8007548 <UART_SetConfig+0x2cc>)
 8007346:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800734a:	f003 030c 	and.w	r3, r3, #12
 800734e:	2b0c      	cmp	r3, #12
 8007350:	d828      	bhi.n	80073a4 <UART_SetConfig+0x128>
 8007352:	a201      	add	r2, pc, #4	; (adr r2, 8007358 <UART_SetConfig+0xdc>)
 8007354:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007358:	0800738d 	.word	0x0800738d
 800735c:	080073a5 	.word	0x080073a5
 8007360:	080073a5 	.word	0x080073a5
 8007364:	080073a5 	.word	0x080073a5
 8007368:	08007399 	.word	0x08007399
 800736c:	080073a5 	.word	0x080073a5
 8007370:	080073a5 	.word	0x080073a5
 8007374:	080073a5 	.word	0x080073a5
 8007378:	08007393 	.word	0x08007393
 800737c:	080073a5 	.word	0x080073a5
 8007380:	080073a5 	.word	0x080073a5
 8007384:	080073a5 	.word	0x080073a5
 8007388:	0800739f 	.word	0x0800739f
 800738c:	2300      	movs	r3, #0
 800738e:	77fb      	strb	r3, [r7, #31]
 8007390:	e118      	b.n	80075c4 <UART_SetConfig+0x348>
 8007392:	2302      	movs	r3, #2
 8007394:	77fb      	strb	r3, [r7, #31]
 8007396:	e115      	b.n	80075c4 <UART_SetConfig+0x348>
 8007398:	2304      	movs	r3, #4
 800739a:	77fb      	strb	r3, [r7, #31]
 800739c:	e112      	b.n	80075c4 <UART_SetConfig+0x348>
 800739e:	2308      	movs	r3, #8
 80073a0:	77fb      	strb	r3, [r7, #31]
 80073a2:	e10f      	b.n	80075c4 <UART_SetConfig+0x348>
 80073a4:	2310      	movs	r3, #16
 80073a6:	77fb      	strb	r3, [r7, #31]
 80073a8:	e10c      	b.n	80075c4 <UART_SetConfig+0x348>
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	4a68      	ldr	r2, [pc, #416]	; (8007550 <UART_SetConfig+0x2d4>)
 80073b0:	4293      	cmp	r3, r2
 80073b2:	d120      	bne.n	80073f6 <UART_SetConfig+0x17a>
 80073b4:	4b64      	ldr	r3, [pc, #400]	; (8007548 <UART_SetConfig+0x2cc>)
 80073b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80073ba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80073be:	2b30      	cmp	r3, #48	; 0x30
 80073c0:	d013      	beq.n	80073ea <UART_SetConfig+0x16e>
 80073c2:	2b30      	cmp	r3, #48	; 0x30
 80073c4:	d814      	bhi.n	80073f0 <UART_SetConfig+0x174>
 80073c6:	2b20      	cmp	r3, #32
 80073c8:	d009      	beq.n	80073de <UART_SetConfig+0x162>
 80073ca:	2b20      	cmp	r3, #32
 80073cc:	d810      	bhi.n	80073f0 <UART_SetConfig+0x174>
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d002      	beq.n	80073d8 <UART_SetConfig+0x15c>
 80073d2:	2b10      	cmp	r3, #16
 80073d4:	d006      	beq.n	80073e4 <UART_SetConfig+0x168>
 80073d6:	e00b      	b.n	80073f0 <UART_SetConfig+0x174>
 80073d8:	2300      	movs	r3, #0
 80073da:	77fb      	strb	r3, [r7, #31]
 80073dc:	e0f2      	b.n	80075c4 <UART_SetConfig+0x348>
 80073de:	2302      	movs	r3, #2
 80073e0:	77fb      	strb	r3, [r7, #31]
 80073e2:	e0ef      	b.n	80075c4 <UART_SetConfig+0x348>
 80073e4:	2304      	movs	r3, #4
 80073e6:	77fb      	strb	r3, [r7, #31]
 80073e8:	e0ec      	b.n	80075c4 <UART_SetConfig+0x348>
 80073ea:	2308      	movs	r3, #8
 80073ec:	77fb      	strb	r3, [r7, #31]
 80073ee:	e0e9      	b.n	80075c4 <UART_SetConfig+0x348>
 80073f0:	2310      	movs	r3, #16
 80073f2:	77fb      	strb	r3, [r7, #31]
 80073f4:	e0e6      	b.n	80075c4 <UART_SetConfig+0x348>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	4a56      	ldr	r2, [pc, #344]	; (8007554 <UART_SetConfig+0x2d8>)
 80073fc:	4293      	cmp	r3, r2
 80073fe:	d120      	bne.n	8007442 <UART_SetConfig+0x1c6>
 8007400:	4b51      	ldr	r3, [pc, #324]	; (8007548 <UART_SetConfig+0x2cc>)
 8007402:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007406:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800740a:	2bc0      	cmp	r3, #192	; 0xc0
 800740c:	d013      	beq.n	8007436 <UART_SetConfig+0x1ba>
 800740e:	2bc0      	cmp	r3, #192	; 0xc0
 8007410:	d814      	bhi.n	800743c <UART_SetConfig+0x1c0>
 8007412:	2b80      	cmp	r3, #128	; 0x80
 8007414:	d009      	beq.n	800742a <UART_SetConfig+0x1ae>
 8007416:	2b80      	cmp	r3, #128	; 0x80
 8007418:	d810      	bhi.n	800743c <UART_SetConfig+0x1c0>
 800741a:	2b00      	cmp	r3, #0
 800741c:	d002      	beq.n	8007424 <UART_SetConfig+0x1a8>
 800741e:	2b40      	cmp	r3, #64	; 0x40
 8007420:	d006      	beq.n	8007430 <UART_SetConfig+0x1b4>
 8007422:	e00b      	b.n	800743c <UART_SetConfig+0x1c0>
 8007424:	2300      	movs	r3, #0
 8007426:	77fb      	strb	r3, [r7, #31]
 8007428:	e0cc      	b.n	80075c4 <UART_SetConfig+0x348>
 800742a:	2302      	movs	r3, #2
 800742c:	77fb      	strb	r3, [r7, #31]
 800742e:	e0c9      	b.n	80075c4 <UART_SetConfig+0x348>
 8007430:	2304      	movs	r3, #4
 8007432:	77fb      	strb	r3, [r7, #31]
 8007434:	e0c6      	b.n	80075c4 <UART_SetConfig+0x348>
 8007436:	2308      	movs	r3, #8
 8007438:	77fb      	strb	r3, [r7, #31]
 800743a:	e0c3      	b.n	80075c4 <UART_SetConfig+0x348>
 800743c:	2310      	movs	r3, #16
 800743e:	77fb      	strb	r3, [r7, #31]
 8007440:	e0c0      	b.n	80075c4 <UART_SetConfig+0x348>
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	4a44      	ldr	r2, [pc, #272]	; (8007558 <UART_SetConfig+0x2dc>)
 8007448:	4293      	cmp	r3, r2
 800744a:	d125      	bne.n	8007498 <UART_SetConfig+0x21c>
 800744c:	4b3e      	ldr	r3, [pc, #248]	; (8007548 <UART_SetConfig+0x2cc>)
 800744e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007452:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007456:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800745a:	d017      	beq.n	800748c <UART_SetConfig+0x210>
 800745c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007460:	d817      	bhi.n	8007492 <UART_SetConfig+0x216>
 8007462:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007466:	d00b      	beq.n	8007480 <UART_SetConfig+0x204>
 8007468:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800746c:	d811      	bhi.n	8007492 <UART_SetConfig+0x216>
 800746e:	2b00      	cmp	r3, #0
 8007470:	d003      	beq.n	800747a <UART_SetConfig+0x1fe>
 8007472:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007476:	d006      	beq.n	8007486 <UART_SetConfig+0x20a>
 8007478:	e00b      	b.n	8007492 <UART_SetConfig+0x216>
 800747a:	2300      	movs	r3, #0
 800747c:	77fb      	strb	r3, [r7, #31]
 800747e:	e0a1      	b.n	80075c4 <UART_SetConfig+0x348>
 8007480:	2302      	movs	r3, #2
 8007482:	77fb      	strb	r3, [r7, #31]
 8007484:	e09e      	b.n	80075c4 <UART_SetConfig+0x348>
 8007486:	2304      	movs	r3, #4
 8007488:	77fb      	strb	r3, [r7, #31]
 800748a:	e09b      	b.n	80075c4 <UART_SetConfig+0x348>
 800748c:	2308      	movs	r3, #8
 800748e:	77fb      	strb	r3, [r7, #31]
 8007490:	e098      	b.n	80075c4 <UART_SetConfig+0x348>
 8007492:	2310      	movs	r3, #16
 8007494:	77fb      	strb	r3, [r7, #31]
 8007496:	e095      	b.n	80075c4 <UART_SetConfig+0x348>
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	4a2f      	ldr	r2, [pc, #188]	; (800755c <UART_SetConfig+0x2e0>)
 800749e:	4293      	cmp	r3, r2
 80074a0:	d125      	bne.n	80074ee <UART_SetConfig+0x272>
 80074a2:	4b29      	ldr	r3, [pc, #164]	; (8007548 <UART_SetConfig+0x2cc>)
 80074a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80074ac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074b0:	d017      	beq.n	80074e2 <UART_SetConfig+0x266>
 80074b2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80074b6:	d817      	bhi.n	80074e8 <UART_SetConfig+0x26c>
 80074b8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074bc:	d00b      	beq.n	80074d6 <UART_SetConfig+0x25a>
 80074be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80074c2:	d811      	bhi.n	80074e8 <UART_SetConfig+0x26c>
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d003      	beq.n	80074d0 <UART_SetConfig+0x254>
 80074c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80074cc:	d006      	beq.n	80074dc <UART_SetConfig+0x260>
 80074ce:	e00b      	b.n	80074e8 <UART_SetConfig+0x26c>
 80074d0:	2301      	movs	r3, #1
 80074d2:	77fb      	strb	r3, [r7, #31]
 80074d4:	e076      	b.n	80075c4 <UART_SetConfig+0x348>
 80074d6:	2302      	movs	r3, #2
 80074d8:	77fb      	strb	r3, [r7, #31]
 80074da:	e073      	b.n	80075c4 <UART_SetConfig+0x348>
 80074dc:	2304      	movs	r3, #4
 80074de:	77fb      	strb	r3, [r7, #31]
 80074e0:	e070      	b.n	80075c4 <UART_SetConfig+0x348>
 80074e2:	2308      	movs	r3, #8
 80074e4:	77fb      	strb	r3, [r7, #31]
 80074e6:	e06d      	b.n	80075c4 <UART_SetConfig+0x348>
 80074e8:	2310      	movs	r3, #16
 80074ea:	77fb      	strb	r3, [r7, #31]
 80074ec:	e06a      	b.n	80075c4 <UART_SetConfig+0x348>
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	4a1b      	ldr	r2, [pc, #108]	; (8007560 <UART_SetConfig+0x2e4>)
 80074f4:	4293      	cmp	r3, r2
 80074f6:	d138      	bne.n	800756a <UART_SetConfig+0x2ee>
 80074f8:	4b13      	ldr	r3, [pc, #76]	; (8007548 <UART_SetConfig+0x2cc>)
 80074fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074fe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007502:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007506:	d017      	beq.n	8007538 <UART_SetConfig+0x2bc>
 8007508:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800750c:	d82a      	bhi.n	8007564 <UART_SetConfig+0x2e8>
 800750e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007512:	d00b      	beq.n	800752c <UART_SetConfig+0x2b0>
 8007514:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007518:	d824      	bhi.n	8007564 <UART_SetConfig+0x2e8>
 800751a:	2b00      	cmp	r3, #0
 800751c:	d003      	beq.n	8007526 <UART_SetConfig+0x2aa>
 800751e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007522:	d006      	beq.n	8007532 <UART_SetConfig+0x2b6>
 8007524:	e01e      	b.n	8007564 <UART_SetConfig+0x2e8>
 8007526:	2300      	movs	r3, #0
 8007528:	77fb      	strb	r3, [r7, #31]
 800752a:	e04b      	b.n	80075c4 <UART_SetConfig+0x348>
 800752c:	2302      	movs	r3, #2
 800752e:	77fb      	strb	r3, [r7, #31]
 8007530:	e048      	b.n	80075c4 <UART_SetConfig+0x348>
 8007532:	2304      	movs	r3, #4
 8007534:	77fb      	strb	r3, [r7, #31]
 8007536:	e045      	b.n	80075c4 <UART_SetConfig+0x348>
 8007538:	2308      	movs	r3, #8
 800753a:	77fb      	strb	r3, [r7, #31]
 800753c:	e042      	b.n	80075c4 <UART_SetConfig+0x348>
 800753e:	bf00      	nop
 8007540:	efff69f3 	.word	0xefff69f3
 8007544:	40011000 	.word	0x40011000
 8007548:	40023800 	.word	0x40023800
 800754c:	40004400 	.word	0x40004400
 8007550:	40004800 	.word	0x40004800
 8007554:	40004c00 	.word	0x40004c00
 8007558:	40005000 	.word	0x40005000
 800755c:	40011400 	.word	0x40011400
 8007560:	40007800 	.word	0x40007800
 8007564:	2310      	movs	r3, #16
 8007566:	77fb      	strb	r3, [r7, #31]
 8007568:	e02c      	b.n	80075c4 <UART_SetConfig+0x348>
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	4a72      	ldr	r2, [pc, #456]	; (8007738 <UART_SetConfig+0x4bc>)
 8007570:	4293      	cmp	r3, r2
 8007572:	d125      	bne.n	80075c0 <UART_SetConfig+0x344>
 8007574:	4b71      	ldr	r3, [pc, #452]	; (800773c <UART_SetConfig+0x4c0>)
 8007576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800757a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800757e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007582:	d017      	beq.n	80075b4 <UART_SetConfig+0x338>
 8007584:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007588:	d817      	bhi.n	80075ba <UART_SetConfig+0x33e>
 800758a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800758e:	d00b      	beq.n	80075a8 <UART_SetConfig+0x32c>
 8007590:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007594:	d811      	bhi.n	80075ba <UART_SetConfig+0x33e>
 8007596:	2b00      	cmp	r3, #0
 8007598:	d003      	beq.n	80075a2 <UART_SetConfig+0x326>
 800759a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800759e:	d006      	beq.n	80075ae <UART_SetConfig+0x332>
 80075a0:	e00b      	b.n	80075ba <UART_SetConfig+0x33e>
 80075a2:	2300      	movs	r3, #0
 80075a4:	77fb      	strb	r3, [r7, #31]
 80075a6:	e00d      	b.n	80075c4 <UART_SetConfig+0x348>
 80075a8:	2302      	movs	r3, #2
 80075aa:	77fb      	strb	r3, [r7, #31]
 80075ac:	e00a      	b.n	80075c4 <UART_SetConfig+0x348>
 80075ae:	2304      	movs	r3, #4
 80075b0:	77fb      	strb	r3, [r7, #31]
 80075b2:	e007      	b.n	80075c4 <UART_SetConfig+0x348>
 80075b4:	2308      	movs	r3, #8
 80075b6:	77fb      	strb	r3, [r7, #31]
 80075b8:	e004      	b.n	80075c4 <UART_SetConfig+0x348>
 80075ba:	2310      	movs	r3, #16
 80075bc:	77fb      	strb	r3, [r7, #31]
 80075be:	e001      	b.n	80075c4 <UART_SetConfig+0x348>
 80075c0:	2310      	movs	r3, #16
 80075c2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	69db      	ldr	r3, [r3, #28]
 80075c8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80075cc:	d15b      	bne.n	8007686 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 80075ce:	7ffb      	ldrb	r3, [r7, #31]
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d828      	bhi.n	8007626 <UART_SetConfig+0x3aa>
 80075d4:	a201      	add	r2, pc, #4	; (adr r2, 80075dc <UART_SetConfig+0x360>)
 80075d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075da:	bf00      	nop
 80075dc:	08007601 	.word	0x08007601
 80075e0:	08007609 	.word	0x08007609
 80075e4:	08007611 	.word	0x08007611
 80075e8:	08007627 	.word	0x08007627
 80075ec:	08007617 	.word	0x08007617
 80075f0:	08007627 	.word	0x08007627
 80075f4:	08007627 	.word	0x08007627
 80075f8:	08007627 	.word	0x08007627
 80075fc:	0800761f 	.word	0x0800761f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007600:	f7fd fca2 	bl	8004f48 <HAL_RCC_GetPCLK1Freq>
 8007604:	61b8      	str	r0, [r7, #24]
        break;
 8007606:	e013      	b.n	8007630 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007608:	f7fd fcb2 	bl	8004f70 <HAL_RCC_GetPCLK2Freq>
 800760c:	61b8      	str	r0, [r7, #24]
        break;
 800760e:	e00f      	b.n	8007630 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007610:	4b4b      	ldr	r3, [pc, #300]	; (8007740 <UART_SetConfig+0x4c4>)
 8007612:	61bb      	str	r3, [r7, #24]
        break;
 8007614:	e00c      	b.n	8007630 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007616:	f7fd fb85 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 800761a:	61b8      	str	r0, [r7, #24]
        break;
 800761c:	e008      	b.n	8007630 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800761e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007622:	61bb      	str	r3, [r7, #24]
        break;
 8007624:	e004      	b.n	8007630 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007626:	2300      	movs	r3, #0
 8007628:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800762a:	2301      	movs	r3, #1
 800762c:	77bb      	strb	r3, [r7, #30]
        break;
 800762e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007630:	69bb      	ldr	r3, [r7, #24]
 8007632:	2b00      	cmp	r3, #0
 8007634:	d074      	beq.n	8007720 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007636:	69bb      	ldr	r3, [r7, #24]
 8007638:	005a      	lsls	r2, r3, #1
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	685b      	ldr	r3, [r3, #4]
 800763e:	085b      	lsrs	r3, r3, #1
 8007640:	441a      	add	r2, r3
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	685b      	ldr	r3, [r3, #4]
 8007646:	fbb2 f3f3 	udiv	r3, r2, r3
 800764a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	2b0f      	cmp	r3, #15
 8007650:	d916      	bls.n	8007680 <UART_SetConfig+0x404>
 8007652:	693b      	ldr	r3, [r7, #16]
 8007654:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007658:	d212      	bcs.n	8007680 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	b29b      	uxth	r3, r3
 800765e:	f023 030f 	bic.w	r3, r3, #15
 8007662:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	085b      	lsrs	r3, r3, #1
 8007668:	b29b      	uxth	r3, r3
 800766a:	f003 0307 	and.w	r3, r3, #7
 800766e:	b29a      	uxth	r2, r3
 8007670:	89fb      	ldrh	r3, [r7, #14]
 8007672:	4313      	orrs	r3, r2
 8007674:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	89fa      	ldrh	r2, [r7, #14]
 800767c:	60da      	str	r2, [r3, #12]
 800767e:	e04f      	b.n	8007720 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007680:	2301      	movs	r3, #1
 8007682:	77bb      	strb	r3, [r7, #30]
 8007684:	e04c      	b.n	8007720 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007686:	7ffb      	ldrb	r3, [r7, #31]
 8007688:	2b08      	cmp	r3, #8
 800768a:	d828      	bhi.n	80076de <UART_SetConfig+0x462>
 800768c:	a201      	add	r2, pc, #4	; (adr r2, 8007694 <UART_SetConfig+0x418>)
 800768e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007692:	bf00      	nop
 8007694:	080076b9 	.word	0x080076b9
 8007698:	080076c1 	.word	0x080076c1
 800769c:	080076c9 	.word	0x080076c9
 80076a0:	080076df 	.word	0x080076df
 80076a4:	080076cf 	.word	0x080076cf
 80076a8:	080076df 	.word	0x080076df
 80076ac:	080076df 	.word	0x080076df
 80076b0:	080076df 	.word	0x080076df
 80076b4:	080076d7 	.word	0x080076d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80076b8:	f7fd fc46 	bl	8004f48 <HAL_RCC_GetPCLK1Freq>
 80076bc:	61b8      	str	r0, [r7, #24]
        break;
 80076be:	e013      	b.n	80076e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80076c0:	f7fd fc56 	bl	8004f70 <HAL_RCC_GetPCLK2Freq>
 80076c4:	61b8      	str	r0, [r7, #24]
        break;
 80076c6:	e00f      	b.n	80076e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80076c8:	4b1d      	ldr	r3, [pc, #116]	; (8007740 <UART_SetConfig+0x4c4>)
 80076ca:	61bb      	str	r3, [r7, #24]
        break;
 80076cc:	e00c      	b.n	80076e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80076ce:	f7fd fb29 	bl	8004d24 <HAL_RCC_GetSysClockFreq>
 80076d2:	61b8      	str	r0, [r7, #24]
        break;
 80076d4:	e008      	b.n	80076e8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80076d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80076da:	61bb      	str	r3, [r7, #24]
        break;
 80076dc:	e004      	b.n	80076e8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 80076de:	2300      	movs	r3, #0
 80076e0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80076e2:	2301      	movs	r3, #1
 80076e4:	77bb      	strb	r3, [r7, #30]
        break;
 80076e6:	bf00      	nop
    }

    if (pclk != 0U)
 80076e8:	69bb      	ldr	r3, [r7, #24]
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d018      	beq.n	8007720 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	085a      	lsrs	r2, r3, #1
 80076f4:	69bb      	ldr	r3, [r7, #24]
 80076f6:	441a      	add	r2, r3
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	685b      	ldr	r3, [r3, #4]
 80076fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007700:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	2b0f      	cmp	r3, #15
 8007706:	d909      	bls.n	800771c <UART_SetConfig+0x4a0>
 8007708:	693b      	ldr	r3, [r7, #16]
 800770a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800770e:	d205      	bcs.n	800771c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	b29a      	uxth	r2, r3
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	60da      	str	r2, [r3, #12]
 800771a:	e001      	b.n	8007720 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800771c:	2301      	movs	r3, #1
 800771e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	2200      	movs	r2, #0
 8007724:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	2200      	movs	r2, #0
 800772a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800772c:	7fbb      	ldrb	r3, [r7, #30]
}
 800772e:	4618      	mov	r0, r3
 8007730:	3720      	adds	r7, #32
 8007732:	46bd      	mov	sp, r7
 8007734:	bd80      	pop	{r7, pc}
 8007736:	bf00      	nop
 8007738:	40007c00 	.word	0x40007c00
 800773c:	40023800 	.word	0x40023800
 8007740:	00f42400 	.word	0x00f42400

08007744 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007744:	b480      	push	{r7}
 8007746:	b083      	sub	sp, #12
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007750:	f003 0301 	and.w	r3, r3, #1
 8007754:	2b00      	cmp	r3, #0
 8007756:	d00a      	beq.n	800776e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	685b      	ldr	r3, [r3, #4]
 800775e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	430a      	orrs	r2, r1
 800776c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800776e:	687b      	ldr	r3, [r7, #4]
 8007770:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007772:	f003 0302 	and.w	r3, r3, #2
 8007776:	2b00      	cmp	r3, #0
 8007778:	d00a      	beq.n	8007790 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	685b      	ldr	r3, [r3, #4]
 8007780:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	430a      	orrs	r2, r1
 800778e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007794:	f003 0304 	and.w	r3, r3, #4
 8007798:	2b00      	cmp	r3, #0
 800779a:	d00a      	beq.n	80077b2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	685b      	ldr	r3, [r3, #4]
 80077a2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	430a      	orrs	r2, r1
 80077b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077b6:	f003 0308 	and.w	r3, r3, #8
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00a      	beq.n	80077d4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	685b      	ldr	r3, [r3, #4]
 80077c4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	430a      	orrs	r2, r1
 80077d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d8:	f003 0310 	and.w	r3, r3, #16
 80077dc:	2b00      	cmp	r3, #0
 80077de:	d00a      	beq.n	80077f6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	689b      	ldr	r3, [r3, #8]
 80077e6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80077ea:	687b      	ldr	r3, [r7, #4]
 80077ec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	430a      	orrs	r2, r1
 80077f4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fa:	f003 0320 	and.w	r3, r3, #32
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d00a      	beq.n	8007818 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	681b      	ldr	r3, [r3, #0]
 8007806:	689b      	ldr	r3, [r3, #8]
 8007808:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	430a      	orrs	r2, r1
 8007816:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800781c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007820:	2b00      	cmp	r3, #0
 8007822:	d01a      	beq.n	800785a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	430a      	orrs	r2, r1
 8007838:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800783e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007842:	d10a      	bne.n	800785a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	685b      	ldr	r3, [r3, #4]
 800784a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	430a      	orrs	r2, r1
 8007858:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800785e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00a      	beq.n	800787c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	685b      	ldr	r3, [r3, #4]
 800786c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	430a      	orrs	r2, r1
 800787a:	605a      	str	r2, [r3, #4]
  }
}
 800787c:	bf00      	nop
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b086      	sub	sp, #24
 800788c:	af02      	add	r7, sp, #8
 800788e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2200      	movs	r2, #0
 8007894:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007898:	f7fa fc86 	bl	80021a8 <HAL_GetTick>
 800789c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	681b      	ldr	r3, [r3, #0]
 80078a4:	f003 0308 	and.w	r3, r3, #8
 80078a8:	2b08      	cmp	r3, #8
 80078aa:	d10e      	bne.n	80078ca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80078ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80078b0:	9300      	str	r3, [sp, #0]
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80078ba:	6878      	ldr	r0, [r7, #4]
 80078bc:	f000 f81b 	bl	80078f6 <UART_WaitOnFlagUntilTimeout>
 80078c0:	4603      	mov	r3, r0
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d001      	beq.n	80078ca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e011      	b.n	80078ee <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	2220      	movs	r2, #32
 80078ce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	2220      	movs	r2, #32
 80078d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2200      	movs	r2, #0
 80078dc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	2200      	movs	r2, #0
 80078e2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2200      	movs	r2, #0
 80078e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 80078ec:	2300      	movs	r3, #0
}
 80078ee:	4618      	mov	r0, r3
 80078f0:	3710      	adds	r7, #16
 80078f2:	46bd      	mov	sp, r7
 80078f4:	bd80      	pop	{r7, pc}

080078f6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80078f6:	b580      	push	{r7, lr}
 80078f8:	b09c      	sub	sp, #112	; 0x70
 80078fa:	af00      	add	r7, sp, #0
 80078fc:	60f8      	str	r0, [r7, #12]
 80078fe:	60b9      	str	r1, [r7, #8]
 8007900:	603b      	str	r3, [r7, #0]
 8007902:	4613      	mov	r3, r2
 8007904:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007906:	e0a7      	b.n	8007a58 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007908:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800790a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800790e:	f000 80a3 	beq.w	8007a58 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007912:	f7fa fc49 	bl	80021a8 <HAL_GetTick>
 8007916:	4602      	mov	r2, r0
 8007918:	683b      	ldr	r3, [r7, #0]
 800791a:	1ad3      	subs	r3, r2, r3
 800791c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800791e:	429a      	cmp	r2, r3
 8007920:	d302      	bcc.n	8007928 <UART_WaitOnFlagUntilTimeout+0x32>
 8007922:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007924:	2b00      	cmp	r3, #0
 8007926:	d13f      	bne.n	80079a8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800792e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007930:	e853 3f00 	ldrex	r3, [r3]
 8007934:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007936:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007938:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800793c:	667b      	str	r3, [r7, #100]	; 0x64
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	461a      	mov	r2, r3
 8007944:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007946:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007948:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800794a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800794c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800794e:	e841 2300 	strex	r3, r2, [r1]
 8007952:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007954:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007956:	2b00      	cmp	r3, #0
 8007958:	d1e6      	bne.n	8007928 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	3308      	adds	r3, #8
 8007960:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007962:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007964:	e853 3f00 	ldrex	r3, [r3]
 8007968:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800796a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800796c:	f023 0301 	bic.w	r3, r3, #1
 8007970:	663b      	str	r3, [r7, #96]	; 0x60
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	3308      	adds	r3, #8
 8007978:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800797a:	64ba      	str	r2, [r7, #72]	; 0x48
 800797c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800797e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007980:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007982:	e841 2300 	strex	r3, r2, [r1]
 8007986:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007988:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800798a:	2b00      	cmp	r3, #0
 800798c:	d1e5      	bne.n	800795a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	2220      	movs	r2, #32
 8007992:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2220      	movs	r2, #32
 8007998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	2200      	movs	r2, #0
 80079a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80079a4:	2303      	movs	r3, #3
 80079a6:	e068      	b.n	8007a7a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f003 0304 	and.w	r3, r3, #4
 80079b2:	2b00      	cmp	r3, #0
 80079b4:	d050      	beq.n	8007a58 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	69db      	ldr	r3, [r3, #28]
 80079bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80079c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80079c4:	d148      	bne.n	8007a58 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80079ce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079d8:	e853 3f00 	ldrex	r3, [r3]
 80079dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80079de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80079e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80079e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	681b      	ldr	r3, [r3, #0]
 80079ea:	461a      	mov	r2, r3
 80079ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80079ee:	637b      	str	r3, [r7, #52]	; 0x34
 80079f0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80079f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80079f6:	e841 2300 	strex	r3, r2, [r1]
 80079fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80079fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d1e6      	bne.n	80079d0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	3308      	adds	r3, #8
 8007a08:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a0a:	697b      	ldr	r3, [r7, #20]
 8007a0c:	e853 3f00 	ldrex	r3, [r3]
 8007a10:	613b      	str	r3, [r7, #16]
   return(result);
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	f023 0301 	bic.w	r3, r3, #1
 8007a18:	66bb      	str	r3, [r7, #104]	; 0x68
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	3308      	adds	r3, #8
 8007a20:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007a22:	623a      	str	r2, [r7, #32]
 8007a24:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a26:	69f9      	ldr	r1, [r7, #28]
 8007a28:	6a3a      	ldr	r2, [r7, #32]
 8007a2a:	e841 2300 	strex	r3, r2, [r1]
 8007a2e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1e5      	bne.n	8007a02 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	2220      	movs	r2, #32
 8007a3a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8007a3c:	68fb      	ldr	r3, [r7, #12]
 8007a3e:	2220      	movs	r2, #32
 8007a40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2220      	movs	r2, #32
 8007a48:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007a4c:	68fb      	ldr	r3, [r7, #12]
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8007a54:	2303      	movs	r3, #3
 8007a56:	e010      	b.n	8007a7a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	69da      	ldr	r2, [r3, #28]
 8007a5e:	68bb      	ldr	r3, [r7, #8]
 8007a60:	4013      	ands	r3, r2
 8007a62:	68ba      	ldr	r2, [r7, #8]
 8007a64:	429a      	cmp	r2, r3
 8007a66:	bf0c      	ite	eq
 8007a68:	2301      	moveq	r3, #1
 8007a6a:	2300      	movne	r3, #0
 8007a6c:	b2db      	uxtb	r3, r3
 8007a6e:	461a      	mov	r2, r3
 8007a70:	79fb      	ldrb	r3, [r7, #7]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	f43f af48 	beq.w	8007908 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007a78:	2300      	movs	r3, #0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3770      	adds	r7, #112	; 0x70
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007a82:	b480      	push	{r7}
 8007a84:	b095      	sub	sp, #84	; 0x54
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007a92:	e853 3f00 	ldrex	r3, [r3]
 8007a96:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007a98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007a9a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	461a      	mov	r2, r3
 8007aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007aa8:	643b      	str	r3, [r7, #64]	; 0x40
 8007aaa:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007aae:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007ab0:	e841 2300 	strex	r3, r2, [r1]
 8007ab4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007ab6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d1e6      	bne.n	8007a8a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	3308      	adds	r3, #8
 8007ac2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ac4:	6a3b      	ldr	r3, [r7, #32]
 8007ac6:	e853 3f00 	ldrex	r3, [r3]
 8007aca:	61fb      	str	r3, [r7, #28]
   return(result);
 8007acc:	69fb      	ldr	r3, [r7, #28]
 8007ace:	f023 0301 	bic.w	r3, r3, #1
 8007ad2:	64bb      	str	r3, [r7, #72]	; 0x48
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	3308      	adds	r3, #8
 8007ada:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007adc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007ade:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ae0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007ae2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ae4:	e841 2300 	strex	r3, r2, [r1]
 8007ae8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d1e5      	bne.n	8007abc <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007af4:	2b01      	cmp	r3, #1
 8007af6:	d118      	bne.n	8007b2a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	e853 3f00 	ldrex	r3, [r3]
 8007b04:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b06:	68bb      	ldr	r3, [r7, #8]
 8007b08:	f023 0310 	bic.w	r3, r3, #16
 8007b0c:	647b      	str	r3, [r7, #68]	; 0x44
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	461a      	mov	r2, r3
 8007b14:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007b16:	61bb      	str	r3, [r7, #24]
 8007b18:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b1a:	6979      	ldr	r1, [r7, #20]
 8007b1c:	69ba      	ldr	r2, [r7, #24]
 8007b1e:	e841 2300 	strex	r3, r2, [r1]
 8007b22:	613b      	str	r3, [r7, #16]
   return(result);
 8007b24:	693b      	ldr	r3, [r7, #16]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d1e6      	bne.n	8007af8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	2220      	movs	r2, #32
 8007b2e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	2200      	movs	r2, #0
 8007b3c:	669a      	str	r2, [r3, #104]	; 0x68
}
 8007b3e:	bf00      	nop
 8007b40:	3754      	adds	r7, #84	; 0x54
 8007b42:	46bd      	mov	sp, r7
 8007b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b48:	4770      	bx	lr

08007b4a <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b56:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	2200      	movs	r2, #0
 8007b5c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007b60:	68fb      	ldr	r3, [r7, #12]
 8007b62:	2200      	movs	r2, #0
 8007b64:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007b68:	68f8      	ldr	r0, [r7, #12]
 8007b6a:	f7ff fb71 	bl	8007250 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007b6e:	bf00      	nop
 8007b70:	3710      	adds	r7, #16
 8007b72:	46bd      	mov	sp, r7
 8007b74:	bd80      	pop	{r7, pc}

08007b76 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007b76:	b580      	push	{r7, lr}
 8007b78:	b088      	sub	sp, #32
 8007b7a:	af00      	add	r7, sp, #0
 8007b7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	e853 3f00 	ldrex	r3, [r3]
 8007b8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007b8c:	68bb      	ldr	r3, [r7, #8]
 8007b8e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007b92:	61fb      	str	r3, [r7, #28]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	461a      	mov	r2, r3
 8007b9a:	69fb      	ldr	r3, [r7, #28]
 8007b9c:	61bb      	str	r3, [r7, #24]
 8007b9e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ba0:	6979      	ldr	r1, [r7, #20]
 8007ba2:	69ba      	ldr	r2, [r7, #24]
 8007ba4:	e841 2300 	strex	r3, r2, [r1]
 8007ba8:	613b      	str	r3, [r7, #16]
   return(result);
 8007baa:	693b      	ldr	r3, [r7, #16]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1e6      	bne.n	8007b7e <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2220      	movs	r2, #32
 8007bb4:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007bbc:	6878      	ldr	r0, [r7, #4]
 8007bbe:	f7ff fb3d 	bl	800723c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007bc2:	bf00      	nop
 8007bc4:	3720      	adds	r7, #32
 8007bc6:	46bd      	mov	sp, r7
 8007bc8:	bd80      	pop	{r7, pc}
	...

08007bcc <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007bcc:	b084      	sub	sp, #16
 8007bce:	b580      	push	{r7, lr}
 8007bd0:	b084      	sub	sp, #16
 8007bd2:	af00      	add	r7, sp, #0
 8007bd4:	6078      	str	r0, [r7, #4]
 8007bd6:	f107 001c 	add.w	r0, r7, #28
 8007bda:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be0:	2b01      	cmp	r3, #1
 8007be2:	d120      	bne.n	8007c26 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007be8:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	68da      	ldr	r2, [r3, #12]
 8007bf4:	4b20      	ldr	r3, [pc, #128]	; (8007c78 <USB_CoreInit+0xac>)
 8007bf6:	4013      	ands	r3, r2
 8007bf8:	687a      	ldr	r2, [r7, #4]
 8007bfa:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	68db      	ldr	r3, [r3, #12]
 8007c00:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8007c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007c0a:	2b01      	cmp	r3, #1
 8007c0c:	d105      	bne.n	8007c1a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	68db      	ldr	r3, [r3, #12]
 8007c12:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 fa96 	bl	800814c <USB_CoreReset>
 8007c20:	4603      	mov	r3, r0
 8007c22:	73fb      	strb	r3, [r7, #15]
 8007c24:	e010      	b.n	8007c48 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	68db      	ldr	r3, [r3, #12]
 8007c2a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007c2e:	687b      	ldr	r3, [r7, #4]
 8007c30:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fa8a 	bl	800814c <USB_CoreReset>
 8007c38:	4603      	mov	r3, r0
 8007c3a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c40:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8007c48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007c4a:	2b01      	cmp	r3, #1
 8007c4c:	d10b      	bne.n	8007c66 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	689b      	ldr	r3, [r3, #8]
 8007c52:	f043 0206 	orr.w	r2, r3, #6
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	689b      	ldr	r3, [r3, #8]
 8007c5e:	f043 0220 	orr.w	r2, r3, #32
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	3710      	adds	r7, #16
 8007c6c:	46bd      	mov	sp, r7
 8007c6e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007c72:	b004      	add	sp, #16
 8007c74:	4770      	bx	lr
 8007c76:	bf00      	nop
 8007c78:	ffbdffbf 	.word	0xffbdffbf

08007c7c <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007c7c:	b480      	push	{r7}
 8007c7e:	b083      	sub	sp, #12
 8007c80:	af00      	add	r7, sp, #0
 8007c82:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	f023 0201 	bic.w	r2, r3, #1
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007c90:	2300      	movs	r3, #0
}
 8007c92:	4618      	mov	r0, r3
 8007c94:	370c      	adds	r7, #12
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr

08007c9e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007c9e:	b580      	push	{r7, lr}
 8007ca0:	b084      	sub	sp, #16
 8007ca2:	af00      	add	r7, sp, #0
 8007ca4:	6078      	str	r0, [r7, #4]
 8007ca6:	460b      	mov	r3, r1
 8007ca8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007caa:	2300      	movs	r3, #0
 8007cac:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	68db      	ldr	r3, [r3, #12]
 8007cb2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007cba:	78fb      	ldrb	r3, [r7, #3]
 8007cbc:	2b01      	cmp	r3, #1
 8007cbe:	d115      	bne.n	8007cec <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	68db      	ldr	r3, [r3, #12]
 8007cc4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007ccc:	2001      	movs	r0, #1
 8007cce:	f7fa fa77 	bl	80021c0 <HAL_Delay>
      ms++;
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	3301      	adds	r3, #1
 8007cd6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8007cd8:	6878      	ldr	r0, [r7, #4]
 8007cda:	f000 fa29 	bl	8008130 <USB_GetMode>
 8007cde:	4603      	mov	r3, r0
 8007ce0:	2b01      	cmp	r3, #1
 8007ce2:	d01e      	beq.n	8007d22 <USB_SetCurrentMode+0x84>
 8007ce4:	68fb      	ldr	r3, [r7, #12]
 8007ce6:	2b31      	cmp	r3, #49	; 0x31
 8007ce8:	d9f0      	bls.n	8007ccc <USB_SetCurrentMode+0x2e>
 8007cea:	e01a      	b.n	8007d22 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007cec:	78fb      	ldrb	r3, [r7, #3]
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d115      	bne.n	8007d1e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	68db      	ldr	r3, [r3, #12]
 8007cf6:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8007cfe:	2001      	movs	r0, #1
 8007d00:	f7fa fa5e 	bl	80021c0 <HAL_Delay>
      ms++;
 8007d04:	68fb      	ldr	r3, [r7, #12]
 8007d06:	3301      	adds	r3, #1
 8007d08:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f000 fa10 	bl	8008130 <USB_GetMode>
 8007d10:	4603      	mov	r3, r0
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d005      	beq.n	8007d22 <USB_SetCurrentMode+0x84>
 8007d16:	68fb      	ldr	r3, [r7, #12]
 8007d18:	2b31      	cmp	r3, #49	; 0x31
 8007d1a:	d9f0      	bls.n	8007cfe <USB_SetCurrentMode+0x60>
 8007d1c:	e001      	b.n	8007d22 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e005      	b.n	8007d2e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8007d22:	68fb      	ldr	r3, [r7, #12]
 8007d24:	2b32      	cmp	r3, #50	; 0x32
 8007d26:	d101      	bne.n	8007d2c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	e000      	b.n	8007d2e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8007d2c:	2300      	movs	r3, #0
}
 8007d2e:	4618      	mov	r0, r3
 8007d30:	3710      	adds	r7, #16
 8007d32:	46bd      	mov	sp, r7
 8007d34:	bd80      	pop	{r7, pc}
	...

08007d38 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007d38:	b084      	sub	sp, #16
 8007d3a:	b580      	push	{r7, lr}
 8007d3c:	b086      	sub	sp, #24
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]
 8007d42:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8007d46:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8007d4a:	2300      	movs	r3, #0
 8007d4c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8007d52:	2300      	movs	r3, #0
 8007d54:	613b      	str	r3, [r7, #16]
 8007d56:	e009      	b.n	8007d6c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	3340      	adds	r3, #64	; 0x40
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4413      	add	r3, r2
 8007d62:	2200      	movs	r2, #0
 8007d64:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8007d66:	693b      	ldr	r3, [r7, #16]
 8007d68:	3301      	adds	r3, #1
 8007d6a:	613b      	str	r3, [r7, #16]
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	2b0e      	cmp	r3, #14
 8007d70:	d9f2      	bls.n	8007d58 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007d72:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d11c      	bne.n	8007db2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007d7e:	685b      	ldr	r3, [r3, #4]
 8007d80:	68fa      	ldr	r2, [r7, #12]
 8007d82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007d86:	f043 0302 	orr.w	r3, r3, #2
 8007d8a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d90:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007da4:	687b      	ldr	r3, [r7, #4]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	601a      	str	r2, [r3, #0]
 8007db0:	e005      	b.n	8007dbe <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007db6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007dc4:	461a      	mov	r2, r3
 8007dc6:	2300      	movs	r3, #0
 8007dc8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd0:	4619      	mov	r1, r3
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007dd8:	461a      	mov	r2, r3
 8007dda:	680b      	ldr	r3, [r1, #0]
 8007ddc:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007dde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007de0:	2b01      	cmp	r3, #1
 8007de2:	d10c      	bne.n	8007dfe <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007de4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d104      	bne.n	8007df4 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007dea:	2100      	movs	r1, #0
 8007dec:	6878      	ldr	r0, [r7, #4]
 8007dee:	f000 f965 	bl	80080bc <USB_SetDevSpeed>
 8007df2:	e008      	b.n	8007e06 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007df4:	2101      	movs	r1, #1
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f960 	bl	80080bc <USB_SetDevSpeed>
 8007dfc:	e003      	b.n	8007e06 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007dfe:	2103      	movs	r1, #3
 8007e00:	6878      	ldr	r0, [r7, #4]
 8007e02:	f000 f95b 	bl	80080bc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007e06:	2110      	movs	r1, #16
 8007e08:	6878      	ldr	r0, [r7, #4]
 8007e0a:	f000 f8f3 	bl	8007ff4 <USB_FlushTxFifo>
 8007e0e:	4603      	mov	r3, r0
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d001      	beq.n	8007e18 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8007e14:	2301      	movs	r3, #1
 8007e16:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f91f 	bl	800805c <USB_FlushRxFifo>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d001      	beq.n	8007e28 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8007e24:	2301      	movs	r3, #1
 8007e26:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007e28:	68fb      	ldr	r3, [r7, #12]
 8007e2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e2e:	461a      	mov	r2, r3
 8007e30:	2300      	movs	r3, #0
 8007e32:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e3a:	461a      	mov	r2, r3
 8007e3c:	2300      	movs	r3, #0
 8007e3e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8007e40:	68fb      	ldr	r3, [r7, #12]
 8007e42:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007e46:	461a      	mov	r2, r3
 8007e48:	2300      	movs	r3, #0
 8007e4a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007e4c:	2300      	movs	r3, #0
 8007e4e:	613b      	str	r3, [r7, #16]
 8007e50:	e043      	b.n	8007eda <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8007e52:	693b      	ldr	r3, [r7, #16]
 8007e54:	015a      	lsls	r2, r3, #5
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	4413      	add	r3, r2
 8007e5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007e64:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007e68:	d118      	bne.n	8007e9c <USB_DevInit+0x164>
    {
      if (i == 0U)
 8007e6a:	693b      	ldr	r3, [r7, #16]
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d10a      	bne.n	8007e86 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007e70:	693b      	ldr	r3, [r7, #16]
 8007e72:	015a      	lsls	r2, r3, #5
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	4413      	add	r3, r2
 8007e78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e7c:	461a      	mov	r2, r3
 8007e7e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007e82:	6013      	str	r3, [r2, #0]
 8007e84:	e013      	b.n	8007eae <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	015a      	lsls	r2, r3, #5
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	4413      	add	r3, r2
 8007e8e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007e92:	461a      	mov	r2, r3
 8007e94:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007e98:	6013      	str	r3, [r2, #0]
 8007e9a:	e008      	b.n	8007eae <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007e9c:	693b      	ldr	r3, [r7, #16]
 8007e9e:	015a      	lsls	r2, r3, #5
 8007ea0:	68fb      	ldr	r3, [r7, #12]
 8007ea2:	4413      	add	r3, r2
 8007ea4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ea8:	461a      	mov	r2, r3
 8007eaa:	2300      	movs	r3, #0
 8007eac:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007eae:	693b      	ldr	r3, [r7, #16]
 8007eb0:	015a      	lsls	r2, r3, #5
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	4413      	add	r3, r2
 8007eb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007eba:	461a      	mov	r2, r3
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007ec0:	693b      	ldr	r3, [r7, #16]
 8007ec2:	015a      	lsls	r2, r3, #5
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	4413      	add	r3, r2
 8007ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007ecc:	461a      	mov	r2, r3
 8007ece:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007ed2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ed4:	693b      	ldr	r3, [r7, #16]
 8007ed6:	3301      	adds	r3, #1
 8007ed8:	613b      	str	r3, [r7, #16]
 8007eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007edc:	693a      	ldr	r2, [r7, #16]
 8007ede:	429a      	cmp	r2, r3
 8007ee0:	d3b7      	bcc.n	8007e52 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007ee2:	2300      	movs	r3, #0
 8007ee4:	613b      	str	r3, [r7, #16]
 8007ee6:	e043      	b.n	8007f70 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007ee8:	693b      	ldr	r3, [r7, #16]
 8007eea:	015a      	lsls	r2, r3, #5
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	4413      	add	r3, r2
 8007ef0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007efa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8007efe:	d118      	bne.n	8007f32 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007f00:	693b      	ldr	r3, [r7, #16]
 8007f02:	2b00      	cmp	r3, #0
 8007f04:	d10a      	bne.n	8007f1c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007f06:	693b      	ldr	r3, [r7, #16]
 8007f08:	015a      	lsls	r2, r3, #5
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	4413      	add	r3, r2
 8007f0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f12:	461a      	mov	r2, r3
 8007f14:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007f18:	6013      	str	r3, [r2, #0]
 8007f1a:	e013      	b.n	8007f44 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8007f1c:	693b      	ldr	r3, [r7, #16]
 8007f1e:	015a      	lsls	r2, r3, #5
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	4413      	add	r3, r2
 8007f24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f28:	461a      	mov	r2, r3
 8007f2a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007f2e:	6013      	str	r3, [r2, #0]
 8007f30:	e008      	b.n	8007f44 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8007f32:	693b      	ldr	r3, [r7, #16]
 8007f34:	015a      	lsls	r2, r3, #5
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	4413      	add	r3, r2
 8007f3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f3e:	461a      	mov	r2, r3
 8007f40:	2300      	movs	r3, #0
 8007f42:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8007f44:	693b      	ldr	r3, [r7, #16]
 8007f46:	015a      	lsls	r2, r3, #5
 8007f48:	68fb      	ldr	r3, [r7, #12]
 8007f4a:	4413      	add	r3, r2
 8007f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f50:	461a      	mov	r2, r3
 8007f52:	2300      	movs	r3, #0
 8007f54:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8007f56:	693b      	ldr	r3, [r7, #16]
 8007f58:	015a      	lsls	r2, r3, #5
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	4413      	add	r3, r2
 8007f5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007f62:	461a      	mov	r2, r3
 8007f64:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007f68:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	3301      	adds	r3, #1
 8007f6e:	613b      	str	r3, [r7, #16]
 8007f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f72:	693a      	ldr	r2, [r7, #16]
 8007f74:	429a      	cmp	r2, r3
 8007f76:	d3b7      	bcc.n	8007ee8 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007f7e:	691b      	ldr	r3, [r3, #16]
 8007f80:	68fa      	ldr	r2, [r7, #12]
 8007f82:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007f86:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f8a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007f98:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8007f9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f9c:	2b00      	cmp	r3, #0
 8007f9e:	d105      	bne.n	8007fac <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	699b      	ldr	r3, [r3, #24]
 8007fa4:	f043 0210 	orr.w	r2, r3, #16
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	699a      	ldr	r2, [r3, #24]
 8007fb0:	4b0e      	ldr	r3, [pc, #56]	; (8007fec <USB_DevInit+0x2b4>)
 8007fb2:	4313      	orrs	r3, r2
 8007fb4:	687a      	ldr	r2, [r7, #4]
 8007fb6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007fb8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d005      	beq.n	8007fca <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	699b      	ldr	r3, [r3, #24]
 8007fc2:	f043 0208 	orr.w	r2, r3, #8
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007fca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007fcc:	2b01      	cmp	r3, #1
 8007fce:	d105      	bne.n	8007fdc <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	699a      	ldr	r2, [r3, #24]
 8007fd4:	4b06      	ldr	r3, [pc, #24]	; (8007ff0 <USB_DevInit+0x2b8>)
 8007fd6:	4313      	orrs	r3, r2
 8007fd8:	687a      	ldr	r2, [r7, #4]
 8007fda:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007fdc:	7dfb      	ldrb	r3, [r7, #23]
}
 8007fde:	4618      	mov	r0, r3
 8007fe0:	3718      	adds	r7, #24
 8007fe2:	46bd      	mov	sp, r7
 8007fe4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007fe8:	b004      	add	sp, #16
 8007fea:	4770      	bx	lr
 8007fec:	803c3800 	.word	0x803c3800
 8007ff0:	40000004 	.word	0x40000004

08007ff4 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b085      	sub	sp, #20
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
 8007ffc:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007ffe:	2300      	movs	r3, #0
 8008000:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	3301      	adds	r3, #1
 8008006:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	4a13      	ldr	r2, [pc, #76]	; (8008058 <USB_FlushTxFifo+0x64>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d901      	bls.n	8008014 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008010:	2303      	movs	r3, #3
 8008012:	e01b      	b.n	800804c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	691b      	ldr	r3, [r3, #16]
 8008018:	2b00      	cmp	r3, #0
 800801a:	daf2      	bge.n	8008002 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 800801c:	2300      	movs	r3, #0
 800801e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008020:	683b      	ldr	r3, [r7, #0]
 8008022:	019b      	lsls	r3, r3, #6
 8008024:	f043 0220 	orr.w	r2, r3, #32
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	3301      	adds	r3, #1
 8008030:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	4a08      	ldr	r2, [pc, #32]	; (8008058 <USB_FlushTxFifo+0x64>)
 8008036:	4293      	cmp	r3, r2
 8008038:	d901      	bls.n	800803e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 800803a:	2303      	movs	r3, #3
 800803c:	e006      	b.n	800804c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	691b      	ldr	r3, [r3, #16]
 8008042:	f003 0320 	and.w	r3, r3, #32
 8008046:	2b20      	cmp	r3, #32
 8008048:	d0f0      	beq.n	800802c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 800804a:	2300      	movs	r3, #0
}
 800804c:	4618      	mov	r0, r3
 800804e:	3714      	adds	r7, #20
 8008050:	46bd      	mov	sp, r7
 8008052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008056:	4770      	bx	lr
 8008058:	00030d40 	.word	0x00030d40

0800805c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 800805c:	b480      	push	{r7}
 800805e:	b085      	sub	sp, #20
 8008060:	af00      	add	r7, sp, #0
 8008062:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008064:	2300      	movs	r3, #0
 8008066:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	3301      	adds	r3, #1
 800806c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	4a11      	ldr	r2, [pc, #68]	; (80080b8 <USB_FlushRxFifo+0x5c>)
 8008072:	4293      	cmp	r3, r2
 8008074:	d901      	bls.n	800807a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008076:	2303      	movs	r3, #3
 8008078:	e018      	b.n	80080ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	691b      	ldr	r3, [r3, #16]
 800807e:	2b00      	cmp	r3, #0
 8008080:	daf2      	bge.n	8008068 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008082:	2300      	movs	r3, #0
 8008084:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2210      	movs	r2, #16
 800808a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	3301      	adds	r3, #1
 8008090:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	4a08      	ldr	r2, [pc, #32]	; (80080b8 <USB_FlushRxFifo+0x5c>)
 8008096:	4293      	cmp	r3, r2
 8008098:	d901      	bls.n	800809e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800809a:	2303      	movs	r3, #3
 800809c:	e006      	b.n	80080ac <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	691b      	ldr	r3, [r3, #16]
 80080a2:	f003 0310 	and.w	r3, r3, #16
 80080a6:	2b10      	cmp	r3, #16
 80080a8:	d0f0      	beq.n	800808c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80080aa:	2300      	movs	r3, #0
}
 80080ac:	4618      	mov	r0, r3
 80080ae:	3714      	adds	r7, #20
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	00030d40 	.word	0x00030d40

080080bc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80080bc:	b480      	push	{r7}
 80080be:	b085      	sub	sp, #20
 80080c0:	af00      	add	r7, sp, #0
 80080c2:	6078      	str	r0, [r7, #4]
 80080c4:	460b      	mov	r3, r1
 80080c6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80080d2:	681a      	ldr	r2, [r3, #0]
 80080d4:	78fb      	ldrb	r3, [r7, #3]
 80080d6:	68f9      	ldr	r1, [r7, #12]
 80080d8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80080dc:	4313      	orrs	r3, r2
 80080de:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80080e0:	2300      	movs	r3, #0
}
 80080e2:	4618      	mov	r0, r3
 80080e4:	3714      	adds	r7, #20
 80080e6:	46bd      	mov	sp, r7
 80080e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ec:	4770      	bx	lr

080080ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80080ee:	b480      	push	{r7}
 80080f0:	b085      	sub	sp, #20
 80080f2:	af00      	add	r7, sp, #0
 80080f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008100:	681b      	ldr	r3, [r3, #0]
 8008102:	68fa      	ldr	r2, [r7, #12]
 8008104:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008108:	f023 0303 	bic.w	r3, r3, #3
 800810c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008114:	685b      	ldr	r3, [r3, #4]
 8008116:	68fa      	ldr	r2, [r7, #12]
 8008118:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800811c:	f043 0302 	orr.w	r3, r3, #2
 8008120:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008122:	2300      	movs	r3, #0
}
 8008124:	4618      	mov	r0, r3
 8008126:	3714      	adds	r7, #20
 8008128:	46bd      	mov	sp, r7
 800812a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812e:	4770      	bx	lr

08008130 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008130:	b480      	push	{r7}
 8008132:	b083      	sub	sp, #12
 8008134:	af00      	add	r7, sp, #0
 8008136:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	695b      	ldr	r3, [r3, #20]
 800813c:	f003 0301 	and.w	r3, r3, #1
}
 8008140:	4618      	mov	r0, r3
 8008142:	370c      	adds	r7, #12
 8008144:	46bd      	mov	sp, r7
 8008146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800814a:	4770      	bx	lr

0800814c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800814c:	b480      	push	{r7}
 800814e:	b085      	sub	sp, #20
 8008150:	af00      	add	r7, sp, #0
 8008152:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008154:	2300      	movs	r3, #0
 8008156:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	3301      	adds	r3, #1
 800815c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800815e:	68fb      	ldr	r3, [r7, #12]
 8008160:	4a13      	ldr	r2, [pc, #76]	; (80081b0 <USB_CoreReset+0x64>)
 8008162:	4293      	cmp	r3, r2
 8008164:	d901      	bls.n	800816a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008166:	2303      	movs	r3, #3
 8008168:	e01b      	b.n	80081a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	2b00      	cmp	r3, #0
 8008170:	daf2      	bge.n	8008158 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008172:	2300      	movs	r3, #0
 8008174:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	691b      	ldr	r3, [r3, #16]
 800817a:	f043 0201 	orr.w	r2, r3, #1
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008182:	68fb      	ldr	r3, [r7, #12]
 8008184:	3301      	adds	r3, #1
 8008186:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	4a09      	ldr	r2, [pc, #36]	; (80081b0 <USB_CoreReset+0x64>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d901      	bls.n	8008194 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008190:	2303      	movs	r3, #3
 8008192:	e006      	b.n	80081a2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	691b      	ldr	r3, [r3, #16]
 8008198:	f003 0301 	and.w	r3, r3, #1
 800819c:	2b01      	cmp	r3, #1
 800819e:	d0f0      	beq.n	8008182 <USB_CoreReset+0x36>

  return HAL_OK;
 80081a0:	2300      	movs	r3, #0
}
 80081a2:	4618      	mov	r0, r3
 80081a4:	3714      	adds	r7, #20
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	00030d40 	.word	0x00030d40

080081b4 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80081b4:	b580      	push	{r7, lr}
 80081b6:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80081b8:	4904      	ldr	r1, [pc, #16]	; (80081cc <MX_FATFS_Init+0x18>)
 80081ba:	4805      	ldr	r0, [pc, #20]	; (80081d0 <MX_FATFS_Init+0x1c>)
 80081bc:	f000 f8b0 	bl	8008320 <FATFS_LinkDriver>
 80081c0:	4603      	mov	r3, r0
 80081c2:	461a      	mov	r2, r3
 80081c4:	4b03      	ldr	r3, [pc, #12]	; (80081d4 <MX_FATFS_Init+0x20>)
 80081c6:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80081c8:	bf00      	nop
 80081ca:	bd80      	pop	{r7, pc}
 80081cc:	20000b34 	.word	0x20000b34
 80081d0:	2000000c 	.word	0x2000000c
 80081d4:	20000b30 	.word	0x20000b30

080081d8 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80081d8:	b480      	push	{r7}
 80081da:	b083      	sub	sp, #12
 80081dc:	af00      	add	r7, sp, #0
 80081de:	4603      	mov	r3, r0
 80081e0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80081e2:	4b06      	ldr	r3, [pc, #24]	; (80081fc <USER_initialize+0x24>)
 80081e4:	2201      	movs	r2, #1
 80081e6:	701a      	strb	r2, [r3, #0]
    return Stat;
 80081e8:	4b04      	ldr	r3, [pc, #16]	; (80081fc <USER_initialize+0x24>)
 80081ea:	781b      	ldrb	r3, [r3, #0]
 80081ec:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	370c      	adds	r7, #12
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	20000009 	.word	0x20000009

08008200 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	4603      	mov	r3, r0
 8008208:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 800820a:	4b06      	ldr	r3, [pc, #24]	; (8008224 <USER_status+0x24>)
 800820c:	2201      	movs	r2, #1
 800820e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008210:	4b04      	ldr	r3, [pc, #16]	; (8008224 <USER_status+0x24>)
 8008212:	781b      	ldrb	r3, [r3, #0]
 8008214:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008216:	4618      	mov	r0, r3
 8008218:	370c      	adds	r7, #12
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	20000009 	.word	0x20000009

08008228 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	60b9      	str	r1, [r7, #8]
 8008230:	607a      	str	r2, [r7, #4]
 8008232:	603b      	str	r3, [r7, #0]
 8008234:	4603      	mov	r3, r0
 8008236:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8008238:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 800823a:	4618      	mov	r0, r3
 800823c:	3714      	adds	r7, #20
 800823e:	46bd      	mov	sp, r7
 8008240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008244:	4770      	bx	lr

08008246 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008246:	b480      	push	{r7}
 8008248:	b085      	sub	sp, #20
 800824a:	af00      	add	r7, sp, #0
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
 8008250:	603b      	str	r3, [r7, #0]
 8008252:	4603      	mov	r3, r0
 8008254:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8008256:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8008258:	4618      	mov	r0, r3
 800825a:	3714      	adds	r7, #20
 800825c:	46bd      	mov	sp, r7
 800825e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008262:	4770      	bx	lr

08008264 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008264:	b480      	push	{r7}
 8008266:	b085      	sub	sp, #20
 8008268:	af00      	add	r7, sp, #0
 800826a:	4603      	mov	r3, r0
 800826c:	603a      	str	r2, [r7, #0]
 800826e:	71fb      	strb	r3, [r7, #7]
 8008270:	460b      	mov	r3, r1
 8008272:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8008274:	2301      	movs	r3, #1
 8008276:	73fb      	strb	r3, [r7, #15]
    return res;
 8008278:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 800827a:	4618      	mov	r0, r3
 800827c:	3714      	adds	r7, #20
 800827e:	46bd      	mov	sp, r7
 8008280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008284:	4770      	bx	lr
	...

08008288 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008288:	b480      	push	{r7}
 800828a:	b087      	sub	sp, #28
 800828c:	af00      	add	r7, sp, #0
 800828e:	60f8      	str	r0, [r7, #12]
 8008290:	60b9      	str	r1, [r7, #8]
 8008292:	4613      	mov	r3, r2
 8008294:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008296:	2301      	movs	r3, #1
 8008298:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 800829a:	2300      	movs	r3, #0
 800829c:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800829e:	4b1f      	ldr	r3, [pc, #124]	; (800831c <FATFS_LinkDriverEx+0x94>)
 80082a0:	7a5b      	ldrb	r3, [r3, #9]
 80082a2:	b2db      	uxtb	r3, r3
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d131      	bne.n	800830c <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80082a8:	4b1c      	ldr	r3, [pc, #112]	; (800831c <FATFS_LinkDriverEx+0x94>)
 80082aa:	7a5b      	ldrb	r3, [r3, #9]
 80082ac:	b2db      	uxtb	r3, r3
 80082ae:	461a      	mov	r2, r3
 80082b0:	4b1a      	ldr	r3, [pc, #104]	; (800831c <FATFS_LinkDriverEx+0x94>)
 80082b2:	2100      	movs	r1, #0
 80082b4:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80082b6:	4b19      	ldr	r3, [pc, #100]	; (800831c <FATFS_LinkDriverEx+0x94>)
 80082b8:	7a5b      	ldrb	r3, [r3, #9]
 80082ba:	b2db      	uxtb	r3, r3
 80082bc:	4a17      	ldr	r2, [pc, #92]	; (800831c <FATFS_LinkDriverEx+0x94>)
 80082be:	009b      	lsls	r3, r3, #2
 80082c0:	4413      	add	r3, r2
 80082c2:	68fa      	ldr	r2, [r7, #12]
 80082c4:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80082c6:	4b15      	ldr	r3, [pc, #84]	; (800831c <FATFS_LinkDriverEx+0x94>)
 80082c8:	7a5b      	ldrb	r3, [r3, #9]
 80082ca:	b2db      	uxtb	r3, r3
 80082cc:	461a      	mov	r2, r3
 80082ce:	4b13      	ldr	r3, [pc, #76]	; (800831c <FATFS_LinkDriverEx+0x94>)
 80082d0:	4413      	add	r3, r2
 80082d2:	79fa      	ldrb	r2, [r7, #7]
 80082d4:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80082d6:	4b11      	ldr	r3, [pc, #68]	; (800831c <FATFS_LinkDriverEx+0x94>)
 80082d8:	7a5b      	ldrb	r3, [r3, #9]
 80082da:	b2db      	uxtb	r3, r3
 80082dc:	1c5a      	adds	r2, r3, #1
 80082de:	b2d1      	uxtb	r1, r2
 80082e0:	4a0e      	ldr	r2, [pc, #56]	; (800831c <FATFS_LinkDriverEx+0x94>)
 80082e2:	7251      	strb	r1, [r2, #9]
 80082e4:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80082e6:	7dbb      	ldrb	r3, [r7, #22]
 80082e8:	3330      	adds	r3, #48	; 0x30
 80082ea:	b2da      	uxtb	r2, r3
 80082ec:	68bb      	ldr	r3, [r7, #8]
 80082ee:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80082f0:	68bb      	ldr	r3, [r7, #8]
 80082f2:	3301      	adds	r3, #1
 80082f4:	223a      	movs	r2, #58	; 0x3a
 80082f6:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	3302      	adds	r3, #2
 80082fc:	222f      	movs	r2, #47	; 0x2f
 80082fe:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008300:	68bb      	ldr	r3, [r7, #8]
 8008302:	3303      	adds	r3, #3
 8008304:	2200      	movs	r2, #0
 8008306:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008308:	2300      	movs	r3, #0
 800830a:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 800830c:	7dfb      	ldrb	r3, [r7, #23]
}
 800830e:	4618      	mov	r0, r3
 8008310:	371c      	adds	r7, #28
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	20000b38 	.word	0x20000b38

08008320 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008320:	b580      	push	{r7, lr}
 8008322:	b082      	sub	sp, #8
 8008324:	af00      	add	r7, sp, #0
 8008326:	6078      	str	r0, [r7, #4]
 8008328:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 800832a:	2200      	movs	r2, #0
 800832c:	6839      	ldr	r1, [r7, #0]
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f7ff ffaa 	bl	8008288 <FATFS_LinkDriverEx>
 8008334:	4603      	mov	r3, r0
}
 8008336:	4618      	mov	r0, r3
 8008338:	3708      	adds	r7, #8
 800833a:	46bd      	mov	sp, r7
 800833c:	bd80      	pop	{r7, pc}

0800833e <__cvt>:
 800833e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008342:	ec55 4b10 	vmov	r4, r5, d0
 8008346:	2d00      	cmp	r5, #0
 8008348:	460e      	mov	r6, r1
 800834a:	4619      	mov	r1, r3
 800834c:	462b      	mov	r3, r5
 800834e:	bfbb      	ittet	lt
 8008350:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008354:	461d      	movlt	r5, r3
 8008356:	2300      	movge	r3, #0
 8008358:	232d      	movlt	r3, #45	; 0x2d
 800835a:	700b      	strb	r3, [r1, #0]
 800835c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800835e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008362:	4691      	mov	r9, r2
 8008364:	f023 0820 	bic.w	r8, r3, #32
 8008368:	bfbc      	itt	lt
 800836a:	4622      	movlt	r2, r4
 800836c:	4614      	movlt	r4, r2
 800836e:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008372:	d005      	beq.n	8008380 <__cvt+0x42>
 8008374:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008378:	d100      	bne.n	800837c <__cvt+0x3e>
 800837a:	3601      	adds	r6, #1
 800837c:	2102      	movs	r1, #2
 800837e:	e000      	b.n	8008382 <__cvt+0x44>
 8008380:	2103      	movs	r1, #3
 8008382:	ab03      	add	r3, sp, #12
 8008384:	9301      	str	r3, [sp, #4]
 8008386:	ab02      	add	r3, sp, #8
 8008388:	9300      	str	r3, [sp, #0]
 800838a:	ec45 4b10 	vmov	d0, r4, r5
 800838e:	4653      	mov	r3, sl
 8008390:	4632      	mov	r2, r6
 8008392:	f001 f8b5 	bl	8009500 <_dtoa_r>
 8008396:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800839a:	4607      	mov	r7, r0
 800839c:	d102      	bne.n	80083a4 <__cvt+0x66>
 800839e:	f019 0f01 	tst.w	r9, #1
 80083a2:	d022      	beq.n	80083ea <__cvt+0xac>
 80083a4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80083a8:	eb07 0906 	add.w	r9, r7, r6
 80083ac:	d110      	bne.n	80083d0 <__cvt+0x92>
 80083ae:	783b      	ldrb	r3, [r7, #0]
 80083b0:	2b30      	cmp	r3, #48	; 0x30
 80083b2:	d10a      	bne.n	80083ca <__cvt+0x8c>
 80083b4:	2200      	movs	r2, #0
 80083b6:	2300      	movs	r3, #0
 80083b8:	4620      	mov	r0, r4
 80083ba:	4629      	mov	r1, r5
 80083bc:	f7f8 fba4 	bl	8000b08 <__aeabi_dcmpeq>
 80083c0:	b918      	cbnz	r0, 80083ca <__cvt+0x8c>
 80083c2:	f1c6 0601 	rsb	r6, r6, #1
 80083c6:	f8ca 6000 	str.w	r6, [sl]
 80083ca:	f8da 3000 	ldr.w	r3, [sl]
 80083ce:	4499      	add	r9, r3
 80083d0:	2200      	movs	r2, #0
 80083d2:	2300      	movs	r3, #0
 80083d4:	4620      	mov	r0, r4
 80083d6:	4629      	mov	r1, r5
 80083d8:	f7f8 fb96 	bl	8000b08 <__aeabi_dcmpeq>
 80083dc:	b108      	cbz	r0, 80083e2 <__cvt+0xa4>
 80083de:	f8cd 900c 	str.w	r9, [sp, #12]
 80083e2:	2230      	movs	r2, #48	; 0x30
 80083e4:	9b03      	ldr	r3, [sp, #12]
 80083e6:	454b      	cmp	r3, r9
 80083e8:	d307      	bcc.n	80083fa <__cvt+0xbc>
 80083ea:	9b03      	ldr	r3, [sp, #12]
 80083ec:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80083ee:	1bdb      	subs	r3, r3, r7
 80083f0:	4638      	mov	r0, r7
 80083f2:	6013      	str	r3, [r2, #0]
 80083f4:	b004      	add	sp, #16
 80083f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083fa:	1c59      	adds	r1, r3, #1
 80083fc:	9103      	str	r1, [sp, #12]
 80083fe:	701a      	strb	r2, [r3, #0]
 8008400:	e7f0      	b.n	80083e4 <__cvt+0xa6>

08008402 <__exponent>:
 8008402:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008404:	4603      	mov	r3, r0
 8008406:	2900      	cmp	r1, #0
 8008408:	bfb8      	it	lt
 800840a:	4249      	neglt	r1, r1
 800840c:	f803 2b02 	strb.w	r2, [r3], #2
 8008410:	bfb4      	ite	lt
 8008412:	222d      	movlt	r2, #45	; 0x2d
 8008414:	222b      	movge	r2, #43	; 0x2b
 8008416:	2909      	cmp	r1, #9
 8008418:	7042      	strb	r2, [r0, #1]
 800841a:	dd2a      	ble.n	8008472 <__exponent+0x70>
 800841c:	f10d 0207 	add.w	r2, sp, #7
 8008420:	4617      	mov	r7, r2
 8008422:	260a      	movs	r6, #10
 8008424:	4694      	mov	ip, r2
 8008426:	fb91 f5f6 	sdiv	r5, r1, r6
 800842a:	fb06 1415 	mls	r4, r6, r5, r1
 800842e:	3430      	adds	r4, #48	; 0x30
 8008430:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008434:	460c      	mov	r4, r1
 8008436:	2c63      	cmp	r4, #99	; 0x63
 8008438:	f102 32ff 	add.w	r2, r2, #4294967295
 800843c:	4629      	mov	r1, r5
 800843e:	dcf1      	bgt.n	8008424 <__exponent+0x22>
 8008440:	3130      	adds	r1, #48	; 0x30
 8008442:	f1ac 0402 	sub.w	r4, ip, #2
 8008446:	f802 1c01 	strb.w	r1, [r2, #-1]
 800844a:	1c41      	adds	r1, r0, #1
 800844c:	4622      	mov	r2, r4
 800844e:	42ba      	cmp	r2, r7
 8008450:	d30a      	bcc.n	8008468 <__exponent+0x66>
 8008452:	f10d 0209 	add.w	r2, sp, #9
 8008456:	eba2 020c 	sub.w	r2, r2, ip
 800845a:	42bc      	cmp	r4, r7
 800845c:	bf88      	it	hi
 800845e:	2200      	movhi	r2, #0
 8008460:	4413      	add	r3, r2
 8008462:	1a18      	subs	r0, r3, r0
 8008464:	b003      	add	sp, #12
 8008466:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008468:	f812 5b01 	ldrb.w	r5, [r2], #1
 800846c:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008470:	e7ed      	b.n	800844e <__exponent+0x4c>
 8008472:	2330      	movs	r3, #48	; 0x30
 8008474:	3130      	adds	r1, #48	; 0x30
 8008476:	7083      	strb	r3, [r0, #2]
 8008478:	70c1      	strb	r1, [r0, #3]
 800847a:	1d03      	adds	r3, r0, #4
 800847c:	e7f1      	b.n	8008462 <__exponent+0x60>
	...

08008480 <_printf_float>:
 8008480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008484:	ed2d 8b02 	vpush	{d8}
 8008488:	b08d      	sub	sp, #52	; 0x34
 800848a:	460c      	mov	r4, r1
 800848c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008490:	4616      	mov	r6, r2
 8008492:	461f      	mov	r7, r3
 8008494:	4605      	mov	r5, r0
 8008496:	f000 ff2b 	bl	80092f0 <_localeconv_r>
 800849a:	f8d0 a000 	ldr.w	sl, [r0]
 800849e:	4650      	mov	r0, sl
 80084a0:	f7f7 ff06 	bl	80002b0 <strlen>
 80084a4:	2300      	movs	r3, #0
 80084a6:	930a      	str	r3, [sp, #40]	; 0x28
 80084a8:	6823      	ldr	r3, [r4, #0]
 80084aa:	9305      	str	r3, [sp, #20]
 80084ac:	f8d8 3000 	ldr.w	r3, [r8]
 80084b0:	f894 b018 	ldrb.w	fp, [r4, #24]
 80084b4:	3307      	adds	r3, #7
 80084b6:	f023 0307 	bic.w	r3, r3, #7
 80084ba:	f103 0208 	add.w	r2, r3, #8
 80084be:	f8c8 2000 	str.w	r2, [r8]
 80084c2:	e9d3 8900 	ldrd	r8, r9, [r3]
 80084c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80084ca:	9307      	str	r3, [sp, #28]
 80084cc:	f8cd 8018 	str.w	r8, [sp, #24]
 80084d0:	ee08 0a10 	vmov	s16, r0
 80084d4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80084d8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084dc:	4b9e      	ldr	r3, [pc, #632]	; (8008758 <_printf_float+0x2d8>)
 80084de:	f04f 32ff 	mov.w	r2, #4294967295
 80084e2:	f7f8 fb43 	bl	8000b6c <__aeabi_dcmpun>
 80084e6:	bb88      	cbnz	r0, 800854c <_printf_float+0xcc>
 80084e8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80084ec:	4b9a      	ldr	r3, [pc, #616]	; (8008758 <_printf_float+0x2d8>)
 80084ee:	f04f 32ff 	mov.w	r2, #4294967295
 80084f2:	f7f8 fb1d 	bl	8000b30 <__aeabi_dcmple>
 80084f6:	bb48      	cbnz	r0, 800854c <_printf_float+0xcc>
 80084f8:	2200      	movs	r2, #0
 80084fa:	2300      	movs	r3, #0
 80084fc:	4640      	mov	r0, r8
 80084fe:	4649      	mov	r1, r9
 8008500:	f7f8 fb0c 	bl	8000b1c <__aeabi_dcmplt>
 8008504:	b110      	cbz	r0, 800850c <_printf_float+0x8c>
 8008506:	232d      	movs	r3, #45	; 0x2d
 8008508:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800850c:	4a93      	ldr	r2, [pc, #588]	; (800875c <_printf_float+0x2dc>)
 800850e:	4b94      	ldr	r3, [pc, #592]	; (8008760 <_printf_float+0x2e0>)
 8008510:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8008514:	bf94      	ite	ls
 8008516:	4690      	movls	r8, r2
 8008518:	4698      	movhi	r8, r3
 800851a:	2303      	movs	r3, #3
 800851c:	6123      	str	r3, [r4, #16]
 800851e:	9b05      	ldr	r3, [sp, #20]
 8008520:	f023 0304 	bic.w	r3, r3, #4
 8008524:	6023      	str	r3, [r4, #0]
 8008526:	f04f 0900 	mov.w	r9, #0
 800852a:	9700      	str	r7, [sp, #0]
 800852c:	4633      	mov	r3, r6
 800852e:	aa0b      	add	r2, sp, #44	; 0x2c
 8008530:	4621      	mov	r1, r4
 8008532:	4628      	mov	r0, r5
 8008534:	f000 f9da 	bl	80088ec <_printf_common>
 8008538:	3001      	adds	r0, #1
 800853a:	f040 8090 	bne.w	800865e <_printf_float+0x1de>
 800853e:	f04f 30ff 	mov.w	r0, #4294967295
 8008542:	b00d      	add	sp, #52	; 0x34
 8008544:	ecbd 8b02 	vpop	{d8}
 8008548:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800854c:	4642      	mov	r2, r8
 800854e:	464b      	mov	r3, r9
 8008550:	4640      	mov	r0, r8
 8008552:	4649      	mov	r1, r9
 8008554:	f7f8 fb0a 	bl	8000b6c <__aeabi_dcmpun>
 8008558:	b140      	cbz	r0, 800856c <_printf_float+0xec>
 800855a:	464b      	mov	r3, r9
 800855c:	2b00      	cmp	r3, #0
 800855e:	bfbc      	itt	lt
 8008560:	232d      	movlt	r3, #45	; 0x2d
 8008562:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8008566:	4a7f      	ldr	r2, [pc, #508]	; (8008764 <_printf_float+0x2e4>)
 8008568:	4b7f      	ldr	r3, [pc, #508]	; (8008768 <_printf_float+0x2e8>)
 800856a:	e7d1      	b.n	8008510 <_printf_float+0x90>
 800856c:	6863      	ldr	r3, [r4, #4]
 800856e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8008572:	9206      	str	r2, [sp, #24]
 8008574:	1c5a      	adds	r2, r3, #1
 8008576:	d13f      	bne.n	80085f8 <_printf_float+0x178>
 8008578:	2306      	movs	r3, #6
 800857a:	6063      	str	r3, [r4, #4]
 800857c:	9b05      	ldr	r3, [sp, #20]
 800857e:	6861      	ldr	r1, [r4, #4]
 8008580:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8008584:	2300      	movs	r3, #0
 8008586:	9303      	str	r3, [sp, #12]
 8008588:	ab0a      	add	r3, sp, #40	; 0x28
 800858a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800858e:	ab09      	add	r3, sp, #36	; 0x24
 8008590:	ec49 8b10 	vmov	d0, r8, r9
 8008594:	9300      	str	r3, [sp, #0]
 8008596:	6022      	str	r2, [r4, #0]
 8008598:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800859c:	4628      	mov	r0, r5
 800859e:	f7ff fece 	bl	800833e <__cvt>
 80085a2:	9b06      	ldr	r3, [sp, #24]
 80085a4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80085a6:	2b47      	cmp	r3, #71	; 0x47
 80085a8:	4680      	mov	r8, r0
 80085aa:	d108      	bne.n	80085be <_printf_float+0x13e>
 80085ac:	1cc8      	adds	r0, r1, #3
 80085ae:	db02      	blt.n	80085b6 <_printf_float+0x136>
 80085b0:	6863      	ldr	r3, [r4, #4]
 80085b2:	4299      	cmp	r1, r3
 80085b4:	dd41      	ble.n	800863a <_printf_float+0x1ba>
 80085b6:	f1ab 0302 	sub.w	r3, fp, #2
 80085ba:	fa5f fb83 	uxtb.w	fp, r3
 80085be:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80085c2:	d820      	bhi.n	8008606 <_printf_float+0x186>
 80085c4:	3901      	subs	r1, #1
 80085c6:	465a      	mov	r2, fp
 80085c8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80085cc:	9109      	str	r1, [sp, #36]	; 0x24
 80085ce:	f7ff ff18 	bl	8008402 <__exponent>
 80085d2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80085d4:	1813      	adds	r3, r2, r0
 80085d6:	2a01      	cmp	r2, #1
 80085d8:	4681      	mov	r9, r0
 80085da:	6123      	str	r3, [r4, #16]
 80085dc:	dc02      	bgt.n	80085e4 <_printf_float+0x164>
 80085de:	6822      	ldr	r2, [r4, #0]
 80085e0:	07d2      	lsls	r2, r2, #31
 80085e2:	d501      	bpl.n	80085e8 <_printf_float+0x168>
 80085e4:	3301      	adds	r3, #1
 80085e6:	6123      	str	r3, [r4, #16]
 80085e8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	d09c      	beq.n	800852a <_printf_float+0xaa>
 80085f0:	232d      	movs	r3, #45	; 0x2d
 80085f2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80085f6:	e798      	b.n	800852a <_printf_float+0xaa>
 80085f8:	9a06      	ldr	r2, [sp, #24]
 80085fa:	2a47      	cmp	r2, #71	; 0x47
 80085fc:	d1be      	bne.n	800857c <_printf_float+0xfc>
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d1bc      	bne.n	800857c <_printf_float+0xfc>
 8008602:	2301      	movs	r3, #1
 8008604:	e7b9      	b.n	800857a <_printf_float+0xfa>
 8008606:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800860a:	d118      	bne.n	800863e <_printf_float+0x1be>
 800860c:	2900      	cmp	r1, #0
 800860e:	6863      	ldr	r3, [r4, #4]
 8008610:	dd0b      	ble.n	800862a <_printf_float+0x1aa>
 8008612:	6121      	str	r1, [r4, #16]
 8008614:	b913      	cbnz	r3, 800861c <_printf_float+0x19c>
 8008616:	6822      	ldr	r2, [r4, #0]
 8008618:	07d0      	lsls	r0, r2, #31
 800861a:	d502      	bpl.n	8008622 <_printf_float+0x1a2>
 800861c:	3301      	adds	r3, #1
 800861e:	440b      	add	r3, r1
 8008620:	6123      	str	r3, [r4, #16]
 8008622:	65a1      	str	r1, [r4, #88]	; 0x58
 8008624:	f04f 0900 	mov.w	r9, #0
 8008628:	e7de      	b.n	80085e8 <_printf_float+0x168>
 800862a:	b913      	cbnz	r3, 8008632 <_printf_float+0x1b2>
 800862c:	6822      	ldr	r2, [r4, #0]
 800862e:	07d2      	lsls	r2, r2, #31
 8008630:	d501      	bpl.n	8008636 <_printf_float+0x1b6>
 8008632:	3302      	adds	r3, #2
 8008634:	e7f4      	b.n	8008620 <_printf_float+0x1a0>
 8008636:	2301      	movs	r3, #1
 8008638:	e7f2      	b.n	8008620 <_printf_float+0x1a0>
 800863a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800863e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008640:	4299      	cmp	r1, r3
 8008642:	db05      	blt.n	8008650 <_printf_float+0x1d0>
 8008644:	6823      	ldr	r3, [r4, #0]
 8008646:	6121      	str	r1, [r4, #16]
 8008648:	07d8      	lsls	r0, r3, #31
 800864a:	d5ea      	bpl.n	8008622 <_printf_float+0x1a2>
 800864c:	1c4b      	adds	r3, r1, #1
 800864e:	e7e7      	b.n	8008620 <_printf_float+0x1a0>
 8008650:	2900      	cmp	r1, #0
 8008652:	bfd4      	ite	le
 8008654:	f1c1 0202 	rsble	r2, r1, #2
 8008658:	2201      	movgt	r2, #1
 800865a:	4413      	add	r3, r2
 800865c:	e7e0      	b.n	8008620 <_printf_float+0x1a0>
 800865e:	6823      	ldr	r3, [r4, #0]
 8008660:	055a      	lsls	r2, r3, #21
 8008662:	d407      	bmi.n	8008674 <_printf_float+0x1f4>
 8008664:	6923      	ldr	r3, [r4, #16]
 8008666:	4642      	mov	r2, r8
 8008668:	4631      	mov	r1, r6
 800866a:	4628      	mov	r0, r5
 800866c:	47b8      	blx	r7
 800866e:	3001      	adds	r0, #1
 8008670:	d12c      	bne.n	80086cc <_printf_float+0x24c>
 8008672:	e764      	b.n	800853e <_printf_float+0xbe>
 8008674:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8008678:	f240 80e0 	bls.w	800883c <_printf_float+0x3bc>
 800867c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8008680:	2200      	movs	r2, #0
 8008682:	2300      	movs	r3, #0
 8008684:	f7f8 fa40 	bl	8000b08 <__aeabi_dcmpeq>
 8008688:	2800      	cmp	r0, #0
 800868a:	d034      	beq.n	80086f6 <_printf_float+0x276>
 800868c:	4a37      	ldr	r2, [pc, #220]	; (800876c <_printf_float+0x2ec>)
 800868e:	2301      	movs	r3, #1
 8008690:	4631      	mov	r1, r6
 8008692:	4628      	mov	r0, r5
 8008694:	47b8      	blx	r7
 8008696:	3001      	adds	r0, #1
 8008698:	f43f af51 	beq.w	800853e <_printf_float+0xbe>
 800869c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80086a0:	429a      	cmp	r2, r3
 80086a2:	db02      	blt.n	80086aa <_printf_float+0x22a>
 80086a4:	6823      	ldr	r3, [r4, #0]
 80086a6:	07d8      	lsls	r0, r3, #31
 80086a8:	d510      	bpl.n	80086cc <_printf_float+0x24c>
 80086aa:	ee18 3a10 	vmov	r3, s16
 80086ae:	4652      	mov	r2, sl
 80086b0:	4631      	mov	r1, r6
 80086b2:	4628      	mov	r0, r5
 80086b4:	47b8      	blx	r7
 80086b6:	3001      	adds	r0, #1
 80086b8:	f43f af41 	beq.w	800853e <_printf_float+0xbe>
 80086bc:	f04f 0800 	mov.w	r8, #0
 80086c0:	f104 091a 	add.w	r9, r4, #26
 80086c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80086c6:	3b01      	subs	r3, #1
 80086c8:	4543      	cmp	r3, r8
 80086ca:	dc09      	bgt.n	80086e0 <_printf_float+0x260>
 80086cc:	6823      	ldr	r3, [r4, #0]
 80086ce:	079b      	lsls	r3, r3, #30
 80086d0:	f100 8107 	bmi.w	80088e2 <_printf_float+0x462>
 80086d4:	68e0      	ldr	r0, [r4, #12]
 80086d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80086d8:	4298      	cmp	r0, r3
 80086da:	bfb8      	it	lt
 80086dc:	4618      	movlt	r0, r3
 80086de:	e730      	b.n	8008542 <_printf_float+0xc2>
 80086e0:	2301      	movs	r3, #1
 80086e2:	464a      	mov	r2, r9
 80086e4:	4631      	mov	r1, r6
 80086e6:	4628      	mov	r0, r5
 80086e8:	47b8      	blx	r7
 80086ea:	3001      	adds	r0, #1
 80086ec:	f43f af27 	beq.w	800853e <_printf_float+0xbe>
 80086f0:	f108 0801 	add.w	r8, r8, #1
 80086f4:	e7e6      	b.n	80086c4 <_printf_float+0x244>
 80086f6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086f8:	2b00      	cmp	r3, #0
 80086fa:	dc39      	bgt.n	8008770 <_printf_float+0x2f0>
 80086fc:	4a1b      	ldr	r2, [pc, #108]	; (800876c <_printf_float+0x2ec>)
 80086fe:	2301      	movs	r3, #1
 8008700:	4631      	mov	r1, r6
 8008702:	4628      	mov	r0, r5
 8008704:	47b8      	blx	r7
 8008706:	3001      	adds	r0, #1
 8008708:	f43f af19 	beq.w	800853e <_printf_float+0xbe>
 800870c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8008710:	4313      	orrs	r3, r2
 8008712:	d102      	bne.n	800871a <_printf_float+0x29a>
 8008714:	6823      	ldr	r3, [r4, #0]
 8008716:	07d9      	lsls	r1, r3, #31
 8008718:	d5d8      	bpl.n	80086cc <_printf_float+0x24c>
 800871a:	ee18 3a10 	vmov	r3, s16
 800871e:	4652      	mov	r2, sl
 8008720:	4631      	mov	r1, r6
 8008722:	4628      	mov	r0, r5
 8008724:	47b8      	blx	r7
 8008726:	3001      	adds	r0, #1
 8008728:	f43f af09 	beq.w	800853e <_printf_float+0xbe>
 800872c:	f04f 0900 	mov.w	r9, #0
 8008730:	f104 0a1a 	add.w	sl, r4, #26
 8008734:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008736:	425b      	negs	r3, r3
 8008738:	454b      	cmp	r3, r9
 800873a:	dc01      	bgt.n	8008740 <_printf_float+0x2c0>
 800873c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800873e:	e792      	b.n	8008666 <_printf_float+0x1e6>
 8008740:	2301      	movs	r3, #1
 8008742:	4652      	mov	r2, sl
 8008744:	4631      	mov	r1, r6
 8008746:	4628      	mov	r0, r5
 8008748:	47b8      	blx	r7
 800874a:	3001      	adds	r0, #1
 800874c:	f43f aef7 	beq.w	800853e <_printf_float+0xbe>
 8008750:	f109 0901 	add.w	r9, r9, #1
 8008754:	e7ee      	b.n	8008734 <_printf_float+0x2b4>
 8008756:	bf00      	nop
 8008758:	7fefffff 	.word	0x7fefffff
 800875c:	0800cb8c 	.word	0x0800cb8c
 8008760:	0800cb90 	.word	0x0800cb90
 8008764:	0800cb94 	.word	0x0800cb94
 8008768:	0800cb98 	.word	0x0800cb98
 800876c:	0800cb9c 	.word	0x0800cb9c
 8008770:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008772:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8008774:	429a      	cmp	r2, r3
 8008776:	bfa8      	it	ge
 8008778:	461a      	movge	r2, r3
 800877a:	2a00      	cmp	r2, #0
 800877c:	4691      	mov	r9, r2
 800877e:	dc37      	bgt.n	80087f0 <_printf_float+0x370>
 8008780:	f04f 0b00 	mov.w	fp, #0
 8008784:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008788:	f104 021a 	add.w	r2, r4, #26
 800878c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800878e:	9305      	str	r3, [sp, #20]
 8008790:	eba3 0309 	sub.w	r3, r3, r9
 8008794:	455b      	cmp	r3, fp
 8008796:	dc33      	bgt.n	8008800 <_printf_float+0x380>
 8008798:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800879c:	429a      	cmp	r2, r3
 800879e:	db3b      	blt.n	8008818 <_printf_float+0x398>
 80087a0:	6823      	ldr	r3, [r4, #0]
 80087a2:	07da      	lsls	r2, r3, #31
 80087a4:	d438      	bmi.n	8008818 <_printf_float+0x398>
 80087a6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80087aa:	eba2 0903 	sub.w	r9, r2, r3
 80087ae:	9b05      	ldr	r3, [sp, #20]
 80087b0:	1ad2      	subs	r2, r2, r3
 80087b2:	4591      	cmp	r9, r2
 80087b4:	bfa8      	it	ge
 80087b6:	4691      	movge	r9, r2
 80087b8:	f1b9 0f00 	cmp.w	r9, #0
 80087bc:	dc35      	bgt.n	800882a <_printf_float+0x3aa>
 80087be:	f04f 0800 	mov.w	r8, #0
 80087c2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80087c6:	f104 0a1a 	add.w	sl, r4, #26
 80087ca:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80087ce:	1a9b      	subs	r3, r3, r2
 80087d0:	eba3 0309 	sub.w	r3, r3, r9
 80087d4:	4543      	cmp	r3, r8
 80087d6:	f77f af79 	ble.w	80086cc <_printf_float+0x24c>
 80087da:	2301      	movs	r3, #1
 80087dc:	4652      	mov	r2, sl
 80087de:	4631      	mov	r1, r6
 80087e0:	4628      	mov	r0, r5
 80087e2:	47b8      	blx	r7
 80087e4:	3001      	adds	r0, #1
 80087e6:	f43f aeaa 	beq.w	800853e <_printf_float+0xbe>
 80087ea:	f108 0801 	add.w	r8, r8, #1
 80087ee:	e7ec      	b.n	80087ca <_printf_float+0x34a>
 80087f0:	4613      	mov	r3, r2
 80087f2:	4631      	mov	r1, r6
 80087f4:	4642      	mov	r2, r8
 80087f6:	4628      	mov	r0, r5
 80087f8:	47b8      	blx	r7
 80087fa:	3001      	adds	r0, #1
 80087fc:	d1c0      	bne.n	8008780 <_printf_float+0x300>
 80087fe:	e69e      	b.n	800853e <_printf_float+0xbe>
 8008800:	2301      	movs	r3, #1
 8008802:	4631      	mov	r1, r6
 8008804:	4628      	mov	r0, r5
 8008806:	9205      	str	r2, [sp, #20]
 8008808:	47b8      	blx	r7
 800880a:	3001      	adds	r0, #1
 800880c:	f43f ae97 	beq.w	800853e <_printf_float+0xbe>
 8008810:	9a05      	ldr	r2, [sp, #20]
 8008812:	f10b 0b01 	add.w	fp, fp, #1
 8008816:	e7b9      	b.n	800878c <_printf_float+0x30c>
 8008818:	ee18 3a10 	vmov	r3, s16
 800881c:	4652      	mov	r2, sl
 800881e:	4631      	mov	r1, r6
 8008820:	4628      	mov	r0, r5
 8008822:	47b8      	blx	r7
 8008824:	3001      	adds	r0, #1
 8008826:	d1be      	bne.n	80087a6 <_printf_float+0x326>
 8008828:	e689      	b.n	800853e <_printf_float+0xbe>
 800882a:	9a05      	ldr	r2, [sp, #20]
 800882c:	464b      	mov	r3, r9
 800882e:	4442      	add	r2, r8
 8008830:	4631      	mov	r1, r6
 8008832:	4628      	mov	r0, r5
 8008834:	47b8      	blx	r7
 8008836:	3001      	adds	r0, #1
 8008838:	d1c1      	bne.n	80087be <_printf_float+0x33e>
 800883a:	e680      	b.n	800853e <_printf_float+0xbe>
 800883c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800883e:	2a01      	cmp	r2, #1
 8008840:	dc01      	bgt.n	8008846 <_printf_float+0x3c6>
 8008842:	07db      	lsls	r3, r3, #31
 8008844:	d53a      	bpl.n	80088bc <_printf_float+0x43c>
 8008846:	2301      	movs	r3, #1
 8008848:	4642      	mov	r2, r8
 800884a:	4631      	mov	r1, r6
 800884c:	4628      	mov	r0, r5
 800884e:	47b8      	blx	r7
 8008850:	3001      	adds	r0, #1
 8008852:	f43f ae74 	beq.w	800853e <_printf_float+0xbe>
 8008856:	ee18 3a10 	vmov	r3, s16
 800885a:	4652      	mov	r2, sl
 800885c:	4631      	mov	r1, r6
 800885e:	4628      	mov	r0, r5
 8008860:	47b8      	blx	r7
 8008862:	3001      	adds	r0, #1
 8008864:	f43f ae6b 	beq.w	800853e <_printf_float+0xbe>
 8008868:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800886c:	2200      	movs	r2, #0
 800886e:	2300      	movs	r3, #0
 8008870:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8008874:	f7f8 f948 	bl	8000b08 <__aeabi_dcmpeq>
 8008878:	b9d8      	cbnz	r0, 80088b2 <_printf_float+0x432>
 800887a:	f10a 33ff 	add.w	r3, sl, #4294967295
 800887e:	f108 0201 	add.w	r2, r8, #1
 8008882:	4631      	mov	r1, r6
 8008884:	4628      	mov	r0, r5
 8008886:	47b8      	blx	r7
 8008888:	3001      	adds	r0, #1
 800888a:	d10e      	bne.n	80088aa <_printf_float+0x42a>
 800888c:	e657      	b.n	800853e <_printf_float+0xbe>
 800888e:	2301      	movs	r3, #1
 8008890:	4652      	mov	r2, sl
 8008892:	4631      	mov	r1, r6
 8008894:	4628      	mov	r0, r5
 8008896:	47b8      	blx	r7
 8008898:	3001      	adds	r0, #1
 800889a:	f43f ae50 	beq.w	800853e <_printf_float+0xbe>
 800889e:	f108 0801 	add.w	r8, r8, #1
 80088a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80088a4:	3b01      	subs	r3, #1
 80088a6:	4543      	cmp	r3, r8
 80088a8:	dcf1      	bgt.n	800888e <_printf_float+0x40e>
 80088aa:	464b      	mov	r3, r9
 80088ac:	f104 0250 	add.w	r2, r4, #80	; 0x50
 80088b0:	e6da      	b.n	8008668 <_printf_float+0x1e8>
 80088b2:	f04f 0800 	mov.w	r8, #0
 80088b6:	f104 0a1a 	add.w	sl, r4, #26
 80088ba:	e7f2      	b.n	80088a2 <_printf_float+0x422>
 80088bc:	2301      	movs	r3, #1
 80088be:	4642      	mov	r2, r8
 80088c0:	e7df      	b.n	8008882 <_printf_float+0x402>
 80088c2:	2301      	movs	r3, #1
 80088c4:	464a      	mov	r2, r9
 80088c6:	4631      	mov	r1, r6
 80088c8:	4628      	mov	r0, r5
 80088ca:	47b8      	blx	r7
 80088cc:	3001      	adds	r0, #1
 80088ce:	f43f ae36 	beq.w	800853e <_printf_float+0xbe>
 80088d2:	f108 0801 	add.w	r8, r8, #1
 80088d6:	68e3      	ldr	r3, [r4, #12]
 80088d8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80088da:	1a5b      	subs	r3, r3, r1
 80088dc:	4543      	cmp	r3, r8
 80088de:	dcf0      	bgt.n	80088c2 <_printf_float+0x442>
 80088e0:	e6f8      	b.n	80086d4 <_printf_float+0x254>
 80088e2:	f04f 0800 	mov.w	r8, #0
 80088e6:	f104 0919 	add.w	r9, r4, #25
 80088ea:	e7f4      	b.n	80088d6 <_printf_float+0x456>

080088ec <_printf_common>:
 80088ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80088f0:	4616      	mov	r6, r2
 80088f2:	4699      	mov	r9, r3
 80088f4:	688a      	ldr	r2, [r1, #8]
 80088f6:	690b      	ldr	r3, [r1, #16]
 80088f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80088fc:	4293      	cmp	r3, r2
 80088fe:	bfb8      	it	lt
 8008900:	4613      	movlt	r3, r2
 8008902:	6033      	str	r3, [r6, #0]
 8008904:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008908:	4607      	mov	r7, r0
 800890a:	460c      	mov	r4, r1
 800890c:	b10a      	cbz	r2, 8008912 <_printf_common+0x26>
 800890e:	3301      	adds	r3, #1
 8008910:	6033      	str	r3, [r6, #0]
 8008912:	6823      	ldr	r3, [r4, #0]
 8008914:	0699      	lsls	r1, r3, #26
 8008916:	bf42      	ittt	mi
 8008918:	6833      	ldrmi	r3, [r6, #0]
 800891a:	3302      	addmi	r3, #2
 800891c:	6033      	strmi	r3, [r6, #0]
 800891e:	6825      	ldr	r5, [r4, #0]
 8008920:	f015 0506 	ands.w	r5, r5, #6
 8008924:	d106      	bne.n	8008934 <_printf_common+0x48>
 8008926:	f104 0a19 	add.w	sl, r4, #25
 800892a:	68e3      	ldr	r3, [r4, #12]
 800892c:	6832      	ldr	r2, [r6, #0]
 800892e:	1a9b      	subs	r3, r3, r2
 8008930:	42ab      	cmp	r3, r5
 8008932:	dc26      	bgt.n	8008982 <_printf_common+0x96>
 8008934:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008938:	1e13      	subs	r3, r2, #0
 800893a:	6822      	ldr	r2, [r4, #0]
 800893c:	bf18      	it	ne
 800893e:	2301      	movne	r3, #1
 8008940:	0692      	lsls	r2, r2, #26
 8008942:	d42b      	bmi.n	800899c <_printf_common+0xb0>
 8008944:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008948:	4649      	mov	r1, r9
 800894a:	4638      	mov	r0, r7
 800894c:	47c0      	blx	r8
 800894e:	3001      	adds	r0, #1
 8008950:	d01e      	beq.n	8008990 <_printf_common+0xa4>
 8008952:	6823      	ldr	r3, [r4, #0]
 8008954:	6922      	ldr	r2, [r4, #16]
 8008956:	f003 0306 	and.w	r3, r3, #6
 800895a:	2b04      	cmp	r3, #4
 800895c:	bf02      	ittt	eq
 800895e:	68e5      	ldreq	r5, [r4, #12]
 8008960:	6833      	ldreq	r3, [r6, #0]
 8008962:	1aed      	subeq	r5, r5, r3
 8008964:	68a3      	ldr	r3, [r4, #8]
 8008966:	bf0c      	ite	eq
 8008968:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800896c:	2500      	movne	r5, #0
 800896e:	4293      	cmp	r3, r2
 8008970:	bfc4      	itt	gt
 8008972:	1a9b      	subgt	r3, r3, r2
 8008974:	18ed      	addgt	r5, r5, r3
 8008976:	2600      	movs	r6, #0
 8008978:	341a      	adds	r4, #26
 800897a:	42b5      	cmp	r5, r6
 800897c:	d11a      	bne.n	80089b4 <_printf_common+0xc8>
 800897e:	2000      	movs	r0, #0
 8008980:	e008      	b.n	8008994 <_printf_common+0xa8>
 8008982:	2301      	movs	r3, #1
 8008984:	4652      	mov	r2, sl
 8008986:	4649      	mov	r1, r9
 8008988:	4638      	mov	r0, r7
 800898a:	47c0      	blx	r8
 800898c:	3001      	adds	r0, #1
 800898e:	d103      	bne.n	8008998 <_printf_common+0xac>
 8008990:	f04f 30ff 	mov.w	r0, #4294967295
 8008994:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008998:	3501      	adds	r5, #1
 800899a:	e7c6      	b.n	800892a <_printf_common+0x3e>
 800899c:	18e1      	adds	r1, r4, r3
 800899e:	1c5a      	adds	r2, r3, #1
 80089a0:	2030      	movs	r0, #48	; 0x30
 80089a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80089a6:	4422      	add	r2, r4
 80089a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80089ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80089b0:	3302      	adds	r3, #2
 80089b2:	e7c7      	b.n	8008944 <_printf_common+0x58>
 80089b4:	2301      	movs	r3, #1
 80089b6:	4622      	mov	r2, r4
 80089b8:	4649      	mov	r1, r9
 80089ba:	4638      	mov	r0, r7
 80089bc:	47c0      	blx	r8
 80089be:	3001      	adds	r0, #1
 80089c0:	d0e6      	beq.n	8008990 <_printf_common+0xa4>
 80089c2:	3601      	adds	r6, #1
 80089c4:	e7d9      	b.n	800897a <_printf_common+0x8e>
	...

080089c8 <_printf_i>:
 80089c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80089cc:	7e0f      	ldrb	r7, [r1, #24]
 80089ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80089d0:	2f78      	cmp	r7, #120	; 0x78
 80089d2:	4691      	mov	r9, r2
 80089d4:	4680      	mov	r8, r0
 80089d6:	460c      	mov	r4, r1
 80089d8:	469a      	mov	sl, r3
 80089da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80089de:	d807      	bhi.n	80089f0 <_printf_i+0x28>
 80089e0:	2f62      	cmp	r7, #98	; 0x62
 80089e2:	d80a      	bhi.n	80089fa <_printf_i+0x32>
 80089e4:	2f00      	cmp	r7, #0
 80089e6:	f000 80d4 	beq.w	8008b92 <_printf_i+0x1ca>
 80089ea:	2f58      	cmp	r7, #88	; 0x58
 80089ec:	f000 80c0 	beq.w	8008b70 <_printf_i+0x1a8>
 80089f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80089f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80089f8:	e03a      	b.n	8008a70 <_printf_i+0xa8>
 80089fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80089fe:	2b15      	cmp	r3, #21
 8008a00:	d8f6      	bhi.n	80089f0 <_printf_i+0x28>
 8008a02:	a101      	add	r1, pc, #4	; (adr r1, 8008a08 <_printf_i+0x40>)
 8008a04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008a08:	08008a61 	.word	0x08008a61
 8008a0c:	08008a75 	.word	0x08008a75
 8008a10:	080089f1 	.word	0x080089f1
 8008a14:	080089f1 	.word	0x080089f1
 8008a18:	080089f1 	.word	0x080089f1
 8008a1c:	080089f1 	.word	0x080089f1
 8008a20:	08008a75 	.word	0x08008a75
 8008a24:	080089f1 	.word	0x080089f1
 8008a28:	080089f1 	.word	0x080089f1
 8008a2c:	080089f1 	.word	0x080089f1
 8008a30:	080089f1 	.word	0x080089f1
 8008a34:	08008b79 	.word	0x08008b79
 8008a38:	08008aa1 	.word	0x08008aa1
 8008a3c:	08008b33 	.word	0x08008b33
 8008a40:	080089f1 	.word	0x080089f1
 8008a44:	080089f1 	.word	0x080089f1
 8008a48:	08008b9b 	.word	0x08008b9b
 8008a4c:	080089f1 	.word	0x080089f1
 8008a50:	08008aa1 	.word	0x08008aa1
 8008a54:	080089f1 	.word	0x080089f1
 8008a58:	080089f1 	.word	0x080089f1
 8008a5c:	08008b3b 	.word	0x08008b3b
 8008a60:	682b      	ldr	r3, [r5, #0]
 8008a62:	1d1a      	adds	r2, r3, #4
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	602a      	str	r2, [r5, #0]
 8008a68:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008a6c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008a70:	2301      	movs	r3, #1
 8008a72:	e09f      	b.n	8008bb4 <_printf_i+0x1ec>
 8008a74:	6820      	ldr	r0, [r4, #0]
 8008a76:	682b      	ldr	r3, [r5, #0]
 8008a78:	0607      	lsls	r7, r0, #24
 8008a7a:	f103 0104 	add.w	r1, r3, #4
 8008a7e:	6029      	str	r1, [r5, #0]
 8008a80:	d501      	bpl.n	8008a86 <_printf_i+0xbe>
 8008a82:	681e      	ldr	r6, [r3, #0]
 8008a84:	e003      	b.n	8008a8e <_printf_i+0xc6>
 8008a86:	0646      	lsls	r6, r0, #25
 8008a88:	d5fb      	bpl.n	8008a82 <_printf_i+0xba>
 8008a8a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8008a8e:	2e00      	cmp	r6, #0
 8008a90:	da03      	bge.n	8008a9a <_printf_i+0xd2>
 8008a92:	232d      	movs	r3, #45	; 0x2d
 8008a94:	4276      	negs	r6, r6
 8008a96:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008a9a:	485a      	ldr	r0, [pc, #360]	; (8008c04 <_printf_i+0x23c>)
 8008a9c:	230a      	movs	r3, #10
 8008a9e:	e012      	b.n	8008ac6 <_printf_i+0xfe>
 8008aa0:	682b      	ldr	r3, [r5, #0]
 8008aa2:	6820      	ldr	r0, [r4, #0]
 8008aa4:	1d19      	adds	r1, r3, #4
 8008aa6:	6029      	str	r1, [r5, #0]
 8008aa8:	0605      	lsls	r5, r0, #24
 8008aaa:	d501      	bpl.n	8008ab0 <_printf_i+0xe8>
 8008aac:	681e      	ldr	r6, [r3, #0]
 8008aae:	e002      	b.n	8008ab6 <_printf_i+0xee>
 8008ab0:	0641      	lsls	r1, r0, #25
 8008ab2:	d5fb      	bpl.n	8008aac <_printf_i+0xe4>
 8008ab4:	881e      	ldrh	r6, [r3, #0]
 8008ab6:	4853      	ldr	r0, [pc, #332]	; (8008c04 <_printf_i+0x23c>)
 8008ab8:	2f6f      	cmp	r7, #111	; 0x6f
 8008aba:	bf0c      	ite	eq
 8008abc:	2308      	moveq	r3, #8
 8008abe:	230a      	movne	r3, #10
 8008ac0:	2100      	movs	r1, #0
 8008ac2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008ac6:	6865      	ldr	r5, [r4, #4]
 8008ac8:	60a5      	str	r5, [r4, #8]
 8008aca:	2d00      	cmp	r5, #0
 8008acc:	bfa2      	ittt	ge
 8008ace:	6821      	ldrge	r1, [r4, #0]
 8008ad0:	f021 0104 	bicge.w	r1, r1, #4
 8008ad4:	6021      	strge	r1, [r4, #0]
 8008ad6:	b90e      	cbnz	r6, 8008adc <_printf_i+0x114>
 8008ad8:	2d00      	cmp	r5, #0
 8008ada:	d04b      	beq.n	8008b74 <_printf_i+0x1ac>
 8008adc:	4615      	mov	r5, r2
 8008ade:	fbb6 f1f3 	udiv	r1, r6, r3
 8008ae2:	fb03 6711 	mls	r7, r3, r1, r6
 8008ae6:	5dc7      	ldrb	r7, [r0, r7]
 8008ae8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008aec:	4637      	mov	r7, r6
 8008aee:	42bb      	cmp	r3, r7
 8008af0:	460e      	mov	r6, r1
 8008af2:	d9f4      	bls.n	8008ade <_printf_i+0x116>
 8008af4:	2b08      	cmp	r3, #8
 8008af6:	d10b      	bne.n	8008b10 <_printf_i+0x148>
 8008af8:	6823      	ldr	r3, [r4, #0]
 8008afa:	07de      	lsls	r6, r3, #31
 8008afc:	d508      	bpl.n	8008b10 <_printf_i+0x148>
 8008afe:	6923      	ldr	r3, [r4, #16]
 8008b00:	6861      	ldr	r1, [r4, #4]
 8008b02:	4299      	cmp	r1, r3
 8008b04:	bfde      	ittt	le
 8008b06:	2330      	movle	r3, #48	; 0x30
 8008b08:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008b0c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008b10:	1b52      	subs	r2, r2, r5
 8008b12:	6122      	str	r2, [r4, #16]
 8008b14:	f8cd a000 	str.w	sl, [sp]
 8008b18:	464b      	mov	r3, r9
 8008b1a:	aa03      	add	r2, sp, #12
 8008b1c:	4621      	mov	r1, r4
 8008b1e:	4640      	mov	r0, r8
 8008b20:	f7ff fee4 	bl	80088ec <_printf_common>
 8008b24:	3001      	adds	r0, #1
 8008b26:	d14a      	bne.n	8008bbe <_printf_i+0x1f6>
 8008b28:	f04f 30ff 	mov.w	r0, #4294967295
 8008b2c:	b004      	add	sp, #16
 8008b2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b32:	6823      	ldr	r3, [r4, #0]
 8008b34:	f043 0320 	orr.w	r3, r3, #32
 8008b38:	6023      	str	r3, [r4, #0]
 8008b3a:	4833      	ldr	r0, [pc, #204]	; (8008c08 <_printf_i+0x240>)
 8008b3c:	2778      	movs	r7, #120	; 0x78
 8008b3e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008b42:	6823      	ldr	r3, [r4, #0]
 8008b44:	6829      	ldr	r1, [r5, #0]
 8008b46:	061f      	lsls	r7, r3, #24
 8008b48:	f851 6b04 	ldr.w	r6, [r1], #4
 8008b4c:	d402      	bmi.n	8008b54 <_printf_i+0x18c>
 8008b4e:	065f      	lsls	r7, r3, #25
 8008b50:	bf48      	it	mi
 8008b52:	b2b6      	uxthmi	r6, r6
 8008b54:	07df      	lsls	r7, r3, #31
 8008b56:	bf48      	it	mi
 8008b58:	f043 0320 	orrmi.w	r3, r3, #32
 8008b5c:	6029      	str	r1, [r5, #0]
 8008b5e:	bf48      	it	mi
 8008b60:	6023      	strmi	r3, [r4, #0]
 8008b62:	b91e      	cbnz	r6, 8008b6c <_printf_i+0x1a4>
 8008b64:	6823      	ldr	r3, [r4, #0]
 8008b66:	f023 0320 	bic.w	r3, r3, #32
 8008b6a:	6023      	str	r3, [r4, #0]
 8008b6c:	2310      	movs	r3, #16
 8008b6e:	e7a7      	b.n	8008ac0 <_printf_i+0xf8>
 8008b70:	4824      	ldr	r0, [pc, #144]	; (8008c04 <_printf_i+0x23c>)
 8008b72:	e7e4      	b.n	8008b3e <_printf_i+0x176>
 8008b74:	4615      	mov	r5, r2
 8008b76:	e7bd      	b.n	8008af4 <_printf_i+0x12c>
 8008b78:	682b      	ldr	r3, [r5, #0]
 8008b7a:	6826      	ldr	r6, [r4, #0]
 8008b7c:	6961      	ldr	r1, [r4, #20]
 8008b7e:	1d18      	adds	r0, r3, #4
 8008b80:	6028      	str	r0, [r5, #0]
 8008b82:	0635      	lsls	r5, r6, #24
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	d501      	bpl.n	8008b8c <_printf_i+0x1c4>
 8008b88:	6019      	str	r1, [r3, #0]
 8008b8a:	e002      	b.n	8008b92 <_printf_i+0x1ca>
 8008b8c:	0670      	lsls	r0, r6, #25
 8008b8e:	d5fb      	bpl.n	8008b88 <_printf_i+0x1c0>
 8008b90:	8019      	strh	r1, [r3, #0]
 8008b92:	2300      	movs	r3, #0
 8008b94:	6123      	str	r3, [r4, #16]
 8008b96:	4615      	mov	r5, r2
 8008b98:	e7bc      	b.n	8008b14 <_printf_i+0x14c>
 8008b9a:	682b      	ldr	r3, [r5, #0]
 8008b9c:	1d1a      	adds	r2, r3, #4
 8008b9e:	602a      	str	r2, [r5, #0]
 8008ba0:	681d      	ldr	r5, [r3, #0]
 8008ba2:	6862      	ldr	r2, [r4, #4]
 8008ba4:	2100      	movs	r1, #0
 8008ba6:	4628      	mov	r0, r5
 8008ba8:	f7f7 fb32 	bl	8000210 <memchr>
 8008bac:	b108      	cbz	r0, 8008bb2 <_printf_i+0x1ea>
 8008bae:	1b40      	subs	r0, r0, r5
 8008bb0:	6060      	str	r0, [r4, #4]
 8008bb2:	6863      	ldr	r3, [r4, #4]
 8008bb4:	6123      	str	r3, [r4, #16]
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008bbc:	e7aa      	b.n	8008b14 <_printf_i+0x14c>
 8008bbe:	6923      	ldr	r3, [r4, #16]
 8008bc0:	462a      	mov	r2, r5
 8008bc2:	4649      	mov	r1, r9
 8008bc4:	4640      	mov	r0, r8
 8008bc6:	47d0      	blx	sl
 8008bc8:	3001      	adds	r0, #1
 8008bca:	d0ad      	beq.n	8008b28 <_printf_i+0x160>
 8008bcc:	6823      	ldr	r3, [r4, #0]
 8008bce:	079b      	lsls	r3, r3, #30
 8008bd0:	d413      	bmi.n	8008bfa <_printf_i+0x232>
 8008bd2:	68e0      	ldr	r0, [r4, #12]
 8008bd4:	9b03      	ldr	r3, [sp, #12]
 8008bd6:	4298      	cmp	r0, r3
 8008bd8:	bfb8      	it	lt
 8008bda:	4618      	movlt	r0, r3
 8008bdc:	e7a6      	b.n	8008b2c <_printf_i+0x164>
 8008bde:	2301      	movs	r3, #1
 8008be0:	4632      	mov	r2, r6
 8008be2:	4649      	mov	r1, r9
 8008be4:	4640      	mov	r0, r8
 8008be6:	47d0      	blx	sl
 8008be8:	3001      	adds	r0, #1
 8008bea:	d09d      	beq.n	8008b28 <_printf_i+0x160>
 8008bec:	3501      	adds	r5, #1
 8008bee:	68e3      	ldr	r3, [r4, #12]
 8008bf0:	9903      	ldr	r1, [sp, #12]
 8008bf2:	1a5b      	subs	r3, r3, r1
 8008bf4:	42ab      	cmp	r3, r5
 8008bf6:	dcf2      	bgt.n	8008bde <_printf_i+0x216>
 8008bf8:	e7eb      	b.n	8008bd2 <_printf_i+0x20a>
 8008bfa:	2500      	movs	r5, #0
 8008bfc:	f104 0619 	add.w	r6, r4, #25
 8008c00:	e7f5      	b.n	8008bee <_printf_i+0x226>
 8008c02:	bf00      	nop
 8008c04:	0800cb9e 	.word	0x0800cb9e
 8008c08:	0800cbaf 	.word	0x0800cbaf

08008c0c <_scanf_float>:
 8008c0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c10:	b087      	sub	sp, #28
 8008c12:	4617      	mov	r7, r2
 8008c14:	9303      	str	r3, [sp, #12]
 8008c16:	688b      	ldr	r3, [r1, #8]
 8008c18:	1e5a      	subs	r2, r3, #1
 8008c1a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008c1e:	bf83      	ittte	hi
 8008c20:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008c24:	195b      	addhi	r3, r3, r5
 8008c26:	9302      	strhi	r3, [sp, #8]
 8008c28:	2300      	movls	r3, #0
 8008c2a:	bf86      	itte	hi
 8008c2c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008c30:	608b      	strhi	r3, [r1, #8]
 8008c32:	9302      	strls	r3, [sp, #8]
 8008c34:	680b      	ldr	r3, [r1, #0]
 8008c36:	468b      	mov	fp, r1
 8008c38:	2500      	movs	r5, #0
 8008c3a:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8008c3e:	f84b 3b1c 	str.w	r3, [fp], #28
 8008c42:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8008c46:	4680      	mov	r8, r0
 8008c48:	460c      	mov	r4, r1
 8008c4a:	465e      	mov	r6, fp
 8008c4c:	46aa      	mov	sl, r5
 8008c4e:	46a9      	mov	r9, r5
 8008c50:	9501      	str	r5, [sp, #4]
 8008c52:	68a2      	ldr	r2, [r4, #8]
 8008c54:	b152      	cbz	r2, 8008c6c <_scanf_float+0x60>
 8008c56:	683b      	ldr	r3, [r7, #0]
 8008c58:	781b      	ldrb	r3, [r3, #0]
 8008c5a:	2b4e      	cmp	r3, #78	; 0x4e
 8008c5c:	d864      	bhi.n	8008d28 <_scanf_float+0x11c>
 8008c5e:	2b40      	cmp	r3, #64	; 0x40
 8008c60:	d83c      	bhi.n	8008cdc <_scanf_float+0xd0>
 8008c62:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8008c66:	b2c8      	uxtb	r0, r1
 8008c68:	280e      	cmp	r0, #14
 8008c6a:	d93a      	bls.n	8008ce2 <_scanf_float+0xd6>
 8008c6c:	f1b9 0f00 	cmp.w	r9, #0
 8008c70:	d003      	beq.n	8008c7a <_scanf_float+0x6e>
 8008c72:	6823      	ldr	r3, [r4, #0]
 8008c74:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008c78:	6023      	str	r3, [r4, #0]
 8008c7a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008c7e:	f1ba 0f01 	cmp.w	sl, #1
 8008c82:	f200 8113 	bhi.w	8008eac <_scanf_float+0x2a0>
 8008c86:	455e      	cmp	r6, fp
 8008c88:	f200 8105 	bhi.w	8008e96 <_scanf_float+0x28a>
 8008c8c:	2501      	movs	r5, #1
 8008c8e:	4628      	mov	r0, r5
 8008c90:	b007      	add	sp, #28
 8008c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c96:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8008c9a:	2a0d      	cmp	r2, #13
 8008c9c:	d8e6      	bhi.n	8008c6c <_scanf_float+0x60>
 8008c9e:	a101      	add	r1, pc, #4	; (adr r1, 8008ca4 <_scanf_float+0x98>)
 8008ca0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008ca4:	08008de3 	.word	0x08008de3
 8008ca8:	08008c6d 	.word	0x08008c6d
 8008cac:	08008c6d 	.word	0x08008c6d
 8008cb0:	08008c6d 	.word	0x08008c6d
 8008cb4:	08008e43 	.word	0x08008e43
 8008cb8:	08008e1b 	.word	0x08008e1b
 8008cbc:	08008c6d 	.word	0x08008c6d
 8008cc0:	08008c6d 	.word	0x08008c6d
 8008cc4:	08008df1 	.word	0x08008df1
 8008cc8:	08008c6d 	.word	0x08008c6d
 8008ccc:	08008c6d 	.word	0x08008c6d
 8008cd0:	08008c6d 	.word	0x08008c6d
 8008cd4:	08008c6d 	.word	0x08008c6d
 8008cd8:	08008da9 	.word	0x08008da9
 8008cdc:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008ce0:	e7db      	b.n	8008c9a <_scanf_float+0x8e>
 8008ce2:	290e      	cmp	r1, #14
 8008ce4:	d8c2      	bhi.n	8008c6c <_scanf_float+0x60>
 8008ce6:	a001      	add	r0, pc, #4	; (adr r0, 8008cec <_scanf_float+0xe0>)
 8008ce8:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008cec:	08008d9b 	.word	0x08008d9b
 8008cf0:	08008c6d 	.word	0x08008c6d
 8008cf4:	08008d9b 	.word	0x08008d9b
 8008cf8:	08008e2f 	.word	0x08008e2f
 8008cfc:	08008c6d 	.word	0x08008c6d
 8008d00:	08008d49 	.word	0x08008d49
 8008d04:	08008d85 	.word	0x08008d85
 8008d08:	08008d85 	.word	0x08008d85
 8008d0c:	08008d85 	.word	0x08008d85
 8008d10:	08008d85 	.word	0x08008d85
 8008d14:	08008d85 	.word	0x08008d85
 8008d18:	08008d85 	.word	0x08008d85
 8008d1c:	08008d85 	.word	0x08008d85
 8008d20:	08008d85 	.word	0x08008d85
 8008d24:	08008d85 	.word	0x08008d85
 8008d28:	2b6e      	cmp	r3, #110	; 0x6e
 8008d2a:	d809      	bhi.n	8008d40 <_scanf_float+0x134>
 8008d2c:	2b60      	cmp	r3, #96	; 0x60
 8008d2e:	d8b2      	bhi.n	8008c96 <_scanf_float+0x8a>
 8008d30:	2b54      	cmp	r3, #84	; 0x54
 8008d32:	d077      	beq.n	8008e24 <_scanf_float+0x218>
 8008d34:	2b59      	cmp	r3, #89	; 0x59
 8008d36:	d199      	bne.n	8008c6c <_scanf_float+0x60>
 8008d38:	2d07      	cmp	r5, #7
 8008d3a:	d197      	bne.n	8008c6c <_scanf_float+0x60>
 8008d3c:	2508      	movs	r5, #8
 8008d3e:	e029      	b.n	8008d94 <_scanf_float+0x188>
 8008d40:	2b74      	cmp	r3, #116	; 0x74
 8008d42:	d06f      	beq.n	8008e24 <_scanf_float+0x218>
 8008d44:	2b79      	cmp	r3, #121	; 0x79
 8008d46:	e7f6      	b.n	8008d36 <_scanf_float+0x12a>
 8008d48:	6821      	ldr	r1, [r4, #0]
 8008d4a:	05c8      	lsls	r0, r1, #23
 8008d4c:	d51a      	bpl.n	8008d84 <_scanf_float+0x178>
 8008d4e:	9b02      	ldr	r3, [sp, #8]
 8008d50:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008d54:	6021      	str	r1, [r4, #0]
 8008d56:	f109 0901 	add.w	r9, r9, #1
 8008d5a:	b11b      	cbz	r3, 8008d64 <_scanf_float+0x158>
 8008d5c:	3b01      	subs	r3, #1
 8008d5e:	3201      	adds	r2, #1
 8008d60:	9302      	str	r3, [sp, #8]
 8008d62:	60a2      	str	r2, [r4, #8]
 8008d64:	68a3      	ldr	r3, [r4, #8]
 8008d66:	3b01      	subs	r3, #1
 8008d68:	60a3      	str	r3, [r4, #8]
 8008d6a:	6923      	ldr	r3, [r4, #16]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	6123      	str	r3, [r4, #16]
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	3b01      	subs	r3, #1
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	607b      	str	r3, [r7, #4]
 8008d78:	f340 8084 	ble.w	8008e84 <_scanf_float+0x278>
 8008d7c:	683b      	ldr	r3, [r7, #0]
 8008d7e:	3301      	adds	r3, #1
 8008d80:	603b      	str	r3, [r7, #0]
 8008d82:	e766      	b.n	8008c52 <_scanf_float+0x46>
 8008d84:	eb1a 0f05 	cmn.w	sl, r5
 8008d88:	f47f af70 	bne.w	8008c6c <_scanf_float+0x60>
 8008d8c:	6822      	ldr	r2, [r4, #0]
 8008d8e:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008d92:	6022      	str	r2, [r4, #0]
 8008d94:	f806 3b01 	strb.w	r3, [r6], #1
 8008d98:	e7e4      	b.n	8008d64 <_scanf_float+0x158>
 8008d9a:	6822      	ldr	r2, [r4, #0]
 8008d9c:	0610      	lsls	r0, r2, #24
 8008d9e:	f57f af65 	bpl.w	8008c6c <_scanf_float+0x60>
 8008da2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008da6:	e7f4      	b.n	8008d92 <_scanf_float+0x186>
 8008da8:	f1ba 0f00 	cmp.w	sl, #0
 8008dac:	d10e      	bne.n	8008dcc <_scanf_float+0x1c0>
 8008dae:	f1b9 0f00 	cmp.w	r9, #0
 8008db2:	d10e      	bne.n	8008dd2 <_scanf_float+0x1c6>
 8008db4:	6822      	ldr	r2, [r4, #0]
 8008db6:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008dba:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008dbe:	d108      	bne.n	8008dd2 <_scanf_float+0x1c6>
 8008dc0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008dc4:	6022      	str	r2, [r4, #0]
 8008dc6:	f04f 0a01 	mov.w	sl, #1
 8008dca:	e7e3      	b.n	8008d94 <_scanf_float+0x188>
 8008dcc:	f1ba 0f02 	cmp.w	sl, #2
 8008dd0:	d055      	beq.n	8008e7e <_scanf_float+0x272>
 8008dd2:	2d01      	cmp	r5, #1
 8008dd4:	d002      	beq.n	8008ddc <_scanf_float+0x1d0>
 8008dd6:	2d04      	cmp	r5, #4
 8008dd8:	f47f af48 	bne.w	8008c6c <_scanf_float+0x60>
 8008ddc:	3501      	adds	r5, #1
 8008dde:	b2ed      	uxtb	r5, r5
 8008de0:	e7d8      	b.n	8008d94 <_scanf_float+0x188>
 8008de2:	f1ba 0f01 	cmp.w	sl, #1
 8008de6:	f47f af41 	bne.w	8008c6c <_scanf_float+0x60>
 8008dea:	f04f 0a02 	mov.w	sl, #2
 8008dee:	e7d1      	b.n	8008d94 <_scanf_float+0x188>
 8008df0:	b97d      	cbnz	r5, 8008e12 <_scanf_float+0x206>
 8008df2:	f1b9 0f00 	cmp.w	r9, #0
 8008df6:	f47f af3c 	bne.w	8008c72 <_scanf_float+0x66>
 8008dfa:	6822      	ldr	r2, [r4, #0]
 8008dfc:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008e00:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008e04:	f47f af39 	bne.w	8008c7a <_scanf_float+0x6e>
 8008e08:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e0c:	6022      	str	r2, [r4, #0]
 8008e0e:	2501      	movs	r5, #1
 8008e10:	e7c0      	b.n	8008d94 <_scanf_float+0x188>
 8008e12:	2d03      	cmp	r5, #3
 8008e14:	d0e2      	beq.n	8008ddc <_scanf_float+0x1d0>
 8008e16:	2d05      	cmp	r5, #5
 8008e18:	e7de      	b.n	8008dd8 <_scanf_float+0x1cc>
 8008e1a:	2d02      	cmp	r5, #2
 8008e1c:	f47f af26 	bne.w	8008c6c <_scanf_float+0x60>
 8008e20:	2503      	movs	r5, #3
 8008e22:	e7b7      	b.n	8008d94 <_scanf_float+0x188>
 8008e24:	2d06      	cmp	r5, #6
 8008e26:	f47f af21 	bne.w	8008c6c <_scanf_float+0x60>
 8008e2a:	2507      	movs	r5, #7
 8008e2c:	e7b2      	b.n	8008d94 <_scanf_float+0x188>
 8008e2e:	6822      	ldr	r2, [r4, #0]
 8008e30:	0591      	lsls	r1, r2, #22
 8008e32:	f57f af1b 	bpl.w	8008c6c <_scanf_float+0x60>
 8008e36:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008e3a:	6022      	str	r2, [r4, #0]
 8008e3c:	f8cd 9004 	str.w	r9, [sp, #4]
 8008e40:	e7a8      	b.n	8008d94 <_scanf_float+0x188>
 8008e42:	6822      	ldr	r2, [r4, #0]
 8008e44:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008e48:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008e4c:	d006      	beq.n	8008e5c <_scanf_float+0x250>
 8008e4e:	0550      	lsls	r0, r2, #21
 8008e50:	f57f af0c 	bpl.w	8008c6c <_scanf_float+0x60>
 8008e54:	f1b9 0f00 	cmp.w	r9, #0
 8008e58:	f43f af0f 	beq.w	8008c7a <_scanf_float+0x6e>
 8008e5c:	0591      	lsls	r1, r2, #22
 8008e5e:	bf58      	it	pl
 8008e60:	9901      	ldrpl	r1, [sp, #4]
 8008e62:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008e66:	bf58      	it	pl
 8008e68:	eba9 0101 	subpl.w	r1, r9, r1
 8008e6c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8008e70:	bf58      	it	pl
 8008e72:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008e76:	6022      	str	r2, [r4, #0]
 8008e78:	f04f 0900 	mov.w	r9, #0
 8008e7c:	e78a      	b.n	8008d94 <_scanf_float+0x188>
 8008e7e:	f04f 0a03 	mov.w	sl, #3
 8008e82:	e787      	b.n	8008d94 <_scanf_float+0x188>
 8008e84:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008e88:	4639      	mov	r1, r7
 8008e8a:	4640      	mov	r0, r8
 8008e8c:	4798      	blx	r3
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	f43f aedf 	beq.w	8008c52 <_scanf_float+0x46>
 8008e94:	e6ea      	b.n	8008c6c <_scanf_float+0x60>
 8008e96:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008e9a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008e9e:	463a      	mov	r2, r7
 8008ea0:	4640      	mov	r0, r8
 8008ea2:	4798      	blx	r3
 8008ea4:	6923      	ldr	r3, [r4, #16]
 8008ea6:	3b01      	subs	r3, #1
 8008ea8:	6123      	str	r3, [r4, #16]
 8008eaa:	e6ec      	b.n	8008c86 <_scanf_float+0x7a>
 8008eac:	1e6b      	subs	r3, r5, #1
 8008eae:	2b06      	cmp	r3, #6
 8008eb0:	d825      	bhi.n	8008efe <_scanf_float+0x2f2>
 8008eb2:	2d02      	cmp	r5, #2
 8008eb4:	d836      	bhi.n	8008f24 <_scanf_float+0x318>
 8008eb6:	455e      	cmp	r6, fp
 8008eb8:	f67f aee8 	bls.w	8008c8c <_scanf_float+0x80>
 8008ebc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ec0:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008ec4:	463a      	mov	r2, r7
 8008ec6:	4640      	mov	r0, r8
 8008ec8:	4798      	blx	r3
 8008eca:	6923      	ldr	r3, [r4, #16]
 8008ecc:	3b01      	subs	r3, #1
 8008ece:	6123      	str	r3, [r4, #16]
 8008ed0:	e7f1      	b.n	8008eb6 <_scanf_float+0x2aa>
 8008ed2:	9802      	ldr	r0, [sp, #8]
 8008ed4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008ed8:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008edc:	9002      	str	r0, [sp, #8]
 8008ede:	463a      	mov	r2, r7
 8008ee0:	4640      	mov	r0, r8
 8008ee2:	4798      	blx	r3
 8008ee4:	6923      	ldr	r3, [r4, #16]
 8008ee6:	3b01      	subs	r3, #1
 8008ee8:	6123      	str	r3, [r4, #16]
 8008eea:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008eee:	fa5f fa8a 	uxtb.w	sl, sl
 8008ef2:	f1ba 0f02 	cmp.w	sl, #2
 8008ef6:	d1ec      	bne.n	8008ed2 <_scanf_float+0x2c6>
 8008ef8:	3d03      	subs	r5, #3
 8008efa:	b2ed      	uxtb	r5, r5
 8008efc:	1b76      	subs	r6, r6, r5
 8008efe:	6823      	ldr	r3, [r4, #0]
 8008f00:	05da      	lsls	r2, r3, #23
 8008f02:	d52f      	bpl.n	8008f64 <_scanf_float+0x358>
 8008f04:	055b      	lsls	r3, r3, #21
 8008f06:	d510      	bpl.n	8008f2a <_scanf_float+0x31e>
 8008f08:	455e      	cmp	r6, fp
 8008f0a:	f67f aebf 	bls.w	8008c8c <_scanf_float+0x80>
 8008f0e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f12:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008f16:	463a      	mov	r2, r7
 8008f18:	4640      	mov	r0, r8
 8008f1a:	4798      	blx	r3
 8008f1c:	6923      	ldr	r3, [r4, #16]
 8008f1e:	3b01      	subs	r3, #1
 8008f20:	6123      	str	r3, [r4, #16]
 8008f22:	e7f1      	b.n	8008f08 <_scanf_float+0x2fc>
 8008f24:	46aa      	mov	sl, r5
 8008f26:	9602      	str	r6, [sp, #8]
 8008f28:	e7df      	b.n	8008eea <_scanf_float+0x2de>
 8008f2a:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8008f2e:	6923      	ldr	r3, [r4, #16]
 8008f30:	2965      	cmp	r1, #101	; 0x65
 8008f32:	f103 33ff 	add.w	r3, r3, #4294967295
 8008f36:	f106 35ff 	add.w	r5, r6, #4294967295
 8008f3a:	6123      	str	r3, [r4, #16]
 8008f3c:	d00c      	beq.n	8008f58 <_scanf_float+0x34c>
 8008f3e:	2945      	cmp	r1, #69	; 0x45
 8008f40:	d00a      	beq.n	8008f58 <_scanf_float+0x34c>
 8008f42:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f46:	463a      	mov	r2, r7
 8008f48:	4640      	mov	r0, r8
 8008f4a:	4798      	blx	r3
 8008f4c:	6923      	ldr	r3, [r4, #16]
 8008f4e:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8008f52:	3b01      	subs	r3, #1
 8008f54:	1eb5      	subs	r5, r6, #2
 8008f56:	6123      	str	r3, [r4, #16]
 8008f58:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008f5c:	463a      	mov	r2, r7
 8008f5e:	4640      	mov	r0, r8
 8008f60:	4798      	blx	r3
 8008f62:	462e      	mov	r6, r5
 8008f64:	6825      	ldr	r5, [r4, #0]
 8008f66:	f015 0510 	ands.w	r5, r5, #16
 8008f6a:	d158      	bne.n	800901e <_scanf_float+0x412>
 8008f6c:	7035      	strb	r5, [r6, #0]
 8008f6e:	6823      	ldr	r3, [r4, #0]
 8008f70:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008f74:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008f78:	d11c      	bne.n	8008fb4 <_scanf_float+0x3a8>
 8008f7a:	9b01      	ldr	r3, [sp, #4]
 8008f7c:	454b      	cmp	r3, r9
 8008f7e:	eba3 0209 	sub.w	r2, r3, r9
 8008f82:	d124      	bne.n	8008fce <_scanf_float+0x3c2>
 8008f84:	2200      	movs	r2, #0
 8008f86:	4659      	mov	r1, fp
 8008f88:	4640      	mov	r0, r8
 8008f8a:	f002 fc65 	bl	800b858 <_strtod_r>
 8008f8e:	9b03      	ldr	r3, [sp, #12]
 8008f90:	6821      	ldr	r1, [r4, #0]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	f011 0f02 	tst.w	r1, #2
 8008f98:	ec57 6b10 	vmov	r6, r7, d0
 8008f9c:	f103 0204 	add.w	r2, r3, #4
 8008fa0:	d020      	beq.n	8008fe4 <_scanf_float+0x3d8>
 8008fa2:	9903      	ldr	r1, [sp, #12]
 8008fa4:	600a      	str	r2, [r1, #0]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	e9c3 6700 	strd	r6, r7, [r3]
 8008fac:	68e3      	ldr	r3, [r4, #12]
 8008fae:	3301      	adds	r3, #1
 8008fb0:	60e3      	str	r3, [r4, #12]
 8008fb2:	e66c      	b.n	8008c8e <_scanf_float+0x82>
 8008fb4:	9b04      	ldr	r3, [sp, #16]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d0e4      	beq.n	8008f84 <_scanf_float+0x378>
 8008fba:	9905      	ldr	r1, [sp, #20]
 8008fbc:	230a      	movs	r3, #10
 8008fbe:	462a      	mov	r2, r5
 8008fc0:	3101      	adds	r1, #1
 8008fc2:	4640      	mov	r0, r8
 8008fc4:	f002 fcd0 	bl	800b968 <_strtol_r>
 8008fc8:	9b04      	ldr	r3, [sp, #16]
 8008fca:	9e05      	ldr	r6, [sp, #20]
 8008fcc:	1ac2      	subs	r2, r0, r3
 8008fce:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008fd2:	429e      	cmp	r6, r3
 8008fd4:	bf28      	it	cs
 8008fd6:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8008fda:	4912      	ldr	r1, [pc, #72]	; (8009024 <_scanf_float+0x418>)
 8008fdc:	4630      	mov	r0, r6
 8008fde:	f000 f91b 	bl	8009218 <siprintf>
 8008fe2:	e7cf      	b.n	8008f84 <_scanf_float+0x378>
 8008fe4:	f011 0f04 	tst.w	r1, #4
 8008fe8:	9903      	ldr	r1, [sp, #12]
 8008fea:	600a      	str	r2, [r1, #0]
 8008fec:	d1db      	bne.n	8008fa6 <_scanf_float+0x39a>
 8008fee:	f8d3 8000 	ldr.w	r8, [r3]
 8008ff2:	ee10 2a10 	vmov	r2, s0
 8008ff6:	ee10 0a10 	vmov	r0, s0
 8008ffa:	463b      	mov	r3, r7
 8008ffc:	4639      	mov	r1, r7
 8008ffe:	f7f7 fdb5 	bl	8000b6c <__aeabi_dcmpun>
 8009002:	b128      	cbz	r0, 8009010 <_scanf_float+0x404>
 8009004:	4808      	ldr	r0, [pc, #32]	; (8009028 <_scanf_float+0x41c>)
 8009006:	f000 f9eb 	bl	80093e0 <nanf>
 800900a:	ed88 0a00 	vstr	s0, [r8]
 800900e:	e7cd      	b.n	8008fac <_scanf_float+0x3a0>
 8009010:	4630      	mov	r0, r6
 8009012:	4639      	mov	r1, r7
 8009014:	f7f7 fe08 	bl	8000c28 <__aeabi_d2f>
 8009018:	f8c8 0000 	str.w	r0, [r8]
 800901c:	e7c6      	b.n	8008fac <_scanf_float+0x3a0>
 800901e:	2500      	movs	r5, #0
 8009020:	e635      	b.n	8008c8e <_scanf_float+0x82>
 8009022:	bf00      	nop
 8009024:	0800cbc0 	.word	0x0800cbc0
 8009028:	0800cf55 	.word	0x0800cf55

0800902c <std>:
 800902c:	2300      	movs	r3, #0
 800902e:	b510      	push	{r4, lr}
 8009030:	4604      	mov	r4, r0
 8009032:	e9c0 3300 	strd	r3, r3, [r0]
 8009036:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800903a:	6083      	str	r3, [r0, #8]
 800903c:	8181      	strh	r1, [r0, #12]
 800903e:	6643      	str	r3, [r0, #100]	; 0x64
 8009040:	81c2      	strh	r2, [r0, #14]
 8009042:	6183      	str	r3, [r0, #24]
 8009044:	4619      	mov	r1, r3
 8009046:	2208      	movs	r2, #8
 8009048:	305c      	adds	r0, #92	; 0x5c
 800904a:	f000 f948 	bl	80092de <memset>
 800904e:	4b0d      	ldr	r3, [pc, #52]	; (8009084 <std+0x58>)
 8009050:	6263      	str	r3, [r4, #36]	; 0x24
 8009052:	4b0d      	ldr	r3, [pc, #52]	; (8009088 <std+0x5c>)
 8009054:	62a3      	str	r3, [r4, #40]	; 0x28
 8009056:	4b0d      	ldr	r3, [pc, #52]	; (800908c <std+0x60>)
 8009058:	62e3      	str	r3, [r4, #44]	; 0x2c
 800905a:	4b0d      	ldr	r3, [pc, #52]	; (8009090 <std+0x64>)
 800905c:	6323      	str	r3, [r4, #48]	; 0x30
 800905e:	4b0d      	ldr	r3, [pc, #52]	; (8009094 <std+0x68>)
 8009060:	6224      	str	r4, [r4, #32]
 8009062:	429c      	cmp	r4, r3
 8009064:	d006      	beq.n	8009074 <std+0x48>
 8009066:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800906a:	4294      	cmp	r4, r2
 800906c:	d002      	beq.n	8009074 <std+0x48>
 800906e:	33d0      	adds	r3, #208	; 0xd0
 8009070:	429c      	cmp	r4, r3
 8009072:	d105      	bne.n	8009080 <std+0x54>
 8009074:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009078:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800907c:	f000 b9ac 	b.w	80093d8 <__retarget_lock_init_recursive>
 8009080:	bd10      	pop	{r4, pc}
 8009082:	bf00      	nop
 8009084:	08009259 	.word	0x08009259
 8009088:	0800927b 	.word	0x0800927b
 800908c:	080092b3 	.word	0x080092b3
 8009090:	080092d7 	.word	0x080092d7
 8009094:	20000b44 	.word	0x20000b44

08009098 <stdio_exit_handler>:
 8009098:	4a02      	ldr	r2, [pc, #8]	; (80090a4 <stdio_exit_handler+0xc>)
 800909a:	4903      	ldr	r1, [pc, #12]	; (80090a8 <stdio_exit_handler+0x10>)
 800909c:	4803      	ldr	r0, [pc, #12]	; (80090ac <stdio_exit_handler+0x14>)
 800909e:	f000 b869 	b.w	8009174 <_fwalk_sglue>
 80090a2:	bf00      	nop
 80090a4:	20000020 	.word	0x20000020
 80090a8:	0800bd29 	.word	0x0800bd29
 80090ac:	2000002c 	.word	0x2000002c

080090b0 <cleanup_stdio>:
 80090b0:	6841      	ldr	r1, [r0, #4]
 80090b2:	4b0c      	ldr	r3, [pc, #48]	; (80090e4 <cleanup_stdio+0x34>)
 80090b4:	4299      	cmp	r1, r3
 80090b6:	b510      	push	{r4, lr}
 80090b8:	4604      	mov	r4, r0
 80090ba:	d001      	beq.n	80090c0 <cleanup_stdio+0x10>
 80090bc:	f002 fe34 	bl	800bd28 <_fflush_r>
 80090c0:	68a1      	ldr	r1, [r4, #8]
 80090c2:	4b09      	ldr	r3, [pc, #36]	; (80090e8 <cleanup_stdio+0x38>)
 80090c4:	4299      	cmp	r1, r3
 80090c6:	d002      	beq.n	80090ce <cleanup_stdio+0x1e>
 80090c8:	4620      	mov	r0, r4
 80090ca:	f002 fe2d 	bl	800bd28 <_fflush_r>
 80090ce:	68e1      	ldr	r1, [r4, #12]
 80090d0:	4b06      	ldr	r3, [pc, #24]	; (80090ec <cleanup_stdio+0x3c>)
 80090d2:	4299      	cmp	r1, r3
 80090d4:	d004      	beq.n	80090e0 <cleanup_stdio+0x30>
 80090d6:	4620      	mov	r0, r4
 80090d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80090dc:	f002 be24 	b.w	800bd28 <_fflush_r>
 80090e0:	bd10      	pop	{r4, pc}
 80090e2:	bf00      	nop
 80090e4:	20000b44 	.word	0x20000b44
 80090e8:	20000bac 	.word	0x20000bac
 80090ec:	20000c14 	.word	0x20000c14

080090f0 <global_stdio_init.part.0>:
 80090f0:	b510      	push	{r4, lr}
 80090f2:	4b0b      	ldr	r3, [pc, #44]	; (8009120 <global_stdio_init.part.0+0x30>)
 80090f4:	4c0b      	ldr	r4, [pc, #44]	; (8009124 <global_stdio_init.part.0+0x34>)
 80090f6:	4a0c      	ldr	r2, [pc, #48]	; (8009128 <global_stdio_init.part.0+0x38>)
 80090f8:	601a      	str	r2, [r3, #0]
 80090fa:	4620      	mov	r0, r4
 80090fc:	2200      	movs	r2, #0
 80090fe:	2104      	movs	r1, #4
 8009100:	f7ff ff94 	bl	800902c <std>
 8009104:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009108:	2201      	movs	r2, #1
 800910a:	2109      	movs	r1, #9
 800910c:	f7ff ff8e 	bl	800902c <std>
 8009110:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009114:	2202      	movs	r2, #2
 8009116:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800911a:	2112      	movs	r1, #18
 800911c:	f7ff bf86 	b.w	800902c <std>
 8009120:	20000c7c 	.word	0x20000c7c
 8009124:	20000b44 	.word	0x20000b44
 8009128:	08009099 	.word	0x08009099

0800912c <__sfp_lock_acquire>:
 800912c:	4801      	ldr	r0, [pc, #4]	; (8009134 <__sfp_lock_acquire+0x8>)
 800912e:	f000 b954 	b.w	80093da <__retarget_lock_acquire_recursive>
 8009132:	bf00      	nop
 8009134:	20000c85 	.word	0x20000c85

08009138 <__sfp_lock_release>:
 8009138:	4801      	ldr	r0, [pc, #4]	; (8009140 <__sfp_lock_release+0x8>)
 800913a:	f000 b94f 	b.w	80093dc <__retarget_lock_release_recursive>
 800913e:	bf00      	nop
 8009140:	20000c85 	.word	0x20000c85

08009144 <__sinit>:
 8009144:	b510      	push	{r4, lr}
 8009146:	4604      	mov	r4, r0
 8009148:	f7ff fff0 	bl	800912c <__sfp_lock_acquire>
 800914c:	6a23      	ldr	r3, [r4, #32]
 800914e:	b11b      	cbz	r3, 8009158 <__sinit+0x14>
 8009150:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009154:	f7ff bff0 	b.w	8009138 <__sfp_lock_release>
 8009158:	4b04      	ldr	r3, [pc, #16]	; (800916c <__sinit+0x28>)
 800915a:	6223      	str	r3, [r4, #32]
 800915c:	4b04      	ldr	r3, [pc, #16]	; (8009170 <__sinit+0x2c>)
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	2b00      	cmp	r3, #0
 8009162:	d1f5      	bne.n	8009150 <__sinit+0xc>
 8009164:	f7ff ffc4 	bl	80090f0 <global_stdio_init.part.0>
 8009168:	e7f2      	b.n	8009150 <__sinit+0xc>
 800916a:	bf00      	nop
 800916c:	080090b1 	.word	0x080090b1
 8009170:	20000c7c 	.word	0x20000c7c

08009174 <_fwalk_sglue>:
 8009174:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009178:	4607      	mov	r7, r0
 800917a:	4688      	mov	r8, r1
 800917c:	4614      	mov	r4, r2
 800917e:	2600      	movs	r6, #0
 8009180:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009184:	f1b9 0901 	subs.w	r9, r9, #1
 8009188:	d505      	bpl.n	8009196 <_fwalk_sglue+0x22>
 800918a:	6824      	ldr	r4, [r4, #0]
 800918c:	2c00      	cmp	r4, #0
 800918e:	d1f7      	bne.n	8009180 <_fwalk_sglue+0xc>
 8009190:	4630      	mov	r0, r6
 8009192:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009196:	89ab      	ldrh	r3, [r5, #12]
 8009198:	2b01      	cmp	r3, #1
 800919a:	d907      	bls.n	80091ac <_fwalk_sglue+0x38>
 800919c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80091a0:	3301      	adds	r3, #1
 80091a2:	d003      	beq.n	80091ac <_fwalk_sglue+0x38>
 80091a4:	4629      	mov	r1, r5
 80091a6:	4638      	mov	r0, r7
 80091a8:	47c0      	blx	r8
 80091aa:	4306      	orrs	r6, r0
 80091ac:	3568      	adds	r5, #104	; 0x68
 80091ae:	e7e9      	b.n	8009184 <_fwalk_sglue+0x10>

080091b0 <sniprintf>:
 80091b0:	b40c      	push	{r2, r3}
 80091b2:	b530      	push	{r4, r5, lr}
 80091b4:	4b17      	ldr	r3, [pc, #92]	; (8009214 <sniprintf+0x64>)
 80091b6:	1e0c      	subs	r4, r1, #0
 80091b8:	681d      	ldr	r5, [r3, #0]
 80091ba:	b09d      	sub	sp, #116	; 0x74
 80091bc:	da08      	bge.n	80091d0 <sniprintf+0x20>
 80091be:	238b      	movs	r3, #139	; 0x8b
 80091c0:	602b      	str	r3, [r5, #0]
 80091c2:	f04f 30ff 	mov.w	r0, #4294967295
 80091c6:	b01d      	add	sp, #116	; 0x74
 80091c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80091cc:	b002      	add	sp, #8
 80091ce:	4770      	bx	lr
 80091d0:	f44f 7302 	mov.w	r3, #520	; 0x208
 80091d4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80091d8:	bf14      	ite	ne
 80091da:	f104 33ff 	addne.w	r3, r4, #4294967295
 80091de:	4623      	moveq	r3, r4
 80091e0:	9304      	str	r3, [sp, #16]
 80091e2:	9307      	str	r3, [sp, #28]
 80091e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80091e8:	9002      	str	r0, [sp, #8]
 80091ea:	9006      	str	r0, [sp, #24]
 80091ec:	f8ad 3016 	strh.w	r3, [sp, #22]
 80091f0:	9a20      	ldr	r2, [sp, #128]	; 0x80
 80091f2:	ab21      	add	r3, sp, #132	; 0x84
 80091f4:	a902      	add	r1, sp, #8
 80091f6:	4628      	mov	r0, r5
 80091f8:	9301      	str	r3, [sp, #4]
 80091fa:	f002 fc11 	bl	800ba20 <_svfiprintf_r>
 80091fe:	1c43      	adds	r3, r0, #1
 8009200:	bfbc      	itt	lt
 8009202:	238b      	movlt	r3, #139	; 0x8b
 8009204:	602b      	strlt	r3, [r5, #0]
 8009206:	2c00      	cmp	r4, #0
 8009208:	d0dd      	beq.n	80091c6 <sniprintf+0x16>
 800920a:	9b02      	ldr	r3, [sp, #8]
 800920c:	2200      	movs	r2, #0
 800920e:	701a      	strb	r2, [r3, #0]
 8009210:	e7d9      	b.n	80091c6 <sniprintf+0x16>
 8009212:	bf00      	nop
 8009214:	20000078 	.word	0x20000078

08009218 <siprintf>:
 8009218:	b40e      	push	{r1, r2, r3}
 800921a:	b500      	push	{lr}
 800921c:	b09c      	sub	sp, #112	; 0x70
 800921e:	ab1d      	add	r3, sp, #116	; 0x74
 8009220:	9002      	str	r0, [sp, #8]
 8009222:	9006      	str	r0, [sp, #24]
 8009224:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009228:	4809      	ldr	r0, [pc, #36]	; (8009250 <siprintf+0x38>)
 800922a:	9107      	str	r1, [sp, #28]
 800922c:	9104      	str	r1, [sp, #16]
 800922e:	4909      	ldr	r1, [pc, #36]	; (8009254 <siprintf+0x3c>)
 8009230:	f853 2b04 	ldr.w	r2, [r3], #4
 8009234:	9105      	str	r1, [sp, #20]
 8009236:	6800      	ldr	r0, [r0, #0]
 8009238:	9301      	str	r3, [sp, #4]
 800923a:	a902      	add	r1, sp, #8
 800923c:	f002 fbf0 	bl	800ba20 <_svfiprintf_r>
 8009240:	9b02      	ldr	r3, [sp, #8]
 8009242:	2200      	movs	r2, #0
 8009244:	701a      	strb	r2, [r3, #0]
 8009246:	b01c      	add	sp, #112	; 0x70
 8009248:	f85d eb04 	ldr.w	lr, [sp], #4
 800924c:	b003      	add	sp, #12
 800924e:	4770      	bx	lr
 8009250:	20000078 	.word	0x20000078
 8009254:	ffff0208 	.word	0xffff0208

08009258 <__sread>:
 8009258:	b510      	push	{r4, lr}
 800925a:	460c      	mov	r4, r1
 800925c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009260:	f000 f86c 	bl	800933c <_read_r>
 8009264:	2800      	cmp	r0, #0
 8009266:	bfab      	itete	ge
 8009268:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800926a:	89a3      	ldrhlt	r3, [r4, #12]
 800926c:	181b      	addge	r3, r3, r0
 800926e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009272:	bfac      	ite	ge
 8009274:	6563      	strge	r3, [r4, #84]	; 0x54
 8009276:	81a3      	strhlt	r3, [r4, #12]
 8009278:	bd10      	pop	{r4, pc}

0800927a <__swrite>:
 800927a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800927e:	461f      	mov	r7, r3
 8009280:	898b      	ldrh	r3, [r1, #12]
 8009282:	05db      	lsls	r3, r3, #23
 8009284:	4605      	mov	r5, r0
 8009286:	460c      	mov	r4, r1
 8009288:	4616      	mov	r6, r2
 800928a:	d505      	bpl.n	8009298 <__swrite+0x1e>
 800928c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009290:	2302      	movs	r3, #2
 8009292:	2200      	movs	r2, #0
 8009294:	f000 f840 	bl	8009318 <_lseek_r>
 8009298:	89a3      	ldrh	r3, [r4, #12]
 800929a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800929e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80092a2:	81a3      	strh	r3, [r4, #12]
 80092a4:	4632      	mov	r2, r6
 80092a6:	463b      	mov	r3, r7
 80092a8:	4628      	mov	r0, r5
 80092aa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80092ae:	f000 b857 	b.w	8009360 <_write_r>

080092b2 <__sseek>:
 80092b2:	b510      	push	{r4, lr}
 80092b4:	460c      	mov	r4, r1
 80092b6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092ba:	f000 f82d 	bl	8009318 <_lseek_r>
 80092be:	1c43      	adds	r3, r0, #1
 80092c0:	89a3      	ldrh	r3, [r4, #12]
 80092c2:	bf15      	itete	ne
 80092c4:	6560      	strne	r0, [r4, #84]	; 0x54
 80092c6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80092ca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80092ce:	81a3      	strheq	r3, [r4, #12]
 80092d0:	bf18      	it	ne
 80092d2:	81a3      	strhne	r3, [r4, #12]
 80092d4:	bd10      	pop	{r4, pc}

080092d6 <__sclose>:
 80092d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092da:	f000 b80d 	b.w	80092f8 <_close_r>

080092de <memset>:
 80092de:	4402      	add	r2, r0
 80092e0:	4603      	mov	r3, r0
 80092e2:	4293      	cmp	r3, r2
 80092e4:	d100      	bne.n	80092e8 <memset+0xa>
 80092e6:	4770      	bx	lr
 80092e8:	f803 1b01 	strb.w	r1, [r3], #1
 80092ec:	e7f9      	b.n	80092e2 <memset+0x4>
	...

080092f0 <_localeconv_r>:
 80092f0:	4800      	ldr	r0, [pc, #0]	; (80092f4 <_localeconv_r+0x4>)
 80092f2:	4770      	bx	lr
 80092f4:	2000016c 	.word	0x2000016c

080092f8 <_close_r>:
 80092f8:	b538      	push	{r3, r4, r5, lr}
 80092fa:	4d06      	ldr	r5, [pc, #24]	; (8009314 <_close_r+0x1c>)
 80092fc:	2300      	movs	r3, #0
 80092fe:	4604      	mov	r4, r0
 8009300:	4608      	mov	r0, r1
 8009302:	602b      	str	r3, [r5, #0]
 8009304:	f7f8 fbed 	bl	8001ae2 <_close>
 8009308:	1c43      	adds	r3, r0, #1
 800930a:	d102      	bne.n	8009312 <_close_r+0x1a>
 800930c:	682b      	ldr	r3, [r5, #0]
 800930e:	b103      	cbz	r3, 8009312 <_close_r+0x1a>
 8009310:	6023      	str	r3, [r4, #0]
 8009312:	bd38      	pop	{r3, r4, r5, pc}
 8009314:	20000c80 	.word	0x20000c80

08009318 <_lseek_r>:
 8009318:	b538      	push	{r3, r4, r5, lr}
 800931a:	4d07      	ldr	r5, [pc, #28]	; (8009338 <_lseek_r+0x20>)
 800931c:	4604      	mov	r4, r0
 800931e:	4608      	mov	r0, r1
 8009320:	4611      	mov	r1, r2
 8009322:	2200      	movs	r2, #0
 8009324:	602a      	str	r2, [r5, #0]
 8009326:	461a      	mov	r2, r3
 8009328:	f7f8 fc02 	bl	8001b30 <_lseek>
 800932c:	1c43      	adds	r3, r0, #1
 800932e:	d102      	bne.n	8009336 <_lseek_r+0x1e>
 8009330:	682b      	ldr	r3, [r5, #0]
 8009332:	b103      	cbz	r3, 8009336 <_lseek_r+0x1e>
 8009334:	6023      	str	r3, [r4, #0]
 8009336:	bd38      	pop	{r3, r4, r5, pc}
 8009338:	20000c80 	.word	0x20000c80

0800933c <_read_r>:
 800933c:	b538      	push	{r3, r4, r5, lr}
 800933e:	4d07      	ldr	r5, [pc, #28]	; (800935c <_read_r+0x20>)
 8009340:	4604      	mov	r4, r0
 8009342:	4608      	mov	r0, r1
 8009344:	4611      	mov	r1, r2
 8009346:	2200      	movs	r2, #0
 8009348:	602a      	str	r2, [r5, #0]
 800934a:	461a      	mov	r2, r3
 800934c:	f7f8 fb90 	bl	8001a70 <_read>
 8009350:	1c43      	adds	r3, r0, #1
 8009352:	d102      	bne.n	800935a <_read_r+0x1e>
 8009354:	682b      	ldr	r3, [r5, #0]
 8009356:	b103      	cbz	r3, 800935a <_read_r+0x1e>
 8009358:	6023      	str	r3, [r4, #0]
 800935a:	bd38      	pop	{r3, r4, r5, pc}
 800935c:	20000c80 	.word	0x20000c80

08009360 <_write_r>:
 8009360:	b538      	push	{r3, r4, r5, lr}
 8009362:	4d07      	ldr	r5, [pc, #28]	; (8009380 <_write_r+0x20>)
 8009364:	4604      	mov	r4, r0
 8009366:	4608      	mov	r0, r1
 8009368:	4611      	mov	r1, r2
 800936a:	2200      	movs	r2, #0
 800936c:	602a      	str	r2, [r5, #0]
 800936e:	461a      	mov	r2, r3
 8009370:	f7f8 fb9b 	bl	8001aaa <_write>
 8009374:	1c43      	adds	r3, r0, #1
 8009376:	d102      	bne.n	800937e <_write_r+0x1e>
 8009378:	682b      	ldr	r3, [r5, #0]
 800937a:	b103      	cbz	r3, 800937e <_write_r+0x1e>
 800937c:	6023      	str	r3, [r4, #0]
 800937e:	bd38      	pop	{r3, r4, r5, pc}
 8009380:	20000c80 	.word	0x20000c80

08009384 <__errno>:
 8009384:	4b01      	ldr	r3, [pc, #4]	; (800938c <__errno+0x8>)
 8009386:	6818      	ldr	r0, [r3, #0]
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	20000078 	.word	0x20000078

08009390 <__libc_init_array>:
 8009390:	b570      	push	{r4, r5, r6, lr}
 8009392:	4d0d      	ldr	r5, [pc, #52]	; (80093c8 <__libc_init_array+0x38>)
 8009394:	4c0d      	ldr	r4, [pc, #52]	; (80093cc <__libc_init_array+0x3c>)
 8009396:	1b64      	subs	r4, r4, r5
 8009398:	10a4      	asrs	r4, r4, #2
 800939a:	2600      	movs	r6, #0
 800939c:	42a6      	cmp	r6, r4
 800939e:	d109      	bne.n	80093b4 <__libc_init_array+0x24>
 80093a0:	4d0b      	ldr	r5, [pc, #44]	; (80093d0 <__libc_init_array+0x40>)
 80093a2:	4c0c      	ldr	r4, [pc, #48]	; (80093d4 <__libc_init_array+0x44>)
 80093a4:	f003 fbd8 	bl	800cb58 <_init>
 80093a8:	1b64      	subs	r4, r4, r5
 80093aa:	10a4      	asrs	r4, r4, #2
 80093ac:	2600      	movs	r6, #0
 80093ae:	42a6      	cmp	r6, r4
 80093b0:	d105      	bne.n	80093be <__libc_init_array+0x2e>
 80093b2:	bd70      	pop	{r4, r5, r6, pc}
 80093b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80093b8:	4798      	blx	r3
 80093ba:	3601      	adds	r6, #1
 80093bc:	e7ee      	b.n	800939c <__libc_init_array+0xc>
 80093be:	f855 3b04 	ldr.w	r3, [r5], #4
 80093c2:	4798      	blx	r3
 80093c4:	3601      	adds	r6, #1
 80093c6:	e7f2      	b.n	80093ae <__libc_init_array+0x1e>
 80093c8:	0800cfc0 	.word	0x0800cfc0
 80093cc:	0800cfc0 	.word	0x0800cfc0
 80093d0:	0800cfc0 	.word	0x0800cfc0
 80093d4:	0800cfc4 	.word	0x0800cfc4

080093d8 <__retarget_lock_init_recursive>:
 80093d8:	4770      	bx	lr

080093da <__retarget_lock_acquire_recursive>:
 80093da:	4770      	bx	lr

080093dc <__retarget_lock_release_recursive>:
 80093dc:	4770      	bx	lr
	...

080093e0 <nanf>:
 80093e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80093e8 <nanf+0x8>
 80093e4:	4770      	bx	lr
 80093e6:	bf00      	nop
 80093e8:	7fc00000 	.word	0x7fc00000

080093ec <quorem>:
 80093ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093f0:	6903      	ldr	r3, [r0, #16]
 80093f2:	690c      	ldr	r4, [r1, #16]
 80093f4:	42a3      	cmp	r3, r4
 80093f6:	4607      	mov	r7, r0
 80093f8:	db7e      	blt.n	80094f8 <quorem+0x10c>
 80093fa:	3c01      	subs	r4, #1
 80093fc:	f101 0814 	add.w	r8, r1, #20
 8009400:	f100 0514 	add.w	r5, r0, #20
 8009404:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009408:	9301      	str	r3, [sp, #4]
 800940a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800940e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009412:	3301      	adds	r3, #1
 8009414:	429a      	cmp	r2, r3
 8009416:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800941a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800941e:	fbb2 f6f3 	udiv	r6, r2, r3
 8009422:	d331      	bcc.n	8009488 <quorem+0x9c>
 8009424:	f04f 0e00 	mov.w	lr, #0
 8009428:	4640      	mov	r0, r8
 800942a:	46ac      	mov	ip, r5
 800942c:	46f2      	mov	sl, lr
 800942e:	f850 2b04 	ldr.w	r2, [r0], #4
 8009432:	b293      	uxth	r3, r2
 8009434:	fb06 e303 	mla	r3, r6, r3, lr
 8009438:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800943c:	0c1a      	lsrs	r2, r3, #16
 800943e:	b29b      	uxth	r3, r3
 8009440:	ebaa 0303 	sub.w	r3, sl, r3
 8009444:	f8dc a000 	ldr.w	sl, [ip]
 8009448:	fa13 f38a 	uxtah	r3, r3, sl
 800944c:	fb06 220e 	mla	r2, r6, lr, r2
 8009450:	9300      	str	r3, [sp, #0]
 8009452:	9b00      	ldr	r3, [sp, #0]
 8009454:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009458:	b292      	uxth	r2, r2
 800945a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800945e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009462:	f8bd 3000 	ldrh.w	r3, [sp]
 8009466:	4581      	cmp	r9, r0
 8009468:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800946c:	f84c 3b04 	str.w	r3, [ip], #4
 8009470:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009474:	d2db      	bcs.n	800942e <quorem+0x42>
 8009476:	f855 300b 	ldr.w	r3, [r5, fp]
 800947a:	b92b      	cbnz	r3, 8009488 <quorem+0x9c>
 800947c:	9b01      	ldr	r3, [sp, #4]
 800947e:	3b04      	subs	r3, #4
 8009480:	429d      	cmp	r5, r3
 8009482:	461a      	mov	r2, r3
 8009484:	d32c      	bcc.n	80094e0 <quorem+0xf4>
 8009486:	613c      	str	r4, [r7, #16]
 8009488:	4638      	mov	r0, r7
 800948a:	f001 f9f1 	bl	800a870 <__mcmp>
 800948e:	2800      	cmp	r0, #0
 8009490:	db22      	blt.n	80094d8 <quorem+0xec>
 8009492:	3601      	adds	r6, #1
 8009494:	4629      	mov	r1, r5
 8009496:	2000      	movs	r0, #0
 8009498:	f858 2b04 	ldr.w	r2, [r8], #4
 800949c:	f8d1 c000 	ldr.w	ip, [r1]
 80094a0:	b293      	uxth	r3, r2
 80094a2:	1ac3      	subs	r3, r0, r3
 80094a4:	0c12      	lsrs	r2, r2, #16
 80094a6:	fa13 f38c 	uxtah	r3, r3, ip
 80094aa:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80094ae:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80094b2:	b29b      	uxth	r3, r3
 80094b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094b8:	45c1      	cmp	r9, r8
 80094ba:	f841 3b04 	str.w	r3, [r1], #4
 80094be:	ea4f 4022 	mov.w	r0, r2, asr #16
 80094c2:	d2e9      	bcs.n	8009498 <quorem+0xac>
 80094c4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80094c8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80094cc:	b922      	cbnz	r2, 80094d8 <quorem+0xec>
 80094ce:	3b04      	subs	r3, #4
 80094d0:	429d      	cmp	r5, r3
 80094d2:	461a      	mov	r2, r3
 80094d4:	d30a      	bcc.n	80094ec <quorem+0x100>
 80094d6:	613c      	str	r4, [r7, #16]
 80094d8:	4630      	mov	r0, r6
 80094da:	b003      	add	sp, #12
 80094dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094e0:	6812      	ldr	r2, [r2, #0]
 80094e2:	3b04      	subs	r3, #4
 80094e4:	2a00      	cmp	r2, #0
 80094e6:	d1ce      	bne.n	8009486 <quorem+0x9a>
 80094e8:	3c01      	subs	r4, #1
 80094ea:	e7c9      	b.n	8009480 <quorem+0x94>
 80094ec:	6812      	ldr	r2, [r2, #0]
 80094ee:	3b04      	subs	r3, #4
 80094f0:	2a00      	cmp	r2, #0
 80094f2:	d1f0      	bne.n	80094d6 <quorem+0xea>
 80094f4:	3c01      	subs	r4, #1
 80094f6:	e7eb      	b.n	80094d0 <quorem+0xe4>
 80094f8:	2000      	movs	r0, #0
 80094fa:	e7ee      	b.n	80094da <quorem+0xee>
 80094fc:	0000      	movs	r0, r0
	...

08009500 <_dtoa_r>:
 8009500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009504:	ed2d 8b04 	vpush	{d8-d9}
 8009508:	69c5      	ldr	r5, [r0, #28]
 800950a:	b093      	sub	sp, #76	; 0x4c
 800950c:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009510:	ec57 6b10 	vmov	r6, r7, d0
 8009514:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009518:	9107      	str	r1, [sp, #28]
 800951a:	4604      	mov	r4, r0
 800951c:	920a      	str	r2, [sp, #40]	; 0x28
 800951e:	930d      	str	r3, [sp, #52]	; 0x34
 8009520:	b975      	cbnz	r5, 8009540 <_dtoa_r+0x40>
 8009522:	2010      	movs	r0, #16
 8009524:	f000 fe2a 	bl	800a17c <malloc>
 8009528:	4602      	mov	r2, r0
 800952a:	61e0      	str	r0, [r4, #28]
 800952c:	b920      	cbnz	r0, 8009538 <_dtoa_r+0x38>
 800952e:	4bae      	ldr	r3, [pc, #696]	; (80097e8 <_dtoa_r+0x2e8>)
 8009530:	21ef      	movs	r1, #239	; 0xef
 8009532:	48ae      	ldr	r0, [pc, #696]	; (80097ec <_dtoa_r+0x2ec>)
 8009534:	f002 fc74 	bl	800be20 <__assert_func>
 8009538:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800953c:	6005      	str	r5, [r0, #0]
 800953e:	60c5      	str	r5, [r0, #12]
 8009540:	69e3      	ldr	r3, [r4, #28]
 8009542:	6819      	ldr	r1, [r3, #0]
 8009544:	b151      	cbz	r1, 800955c <_dtoa_r+0x5c>
 8009546:	685a      	ldr	r2, [r3, #4]
 8009548:	604a      	str	r2, [r1, #4]
 800954a:	2301      	movs	r3, #1
 800954c:	4093      	lsls	r3, r2
 800954e:	608b      	str	r3, [r1, #8]
 8009550:	4620      	mov	r0, r4
 8009552:	f000 ff07 	bl	800a364 <_Bfree>
 8009556:	69e3      	ldr	r3, [r4, #28]
 8009558:	2200      	movs	r2, #0
 800955a:	601a      	str	r2, [r3, #0]
 800955c:	1e3b      	subs	r3, r7, #0
 800955e:	bfbb      	ittet	lt
 8009560:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8009564:	9303      	strlt	r3, [sp, #12]
 8009566:	2300      	movge	r3, #0
 8009568:	2201      	movlt	r2, #1
 800956a:	bfac      	ite	ge
 800956c:	f8c8 3000 	strge.w	r3, [r8]
 8009570:	f8c8 2000 	strlt.w	r2, [r8]
 8009574:	4b9e      	ldr	r3, [pc, #632]	; (80097f0 <_dtoa_r+0x2f0>)
 8009576:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800957a:	ea33 0308 	bics.w	r3, r3, r8
 800957e:	d11b      	bne.n	80095b8 <_dtoa_r+0xb8>
 8009580:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009582:	f242 730f 	movw	r3, #9999	; 0x270f
 8009586:	6013      	str	r3, [r2, #0]
 8009588:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800958c:	4333      	orrs	r3, r6
 800958e:	f000 8593 	beq.w	800a0b8 <_dtoa_r+0xbb8>
 8009592:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009594:	b963      	cbnz	r3, 80095b0 <_dtoa_r+0xb0>
 8009596:	4b97      	ldr	r3, [pc, #604]	; (80097f4 <_dtoa_r+0x2f4>)
 8009598:	e027      	b.n	80095ea <_dtoa_r+0xea>
 800959a:	4b97      	ldr	r3, [pc, #604]	; (80097f8 <_dtoa_r+0x2f8>)
 800959c:	9300      	str	r3, [sp, #0]
 800959e:	3308      	adds	r3, #8
 80095a0:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80095a2:	6013      	str	r3, [r2, #0]
 80095a4:	9800      	ldr	r0, [sp, #0]
 80095a6:	b013      	add	sp, #76	; 0x4c
 80095a8:	ecbd 8b04 	vpop	{d8-d9}
 80095ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80095b0:	4b90      	ldr	r3, [pc, #576]	; (80097f4 <_dtoa_r+0x2f4>)
 80095b2:	9300      	str	r3, [sp, #0]
 80095b4:	3303      	adds	r3, #3
 80095b6:	e7f3      	b.n	80095a0 <_dtoa_r+0xa0>
 80095b8:	ed9d 7b02 	vldr	d7, [sp, #8]
 80095bc:	2200      	movs	r2, #0
 80095be:	ec51 0b17 	vmov	r0, r1, d7
 80095c2:	eeb0 8a47 	vmov.f32	s16, s14
 80095c6:	eef0 8a67 	vmov.f32	s17, s15
 80095ca:	2300      	movs	r3, #0
 80095cc:	f7f7 fa9c 	bl	8000b08 <__aeabi_dcmpeq>
 80095d0:	4681      	mov	r9, r0
 80095d2:	b160      	cbz	r0, 80095ee <_dtoa_r+0xee>
 80095d4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80095d6:	2301      	movs	r3, #1
 80095d8:	6013      	str	r3, [r2, #0]
 80095da:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80095dc:	2b00      	cmp	r3, #0
 80095de:	f000 8568 	beq.w	800a0b2 <_dtoa_r+0xbb2>
 80095e2:	4b86      	ldr	r3, [pc, #536]	; (80097fc <_dtoa_r+0x2fc>)
 80095e4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80095e6:	6013      	str	r3, [r2, #0]
 80095e8:	3b01      	subs	r3, #1
 80095ea:	9300      	str	r3, [sp, #0]
 80095ec:	e7da      	b.n	80095a4 <_dtoa_r+0xa4>
 80095ee:	aa10      	add	r2, sp, #64	; 0x40
 80095f0:	a911      	add	r1, sp, #68	; 0x44
 80095f2:	4620      	mov	r0, r4
 80095f4:	eeb0 0a48 	vmov.f32	s0, s16
 80095f8:	eef0 0a68 	vmov.f32	s1, s17
 80095fc:	f001 fa4e 	bl	800aa9c <__d2b>
 8009600:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8009604:	4682      	mov	sl, r0
 8009606:	2d00      	cmp	r5, #0
 8009608:	d07f      	beq.n	800970a <_dtoa_r+0x20a>
 800960a:	ee18 3a90 	vmov	r3, s17
 800960e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009612:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 8009616:	ec51 0b18 	vmov	r0, r1, d8
 800961a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800961e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009622:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8009626:	4619      	mov	r1, r3
 8009628:	2200      	movs	r2, #0
 800962a:	4b75      	ldr	r3, [pc, #468]	; (8009800 <_dtoa_r+0x300>)
 800962c:	f7f6 fe4c 	bl	80002c8 <__aeabi_dsub>
 8009630:	a367      	add	r3, pc, #412	; (adr r3, 80097d0 <_dtoa_r+0x2d0>)
 8009632:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009636:	f7f6 ffff 	bl	8000638 <__aeabi_dmul>
 800963a:	a367      	add	r3, pc, #412	; (adr r3, 80097d8 <_dtoa_r+0x2d8>)
 800963c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009640:	f7f6 fe44 	bl	80002cc <__adddf3>
 8009644:	4606      	mov	r6, r0
 8009646:	4628      	mov	r0, r5
 8009648:	460f      	mov	r7, r1
 800964a:	f7f6 ff8b 	bl	8000564 <__aeabi_i2d>
 800964e:	a364      	add	r3, pc, #400	; (adr r3, 80097e0 <_dtoa_r+0x2e0>)
 8009650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009654:	f7f6 fff0 	bl	8000638 <__aeabi_dmul>
 8009658:	4602      	mov	r2, r0
 800965a:	460b      	mov	r3, r1
 800965c:	4630      	mov	r0, r6
 800965e:	4639      	mov	r1, r7
 8009660:	f7f6 fe34 	bl	80002cc <__adddf3>
 8009664:	4606      	mov	r6, r0
 8009666:	460f      	mov	r7, r1
 8009668:	f7f7 fa96 	bl	8000b98 <__aeabi_d2iz>
 800966c:	2200      	movs	r2, #0
 800966e:	4683      	mov	fp, r0
 8009670:	2300      	movs	r3, #0
 8009672:	4630      	mov	r0, r6
 8009674:	4639      	mov	r1, r7
 8009676:	f7f7 fa51 	bl	8000b1c <__aeabi_dcmplt>
 800967a:	b148      	cbz	r0, 8009690 <_dtoa_r+0x190>
 800967c:	4658      	mov	r0, fp
 800967e:	f7f6 ff71 	bl	8000564 <__aeabi_i2d>
 8009682:	4632      	mov	r2, r6
 8009684:	463b      	mov	r3, r7
 8009686:	f7f7 fa3f 	bl	8000b08 <__aeabi_dcmpeq>
 800968a:	b908      	cbnz	r0, 8009690 <_dtoa_r+0x190>
 800968c:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009690:	f1bb 0f16 	cmp.w	fp, #22
 8009694:	d857      	bhi.n	8009746 <_dtoa_r+0x246>
 8009696:	4b5b      	ldr	r3, [pc, #364]	; (8009804 <_dtoa_r+0x304>)
 8009698:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800969c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096a0:	ec51 0b18 	vmov	r0, r1, d8
 80096a4:	f7f7 fa3a 	bl	8000b1c <__aeabi_dcmplt>
 80096a8:	2800      	cmp	r0, #0
 80096aa:	d04e      	beq.n	800974a <_dtoa_r+0x24a>
 80096ac:	f10b 3bff 	add.w	fp, fp, #4294967295
 80096b0:	2300      	movs	r3, #0
 80096b2:	930c      	str	r3, [sp, #48]	; 0x30
 80096b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80096b6:	1b5b      	subs	r3, r3, r5
 80096b8:	1e5a      	subs	r2, r3, #1
 80096ba:	bf45      	ittet	mi
 80096bc:	f1c3 0301 	rsbmi	r3, r3, #1
 80096c0:	9305      	strmi	r3, [sp, #20]
 80096c2:	2300      	movpl	r3, #0
 80096c4:	2300      	movmi	r3, #0
 80096c6:	9206      	str	r2, [sp, #24]
 80096c8:	bf54      	ite	pl
 80096ca:	9305      	strpl	r3, [sp, #20]
 80096cc:	9306      	strmi	r3, [sp, #24]
 80096ce:	f1bb 0f00 	cmp.w	fp, #0
 80096d2:	db3c      	blt.n	800974e <_dtoa_r+0x24e>
 80096d4:	9b06      	ldr	r3, [sp, #24]
 80096d6:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 80096da:	445b      	add	r3, fp
 80096dc:	9306      	str	r3, [sp, #24]
 80096de:	2300      	movs	r3, #0
 80096e0:	9308      	str	r3, [sp, #32]
 80096e2:	9b07      	ldr	r3, [sp, #28]
 80096e4:	2b09      	cmp	r3, #9
 80096e6:	d868      	bhi.n	80097ba <_dtoa_r+0x2ba>
 80096e8:	2b05      	cmp	r3, #5
 80096ea:	bfc4      	itt	gt
 80096ec:	3b04      	subgt	r3, #4
 80096ee:	9307      	strgt	r3, [sp, #28]
 80096f0:	9b07      	ldr	r3, [sp, #28]
 80096f2:	f1a3 0302 	sub.w	r3, r3, #2
 80096f6:	bfcc      	ite	gt
 80096f8:	2500      	movgt	r5, #0
 80096fa:	2501      	movle	r5, #1
 80096fc:	2b03      	cmp	r3, #3
 80096fe:	f200 8085 	bhi.w	800980c <_dtoa_r+0x30c>
 8009702:	e8df f003 	tbb	[pc, r3]
 8009706:	3b2e      	.short	0x3b2e
 8009708:	5839      	.short	0x5839
 800970a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800970e:	441d      	add	r5, r3
 8009710:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009714:	2b20      	cmp	r3, #32
 8009716:	bfc1      	itttt	gt
 8009718:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800971c:	fa08 f803 	lslgt.w	r8, r8, r3
 8009720:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 8009724:	fa26 f303 	lsrgt.w	r3, r6, r3
 8009728:	bfd6      	itet	le
 800972a:	f1c3 0320 	rsble	r3, r3, #32
 800972e:	ea48 0003 	orrgt.w	r0, r8, r3
 8009732:	fa06 f003 	lslle.w	r0, r6, r3
 8009736:	f7f6 ff05 	bl	8000544 <__aeabi_ui2d>
 800973a:	2201      	movs	r2, #1
 800973c:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 8009740:	3d01      	subs	r5, #1
 8009742:	920e      	str	r2, [sp, #56]	; 0x38
 8009744:	e76f      	b.n	8009626 <_dtoa_r+0x126>
 8009746:	2301      	movs	r3, #1
 8009748:	e7b3      	b.n	80096b2 <_dtoa_r+0x1b2>
 800974a:	900c      	str	r0, [sp, #48]	; 0x30
 800974c:	e7b2      	b.n	80096b4 <_dtoa_r+0x1b4>
 800974e:	9b05      	ldr	r3, [sp, #20]
 8009750:	eba3 030b 	sub.w	r3, r3, fp
 8009754:	9305      	str	r3, [sp, #20]
 8009756:	f1cb 0300 	rsb	r3, fp, #0
 800975a:	9308      	str	r3, [sp, #32]
 800975c:	2300      	movs	r3, #0
 800975e:	930b      	str	r3, [sp, #44]	; 0x2c
 8009760:	e7bf      	b.n	80096e2 <_dtoa_r+0x1e2>
 8009762:	2300      	movs	r3, #0
 8009764:	9309      	str	r3, [sp, #36]	; 0x24
 8009766:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009768:	2b00      	cmp	r3, #0
 800976a:	dc52      	bgt.n	8009812 <_dtoa_r+0x312>
 800976c:	2301      	movs	r3, #1
 800976e:	9301      	str	r3, [sp, #4]
 8009770:	9304      	str	r3, [sp, #16]
 8009772:	461a      	mov	r2, r3
 8009774:	920a      	str	r2, [sp, #40]	; 0x28
 8009776:	e00b      	b.n	8009790 <_dtoa_r+0x290>
 8009778:	2301      	movs	r3, #1
 800977a:	e7f3      	b.n	8009764 <_dtoa_r+0x264>
 800977c:	2300      	movs	r3, #0
 800977e:	9309      	str	r3, [sp, #36]	; 0x24
 8009780:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009782:	445b      	add	r3, fp
 8009784:	9301      	str	r3, [sp, #4]
 8009786:	3301      	adds	r3, #1
 8009788:	2b01      	cmp	r3, #1
 800978a:	9304      	str	r3, [sp, #16]
 800978c:	bfb8      	it	lt
 800978e:	2301      	movlt	r3, #1
 8009790:	69e0      	ldr	r0, [r4, #28]
 8009792:	2100      	movs	r1, #0
 8009794:	2204      	movs	r2, #4
 8009796:	f102 0614 	add.w	r6, r2, #20
 800979a:	429e      	cmp	r6, r3
 800979c:	d93d      	bls.n	800981a <_dtoa_r+0x31a>
 800979e:	6041      	str	r1, [r0, #4]
 80097a0:	4620      	mov	r0, r4
 80097a2:	f000 fd9f 	bl	800a2e4 <_Balloc>
 80097a6:	9000      	str	r0, [sp, #0]
 80097a8:	2800      	cmp	r0, #0
 80097aa:	d139      	bne.n	8009820 <_dtoa_r+0x320>
 80097ac:	4b16      	ldr	r3, [pc, #88]	; (8009808 <_dtoa_r+0x308>)
 80097ae:	4602      	mov	r2, r0
 80097b0:	f240 11af 	movw	r1, #431	; 0x1af
 80097b4:	e6bd      	b.n	8009532 <_dtoa_r+0x32>
 80097b6:	2301      	movs	r3, #1
 80097b8:	e7e1      	b.n	800977e <_dtoa_r+0x27e>
 80097ba:	2501      	movs	r5, #1
 80097bc:	2300      	movs	r3, #0
 80097be:	9307      	str	r3, [sp, #28]
 80097c0:	9509      	str	r5, [sp, #36]	; 0x24
 80097c2:	f04f 33ff 	mov.w	r3, #4294967295
 80097c6:	9301      	str	r3, [sp, #4]
 80097c8:	9304      	str	r3, [sp, #16]
 80097ca:	2200      	movs	r2, #0
 80097cc:	2312      	movs	r3, #18
 80097ce:	e7d1      	b.n	8009774 <_dtoa_r+0x274>
 80097d0:	636f4361 	.word	0x636f4361
 80097d4:	3fd287a7 	.word	0x3fd287a7
 80097d8:	8b60c8b3 	.word	0x8b60c8b3
 80097dc:	3fc68a28 	.word	0x3fc68a28
 80097e0:	509f79fb 	.word	0x509f79fb
 80097e4:	3fd34413 	.word	0x3fd34413
 80097e8:	0800cbd2 	.word	0x0800cbd2
 80097ec:	0800cbe9 	.word	0x0800cbe9
 80097f0:	7ff00000 	.word	0x7ff00000
 80097f4:	0800cbce 	.word	0x0800cbce
 80097f8:	0800cbc5 	.word	0x0800cbc5
 80097fc:	0800cb9d 	.word	0x0800cb9d
 8009800:	3ff80000 	.word	0x3ff80000
 8009804:	0800ccd8 	.word	0x0800ccd8
 8009808:	0800cc41 	.word	0x0800cc41
 800980c:	2301      	movs	r3, #1
 800980e:	9309      	str	r3, [sp, #36]	; 0x24
 8009810:	e7d7      	b.n	80097c2 <_dtoa_r+0x2c2>
 8009812:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009814:	9301      	str	r3, [sp, #4]
 8009816:	9304      	str	r3, [sp, #16]
 8009818:	e7ba      	b.n	8009790 <_dtoa_r+0x290>
 800981a:	3101      	adds	r1, #1
 800981c:	0052      	lsls	r2, r2, #1
 800981e:	e7ba      	b.n	8009796 <_dtoa_r+0x296>
 8009820:	69e3      	ldr	r3, [r4, #28]
 8009822:	9a00      	ldr	r2, [sp, #0]
 8009824:	601a      	str	r2, [r3, #0]
 8009826:	9b04      	ldr	r3, [sp, #16]
 8009828:	2b0e      	cmp	r3, #14
 800982a:	f200 80a8 	bhi.w	800997e <_dtoa_r+0x47e>
 800982e:	2d00      	cmp	r5, #0
 8009830:	f000 80a5 	beq.w	800997e <_dtoa_r+0x47e>
 8009834:	f1bb 0f00 	cmp.w	fp, #0
 8009838:	dd38      	ble.n	80098ac <_dtoa_r+0x3ac>
 800983a:	4bc0      	ldr	r3, [pc, #768]	; (8009b3c <_dtoa_r+0x63c>)
 800983c:	f00b 020f 	and.w	r2, fp, #15
 8009840:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009844:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8009848:	e9d3 6700 	ldrd	r6, r7, [r3]
 800984c:	ea4f 182b 	mov.w	r8, fp, asr #4
 8009850:	d019      	beq.n	8009886 <_dtoa_r+0x386>
 8009852:	4bbb      	ldr	r3, [pc, #748]	; (8009b40 <_dtoa_r+0x640>)
 8009854:	ec51 0b18 	vmov	r0, r1, d8
 8009858:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800985c:	f7f7 f816 	bl	800088c <__aeabi_ddiv>
 8009860:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009864:	f008 080f 	and.w	r8, r8, #15
 8009868:	2503      	movs	r5, #3
 800986a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8009b40 <_dtoa_r+0x640>
 800986e:	f1b8 0f00 	cmp.w	r8, #0
 8009872:	d10a      	bne.n	800988a <_dtoa_r+0x38a>
 8009874:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009878:	4632      	mov	r2, r6
 800987a:	463b      	mov	r3, r7
 800987c:	f7f7 f806 	bl	800088c <__aeabi_ddiv>
 8009880:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009884:	e02b      	b.n	80098de <_dtoa_r+0x3de>
 8009886:	2502      	movs	r5, #2
 8009888:	e7ef      	b.n	800986a <_dtoa_r+0x36a>
 800988a:	f018 0f01 	tst.w	r8, #1
 800988e:	d008      	beq.n	80098a2 <_dtoa_r+0x3a2>
 8009890:	4630      	mov	r0, r6
 8009892:	4639      	mov	r1, r7
 8009894:	e9d9 2300 	ldrd	r2, r3, [r9]
 8009898:	f7f6 fece 	bl	8000638 <__aeabi_dmul>
 800989c:	3501      	adds	r5, #1
 800989e:	4606      	mov	r6, r0
 80098a0:	460f      	mov	r7, r1
 80098a2:	ea4f 0868 	mov.w	r8, r8, asr #1
 80098a6:	f109 0908 	add.w	r9, r9, #8
 80098aa:	e7e0      	b.n	800986e <_dtoa_r+0x36e>
 80098ac:	f000 809f 	beq.w	80099ee <_dtoa_r+0x4ee>
 80098b0:	f1cb 0600 	rsb	r6, fp, #0
 80098b4:	4ba1      	ldr	r3, [pc, #644]	; (8009b3c <_dtoa_r+0x63c>)
 80098b6:	4fa2      	ldr	r7, [pc, #648]	; (8009b40 <_dtoa_r+0x640>)
 80098b8:	f006 020f 	and.w	r2, r6, #15
 80098bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80098c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098c4:	ec51 0b18 	vmov	r0, r1, d8
 80098c8:	f7f6 feb6 	bl	8000638 <__aeabi_dmul>
 80098cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80098d0:	1136      	asrs	r6, r6, #4
 80098d2:	2300      	movs	r3, #0
 80098d4:	2502      	movs	r5, #2
 80098d6:	2e00      	cmp	r6, #0
 80098d8:	d17e      	bne.n	80099d8 <_dtoa_r+0x4d8>
 80098da:	2b00      	cmp	r3, #0
 80098dc:	d1d0      	bne.n	8009880 <_dtoa_r+0x380>
 80098de:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80098e0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	f000 8084 	beq.w	80099f2 <_dtoa_r+0x4f2>
 80098ea:	4b96      	ldr	r3, [pc, #600]	; (8009b44 <_dtoa_r+0x644>)
 80098ec:	2200      	movs	r2, #0
 80098ee:	4640      	mov	r0, r8
 80098f0:	4649      	mov	r1, r9
 80098f2:	f7f7 f913 	bl	8000b1c <__aeabi_dcmplt>
 80098f6:	2800      	cmp	r0, #0
 80098f8:	d07b      	beq.n	80099f2 <_dtoa_r+0x4f2>
 80098fa:	9b04      	ldr	r3, [sp, #16]
 80098fc:	2b00      	cmp	r3, #0
 80098fe:	d078      	beq.n	80099f2 <_dtoa_r+0x4f2>
 8009900:	9b01      	ldr	r3, [sp, #4]
 8009902:	2b00      	cmp	r3, #0
 8009904:	dd39      	ble.n	800997a <_dtoa_r+0x47a>
 8009906:	4b90      	ldr	r3, [pc, #576]	; (8009b48 <_dtoa_r+0x648>)
 8009908:	2200      	movs	r2, #0
 800990a:	4640      	mov	r0, r8
 800990c:	4649      	mov	r1, r9
 800990e:	f7f6 fe93 	bl	8000638 <__aeabi_dmul>
 8009912:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009916:	9e01      	ldr	r6, [sp, #4]
 8009918:	f10b 37ff 	add.w	r7, fp, #4294967295
 800991c:	3501      	adds	r5, #1
 800991e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8009922:	4628      	mov	r0, r5
 8009924:	f7f6 fe1e 	bl	8000564 <__aeabi_i2d>
 8009928:	4642      	mov	r2, r8
 800992a:	464b      	mov	r3, r9
 800992c:	f7f6 fe84 	bl	8000638 <__aeabi_dmul>
 8009930:	4b86      	ldr	r3, [pc, #536]	; (8009b4c <_dtoa_r+0x64c>)
 8009932:	2200      	movs	r2, #0
 8009934:	f7f6 fcca 	bl	80002cc <__adddf3>
 8009938:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800993c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009940:	9303      	str	r3, [sp, #12]
 8009942:	2e00      	cmp	r6, #0
 8009944:	d158      	bne.n	80099f8 <_dtoa_r+0x4f8>
 8009946:	4b82      	ldr	r3, [pc, #520]	; (8009b50 <_dtoa_r+0x650>)
 8009948:	2200      	movs	r2, #0
 800994a:	4640      	mov	r0, r8
 800994c:	4649      	mov	r1, r9
 800994e:	f7f6 fcbb 	bl	80002c8 <__aeabi_dsub>
 8009952:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009956:	4680      	mov	r8, r0
 8009958:	4689      	mov	r9, r1
 800995a:	f7f7 f8fd 	bl	8000b58 <__aeabi_dcmpgt>
 800995e:	2800      	cmp	r0, #0
 8009960:	f040 8296 	bne.w	8009e90 <_dtoa_r+0x990>
 8009964:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8009968:	4640      	mov	r0, r8
 800996a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800996e:	4649      	mov	r1, r9
 8009970:	f7f7 f8d4 	bl	8000b1c <__aeabi_dcmplt>
 8009974:	2800      	cmp	r0, #0
 8009976:	f040 8289 	bne.w	8009e8c <_dtoa_r+0x98c>
 800997a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800997e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009980:	2b00      	cmp	r3, #0
 8009982:	f2c0 814e 	blt.w	8009c22 <_dtoa_r+0x722>
 8009986:	f1bb 0f0e 	cmp.w	fp, #14
 800998a:	f300 814a 	bgt.w	8009c22 <_dtoa_r+0x722>
 800998e:	4b6b      	ldr	r3, [pc, #428]	; (8009b3c <_dtoa_r+0x63c>)
 8009990:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009994:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009998:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800999a:	2b00      	cmp	r3, #0
 800999c:	f280 80dc 	bge.w	8009b58 <_dtoa_r+0x658>
 80099a0:	9b04      	ldr	r3, [sp, #16]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	f300 80d8 	bgt.w	8009b58 <_dtoa_r+0x658>
 80099a8:	f040 826f 	bne.w	8009e8a <_dtoa_r+0x98a>
 80099ac:	4b68      	ldr	r3, [pc, #416]	; (8009b50 <_dtoa_r+0x650>)
 80099ae:	2200      	movs	r2, #0
 80099b0:	4640      	mov	r0, r8
 80099b2:	4649      	mov	r1, r9
 80099b4:	f7f6 fe40 	bl	8000638 <__aeabi_dmul>
 80099b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80099bc:	f7f7 f8c2 	bl	8000b44 <__aeabi_dcmpge>
 80099c0:	9e04      	ldr	r6, [sp, #16]
 80099c2:	4637      	mov	r7, r6
 80099c4:	2800      	cmp	r0, #0
 80099c6:	f040 8245 	bne.w	8009e54 <_dtoa_r+0x954>
 80099ca:	9d00      	ldr	r5, [sp, #0]
 80099cc:	2331      	movs	r3, #49	; 0x31
 80099ce:	f805 3b01 	strb.w	r3, [r5], #1
 80099d2:	f10b 0b01 	add.w	fp, fp, #1
 80099d6:	e241      	b.n	8009e5c <_dtoa_r+0x95c>
 80099d8:	07f2      	lsls	r2, r6, #31
 80099da:	d505      	bpl.n	80099e8 <_dtoa_r+0x4e8>
 80099dc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80099e0:	f7f6 fe2a 	bl	8000638 <__aeabi_dmul>
 80099e4:	3501      	adds	r5, #1
 80099e6:	2301      	movs	r3, #1
 80099e8:	1076      	asrs	r6, r6, #1
 80099ea:	3708      	adds	r7, #8
 80099ec:	e773      	b.n	80098d6 <_dtoa_r+0x3d6>
 80099ee:	2502      	movs	r5, #2
 80099f0:	e775      	b.n	80098de <_dtoa_r+0x3de>
 80099f2:	9e04      	ldr	r6, [sp, #16]
 80099f4:	465f      	mov	r7, fp
 80099f6:	e792      	b.n	800991e <_dtoa_r+0x41e>
 80099f8:	9900      	ldr	r1, [sp, #0]
 80099fa:	4b50      	ldr	r3, [pc, #320]	; (8009b3c <_dtoa_r+0x63c>)
 80099fc:	ed9d 7b02 	vldr	d7, [sp, #8]
 8009a00:	4431      	add	r1, r6
 8009a02:	9102      	str	r1, [sp, #8]
 8009a04:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009a06:	eeb0 9a47 	vmov.f32	s18, s14
 8009a0a:	eef0 9a67 	vmov.f32	s19, s15
 8009a0e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009a12:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009a16:	2900      	cmp	r1, #0
 8009a18:	d044      	beq.n	8009aa4 <_dtoa_r+0x5a4>
 8009a1a:	494e      	ldr	r1, [pc, #312]	; (8009b54 <_dtoa_r+0x654>)
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	f7f6 ff35 	bl	800088c <__aeabi_ddiv>
 8009a22:	ec53 2b19 	vmov	r2, r3, d9
 8009a26:	f7f6 fc4f 	bl	80002c8 <__aeabi_dsub>
 8009a2a:	9d00      	ldr	r5, [sp, #0]
 8009a2c:	ec41 0b19 	vmov	d9, r0, r1
 8009a30:	4649      	mov	r1, r9
 8009a32:	4640      	mov	r0, r8
 8009a34:	f7f7 f8b0 	bl	8000b98 <__aeabi_d2iz>
 8009a38:	4606      	mov	r6, r0
 8009a3a:	f7f6 fd93 	bl	8000564 <__aeabi_i2d>
 8009a3e:	4602      	mov	r2, r0
 8009a40:	460b      	mov	r3, r1
 8009a42:	4640      	mov	r0, r8
 8009a44:	4649      	mov	r1, r9
 8009a46:	f7f6 fc3f 	bl	80002c8 <__aeabi_dsub>
 8009a4a:	3630      	adds	r6, #48	; 0x30
 8009a4c:	f805 6b01 	strb.w	r6, [r5], #1
 8009a50:	ec53 2b19 	vmov	r2, r3, d9
 8009a54:	4680      	mov	r8, r0
 8009a56:	4689      	mov	r9, r1
 8009a58:	f7f7 f860 	bl	8000b1c <__aeabi_dcmplt>
 8009a5c:	2800      	cmp	r0, #0
 8009a5e:	d164      	bne.n	8009b2a <_dtoa_r+0x62a>
 8009a60:	4642      	mov	r2, r8
 8009a62:	464b      	mov	r3, r9
 8009a64:	4937      	ldr	r1, [pc, #220]	; (8009b44 <_dtoa_r+0x644>)
 8009a66:	2000      	movs	r0, #0
 8009a68:	f7f6 fc2e 	bl	80002c8 <__aeabi_dsub>
 8009a6c:	ec53 2b19 	vmov	r2, r3, d9
 8009a70:	f7f7 f854 	bl	8000b1c <__aeabi_dcmplt>
 8009a74:	2800      	cmp	r0, #0
 8009a76:	f040 80b6 	bne.w	8009be6 <_dtoa_r+0x6e6>
 8009a7a:	9b02      	ldr	r3, [sp, #8]
 8009a7c:	429d      	cmp	r5, r3
 8009a7e:	f43f af7c 	beq.w	800997a <_dtoa_r+0x47a>
 8009a82:	4b31      	ldr	r3, [pc, #196]	; (8009b48 <_dtoa_r+0x648>)
 8009a84:	ec51 0b19 	vmov	r0, r1, d9
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f7f6 fdd5 	bl	8000638 <__aeabi_dmul>
 8009a8e:	4b2e      	ldr	r3, [pc, #184]	; (8009b48 <_dtoa_r+0x648>)
 8009a90:	ec41 0b19 	vmov	d9, r0, r1
 8009a94:	2200      	movs	r2, #0
 8009a96:	4640      	mov	r0, r8
 8009a98:	4649      	mov	r1, r9
 8009a9a:	f7f6 fdcd 	bl	8000638 <__aeabi_dmul>
 8009a9e:	4680      	mov	r8, r0
 8009aa0:	4689      	mov	r9, r1
 8009aa2:	e7c5      	b.n	8009a30 <_dtoa_r+0x530>
 8009aa4:	ec51 0b17 	vmov	r0, r1, d7
 8009aa8:	f7f6 fdc6 	bl	8000638 <__aeabi_dmul>
 8009aac:	9b02      	ldr	r3, [sp, #8]
 8009aae:	9d00      	ldr	r5, [sp, #0]
 8009ab0:	930f      	str	r3, [sp, #60]	; 0x3c
 8009ab2:	ec41 0b19 	vmov	d9, r0, r1
 8009ab6:	4649      	mov	r1, r9
 8009ab8:	4640      	mov	r0, r8
 8009aba:	f7f7 f86d 	bl	8000b98 <__aeabi_d2iz>
 8009abe:	4606      	mov	r6, r0
 8009ac0:	f7f6 fd50 	bl	8000564 <__aeabi_i2d>
 8009ac4:	3630      	adds	r6, #48	; 0x30
 8009ac6:	4602      	mov	r2, r0
 8009ac8:	460b      	mov	r3, r1
 8009aca:	4640      	mov	r0, r8
 8009acc:	4649      	mov	r1, r9
 8009ace:	f7f6 fbfb 	bl	80002c8 <__aeabi_dsub>
 8009ad2:	f805 6b01 	strb.w	r6, [r5], #1
 8009ad6:	9b02      	ldr	r3, [sp, #8]
 8009ad8:	429d      	cmp	r5, r3
 8009ada:	4680      	mov	r8, r0
 8009adc:	4689      	mov	r9, r1
 8009ade:	f04f 0200 	mov.w	r2, #0
 8009ae2:	d124      	bne.n	8009b2e <_dtoa_r+0x62e>
 8009ae4:	4b1b      	ldr	r3, [pc, #108]	; (8009b54 <_dtoa_r+0x654>)
 8009ae6:	ec51 0b19 	vmov	r0, r1, d9
 8009aea:	f7f6 fbef 	bl	80002cc <__adddf3>
 8009aee:	4602      	mov	r2, r0
 8009af0:	460b      	mov	r3, r1
 8009af2:	4640      	mov	r0, r8
 8009af4:	4649      	mov	r1, r9
 8009af6:	f7f7 f82f 	bl	8000b58 <__aeabi_dcmpgt>
 8009afa:	2800      	cmp	r0, #0
 8009afc:	d173      	bne.n	8009be6 <_dtoa_r+0x6e6>
 8009afe:	ec53 2b19 	vmov	r2, r3, d9
 8009b02:	4914      	ldr	r1, [pc, #80]	; (8009b54 <_dtoa_r+0x654>)
 8009b04:	2000      	movs	r0, #0
 8009b06:	f7f6 fbdf 	bl	80002c8 <__aeabi_dsub>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	460b      	mov	r3, r1
 8009b0e:	4640      	mov	r0, r8
 8009b10:	4649      	mov	r1, r9
 8009b12:	f7f7 f803 	bl	8000b1c <__aeabi_dcmplt>
 8009b16:	2800      	cmp	r0, #0
 8009b18:	f43f af2f 	beq.w	800997a <_dtoa_r+0x47a>
 8009b1c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009b1e:	1e6b      	subs	r3, r5, #1
 8009b20:	930f      	str	r3, [sp, #60]	; 0x3c
 8009b22:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009b26:	2b30      	cmp	r3, #48	; 0x30
 8009b28:	d0f8      	beq.n	8009b1c <_dtoa_r+0x61c>
 8009b2a:	46bb      	mov	fp, r7
 8009b2c:	e04a      	b.n	8009bc4 <_dtoa_r+0x6c4>
 8009b2e:	4b06      	ldr	r3, [pc, #24]	; (8009b48 <_dtoa_r+0x648>)
 8009b30:	f7f6 fd82 	bl	8000638 <__aeabi_dmul>
 8009b34:	4680      	mov	r8, r0
 8009b36:	4689      	mov	r9, r1
 8009b38:	e7bd      	b.n	8009ab6 <_dtoa_r+0x5b6>
 8009b3a:	bf00      	nop
 8009b3c:	0800ccd8 	.word	0x0800ccd8
 8009b40:	0800ccb0 	.word	0x0800ccb0
 8009b44:	3ff00000 	.word	0x3ff00000
 8009b48:	40240000 	.word	0x40240000
 8009b4c:	401c0000 	.word	0x401c0000
 8009b50:	40140000 	.word	0x40140000
 8009b54:	3fe00000 	.word	0x3fe00000
 8009b58:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009b5c:	9d00      	ldr	r5, [sp, #0]
 8009b5e:	4642      	mov	r2, r8
 8009b60:	464b      	mov	r3, r9
 8009b62:	4630      	mov	r0, r6
 8009b64:	4639      	mov	r1, r7
 8009b66:	f7f6 fe91 	bl	800088c <__aeabi_ddiv>
 8009b6a:	f7f7 f815 	bl	8000b98 <__aeabi_d2iz>
 8009b6e:	9001      	str	r0, [sp, #4]
 8009b70:	f7f6 fcf8 	bl	8000564 <__aeabi_i2d>
 8009b74:	4642      	mov	r2, r8
 8009b76:	464b      	mov	r3, r9
 8009b78:	f7f6 fd5e 	bl	8000638 <__aeabi_dmul>
 8009b7c:	4602      	mov	r2, r0
 8009b7e:	460b      	mov	r3, r1
 8009b80:	4630      	mov	r0, r6
 8009b82:	4639      	mov	r1, r7
 8009b84:	f7f6 fba0 	bl	80002c8 <__aeabi_dsub>
 8009b88:	9e01      	ldr	r6, [sp, #4]
 8009b8a:	9f04      	ldr	r7, [sp, #16]
 8009b8c:	3630      	adds	r6, #48	; 0x30
 8009b8e:	f805 6b01 	strb.w	r6, [r5], #1
 8009b92:	9e00      	ldr	r6, [sp, #0]
 8009b94:	1bae      	subs	r6, r5, r6
 8009b96:	42b7      	cmp	r7, r6
 8009b98:	4602      	mov	r2, r0
 8009b9a:	460b      	mov	r3, r1
 8009b9c:	d134      	bne.n	8009c08 <_dtoa_r+0x708>
 8009b9e:	f7f6 fb95 	bl	80002cc <__adddf3>
 8009ba2:	4642      	mov	r2, r8
 8009ba4:	464b      	mov	r3, r9
 8009ba6:	4606      	mov	r6, r0
 8009ba8:	460f      	mov	r7, r1
 8009baa:	f7f6 ffd5 	bl	8000b58 <__aeabi_dcmpgt>
 8009bae:	b9c8      	cbnz	r0, 8009be4 <_dtoa_r+0x6e4>
 8009bb0:	4642      	mov	r2, r8
 8009bb2:	464b      	mov	r3, r9
 8009bb4:	4630      	mov	r0, r6
 8009bb6:	4639      	mov	r1, r7
 8009bb8:	f7f6 ffa6 	bl	8000b08 <__aeabi_dcmpeq>
 8009bbc:	b110      	cbz	r0, 8009bc4 <_dtoa_r+0x6c4>
 8009bbe:	9b01      	ldr	r3, [sp, #4]
 8009bc0:	07db      	lsls	r3, r3, #31
 8009bc2:	d40f      	bmi.n	8009be4 <_dtoa_r+0x6e4>
 8009bc4:	4651      	mov	r1, sl
 8009bc6:	4620      	mov	r0, r4
 8009bc8:	f000 fbcc 	bl	800a364 <_Bfree>
 8009bcc:	2300      	movs	r3, #0
 8009bce:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8009bd0:	702b      	strb	r3, [r5, #0]
 8009bd2:	f10b 0301 	add.w	r3, fp, #1
 8009bd6:	6013      	str	r3, [r2, #0]
 8009bd8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	f43f ace2 	beq.w	80095a4 <_dtoa_r+0xa4>
 8009be0:	601d      	str	r5, [r3, #0]
 8009be2:	e4df      	b.n	80095a4 <_dtoa_r+0xa4>
 8009be4:	465f      	mov	r7, fp
 8009be6:	462b      	mov	r3, r5
 8009be8:	461d      	mov	r5, r3
 8009bea:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009bee:	2a39      	cmp	r2, #57	; 0x39
 8009bf0:	d106      	bne.n	8009c00 <_dtoa_r+0x700>
 8009bf2:	9a00      	ldr	r2, [sp, #0]
 8009bf4:	429a      	cmp	r2, r3
 8009bf6:	d1f7      	bne.n	8009be8 <_dtoa_r+0x6e8>
 8009bf8:	9900      	ldr	r1, [sp, #0]
 8009bfa:	2230      	movs	r2, #48	; 0x30
 8009bfc:	3701      	adds	r7, #1
 8009bfe:	700a      	strb	r2, [r1, #0]
 8009c00:	781a      	ldrb	r2, [r3, #0]
 8009c02:	3201      	adds	r2, #1
 8009c04:	701a      	strb	r2, [r3, #0]
 8009c06:	e790      	b.n	8009b2a <_dtoa_r+0x62a>
 8009c08:	4ba3      	ldr	r3, [pc, #652]	; (8009e98 <_dtoa_r+0x998>)
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f7f6 fd14 	bl	8000638 <__aeabi_dmul>
 8009c10:	2200      	movs	r2, #0
 8009c12:	2300      	movs	r3, #0
 8009c14:	4606      	mov	r6, r0
 8009c16:	460f      	mov	r7, r1
 8009c18:	f7f6 ff76 	bl	8000b08 <__aeabi_dcmpeq>
 8009c1c:	2800      	cmp	r0, #0
 8009c1e:	d09e      	beq.n	8009b5e <_dtoa_r+0x65e>
 8009c20:	e7d0      	b.n	8009bc4 <_dtoa_r+0x6c4>
 8009c22:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009c24:	2a00      	cmp	r2, #0
 8009c26:	f000 80ca 	beq.w	8009dbe <_dtoa_r+0x8be>
 8009c2a:	9a07      	ldr	r2, [sp, #28]
 8009c2c:	2a01      	cmp	r2, #1
 8009c2e:	f300 80ad 	bgt.w	8009d8c <_dtoa_r+0x88c>
 8009c32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009c34:	2a00      	cmp	r2, #0
 8009c36:	f000 80a5 	beq.w	8009d84 <_dtoa_r+0x884>
 8009c3a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009c3e:	9e08      	ldr	r6, [sp, #32]
 8009c40:	9d05      	ldr	r5, [sp, #20]
 8009c42:	9a05      	ldr	r2, [sp, #20]
 8009c44:	441a      	add	r2, r3
 8009c46:	9205      	str	r2, [sp, #20]
 8009c48:	9a06      	ldr	r2, [sp, #24]
 8009c4a:	2101      	movs	r1, #1
 8009c4c:	441a      	add	r2, r3
 8009c4e:	4620      	mov	r0, r4
 8009c50:	9206      	str	r2, [sp, #24]
 8009c52:	f000 fc87 	bl	800a564 <__i2b>
 8009c56:	4607      	mov	r7, r0
 8009c58:	b165      	cbz	r5, 8009c74 <_dtoa_r+0x774>
 8009c5a:	9b06      	ldr	r3, [sp, #24]
 8009c5c:	2b00      	cmp	r3, #0
 8009c5e:	dd09      	ble.n	8009c74 <_dtoa_r+0x774>
 8009c60:	42ab      	cmp	r3, r5
 8009c62:	9a05      	ldr	r2, [sp, #20]
 8009c64:	bfa8      	it	ge
 8009c66:	462b      	movge	r3, r5
 8009c68:	1ad2      	subs	r2, r2, r3
 8009c6a:	9205      	str	r2, [sp, #20]
 8009c6c:	9a06      	ldr	r2, [sp, #24]
 8009c6e:	1aed      	subs	r5, r5, r3
 8009c70:	1ad3      	subs	r3, r2, r3
 8009c72:	9306      	str	r3, [sp, #24]
 8009c74:	9b08      	ldr	r3, [sp, #32]
 8009c76:	b1f3      	cbz	r3, 8009cb6 <_dtoa_r+0x7b6>
 8009c78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	f000 80a3 	beq.w	8009dc6 <_dtoa_r+0x8c6>
 8009c80:	2e00      	cmp	r6, #0
 8009c82:	dd10      	ble.n	8009ca6 <_dtoa_r+0x7a6>
 8009c84:	4639      	mov	r1, r7
 8009c86:	4632      	mov	r2, r6
 8009c88:	4620      	mov	r0, r4
 8009c8a:	f000 fd2b 	bl	800a6e4 <__pow5mult>
 8009c8e:	4652      	mov	r2, sl
 8009c90:	4601      	mov	r1, r0
 8009c92:	4607      	mov	r7, r0
 8009c94:	4620      	mov	r0, r4
 8009c96:	f000 fc7b 	bl	800a590 <__multiply>
 8009c9a:	4651      	mov	r1, sl
 8009c9c:	4680      	mov	r8, r0
 8009c9e:	4620      	mov	r0, r4
 8009ca0:	f000 fb60 	bl	800a364 <_Bfree>
 8009ca4:	46c2      	mov	sl, r8
 8009ca6:	9b08      	ldr	r3, [sp, #32]
 8009ca8:	1b9a      	subs	r2, r3, r6
 8009caa:	d004      	beq.n	8009cb6 <_dtoa_r+0x7b6>
 8009cac:	4651      	mov	r1, sl
 8009cae:	4620      	mov	r0, r4
 8009cb0:	f000 fd18 	bl	800a6e4 <__pow5mult>
 8009cb4:	4682      	mov	sl, r0
 8009cb6:	2101      	movs	r1, #1
 8009cb8:	4620      	mov	r0, r4
 8009cba:	f000 fc53 	bl	800a564 <__i2b>
 8009cbe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	4606      	mov	r6, r0
 8009cc4:	f340 8081 	ble.w	8009dca <_dtoa_r+0x8ca>
 8009cc8:	461a      	mov	r2, r3
 8009cca:	4601      	mov	r1, r0
 8009ccc:	4620      	mov	r0, r4
 8009cce:	f000 fd09 	bl	800a6e4 <__pow5mult>
 8009cd2:	9b07      	ldr	r3, [sp, #28]
 8009cd4:	2b01      	cmp	r3, #1
 8009cd6:	4606      	mov	r6, r0
 8009cd8:	dd7a      	ble.n	8009dd0 <_dtoa_r+0x8d0>
 8009cda:	f04f 0800 	mov.w	r8, #0
 8009cde:	6933      	ldr	r3, [r6, #16]
 8009ce0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009ce4:	6918      	ldr	r0, [r3, #16]
 8009ce6:	f000 fbef 	bl	800a4c8 <__hi0bits>
 8009cea:	f1c0 0020 	rsb	r0, r0, #32
 8009cee:	9b06      	ldr	r3, [sp, #24]
 8009cf0:	4418      	add	r0, r3
 8009cf2:	f010 001f 	ands.w	r0, r0, #31
 8009cf6:	f000 8094 	beq.w	8009e22 <_dtoa_r+0x922>
 8009cfa:	f1c0 0320 	rsb	r3, r0, #32
 8009cfe:	2b04      	cmp	r3, #4
 8009d00:	f340 8085 	ble.w	8009e0e <_dtoa_r+0x90e>
 8009d04:	9b05      	ldr	r3, [sp, #20]
 8009d06:	f1c0 001c 	rsb	r0, r0, #28
 8009d0a:	4403      	add	r3, r0
 8009d0c:	9305      	str	r3, [sp, #20]
 8009d0e:	9b06      	ldr	r3, [sp, #24]
 8009d10:	4403      	add	r3, r0
 8009d12:	4405      	add	r5, r0
 8009d14:	9306      	str	r3, [sp, #24]
 8009d16:	9b05      	ldr	r3, [sp, #20]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	dd05      	ble.n	8009d28 <_dtoa_r+0x828>
 8009d1c:	4651      	mov	r1, sl
 8009d1e:	461a      	mov	r2, r3
 8009d20:	4620      	mov	r0, r4
 8009d22:	f000 fd39 	bl	800a798 <__lshift>
 8009d26:	4682      	mov	sl, r0
 8009d28:	9b06      	ldr	r3, [sp, #24]
 8009d2a:	2b00      	cmp	r3, #0
 8009d2c:	dd05      	ble.n	8009d3a <_dtoa_r+0x83a>
 8009d2e:	4631      	mov	r1, r6
 8009d30:	461a      	mov	r2, r3
 8009d32:	4620      	mov	r0, r4
 8009d34:	f000 fd30 	bl	800a798 <__lshift>
 8009d38:	4606      	mov	r6, r0
 8009d3a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d3c:	2b00      	cmp	r3, #0
 8009d3e:	d072      	beq.n	8009e26 <_dtoa_r+0x926>
 8009d40:	4631      	mov	r1, r6
 8009d42:	4650      	mov	r0, sl
 8009d44:	f000 fd94 	bl	800a870 <__mcmp>
 8009d48:	2800      	cmp	r0, #0
 8009d4a:	da6c      	bge.n	8009e26 <_dtoa_r+0x926>
 8009d4c:	2300      	movs	r3, #0
 8009d4e:	4651      	mov	r1, sl
 8009d50:	220a      	movs	r2, #10
 8009d52:	4620      	mov	r0, r4
 8009d54:	f000 fb28 	bl	800a3a8 <__multadd>
 8009d58:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d5a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8009d5e:	4682      	mov	sl, r0
 8009d60:	2b00      	cmp	r3, #0
 8009d62:	f000 81b0 	beq.w	800a0c6 <_dtoa_r+0xbc6>
 8009d66:	2300      	movs	r3, #0
 8009d68:	4639      	mov	r1, r7
 8009d6a:	220a      	movs	r2, #10
 8009d6c:	4620      	mov	r0, r4
 8009d6e:	f000 fb1b 	bl	800a3a8 <__multadd>
 8009d72:	9b01      	ldr	r3, [sp, #4]
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	4607      	mov	r7, r0
 8009d78:	f300 8096 	bgt.w	8009ea8 <_dtoa_r+0x9a8>
 8009d7c:	9b07      	ldr	r3, [sp, #28]
 8009d7e:	2b02      	cmp	r3, #2
 8009d80:	dc59      	bgt.n	8009e36 <_dtoa_r+0x936>
 8009d82:	e091      	b.n	8009ea8 <_dtoa_r+0x9a8>
 8009d84:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009d86:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009d8a:	e758      	b.n	8009c3e <_dtoa_r+0x73e>
 8009d8c:	9b04      	ldr	r3, [sp, #16]
 8009d8e:	1e5e      	subs	r6, r3, #1
 8009d90:	9b08      	ldr	r3, [sp, #32]
 8009d92:	42b3      	cmp	r3, r6
 8009d94:	bfbf      	itttt	lt
 8009d96:	9b08      	ldrlt	r3, [sp, #32]
 8009d98:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 8009d9a:	9608      	strlt	r6, [sp, #32]
 8009d9c:	1af3      	sublt	r3, r6, r3
 8009d9e:	bfb4      	ite	lt
 8009da0:	18d2      	addlt	r2, r2, r3
 8009da2:	1b9e      	subge	r6, r3, r6
 8009da4:	9b04      	ldr	r3, [sp, #16]
 8009da6:	bfbc      	itt	lt
 8009da8:	920b      	strlt	r2, [sp, #44]	; 0x2c
 8009daa:	2600      	movlt	r6, #0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	bfb7      	itett	lt
 8009db0:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 8009db4:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 8009db8:	1a9d      	sublt	r5, r3, r2
 8009dba:	2300      	movlt	r3, #0
 8009dbc:	e741      	b.n	8009c42 <_dtoa_r+0x742>
 8009dbe:	9e08      	ldr	r6, [sp, #32]
 8009dc0:	9d05      	ldr	r5, [sp, #20]
 8009dc2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 8009dc4:	e748      	b.n	8009c58 <_dtoa_r+0x758>
 8009dc6:	9a08      	ldr	r2, [sp, #32]
 8009dc8:	e770      	b.n	8009cac <_dtoa_r+0x7ac>
 8009dca:	9b07      	ldr	r3, [sp, #28]
 8009dcc:	2b01      	cmp	r3, #1
 8009dce:	dc19      	bgt.n	8009e04 <_dtoa_r+0x904>
 8009dd0:	9b02      	ldr	r3, [sp, #8]
 8009dd2:	b9bb      	cbnz	r3, 8009e04 <_dtoa_r+0x904>
 8009dd4:	9b03      	ldr	r3, [sp, #12]
 8009dd6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009dda:	b99b      	cbnz	r3, 8009e04 <_dtoa_r+0x904>
 8009ddc:	9b03      	ldr	r3, [sp, #12]
 8009dde:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8009de2:	0d1b      	lsrs	r3, r3, #20
 8009de4:	051b      	lsls	r3, r3, #20
 8009de6:	b183      	cbz	r3, 8009e0a <_dtoa_r+0x90a>
 8009de8:	9b05      	ldr	r3, [sp, #20]
 8009dea:	3301      	adds	r3, #1
 8009dec:	9305      	str	r3, [sp, #20]
 8009dee:	9b06      	ldr	r3, [sp, #24]
 8009df0:	3301      	adds	r3, #1
 8009df2:	9306      	str	r3, [sp, #24]
 8009df4:	f04f 0801 	mov.w	r8, #1
 8009df8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	f47f af6f 	bne.w	8009cde <_dtoa_r+0x7de>
 8009e00:	2001      	movs	r0, #1
 8009e02:	e774      	b.n	8009cee <_dtoa_r+0x7ee>
 8009e04:	f04f 0800 	mov.w	r8, #0
 8009e08:	e7f6      	b.n	8009df8 <_dtoa_r+0x8f8>
 8009e0a:	4698      	mov	r8, r3
 8009e0c:	e7f4      	b.n	8009df8 <_dtoa_r+0x8f8>
 8009e0e:	d082      	beq.n	8009d16 <_dtoa_r+0x816>
 8009e10:	9a05      	ldr	r2, [sp, #20]
 8009e12:	331c      	adds	r3, #28
 8009e14:	441a      	add	r2, r3
 8009e16:	9205      	str	r2, [sp, #20]
 8009e18:	9a06      	ldr	r2, [sp, #24]
 8009e1a:	441a      	add	r2, r3
 8009e1c:	441d      	add	r5, r3
 8009e1e:	9206      	str	r2, [sp, #24]
 8009e20:	e779      	b.n	8009d16 <_dtoa_r+0x816>
 8009e22:	4603      	mov	r3, r0
 8009e24:	e7f4      	b.n	8009e10 <_dtoa_r+0x910>
 8009e26:	9b04      	ldr	r3, [sp, #16]
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	dc37      	bgt.n	8009e9c <_dtoa_r+0x99c>
 8009e2c:	9b07      	ldr	r3, [sp, #28]
 8009e2e:	2b02      	cmp	r3, #2
 8009e30:	dd34      	ble.n	8009e9c <_dtoa_r+0x99c>
 8009e32:	9b04      	ldr	r3, [sp, #16]
 8009e34:	9301      	str	r3, [sp, #4]
 8009e36:	9b01      	ldr	r3, [sp, #4]
 8009e38:	b963      	cbnz	r3, 8009e54 <_dtoa_r+0x954>
 8009e3a:	4631      	mov	r1, r6
 8009e3c:	2205      	movs	r2, #5
 8009e3e:	4620      	mov	r0, r4
 8009e40:	f000 fab2 	bl	800a3a8 <__multadd>
 8009e44:	4601      	mov	r1, r0
 8009e46:	4606      	mov	r6, r0
 8009e48:	4650      	mov	r0, sl
 8009e4a:	f000 fd11 	bl	800a870 <__mcmp>
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	f73f adbb 	bgt.w	80099ca <_dtoa_r+0x4ca>
 8009e54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e56:	9d00      	ldr	r5, [sp, #0]
 8009e58:	ea6f 0b03 	mvn.w	fp, r3
 8009e5c:	f04f 0800 	mov.w	r8, #0
 8009e60:	4631      	mov	r1, r6
 8009e62:	4620      	mov	r0, r4
 8009e64:	f000 fa7e 	bl	800a364 <_Bfree>
 8009e68:	2f00      	cmp	r7, #0
 8009e6a:	f43f aeab 	beq.w	8009bc4 <_dtoa_r+0x6c4>
 8009e6e:	f1b8 0f00 	cmp.w	r8, #0
 8009e72:	d005      	beq.n	8009e80 <_dtoa_r+0x980>
 8009e74:	45b8      	cmp	r8, r7
 8009e76:	d003      	beq.n	8009e80 <_dtoa_r+0x980>
 8009e78:	4641      	mov	r1, r8
 8009e7a:	4620      	mov	r0, r4
 8009e7c:	f000 fa72 	bl	800a364 <_Bfree>
 8009e80:	4639      	mov	r1, r7
 8009e82:	4620      	mov	r0, r4
 8009e84:	f000 fa6e 	bl	800a364 <_Bfree>
 8009e88:	e69c      	b.n	8009bc4 <_dtoa_r+0x6c4>
 8009e8a:	2600      	movs	r6, #0
 8009e8c:	4637      	mov	r7, r6
 8009e8e:	e7e1      	b.n	8009e54 <_dtoa_r+0x954>
 8009e90:	46bb      	mov	fp, r7
 8009e92:	4637      	mov	r7, r6
 8009e94:	e599      	b.n	80099ca <_dtoa_r+0x4ca>
 8009e96:	bf00      	nop
 8009e98:	40240000 	.word	0x40240000
 8009e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	f000 80c8 	beq.w	800a034 <_dtoa_r+0xb34>
 8009ea4:	9b04      	ldr	r3, [sp, #16]
 8009ea6:	9301      	str	r3, [sp, #4]
 8009ea8:	2d00      	cmp	r5, #0
 8009eaa:	dd05      	ble.n	8009eb8 <_dtoa_r+0x9b8>
 8009eac:	4639      	mov	r1, r7
 8009eae:	462a      	mov	r2, r5
 8009eb0:	4620      	mov	r0, r4
 8009eb2:	f000 fc71 	bl	800a798 <__lshift>
 8009eb6:	4607      	mov	r7, r0
 8009eb8:	f1b8 0f00 	cmp.w	r8, #0
 8009ebc:	d05b      	beq.n	8009f76 <_dtoa_r+0xa76>
 8009ebe:	6879      	ldr	r1, [r7, #4]
 8009ec0:	4620      	mov	r0, r4
 8009ec2:	f000 fa0f 	bl	800a2e4 <_Balloc>
 8009ec6:	4605      	mov	r5, r0
 8009ec8:	b928      	cbnz	r0, 8009ed6 <_dtoa_r+0x9d6>
 8009eca:	4b83      	ldr	r3, [pc, #524]	; (800a0d8 <_dtoa_r+0xbd8>)
 8009ecc:	4602      	mov	r2, r0
 8009ece:	f240 21ef 	movw	r1, #751	; 0x2ef
 8009ed2:	f7ff bb2e 	b.w	8009532 <_dtoa_r+0x32>
 8009ed6:	693a      	ldr	r2, [r7, #16]
 8009ed8:	3202      	adds	r2, #2
 8009eda:	0092      	lsls	r2, r2, #2
 8009edc:	f107 010c 	add.w	r1, r7, #12
 8009ee0:	300c      	adds	r0, #12
 8009ee2:	f001 ff85 	bl	800bdf0 <memcpy>
 8009ee6:	2201      	movs	r2, #1
 8009ee8:	4629      	mov	r1, r5
 8009eea:	4620      	mov	r0, r4
 8009eec:	f000 fc54 	bl	800a798 <__lshift>
 8009ef0:	9b00      	ldr	r3, [sp, #0]
 8009ef2:	3301      	adds	r3, #1
 8009ef4:	9304      	str	r3, [sp, #16]
 8009ef6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009efa:	4413      	add	r3, r2
 8009efc:	9308      	str	r3, [sp, #32]
 8009efe:	9b02      	ldr	r3, [sp, #8]
 8009f00:	f003 0301 	and.w	r3, r3, #1
 8009f04:	46b8      	mov	r8, r7
 8009f06:	9306      	str	r3, [sp, #24]
 8009f08:	4607      	mov	r7, r0
 8009f0a:	9b04      	ldr	r3, [sp, #16]
 8009f0c:	4631      	mov	r1, r6
 8009f0e:	3b01      	subs	r3, #1
 8009f10:	4650      	mov	r0, sl
 8009f12:	9301      	str	r3, [sp, #4]
 8009f14:	f7ff fa6a 	bl	80093ec <quorem>
 8009f18:	4641      	mov	r1, r8
 8009f1a:	9002      	str	r0, [sp, #8]
 8009f1c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8009f20:	4650      	mov	r0, sl
 8009f22:	f000 fca5 	bl	800a870 <__mcmp>
 8009f26:	463a      	mov	r2, r7
 8009f28:	9005      	str	r0, [sp, #20]
 8009f2a:	4631      	mov	r1, r6
 8009f2c:	4620      	mov	r0, r4
 8009f2e:	f000 fcbb 	bl	800a8a8 <__mdiff>
 8009f32:	68c2      	ldr	r2, [r0, #12]
 8009f34:	4605      	mov	r5, r0
 8009f36:	bb02      	cbnz	r2, 8009f7a <_dtoa_r+0xa7a>
 8009f38:	4601      	mov	r1, r0
 8009f3a:	4650      	mov	r0, sl
 8009f3c:	f000 fc98 	bl	800a870 <__mcmp>
 8009f40:	4602      	mov	r2, r0
 8009f42:	4629      	mov	r1, r5
 8009f44:	4620      	mov	r0, r4
 8009f46:	9209      	str	r2, [sp, #36]	; 0x24
 8009f48:	f000 fa0c 	bl	800a364 <_Bfree>
 8009f4c:	9b07      	ldr	r3, [sp, #28]
 8009f4e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009f50:	9d04      	ldr	r5, [sp, #16]
 8009f52:	ea43 0102 	orr.w	r1, r3, r2
 8009f56:	9b06      	ldr	r3, [sp, #24]
 8009f58:	4319      	orrs	r1, r3
 8009f5a:	d110      	bne.n	8009f7e <_dtoa_r+0xa7e>
 8009f5c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009f60:	d029      	beq.n	8009fb6 <_dtoa_r+0xab6>
 8009f62:	9b05      	ldr	r3, [sp, #20]
 8009f64:	2b00      	cmp	r3, #0
 8009f66:	dd02      	ble.n	8009f6e <_dtoa_r+0xa6e>
 8009f68:	9b02      	ldr	r3, [sp, #8]
 8009f6a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8009f6e:	9b01      	ldr	r3, [sp, #4]
 8009f70:	f883 9000 	strb.w	r9, [r3]
 8009f74:	e774      	b.n	8009e60 <_dtoa_r+0x960>
 8009f76:	4638      	mov	r0, r7
 8009f78:	e7ba      	b.n	8009ef0 <_dtoa_r+0x9f0>
 8009f7a:	2201      	movs	r2, #1
 8009f7c:	e7e1      	b.n	8009f42 <_dtoa_r+0xa42>
 8009f7e:	9b05      	ldr	r3, [sp, #20]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	db04      	blt.n	8009f8e <_dtoa_r+0xa8e>
 8009f84:	9907      	ldr	r1, [sp, #28]
 8009f86:	430b      	orrs	r3, r1
 8009f88:	9906      	ldr	r1, [sp, #24]
 8009f8a:	430b      	orrs	r3, r1
 8009f8c:	d120      	bne.n	8009fd0 <_dtoa_r+0xad0>
 8009f8e:	2a00      	cmp	r2, #0
 8009f90:	dded      	ble.n	8009f6e <_dtoa_r+0xa6e>
 8009f92:	4651      	mov	r1, sl
 8009f94:	2201      	movs	r2, #1
 8009f96:	4620      	mov	r0, r4
 8009f98:	f000 fbfe 	bl	800a798 <__lshift>
 8009f9c:	4631      	mov	r1, r6
 8009f9e:	4682      	mov	sl, r0
 8009fa0:	f000 fc66 	bl	800a870 <__mcmp>
 8009fa4:	2800      	cmp	r0, #0
 8009fa6:	dc03      	bgt.n	8009fb0 <_dtoa_r+0xab0>
 8009fa8:	d1e1      	bne.n	8009f6e <_dtoa_r+0xa6e>
 8009faa:	f019 0f01 	tst.w	r9, #1
 8009fae:	d0de      	beq.n	8009f6e <_dtoa_r+0xa6e>
 8009fb0:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009fb4:	d1d8      	bne.n	8009f68 <_dtoa_r+0xa68>
 8009fb6:	9a01      	ldr	r2, [sp, #4]
 8009fb8:	2339      	movs	r3, #57	; 0x39
 8009fba:	7013      	strb	r3, [r2, #0]
 8009fbc:	462b      	mov	r3, r5
 8009fbe:	461d      	mov	r5, r3
 8009fc0:	3b01      	subs	r3, #1
 8009fc2:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009fc6:	2a39      	cmp	r2, #57	; 0x39
 8009fc8:	d06c      	beq.n	800a0a4 <_dtoa_r+0xba4>
 8009fca:	3201      	adds	r2, #1
 8009fcc:	701a      	strb	r2, [r3, #0]
 8009fce:	e747      	b.n	8009e60 <_dtoa_r+0x960>
 8009fd0:	2a00      	cmp	r2, #0
 8009fd2:	dd07      	ble.n	8009fe4 <_dtoa_r+0xae4>
 8009fd4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8009fd8:	d0ed      	beq.n	8009fb6 <_dtoa_r+0xab6>
 8009fda:	9a01      	ldr	r2, [sp, #4]
 8009fdc:	f109 0301 	add.w	r3, r9, #1
 8009fe0:	7013      	strb	r3, [r2, #0]
 8009fe2:	e73d      	b.n	8009e60 <_dtoa_r+0x960>
 8009fe4:	9b04      	ldr	r3, [sp, #16]
 8009fe6:	9a08      	ldr	r2, [sp, #32]
 8009fe8:	f803 9c01 	strb.w	r9, [r3, #-1]
 8009fec:	4293      	cmp	r3, r2
 8009fee:	d043      	beq.n	800a078 <_dtoa_r+0xb78>
 8009ff0:	4651      	mov	r1, sl
 8009ff2:	2300      	movs	r3, #0
 8009ff4:	220a      	movs	r2, #10
 8009ff6:	4620      	mov	r0, r4
 8009ff8:	f000 f9d6 	bl	800a3a8 <__multadd>
 8009ffc:	45b8      	cmp	r8, r7
 8009ffe:	4682      	mov	sl, r0
 800a000:	f04f 0300 	mov.w	r3, #0
 800a004:	f04f 020a 	mov.w	r2, #10
 800a008:	4641      	mov	r1, r8
 800a00a:	4620      	mov	r0, r4
 800a00c:	d107      	bne.n	800a01e <_dtoa_r+0xb1e>
 800a00e:	f000 f9cb 	bl	800a3a8 <__multadd>
 800a012:	4680      	mov	r8, r0
 800a014:	4607      	mov	r7, r0
 800a016:	9b04      	ldr	r3, [sp, #16]
 800a018:	3301      	adds	r3, #1
 800a01a:	9304      	str	r3, [sp, #16]
 800a01c:	e775      	b.n	8009f0a <_dtoa_r+0xa0a>
 800a01e:	f000 f9c3 	bl	800a3a8 <__multadd>
 800a022:	4639      	mov	r1, r7
 800a024:	4680      	mov	r8, r0
 800a026:	2300      	movs	r3, #0
 800a028:	220a      	movs	r2, #10
 800a02a:	4620      	mov	r0, r4
 800a02c:	f000 f9bc 	bl	800a3a8 <__multadd>
 800a030:	4607      	mov	r7, r0
 800a032:	e7f0      	b.n	800a016 <_dtoa_r+0xb16>
 800a034:	9b04      	ldr	r3, [sp, #16]
 800a036:	9301      	str	r3, [sp, #4]
 800a038:	9d00      	ldr	r5, [sp, #0]
 800a03a:	4631      	mov	r1, r6
 800a03c:	4650      	mov	r0, sl
 800a03e:	f7ff f9d5 	bl	80093ec <quorem>
 800a042:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800a046:	9b00      	ldr	r3, [sp, #0]
 800a048:	f805 9b01 	strb.w	r9, [r5], #1
 800a04c:	1aea      	subs	r2, r5, r3
 800a04e:	9b01      	ldr	r3, [sp, #4]
 800a050:	4293      	cmp	r3, r2
 800a052:	dd07      	ble.n	800a064 <_dtoa_r+0xb64>
 800a054:	4651      	mov	r1, sl
 800a056:	2300      	movs	r3, #0
 800a058:	220a      	movs	r2, #10
 800a05a:	4620      	mov	r0, r4
 800a05c:	f000 f9a4 	bl	800a3a8 <__multadd>
 800a060:	4682      	mov	sl, r0
 800a062:	e7ea      	b.n	800a03a <_dtoa_r+0xb3a>
 800a064:	9b01      	ldr	r3, [sp, #4]
 800a066:	2b00      	cmp	r3, #0
 800a068:	bfc8      	it	gt
 800a06a:	461d      	movgt	r5, r3
 800a06c:	9b00      	ldr	r3, [sp, #0]
 800a06e:	bfd8      	it	le
 800a070:	2501      	movle	r5, #1
 800a072:	441d      	add	r5, r3
 800a074:	f04f 0800 	mov.w	r8, #0
 800a078:	4651      	mov	r1, sl
 800a07a:	2201      	movs	r2, #1
 800a07c:	4620      	mov	r0, r4
 800a07e:	f000 fb8b 	bl	800a798 <__lshift>
 800a082:	4631      	mov	r1, r6
 800a084:	4682      	mov	sl, r0
 800a086:	f000 fbf3 	bl	800a870 <__mcmp>
 800a08a:	2800      	cmp	r0, #0
 800a08c:	dc96      	bgt.n	8009fbc <_dtoa_r+0xabc>
 800a08e:	d102      	bne.n	800a096 <_dtoa_r+0xb96>
 800a090:	f019 0f01 	tst.w	r9, #1
 800a094:	d192      	bne.n	8009fbc <_dtoa_r+0xabc>
 800a096:	462b      	mov	r3, r5
 800a098:	461d      	mov	r5, r3
 800a09a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a09e:	2a30      	cmp	r2, #48	; 0x30
 800a0a0:	d0fa      	beq.n	800a098 <_dtoa_r+0xb98>
 800a0a2:	e6dd      	b.n	8009e60 <_dtoa_r+0x960>
 800a0a4:	9a00      	ldr	r2, [sp, #0]
 800a0a6:	429a      	cmp	r2, r3
 800a0a8:	d189      	bne.n	8009fbe <_dtoa_r+0xabe>
 800a0aa:	f10b 0b01 	add.w	fp, fp, #1
 800a0ae:	2331      	movs	r3, #49	; 0x31
 800a0b0:	e796      	b.n	8009fe0 <_dtoa_r+0xae0>
 800a0b2:	4b0a      	ldr	r3, [pc, #40]	; (800a0dc <_dtoa_r+0xbdc>)
 800a0b4:	f7ff ba99 	b.w	80095ea <_dtoa_r+0xea>
 800a0b8:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	f47f aa6d 	bne.w	800959a <_dtoa_r+0x9a>
 800a0c0:	4b07      	ldr	r3, [pc, #28]	; (800a0e0 <_dtoa_r+0xbe0>)
 800a0c2:	f7ff ba92 	b.w	80095ea <_dtoa_r+0xea>
 800a0c6:	9b01      	ldr	r3, [sp, #4]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	dcb5      	bgt.n	800a038 <_dtoa_r+0xb38>
 800a0cc:	9b07      	ldr	r3, [sp, #28]
 800a0ce:	2b02      	cmp	r3, #2
 800a0d0:	f73f aeb1 	bgt.w	8009e36 <_dtoa_r+0x936>
 800a0d4:	e7b0      	b.n	800a038 <_dtoa_r+0xb38>
 800a0d6:	bf00      	nop
 800a0d8:	0800cc41 	.word	0x0800cc41
 800a0dc:	0800cb9c 	.word	0x0800cb9c
 800a0e0:	0800cbc5 	.word	0x0800cbc5

0800a0e4 <_free_r>:
 800a0e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800a0e6:	2900      	cmp	r1, #0
 800a0e8:	d044      	beq.n	800a174 <_free_r+0x90>
 800a0ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a0ee:	9001      	str	r0, [sp, #4]
 800a0f0:	2b00      	cmp	r3, #0
 800a0f2:	f1a1 0404 	sub.w	r4, r1, #4
 800a0f6:	bfb8      	it	lt
 800a0f8:	18e4      	addlt	r4, r4, r3
 800a0fa:	f000 f8e7 	bl	800a2cc <__malloc_lock>
 800a0fe:	4a1e      	ldr	r2, [pc, #120]	; (800a178 <_free_r+0x94>)
 800a100:	9801      	ldr	r0, [sp, #4]
 800a102:	6813      	ldr	r3, [r2, #0]
 800a104:	b933      	cbnz	r3, 800a114 <_free_r+0x30>
 800a106:	6063      	str	r3, [r4, #4]
 800a108:	6014      	str	r4, [r2, #0]
 800a10a:	b003      	add	sp, #12
 800a10c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a110:	f000 b8e2 	b.w	800a2d8 <__malloc_unlock>
 800a114:	42a3      	cmp	r3, r4
 800a116:	d908      	bls.n	800a12a <_free_r+0x46>
 800a118:	6825      	ldr	r5, [r4, #0]
 800a11a:	1961      	adds	r1, r4, r5
 800a11c:	428b      	cmp	r3, r1
 800a11e:	bf01      	itttt	eq
 800a120:	6819      	ldreq	r1, [r3, #0]
 800a122:	685b      	ldreq	r3, [r3, #4]
 800a124:	1949      	addeq	r1, r1, r5
 800a126:	6021      	streq	r1, [r4, #0]
 800a128:	e7ed      	b.n	800a106 <_free_r+0x22>
 800a12a:	461a      	mov	r2, r3
 800a12c:	685b      	ldr	r3, [r3, #4]
 800a12e:	b10b      	cbz	r3, 800a134 <_free_r+0x50>
 800a130:	42a3      	cmp	r3, r4
 800a132:	d9fa      	bls.n	800a12a <_free_r+0x46>
 800a134:	6811      	ldr	r1, [r2, #0]
 800a136:	1855      	adds	r5, r2, r1
 800a138:	42a5      	cmp	r5, r4
 800a13a:	d10b      	bne.n	800a154 <_free_r+0x70>
 800a13c:	6824      	ldr	r4, [r4, #0]
 800a13e:	4421      	add	r1, r4
 800a140:	1854      	adds	r4, r2, r1
 800a142:	42a3      	cmp	r3, r4
 800a144:	6011      	str	r1, [r2, #0]
 800a146:	d1e0      	bne.n	800a10a <_free_r+0x26>
 800a148:	681c      	ldr	r4, [r3, #0]
 800a14a:	685b      	ldr	r3, [r3, #4]
 800a14c:	6053      	str	r3, [r2, #4]
 800a14e:	440c      	add	r4, r1
 800a150:	6014      	str	r4, [r2, #0]
 800a152:	e7da      	b.n	800a10a <_free_r+0x26>
 800a154:	d902      	bls.n	800a15c <_free_r+0x78>
 800a156:	230c      	movs	r3, #12
 800a158:	6003      	str	r3, [r0, #0]
 800a15a:	e7d6      	b.n	800a10a <_free_r+0x26>
 800a15c:	6825      	ldr	r5, [r4, #0]
 800a15e:	1961      	adds	r1, r4, r5
 800a160:	428b      	cmp	r3, r1
 800a162:	bf04      	itt	eq
 800a164:	6819      	ldreq	r1, [r3, #0]
 800a166:	685b      	ldreq	r3, [r3, #4]
 800a168:	6063      	str	r3, [r4, #4]
 800a16a:	bf04      	itt	eq
 800a16c:	1949      	addeq	r1, r1, r5
 800a16e:	6021      	streq	r1, [r4, #0]
 800a170:	6054      	str	r4, [r2, #4]
 800a172:	e7ca      	b.n	800a10a <_free_r+0x26>
 800a174:	b003      	add	sp, #12
 800a176:	bd30      	pop	{r4, r5, pc}
 800a178:	20000c88 	.word	0x20000c88

0800a17c <malloc>:
 800a17c:	4b02      	ldr	r3, [pc, #8]	; (800a188 <malloc+0xc>)
 800a17e:	4601      	mov	r1, r0
 800a180:	6818      	ldr	r0, [r3, #0]
 800a182:	f000 b823 	b.w	800a1cc <_malloc_r>
 800a186:	bf00      	nop
 800a188:	20000078 	.word	0x20000078

0800a18c <sbrk_aligned>:
 800a18c:	b570      	push	{r4, r5, r6, lr}
 800a18e:	4e0e      	ldr	r6, [pc, #56]	; (800a1c8 <sbrk_aligned+0x3c>)
 800a190:	460c      	mov	r4, r1
 800a192:	6831      	ldr	r1, [r6, #0]
 800a194:	4605      	mov	r5, r0
 800a196:	b911      	cbnz	r1, 800a19e <sbrk_aligned+0x12>
 800a198:	f001 fe1a 	bl	800bdd0 <_sbrk_r>
 800a19c:	6030      	str	r0, [r6, #0]
 800a19e:	4621      	mov	r1, r4
 800a1a0:	4628      	mov	r0, r5
 800a1a2:	f001 fe15 	bl	800bdd0 <_sbrk_r>
 800a1a6:	1c43      	adds	r3, r0, #1
 800a1a8:	d00a      	beq.n	800a1c0 <sbrk_aligned+0x34>
 800a1aa:	1cc4      	adds	r4, r0, #3
 800a1ac:	f024 0403 	bic.w	r4, r4, #3
 800a1b0:	42a0      	cmp	r0, r4
 800a1b2:	d007      	beq.n	800a1c4 <sbrk_aligned+0x38>
 800a1b4:	1a21      	subs	r1, r4, r0
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	f001 fe0a 	bl	800bdd0 <_sbrk_r>
 800a1bc:	3001      	adds	r0, #1
 800a1be:	d101      	bne.n	800a1c4 <sbrk_aligned+0x38>
 800a1c0:	f04f 34ff 	mov.w	r4, #4294967295
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	bd70      	pop	{r4, r5, r6, pc}
 800a1c8:	20000c8c 	.word	0x20000c8c

0800a1cc <_malloc_r>:
 800a1cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a1d0:	1ccd      	adds	r5, r1, #3
 800a1d2:	f025 0503 	bic.w	r5, r5, #3
 800a1d6:	3508      	adds	r5, #8
 800a1d8:	2d0c      	cmp	r5, #12
 800a1da:	bf38      	it	cc
 800a1dc:	250c      	movcc	r5, #12
 800a1de:	2d00      	cmp	r5, #0
 800a1e0:	4607      	mov	r7, r0
 800a1e2:	db01      	blt.n	800a1e8 <_malloc_r+0x1c>
 800a1e4:	42a9      	cmp	r1, r5
 800a1e6:	d905      	bls.n	800a1f4 <_malloc_r+0x28>
 800a1e8:	230c      	movs	r3, #12
 800a1ea:	603b      	str	r3, [r7, #0]
 800a1ec:	2600      	movs	r6, #0
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1f4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800a2c8 <_malloc_r+0xfc>
 800a1f8:	f000 f868 	bl	800a2cc <__malloc_lock>
 800a1fc:	f8d8 3000 	ldr.w	r3, [r8]
 800a200:	461c      	mov	r4, r3
 800a202:	bb5c      	cbnz	r4, 800a25c <_malloc_r+0x90>
 800a204:	4629      	mov	r1, r5
 800a206:	4638      	mov	r0, r7
 800a208:	f7ff ffc0 	bl	800a18c <sbrk_aligned>
 800a20c:	1c43      	adds	r3, r0, #1
 800a20e:	4604      	mov	r4, r0
 800a210:	d155      	bne.n	800a2be <_malloc_r+0xf2>
 800a212:	f8d8 4000 	ldr.w	r4, [r8]
 800a216:	4626      	mov	r6, r4
 800a218:	2e00      	cmp	r6, #0
 800a21a:	d145      	bne.n	800a2a8 <_malloc_r+0xdc>
 800a21c:	2c00      	cmp	r4, #0
 800a21e:	d048      	beq.n	800a2b2 <_malloc_r+0xe6>
 800a220:	6823      	ldr	r3, [r4, #0]
 800a222:	4631      	mov	r1, r6
 800a224:	4638      	mov	r0, r7
 800a226:	eb04 0903 	add.w	r9, r4, r3
 800a22a:	f001 fdd1 	bl	800bdd0 <_sbrk_r>
 800a22e:	4581      	cmp	r9, r0
 800a230:	d13f      	bne.n	800a2b2 <_malloc_r+0xe6>
 800a232:	6821      	ldr	r1, [r4, #0]
 800a234:	1a6d      	subs	r5, r5, r1
 800a236:	4629      	mov	r1, r5
 800a238:	4638      	mov	r0, r7
 800a23a:	f7ff ffa7 	bl	800a18c <sbrk_aligned>
 800a23e:	3001      	adds	r0, #1
 800a240:	d037      	beq.n	800a2b2 <_malloc_r+0xe6>
 800a242:	6823      	ldr	r3, [r4, #0]
 800a244:	442b      	add	r3, r5
 800a246:	6023      	str	r3, [r4, #0]
 800a248:	f8d8 3000 	ldr.w	r3, [r8]
 800a24c:	2b00      	cmp	r3, #0
 800a24e:	d038      	beq.n	800a2c2 <_malloc_r+0xf6>
 800a250:	685a      	ldr	r2, [r3, #4]
 800a252:	42a2      	cmp	r2, r4
 800a254:	d12b      	bne.n	800a2ae <_malloc_r+0xe2>
 800a256:	2200      	movs	r2, #0
 800a258:	605a      	str	r2, [r3, #4]
 800a25a:	e00f      	b.n	800a27c <_malloc_r+0xb0>
 800a25c:	6822      	ldr	r2, [r4, #0]
 800a25e:	1b52      	subs	r2, r2, r5
 800a260:	d41f      	bmi.n	800a2a2 <_malloc_r+0xd6>
 800a262:	2a0b      	cmp	r2, #11
 800a264:	d917      	bls.n	800a296 <_malloc_r+0xca>
 800a266:	1961      	adds	r1, r4, r5
 800a268:	42a3      	cmp	r3, r4
 800a26a:	6025      	str	r5, [r4, #0]
 800a26c:	bf18      	it	ne
 800a26e:	6059      	strne	r1, [r3, #4]
 800a270:	6863      	ldr	r3, [r4, #4]
 800a272:	bf08      	it	eq
 800a274:	f8c8 1000 	streq.w	r1, [r8]
 800a278:	5162      	str	r2, [r4, r5]
 800a27a:	604b      	str	r3, [r1, #4]
 800a27c:	4638      	mov	r0, r7
 800a27e:	f104 060b 	add.w	r6, r4, #11
 800a282:	f000 f829 	bl	800a2d8 <__malloc_unlock>
 800a286:	f026 0607 	bic.w	r6, r6, #7
 800a28a:	1d23      	adds	r3, r4, #4
 800a28c:	1af2      	subs	r2, r6, r3
 800a28e:	d0ae      	beq.n	800a1ee <_malloc_r+0x22>
 800a290:	1b9b      	subs	r3, r3, r6
 800a292:	50a3      	str	r3, [r4, r2]
 800a294:	e7ab      	b.n	800a1ee <_malloc_r+0x22>
 800a296:	42a3      	cmp	r3, r4
 800a298:	6862      	ldr	r2, [r4, #4]
 800a29a:	d1dd      	bne.n	800a258 <_malloc_r+0x8c>
 800a29c:	f8c8 2000 	str.w	r2, [r8]
 800a2a0:	e7ec      	b.n	800a27c <_malloc_r+0xb0>
 800a2a2:	4623      	mov	r3, r4
 800a2a4:	6864      	ldr	r4, [r4, #4]
 800a2a6:	e7ac      	b.n	800a202 <_malloc_r+0x36>
 800a2a8:	4634      	mov	r4, r6
 800a2aa:	6876      	ldr	r6, [r6, #4]
 800a2ac:	e7b4      	b.n	800a218 <_malloc_r+0x4c>
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	e7cc      	b.n	800a24c <_malloc_r+0x80>
 800a2b2:	230c      	movs	r3, #12
 800a2b4:	603b      	str	r3, [r7, #0]
 800a2b6:	4638      	mov	r0, r7
 800a2b8:	f000 f80e 	bl	800a2d8 <__malloc_unlock>
 800a2bc:	e797      	b.n	800a1ee <_malloc_r+0x22>
 800a2be:	6025      	str	r5, [r4, #0]
 800a2c0:	e7dc      	b.n	800a27c <_malloc_r+0xb0>
 800a2c2:	605b      	str	r3, [r3, #4]
 800a2c4:	deff      	udf	#255	; 0xff
 800a2c6:	bf00      	nop
 800a2c8:	20000c88 	.word	0x20000c88

0800a2cc <__malloc_lock>:
 800a2cc:	4801      	ldr	r0, [pc, #4]	; (800a2d4 <__malloc_lock+0x8>)
 800a2ce:	f7ff b884 	b.w	80093da <__retarget_lock_acquire_recursive>
 800a2d2:	bf00      	nop
 800a2d4:	20000c84 	.word	0x20000c84

0800a2d8 <__malloc_unlock>:
 800a2d8:	4801      	ldr	r0, [pc, #4]	; (800a2e0 <__malloc_unlock+0x8>)
 800a2da:	f7ff b87f 	b.w	80093dc <__retarget_lock_release_recursive>
 800a2de:	bf00      	nop
 800a2e0:	20000c84 	.word	0x20000c84

0800a2e4 <_Balloc>:
 800a2e4:	b570      	push	{r4, r5, r6, lr}
 800a2e6:	69c6      	ldr	r6, [r0, #28]
 800a2e8:	4604      	mov	r4, r0
 800a2ea:	460d      	mov	r5, r1
 800a2ec:	b976      	cbnz	r6, 800a30c <_Balloc+0x28>
 800a2ee:	2010      	movs	r0, #16
 800a2f0:	f7ff ff44 	bl	800a17c <malloc>
 800a2f4:	4602      	mov	r2, r0
 800a2f6:	61e0      	str	r0, [r4, #28]
 800a2f8:	b920      	cbnz	r0, 800a304 <_Balloc+0x20>
 800a2fa:	4b18      	ldr	r3, [pc, #96]	; (800a35c <_Balloc+0x78>)
 800a2fc:	4818      	ldr	r0, [pc, #96]	; (800a360 <_Balloc+0x7c>)
 800a2fe:	216b      	movs	r1, #107	; 0x6b
 800a300:	f001 fd8e 	bl	800be20 <__assert_func>
 800a304:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a308:	6006      	str	r6, [r0, #0]
 800a30a:	60c6      	str	r6, [r0, #12]
 800a30c:	69e6      	ldr	r6, [r4, #28]
 800a30e:	68f3      	ldr	r3, [r6, #12]
 800a310:	b183      	cbz	r3, 800a334 <_Balloc+0x50>
 800a312:	69e3      	ldr	r3, [r4, #28]
 800a314:	68db      	ldr	r3, [r3, #12]
 800a316:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a31a:	b9b8      	cbnz	r0, 800a34c <_Balloc+0x68>
 800a31c:	2101      	movs	r1, #1
 800a31e:	fa01 f605 	lsl.w	r6, r1, r5
 800a322:	1d72      	adds	r2, r6, #5
 800a324:	0092      	lsls	r2, r2, #2
 800a326:	4620      	mov	r0, r4
 800a328:	f001 fd98 	bl	800be5c <_calloc_r>
 800a32c:	b160      	cbz	r0, 800a348 <_Balloc+0x64>
 800a32e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a332:	e00e      	b.n	800a352 <_Balloc+0x6e>
 800a334:	2221      	movs	r2, #33	; 0x21
 800a336:	2104      	movs	r1, #4
 800a338:	4620      	mov	r0, r4
 800a33a:	f001 fd8f 	bl	800be5c <_calloc_r>
 800a33e:	69e3      	ldr	r3, [r4, #28]
 800a340:	60f0      	str	r0, [r6, #12]
 800a342:	68db      	ldr	r3, [r3, #12]
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1e4      	bne.n	800a312 <_Balloc+0x2e>
 800a348:	2000      	movs	r0, #0
 800a34a:	bd70      	pop	{r4, r5, r6, pc}
 800a34c:	6802      	ldr	r2, [r0, #0]
 800a34e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a352:	2300      	movs	r3, #0
 800a354:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a358:	e7f7      	b.n	800a34a <_Balloc+0x66>
 800a35a:	bf00      	nop
 800a35c:	0800cbd2 	.word	0x0800cbd2
 800a360:	0800cc52 	.word	0x0800cc52

0800a364 <_Bfree>:
 800a364:	b570      	push	{r4, r5, r6, lr}
 800a366:	69c6      	ldr	r6, [r0, #28]
 800a368:	4605      	mov	r5, r0
 800a36a:	460c      	mov	r4, r1
 800a36c:	b976      	cbnz	r6, 800a38c <_Bfree+0x28>
 800a36e:	2010      	movs	r0, #16
 800a370:	f7ff ff04 	bl	800a17c <malloc>
 800a374:	4602      	mov	r2, r0
 800a376:	61e8      	str	r0, [r5, #28]
 800a378:	b920      	cbnz	r0, 800a384 <_Bfree+0x20>
 800a37a:	4b09      	ldr	r3, [pc, #36]	; (800a3a0 <_Bfree+0x3c>)
 800a37c:	4809      	ldr	r0, [pc, #36]	; (800a3a4 <_Bfree+0x40>)
 800a37e:	218f      	movs	r1, #143	; 0x8f
 800a380:	f001 fd4e 	bl	800be20 <__assert_func>
 800a384:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a388:	6006      	str	r6, [r0, #0]
 800a38a:	60c6      	str	r6, [r0, #12]
 800a38c:	b13c      	cbz	r4, 800a39e <_Bfree+0x3a>
 800a38e:	69eb      	ldr	r3, [r5, #28]
 800a390:	6862      	ldr	r2, [r4, #4]
 800a392:	68db      	ldr	r3, [r3, #12]
 800a394:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a398:	6021      	str	r1, [r4, #0]
 800a39a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a39e:	bd70      	pop	{r4, r5, r6, pc}
 800a3a0:	0800cbd2 	.word	0x0800cbd2
 800a3a4:	0800cc52 	.word	0x0800cc52

0800a3a8 <__multadd>:
 800a3a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a3ac:	690d      	ldr	r5, [r1, #16]
 800a3ae:	4607      	mov	r7, r0
 800a3b0:	460c      	mov	r4, r1
 800a3b2:	461e      	mov	r6, r3
 800a3b4:	f101 0c14 	add.w	ip, r1, #20
 800a3b8:	2000      	movs	r0, #0
 800a3ba:	f8dc 3000 	ldr.w	r3, [ip]
 800a3be:	b299      	uxth	r1, r3
 800a3c0:	fb02 6101 	mla	r1, r2, r1, r6
 800a3c4:	0c1e      	lsrs	r6, r3, #16
 800a3c6:	0c0b      	lsrs	r3, r1, #16
 800a3c8:	fb02 3306 	mla	r3, r2, r6, r3
 800a3cc:	b289      	uxth	r1, r1
 800a3ce:	3001      	adds	r0, #1
 800a3d0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a3d4:	4285      	cmp	r5, r0
 800a3d6:	f84c 1b04 	str.w	r1, [ip], #4
 800a3da:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a3de:	dcec      	bgt.n	800a3ba <__multadd+0x12>
 800a3e0:	b30e      	cbz	r6, 800a426 <__multadd+0x7e>
 800a3e2:	68a3      	ldr	r3, [r4, #8]
 800a3e4:	42ab      	cmp	r3, r5
 800a3e6:	dc19      	bgt.n	800a41c <__multadd+0x74>
 800a3e8:	6861      	ldr	r1, [r4, #4]
 800a3ea:	4638      	mov	r0, r7
 800a3ec:	3101      	adds	r1, #1
 800a3ee:	f7ff ff79 	bl	800a2e4 <_Balloc>
 800a3f2:	4680      	mov	r8, r0
 800a3f4:	b928      	cbnz	r0, 800a402 <__multadd+0x5a>
 800a3f6:	4602      	mov	r2, r0
 800a3f8:	4b0c      	ldr	r3, [pc, #48]	; (800a42c <__multadd+0x84>)
 800a3fa:	480d      	ldr	r0, [pc, #52]	; (800a430 <__multadd+0x88>)
 800a3fc:	21ba      	movs	r1, #186	; 0xba
 800a3fe:	f001 fd0f 	bl	800be20 <__assert_func>
 800a402:	6922      	ldr	r2, [r4, #16]
 800a404:	3202      	adds	r2, #2
 800a406:	f104 010c 	add.w	r1, r4, #12
 800a40a:	0092      	lsls	r2, r2, #2
 800a40c:	300c      	adds	r0, #12
 800a40e:	f001 fcef 	bl	800bdf0 <memcpy>
 800a412:	4621      	mov	r1, r4
 800a414:	4638      	mov	r0, r7
 800a416:	f7ff ffa5 	bl	800a364 <_Bfree>
 800a41a:	4644      	mov	r4, r8
 800a41c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a420:	3501      	adds	r5, #1
 800a422:	615e      	str	r6, [r3, #20]
 800a424:	6125      	str	r5, [r4, #16]
 800a426:	4620      	mov	r0, r4
 800a428:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a42c:	0800cc41 	.word	0x0800cc41
 800a430:	0800cc52 	.word	0x0800cc52

0800a434 <__s2b>:
 800a434:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a438:	460c      	mov	r4, r1
 800a43a:	4615      	mov	r5, r2
 800a43c:	461f      	mov	r7, r3
 800a43e:	2209      	movs	r2, #9
 800a440:	3308      	adds	r3, #8
 800a442:	4606      	mov	r6, r0
 800a444:	fb93 f3f2 	sdiv	r3, r3, r2
 800a448:	2100      	movs	r1, #0
 800a44a:	2201      	movs	r2, #1
 800a44c:	429a      	cmp	r2, r3
 800a44e:	db09      	blt.n	800a464 <__s2b+0x30>
 800a450:	4630      	mov	r0, r6
 800a452:	f7ff ff47 	bl	800a2e4 <_Balloc>
 800a456:	b940      	cbnz	r0, 800a46a <__s2b+0x36>
 800a458:	4602      	mov	r2, r0
 800a45a:	4b19      	ldr	r3, [pc, #100]	; (800a4c0 <__s2b+0x8c>)
 800a45c:	4819      	ldr	r0, [pc, #100]	; (800a4c4 <__s2b+0x90>)
 800a45e:	21d3      	movs	r1, #211	; 0xd3
 800a460:	f001 fcde 	bl	800be20 <__assert_func>
 800a464:	0052      	lsls	r2, r2, #1
 800a466:	3101      	adds	r1, #1
 800a468:	e7f0      	b.n	800a44c <__s2b+0x18>
 800a46a:	9b08      	ldr	r3, [sp, #32]
 800a46c:	6143      	str	r3, [r0, #20]
 800a46e:	2d09      	cmp	r5, #9
 800a470:	f04f 0301 	mov.w	r3, #1
 800a474:	6103      	str	r3, [r0, #16]
 800a476:	dd16      	ble.n	800a4a6 <__s2b+0x72>
 800a478:	f104 0909 	add.w	r9, r4, #9
 800a47c:	46c8      	mov	r8, r9
 800a47e:	442c      	add	r4, r5
 800a480:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a484:	4601      	mov	r1, r0
 800a486:	3b30      	subs	r3, #48	; 0x30
 800a488:	220a      	movs	r2, #10
 800a48a:	4630      	mov	r0, r6
 800a48c:	f7ff ff8c 	bl	800a3a8 <__multadd>
 800a490:	45a0      	cmp	r8, r4
 800a492:	d1f5      	bne.n	800a480 <__s2b+0x4c>
 800a494:	f1a5 0408 	sub.w	r4, r5, #8
 800a498:	444c      	add	r4, r9
 800a49a:	1b2d      	subs	r5, r5, r4
 800a49c:	1963      	adds	r3, r4, r5
 800a49e:	42bb      	cmp	r3, r7
 800a4a0:	db04      	blt.n	800a4ac <__s2b+0x78>
 800a4a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a4a6:	340a      	adds	r4, #10
 800a4a8:	2509      	movs	r5, #9
 800a4aa:	e7f6      	b.n	800a49a <__s2b+0x66>
 800a4ac:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a4b0:	4601      	mov	r1, r0
 800a4b2:	3b30      	subs	r3, #48	; 0x30
 800a4b4:	220a      	movs	r2, #10
 800a4b6:	4630      	mov	r0, r6
 800a4b8:	f7ff ff76 	bl	800a3a8 <__multadd>
 800a4bc:	e7ee      	b.n	800a49c <__s2b+0x68>
 800a4be:	bf00      	nop
 800a4c0:	0800cc41 	.word	0x0800cc41
 800a4c4:	0800cc52 	.word	0x0800cc52

0800a4c8 <__hi0bits>:
 800a4c8:	0c03      	lsrs	r3, r0, #16
 800a4ca:	041b      	lsls	r3, r3, #16
 800a4cc:	b9d3      	cbnz	r3, 800a504 <__hi0bits+0x3c>
 800a4ce:	0400      	lsls	r0, r0, #16
 800a4d0:	2310      	movs	r3, #16
 800a4d2:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a4d6:	bf04      	itt	eq
 800a4d8:	0200      	lsleq	r0, r0, #8
 800a4da:	3308      	addeq	r3, #8
 800a4dc:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a4e0:	bf04      	itt	eq
 800a4e2:	0100      	lsleq	r0, r0, #4
 800a4e4:	3304      	addeq	r3, #4
 800a4e6:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a4ea:	bf04      	itt	eq
 800a4ec:	0080      	lsleq	r0, r0, #2
 800a4ee:	3302      	addeq	r3, #2
 800a4f0:	2800      	cmp	r0, #0
 800a4f2:	db05      	blt.n	800a500 <__hi0bits+0x38>
 800a4f4:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a4f8:	f103 0301 	add.w	r3, r3, #1
 800a4fc:	bf08      	it	eq
 800a4fe:	2320      	moveq	r3, #32
 800a500:	4618      	mov	r0, r3
 800a502:	4770      	bx	lr
 800a504:	2300      	movs	r3, #0
 800a506:	e7e4      	b.n	800a4d2 <__hi0bits+0xa>

0800a508 <__lo0bits>:
 800a508:	6803      	ldr	r3, [r0, #0]
 800a50a:	f013 0207 	ands.w	r2, r3, #7
 800a50e:	d00c      	beq.n	800a52a <__lo0bits+0x22>
 800a510:	07d9      	lsls	r1, r3, #31
 800a512:	d422      	bmi.n	800a55a <__lo0bits+0x52>
 800a514:	079a      	lsls	r2, r3, #30
 800a516:	bf49      	itett	mi
 800a518:	085b      	lsrmi	r3, r3, #1
 800a51a:	089b      	lsrpl	r3, r3, #2
 800a51c:	6003      	strmi	r3, [r0, #0]
 800a51e:	2201      	movmi	r2, #1
 800a520:	bf5c      	itt	pl
 800a522:	6003      	strpl	r3, [r0, #0]
 800a524:	2202      	movpl	r2, #2
 800a526:	4610      	mov	r0, r2
 800a528:	4770      	bx	lr
 800a52a:	b299      	uxth	r1, r3
 800a52c:	b909      	cbnz	r1, 800a532 <__lo0bits+0x2a>
 800a52e:	0c1b      	lsrs	r3, r3, #16
 800a530:	2210      	movs	r2, #16
 800a532:	b2d9      	uxtb	r1, r3
 800a534:	b909      	cbnz	r1, 800a53a <__lo0bits+0x32>
 800a536:	3208      	adds	r2, #8
 800a538:	0a1b      	lsrs	r3, r3, #8
 800a53a:	0719      	lsls	r1, r3, #28
 800a53c:	bf04      	itt	eq
 800a53e:	091b      	lsreq	r3, r3, #4
 800a540:	3204      	addeq	r2, #4
 800a542:	0799      	lsls	r1, r3, #30
 800a544:	bf04      	itt	eq
 800a546:	089b      	lsreq	r3, r3, #2
 800a548:	3202      	addeq	r2, #2
 800a54a:	07d9      	lsls	r1, r3, #31
 800a54c:	d403      	bmi.n	800a556 <__lo0bits+0x4e>
 800a54e:	085b      	lsrs	r3, r3, #1
 800a550:	f102 0201 	add.w	r2, r2, #1
 800a554:	d003      	beq.n	800a55e <__lo0bits+0x56>
 800a556:	6003      	str	r3, [r0, #0]
 800a558:	e7e5      	b.n	800a526 <__lo0bits+0x1e>
 800a55a:	2200      	movs	r2, #0
 800a55c:	e7e3      	b.n	800a526 <__lo0bits+0x1e>
 800a55e:	2220      	movs	r2, #32
 800a560:	e7e1      	b.n	800a526 <__lo0bits+0x1e>
	...

0800a564 <__i2b>:
 800a564:	b510      	push	{r4, lr}
 800a566:	460c      	mov	r4, r1
 800a568:	2101      	movs	r1, #1
 800a56a:	f7ff febb 	bl	800a2e4 <_Balloc>
 800a56e:	4602      	mov	r2, r0
 800a570:	b928      	cbnz	r0, 800a57e <__i2b+0x1a>
 800a572:	4b05      	ldr	r3, [pc, #20]	; (800a588 <__i2b+0x24>)
 800a574:	4805      	ldr	r0, [pc, #20]	; (800a58c <__i2b+0x28>)
 800a576:	f240 1145 	movw	r1, #325	; 0x145
 800a57a:	f001 fc51 	bl	800be20 <__assert_func>
 800a57e:	2301      	movs	r3, #1
 800a580:	6144      	str	r4, [r0, #20]
 800a582:	6103      	str	r3, [r0, #16]
 800a584:	bd10      	pop	{r4, pc}
 800a586:	bf00      	nop
 800a588:	0800cc41 	.word	0x0800cc41
 800a58c:	0800cc52 	.word	0x0800cc52

0800a590 <__multiply>:
 800a590:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a594:	4691      	mov	r9, r2
 800a596:	690a      	ldr	r2, [r1, #16]
 800a598:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a59c:	429a      	cmp	r2, r3
 800a59e:	bfb8      	it	lt
 800a5a0:	460b      	movlt	r3, r1
 800a5a2:	460c      	mov	r4, r1
 800a5a4:	bfbc      	itt	lt
 800a5a6:	464c      	movlt	r4, r9
 800a5a8:	4699      	movlt	r9, r3
 800a5aa:	6927      	ldr	r7, [r4, #16]
 800a5ac:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a5b0:	68a3      	ldr	r3, [r4, #8]
 800a5b2:	6861      	ldr	r1, [r4, #4]
 800a5b4:	eb07 060a 	add.w	r6, r7, sl
 800a5b8:	42b3      	cmp	r3, r6
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	bfb8      	it	lt
 800a5be:	3101      	addlt	r1, #1
 800a5c0:	f7ff fe90 	bl	800a2e4 <_Balloc>
 800a5c4:	b930      	cbnz	r0, 800a5d4 <__multiply+0x44>
 800a5c6:	4602      	mov	r2, r0
 800a5c8:	4b44      	ldr	r3, [pc, #272]	; (800a6dc <__multiply+0x14c>)
 800a5ca:	4845      	ldr	r0, [pc, #276]	; (800a6e0 <__multiply+0x150>)
 800a5cc:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800a5d0:	f001 fc26 	bl	800be20 <__assert_func>
 800a5d4:	f100 0514 	add.w	r5, r0, #20
 800a5d8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a5dc:	462b      	mov	r3, r5
 800a5de:	2200      	movs	r2, #0
 800a5e0:	4543      	cmp	r3, r8
 800a5e2:	d321      	bcc.n	800a628 <__multiply+0x98>
 800a5e4:	f104 0314 	add.w	r3, r4, #20
 800a5e8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a5ec:	f109 0314 	add.w	r3, r9, #20
 800a5f0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a5f4:	9202      	str	r2, [sp, #8]
 800a5f6:	1b3a      	subs	r2, r7, r4
 800a5f8:	3a15      	subs	r2, #21
 800a5fa:	f022 0203 	bic.w	r2, r2, #3
 800a5fe:	3204      	adds	r2, #4
 800a600:	f104 0115 	add.w	r1, r4, #21
 800a604:	428f      	cmp	r7, r1
 800a606:	bf38      	it	cc
 800a608:	2204      	movcc	r2, #4
 800a60a:	9201      	str	r2, [sp, #4]
 800a60c:	9a02      	ldr	r2, [sp, #8]
 800a60e:	9303      	str	r3, [sp, #12]
 800a610:	429a      	cmp	r2, r3
 800a612:	d80c      	bhi.n	800a62e <__multiply+0x9e>
 800a614:	2e00      	cmp	r6, #0
 800a616:	dd03      	ble.n	800a620 <__multiply+0x90>
 800a618:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d05b      	beq.n	800a6d8 <__multiply+0x148>
 800a620:	6106      	str	r6, [r0, #16]
 800a622:	b005      	add	sp, #20
 800a624:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a628:	f843 2b04 	str.w	r2, [r3], #4
 800a62c:	e7d8      	b.n	800a5e0 <__multiply+0x50>
 800a62e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a632:	f1ba 0f00 	cmp.w	sl, #0
 800a636:	d024      	beq.n	800a682 <__multiply+0xf2>
 800a638:	f104 0e14 	add.w	lr, r4, #20
 800a63c:	46a9      	mov	r9, r5
 800a63e:	f04f 0c00 	mov.w	ip, #0
 800a642:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a646:	f8d9 1000 	ldr.w	r1, [r9]
 800a64a:	fa1f fb82 	uxth.w	fp, r2
 800a64e:	b289      	uxth	r1, r1
 800a650:	fb0a 110b 	mla	r1, sl, fp, r1
 800a654:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a658:	f8d9 2000 	ldr.w	r2, [r9]
 800a65c:	4461      	add	r1, ip
 800a65e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a662:	fb0a c20b 	mla	r2, sl, fp, ip
 800a666:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a66a:	b289      	uxth	r1, r1
 800a66c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a670:	4577      	cmp	r7, lr
 800a672:	f849 1b04 	str.w	r1, [r9], #4
 800a676:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a67a:	d8e2      	bhi.n	800a642 <__multiply+0xb2>
 800a67c:	9a01      	ldr	r2, [sp, #4]
 800a67e:	f845 c002 	str.w	ip, [r5, r2]
 800a682:	9a03      	ldr	r2, [sp, #12]
 800a684:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a688:	3304      	adds	r3, #4
 800a68a:	f1b9 0f00 	cmp.w	r9, #0
 800a68e:	d021      	beq.n	800a6d4 <__multiply+0x144>
 800a690:	6829      	ldr	r1, [r5, #0]
 800a692:	f104 0c14 	add.w	ip, r4, #20
 800a696:	46ae      	mov	lr, r5
 800a698:	f04f 0a00 	mov.w	sl, #0
 800a69c:	f8bc b000 	ldrh.w	fp, [ip]
 800a6a0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800a6a4:	fb09 220b 	mla	r2, r9, fp, r2
 800a6a8:	4452      	add	r2, sl
 800a6aa:	b289      	uxth	r1, r1
 800a6ac:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a6b0:	f84e 1b04 	str.w	r1, [lr], #4
 800a6b4:	f85c 1b04 	ldr.w	r1, [ip], #4
 800a6b8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a6bc:	f8be 1000 	ldrh.w	r1, [lr]
 800a6c0:	fb09 110a 	mla	r1, r9, sl, r1
 800a6c4:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800a6c8:	4567      	cmp	r7, ip
 800a6ca:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800a6ce:	d8e5      	bhi.n	800a69c <__multiply+0x10c>
 800a6d0:	9a01      	ldr	r2, [sp, #4]
 800a6d2:	50a9      	str	r1, [r5, r2]
 800a6d4:	3504      	adds	r5, #4
 800a6d6:	e799      	b.n	800a60c <__multiply+0x7c>
 800a6d8:	3e01      	subs	r6, #1
 800a6da:	e79b      	b.n	800a614 <__multiply+0x84>
 800a6dc:	0800cc41 	.word	0x0800cc41
 800a6e0:	0800cc52 	.word	0x0800cc52

0800a6e4 <__pow5mult>:
 800a6e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a6e8:	4615      	mov	r5, r2
 800a6ea:	f012 0203 	ands.w	r2, r2, #3
 800a6ee:	4606      	mov	r6, r0
 800a6f0:	460f      	mov	r7, r1
 800a6f2:	d007      	beq.n	800a704 <__pow5mult+0x20>
 800a6f4:	4c25      	ldr	r4, [pc, #148]	; (800a78c <__pow5mult+0xa8>)
 800a6f6:	3a01      	subs	r2, #1
 800a6f8:	2300      	movs	r3, #0
 800a6fa:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a6fe:	f7ff fe53 	bl	800a3a8 <__multadd>
 800a702:	4607      	mov	r7, r0
 800a704:	10ad      	asrs	r5, r5, #2
 800a706:	d03d      	beq.n	800a784 <__pow5mult+0xa0>
 800a708:	69f4      	ldr	r4, [r6, #28]
 800a70a:	b97c      	cbnz	r4, 800a72c <__pow5mult+0x48>
 800a70c:	2010      	movs	r0, #16
 800a70e:	f7ff fd35 	bl	800a17c <malloc>
 800a712:	4602      	mov	r2, r0
 800a714:	61f0      	str	r0, [r6, #28]
 800a716:	b928      	cbnz	r0, 800a724 <__pow5mult+0x40>
 800a718:	4b1d      	ldr	r3, [pc, #116]	; (800a790 <__pow5mult+0xac>)
 800a71a:	481e      	ldr	r0, [pc, #120]	; (800a794 <__pow5mult+0xb0>)
 800a71c:	f240 11b3 	movw	r1, #435	; 0x1b3
 800a720:	f001 fb7e 	bl	800be20 <__assert_func>
 800a724:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a728:	6004      	str	r4, [r0, #0]
 800a72a:	60c4      	str	r4, [r0, #12]
 800a72c:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800a730:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a734:	b94c      	cbnz	r4, 800a74a <__pow5mult+0x66>
 800a736:	f240 2171 	movw	r1, #625	; 0x271
 800a73a:	4630      	mov	r0, r6
 800a73c:	f7ff ff12 	bl	800a564 <__i2b>
 800a740:	2300      	movs	r3, #0
 800a742:	f8c8 0008 	str.w	r0, [r8, #8]
 800a746:	4604      	mov	r4, r0
 800a748:	6003      	str	r3, [r0, #0]
 800a74a:	f04f 0900 	mov.w	r9, #0
 800a74e:	07eb      	lsls	r3, r5, #31
 800a750:	d50a      	bpl.n	800a768 <__pow5mult+0x84>
 800a752:	4639      	mov	r1, r7
 800a754:	4622      	mov	r2, r4
 800a756:	4630      	mov	r0, r6
 800a758:	f7ff ff1a 	bl	800a590 <__multiply>
 800a75c:	4639      	mov	r1, r7
 800a75e:	4680      	mov	r8, r0
 800a760:	4630      	mov	r0, r6
 800a762:	f7ff fdff 	bl	800a364 <_Bfree>
 800a766:	4647      	mov	r7, r8
 800a768:	106d      	asrs	r5, r5, #1
 800a76a:	d00b      	beq.n	800a784 <__pow5mult+0xa0>
 800a76c:	6820      	ldr	r0, [r4, #0]
 800a76e:	b938      	cbnz	r0, 800a780 <__pow5mult+0x9c>
 800a770:	4622      	mov	r2, r4
 800a772:	4621      	mov	r1, r4
 800a774:	4630      	mov	r0, r6
 800a776:	f7ff ff0b 	bl	800a590 <__multiply>
 800a77a:	6020      	str	r0, [r4, #0]
 800a77c:	f8c0 9000 	str.w	r9, [r0]
 800a780:	4604      	mov	r4, r0
 800a782:	e7e4      	b.n	800a74e <__pow5mult+0x6a>
 800a784:	4638      	mov	r0, r7
 800a786:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a78a:	bf00      	nop
 800a78c:	0800cda0 	.word	0x0800cda0
 800a790:	0800cbd2 	.word	0x0800cbd2
 800a794:	0800cc52 	.word	0x0800cc52

0800a798 <__lshift>:
 800a798:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a79c:	460c      	mov	r4, r1
 800a79e:	6849      	ldr	r1, [r1, #4]
 800a7a0:	6923      	ldr	r3, [r4, #16]
 800a7a2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a7a6:	68a3      	ldr	r3, [r4, #8]
 800a7a8:	4607      	mov	r7, r0
 800a7aa:	4691      	mov	r9, r2
 800a7ac:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a7b0:	f108 0601 	add.w	r6, r8, #1
 800a7b4:	42b3      	cmp	r3, r6
 800a7b6:	db0b      	blt.n	800a7d0 <__lshift+0x38>
 800a7b8:	4638      	mov	r0, r7
 800a7ba:	f7ff fd93 	bl	800a2e4 <_Balloc>
 800a7be:	4605      	mov	r5, r0
 800a7c0:	b948      	cbnz	r0, 800a7d6 <__lshift+0x3e>
 800a7c2:	4602      	mov	r2, r0
 800a7c4:	4b28      	ldr	r3, [pc, #160]	; (800a868 <__lshift+0xd0>)
 800a7c6:	4829      	ldr	r0, [pc, #164]	; (800a86c <__lshift+0xd4>)
 800a7c8:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800a7cc:	f001 fb28 	bl	800be20 <__assert_func>
 800a7d0:	3101      	adds	r1, #1
 800a7d2:	005b      	lsls	r3, r3, #1
 800a7d4:	e7ee      	b.n	800a7b4 <__lshift+0x1c>
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	f100 0114 	add.w	r1, r0, #20
 800a7dc:	f100 0210 	add.w	r2, r0, #16
 800a7e0:	4618      	mov	r0, r3
 800a7e2:	4553      	cmp	r3, sl
 800a7e4:	db33      	blt.n	800a84e <__lshift+0xb6>
 800a7e6:	6920      	ldr	r0, [r4, #16]
 800a7e8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a7ec:	f104 0314 	add.w	r3, r4, #20
 800a7f0:	f019 091f 	ands.w	r9, r9, #31
 800a7f4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a7f8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a7fc:	d02b      	beq.n	800a856 <__lshift+0xbe>
 800a7fe:	f1c9 0e20 	rsb	lr, r9, #32
 800a802:	468a      	mov	sl, r1
 800a804:	2200      	movs	r2, #0
 800a806:	6818      	ldr	r0, [r3, #0]
 800a808:	fa00 f009 	lsl.w	r0, r0, r9
 800a80c:	4310      	orrs	r0, r2
 800a80e:	f84a 0b04 	str.w	r0, [sl], #4
 800a812:	f853 2b04 	ldr.w	r2, [r3], #4
 800a816:	459c      	cmp	ip, r3
 800a818:	fa22 f20e 	lsr.w	r2, r2, lr
 800a81c:	d8f3      	bhi.n	800a806 <__lshift+0x6e>
 800a81e:	ebac 0304 	sub.w	r3, ip, r4
 800a822:	3b15      	subs	r3, #21
 800a824:	f023 0303 	bic.w	r3, r3, #3
 800a828:	3304      	adds	r3, #4
 800a82a:	f104 0015 	add.w	r0, r4, #21
 800a82e:	4584      	cmp	ip, r0
 800a830:	bf38      	it	cc
 800a832:	2304      	movcc	r3, #4
 800a834:	50ca      	str	r2, [r1, r3]
 800a836:	b10a      	cbz	r2, 800a83c <__lshift+0xa4>
 800a838:	f108 0602 	add.w	r6, r8, #2
 800a83c:	3e01      	subs	r6, #1
 800a83e:	4638      	mov	r0, r7
 800a840:	612e      	str	r6, [r5, #16]
 800a842:	4621      	mov	r1, r4
 800a844:	f7ff fd8e 	bl	800a364 <_Bfree>
 800a848:	4628      	mov	r0, r5
 800a84a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a84e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a852:	3301      	adds	r3, #1
 800a854:	e7c5      	b.n	800a7e2 <__lshift+0x4a>
 800a856:	3904      	subs	r1, #4
 800a858:	f853 2b04 	ldr.w	r2, [r3], #4
 800a85c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a860:	459c      	cmp	ip, r3
 800a862:	d8f9      	bhi.n	800a858 <__lshift+0xc0>
 800a864:	e7ea      	b.n	800a83c <__lshift+0xa4>
 800a866:	bf00      	nop
 800a868:	0800cc41 	.word	0x0800cc41
 800a86c:	0800cc52 	.word	0x0800cc52

0800a870 <__mcmp>:
 800a870:	b530      	push	{r4, r5, lr}
 800a872:	6902      	ldr	r2, [r0, #16]
 800a874:	690c      	ldr	r4, [r1, #16]
 800a876:	1b12      	subs	r2, r2, r4
 800a878:	d10e      	bne.n	800a898 <__mcmp+0x28>
 800a87a:	f100 0314 	add.w	r3, r0, #20
 800a87e:	3114      	adds	r1, #20
 800a880:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800a884:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800a888:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800a88c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800a890:	42a5      	cmp	r5, r4
 800a892:	d003      	beq.n	800a89c <__mcmp+0x2c>
 800a894:	d305      	bcc.n	800a8a2 <__mcmp+0x32>
 800a896:	2201      	movs	r2, #1
 800a898:	4610      	mov	r0, r2
 800a89a:	bd30      	pop	{r4, r5, pc}
 800a89c:	4283      	cmp	r3, r0
 800a89e:	d3f3      	bcc.n	800a888 <__mcmp+0x18>
 800a8a0:	e7fa      	b.n	800a898 <__mcmp+0x28>
 800a8a2:	f04f 32ff 	mov.w	r2, #4294967295
 800a8a6:	e7f7      	b.n	800a898 <__mcmp+0x28>

0800a8a8 <__mdiff>:
 800a8a8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ac:	460c      	mov	r4, r1
 800a8ae:	4606      	mov	r6, r0
 800a8b0:	4611      	mov	r1, r2
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	4690      	mov	r8, r2
 800a8b6:	f7ff ffdb 	bl	800a870 <__mcmp>
 800a8ba:	1e05      	subs	r5, r0, #0
 800a8bc:	d110      	bne.n	800a8e0 <__mdiff+0x38>
 800a8be:	4629      	mov	r1, r5
 800a8c0:	4630      	mov	r0, r6
 800a8c2:	f7ff fd0f 	bl	800a2e4 <_Balloc>
 800a8c6:	b930      	cbnz	r0, 800a8d6 <__mdiff+0x2e>
 800a8c8:	4b3a      	ldr	r3, [pc, #232]	; (800a9b4 <__mdiff+0x10c>)
 800a8ca:	4602      	mov	r2, r0
 800a8cc:	f240 2137 	movw	r1, #567	; 0x237
 800a8d0:	4839      	ldr	r0, [pc, #228]	; (800a9b8 <__mdiff+0x110>)
 800a8d2:	f001 faa5 	bl	800be20 <__assert_func>
 800a8d6:	2301      	movs	r3, #1
 800a8d8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a8dc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8e0:	bfa4      	itt	ge
 800a8e2:	4643      	movge	r3, r8
 800a8e4:	46a0      	movge	r8, r4
 800a8e6:	4630      	mov	r0, r6
 800a8e8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800a8ec:	bfa6      	itte	ge
 800a8ee:	461c      	movge	r4, r3
 800a8f0:	2500      	movge	r5, #0
 800a8f2:	2501      	movlt	r5, #1
 800a8f4:	f7ff fcf6 	bl	800a2e4 <_Balloc>
 800a8f8:	b920      	cbnz	r0, 800a904 <__mdiff+0x5c>
 800a8fa:	4b2e      	ldr	r3, [pc, #184]	; (800a9b4 <__mdiff+0x10c>)
 800a8fc:	4602      	mov	r2, r0
 800a8fe:	f240 2145 	movw	r1, #581	; 0x245
 800a902:	e7e5      	b.n	800a8d0 <__mdiff+0x28>
 800a904:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800a908:	6926      	ldr	r6, [r4, #16]
 800a90a:	60c5      	str	r5, [r0, #12]
 800a90c:	f104 0914 	add.w	r9, r4, #20
 800a910:	f108 0514 	add.w	r5, r8, #20
 800a914:	f100 0e14 	add.w	lr, r0, #20
 800a918:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800a91c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800a920:	f108 0210 	add.w	r2, r8, #16
 800a924:	46f2      	mov	sl, lr
 800a926:	2100      	movs	r1, #0
 800a928:	f859 3b04 	ldr.w	r3, [r9], #4
 800a92c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800a930:	fa11 f88b 	uxtah	r8, r1, fp
 800a934:	b299      	uxth	r1, r3
 800a936:	0c1b      	lsrs	r3, r3, #16
 800a938:	eba8 0801 	sub.w	r8, r8, r1
 800a93c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800a940:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800a944:	fa1f f888 	uxth.w	r8, r8
 800a948:	1419      	asrs	r1, r3, #16
 800a94a:	454e      	cmp	r6, r9
 800a94c:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800a950:	f84a 3b04 	str.w	r3, [sl], #4
 800a954:	d8e8      	bhi.n	800a928 <__mdiff+0x80>
 800a956:	1b33      	subs	r3, r6, r4
 800a958:	3b15      	subs	r3, #21
 800a95a:	f023 0303 	bic.w	r3, r3, #3
 800a95e:	3304      	adds	r3, #4
 800a960:	3415      	adds	r4, #21
 800a962:	42a6      	cmp	r6, r4
 800a964:	bf38      	it	cc
 800a966:	2304      	movcc	r3, #4
 800a968:	441d      	add	r5, r3
 800a96a:	4473      	add	r3, lr
 800a96c:	469e      	mov	lr, r3
 800a96e:	462e      	mov	r6, r5
 800a970:	4566      	cmp	r6, ip
 800a972:	d30e      	bcc.n	800a992 <__mdiff+0xea>
 800a974:	f10c 0203 	add.w	r2, ip, #3
 800a978:	1b52      	subs	r2, r2, r5
 800a97a:	f022 0203 	bic.w	r2, r2, #3
 800a97e:	3d03      	subs	r5, #3
 800a980:	45ac      	cmp	ip, r5
 800a982:	bf38      	it	cc
 800a984:	2200      	movcc	r2, #0
 800a986:	4413      	add	r3, r2
 800a988:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800a98c:	b17a      	cbz	r2, 800a9ae <__mdiff+0x106>
 800a98e:	6107      	str	r7, [r0, #16]
 800a990:	e7a4      	b.n	800a8dc <__mdiff+0x34>
 800a992:	f856 8b04 	ldr.w	r8, [r6], #4
 800a996:	fa11 f288 	uxtah	r2, r1, r8
 800a99a:	1414      	asrs	r4, r2, #16
 800a99c:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800a9a0:	b292      	uxth	r2, r2
 800a9a2:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800a9a6:	f84e 2b04 	str.w	r2, [lr], #4
 800a9aa:	1421      	asrs	r1, r4, #16
 800a9ac:	e7e0      	b.n	800a970 <__mdiff+0xc8>
 800a9ae:	3f01      	subs	r7, #1
 800a9b0:	e7ea      	b.n	800a988 <__mdiff+0xe0>
 800a9b2:	bf00      	nop
 800a9b4:	0800cc41 	.word	0x0800cc41
 800a9b8:	0800cc52 	.word	0x0800cc52

0800a9bc <__ulp>:
 800a9bc:	b082      	sub	sp, #8
 800a9be:	ed8d 0b00 	vstr	d0, [sp]
 800a9c2:	9a01      	ldr	r2, [sp, #4]
 800a9c4:	4b0f      	ldr	r3, [pc, #60]	; (800aa04 <__ulp+0x48>)
 800a9c6:	4013      	ands	r3, r2
 800a9c8:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	dc08      	bgt.n	800a9e2 <__ulp+0x26>
 800a9d0:	425b      	negs	r3, r3
 800a9d2:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800a9d6:	ea4f 5223 	mov.w	r2, r3, asr #20
 800a9da:	da04      	bge.n	800a9e6 <__ulp+0x2a>
 800a9dc:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800a9e0:	4113      	asrs	r3, r2
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	e008      	b.n	800a9f8 <__ulp+0x3c>
 800a9e6:	f1a2 0314 	sub.w	r3, r2, #20
 800a9ea:	2b1e      	cmp	r3, #30
 800a9ec:	bfda      	itte	le
 800a9ee:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800a9f2:	40da      	lsrle	r2, r3
 800a9f4:	2201      	movgt	r2, #1
 800a9f6:	2300      	movs	r3, #0
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	4610      	mov	r0, r2
 800a9fc:	ec41 0b10 	vmov	d0, r0, r1
 800aa00:	b002      	add	sp, #8
 800aa02:	4770      	bx	lr
 800aa04:	7ff00000 	.word	0x7ff00000

0800aa08 <__b2d>:
 800aa08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa0c:	6906      	ldr	r6, [r0, #16]
 800aa0e:	f100 0814 	add.w	r8, r0, #20
 800aa12:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800aa16:	1f37      	subs	r7, r6, #4
 800aa18:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800aa1c:	4610      	mov	r0, r2
 800aa1e:	f7ff fd53 	bl	800a4c8 <__hi0bits>
 800aa22:	f1c0 0320 	rsb	r3, r0, #32
 800aa26:	280a      	cmp	r0, #10
 800aa28:	600b      	str	r3, [r1, #0]
 800aa2a:	491b      	ldr	r1, [pc, #108]	; (800aa98 <__b2d+0x90>)
 800aa2c:	dc15      	bgt.n	800aa5a <__b2d+0x52>
 800aa2e:	f1c0 0c0b 	rsb	ip, r0, #11
 800aa32:	fa22 f30c 	lsr.w	r3, r2, ip
 800aa36:	45b8      	cmp	r8, r7
 800aa38:	ea43 0501 	orr.w	r5, r3, r1
 800aa3c:	bf34      	ite	cc
 800aa3e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aa42:	2300      	movcs	r3, #0
 800aa44:	3015      	adds	r0, #21
 800aa46:	fa02 f000 	lsl.w	r0, r2, r0
 800aa4a:	fa23 f30c 	lsr.w	r3, r3, ip
 800aa4e:	4303      	orrs	r3, r0
 800aa50:	461c      	mov	r4, r3
 800aa52:	ec45 4b10 	vmov	d0, r4, r5
 800aa56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa5a:	45b8      	cmp	r8, r7
 800aa5c:	bf3a      	itte	cc
 800aa5e:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800aa62:	f1a6 0708 	subcc.w	r7, r6, #8
 800aa66:	2300      	movcs	r3, #0
 800aa68:	380b      	subs	r0, #11
 800aa6a:	d012      	beq.n	800aa92 <__b2d+0x8a>
 800aa6c:	f1c0 0120 	rsb	r1, r0, #32
 800aa70:	fa23 f401 	lsr.w	r4, r3, r1
 800aa74:	4082      	lsls	r2, r0
 800aa76:	4322      	orrs	r2, r4
 800aa78:	4547      	cmp	r7, r8
 800aa7a:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800aa7e:	bf8c      	ite	hi
 800aa80:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800aa84:	2200      	movls	r2, #0
 800aa86:	4083      	lsls	r3, r0
 800aa88:	40ca      	lsrs	r2, r1
 800aa8a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800aa8e:	4313      	orrs	r3, r2
 800aa90:	e7de      	b.n	800aa50 <__b2d+0x48>
 800aa92:	ea42 0501 	orr.w	r5, r2, r1
 800aa96:	e7db      	b.n	800aa50 <__b2d+0x48>
 800aa98:	3ff00000 	.word	0x3ff00000

0800aa9c <__d2b>:
 800aa9c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aaa0:	460f      	mov	r7, r1
 800aaa2:	2101      	movs	r1, #1
 800aaa4:	ec59 8b10 	vmov	r8, r9, d0
 800aaa8:	4616      	mov	r6, r2
 800aaaa:	f7ff fc1b 	bl	800a2e4 <_Balloc>
 800aaae:	4604      	mov	r4, r0
 800aab0:	b930      	cbnz	r0, 800aac0 <__d2b+0x24>
 800aab2:	4602      	mov	r2, r0
 800aab4:	4b24      	ldr	r3, [pc, #144]	; (800ab48 <__d2b+0xac>)
 800aab6:	4825      	ldr	r0, [pc, #148]	; (800ab4c <__d2b+0xb0>)
 800aab8:	f240 310f 	movw	r1, #783	; 0x30f
 800aabc:	f001 f9b0 	bl	800be20 <__assert_func>
 800aac0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aac4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aac8:	bb2d      	cbnz	r5, 800ab16 <__d2b+0x7a>
 800aaca:	9301      	str	r3, [sp, #4]
 800aacc:	f1b8 0300 	subs.w	r3, r8, #0
 800aad0:	d026      	beq.n	800ab20 <__d2b+0x84>
 800aad2:	4668      	mov	r0, sp
 800aad4:	9300      	str	r3, [sp, #0]
 800aad6:	f7ff fd17 	bl	800a508 <__lo0bits>
 800aada:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aade:	b1e8      	cbz	r0, 800ab1c <__d2b+0x80>
 800aae0:	f1c0 0320 	rsb	r3, r0, #32
 800aae4:	fa02 f303 	lsl.w	r3, r2, r3
 800aae8:	430b      	orrs	r3, r1
 800aaea:	40c2      	lsrs	r2, r0
 800aaec:	6163      	str	r3, [r4, #20]
 800aaee:	9201      	str	r2, [sp, #4]
 800aaf0:	9b01      	ldr	r3, [sp, #4]
 800aaf2:	61a3      	str	r3, [r4, #24]
 800aaf4:	2b00      	cmp	r3, #0
 800aaf6:	bf14      	ite	ne
 800aaf8:	2202      	movne	r2, #2
 800aafa:	2201      	moveq	r2, #1
 800aafc:	6122      	str	r2, [r4, #16]
 800aafe:	b1bd      	cbz	r5, 800ab30 <__d2b+0x94>
 800ab00:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ab04:	4405      	add	r5, r0
 800ab06:	603d      	str	r5, [r7, #0]
 800ab08:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ab0c:	6030      	str	r0, [r6, #0]
 800ab0e:	4620      	mov	r0, r4
 800ab10:	b003      	add	sp, #12
 800ab12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ab1a:	e7d6      	b.n	800aaca <__d2b+0x2e>
 800ab1c:	6161      	str	r1, [r4, #20]
 800ab1e:	e7e7      	b.n	800aaf0 <__d2b+0x54>
 800ab20:	a801      	add	r0, sp, #4
 800ab22:	f7ff fcf1 	bl	800a508 <__lo0bits>
 800ab26:	9b01      	ldr	r3, [sp, #4]
 800ab28:	6163      	str	r3, [r4, #20]
 800ab2a:	3020      	adds	r0, #32
 800ab2c:	2201      	movs	r2, #1
 800ab2e:	e7e5      	b.n	800aafc <__d2b+0x60>
 800ab30:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab34:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800ab38:	6038      	str	r0, [r7, #0]
 800ab3a:	6918      	ldr	r0, [r3, #16]
 800ab3c:	f7ff fcc4 	bl	800a4c8 <__hi0bits>
 800ab40:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab44:	e7e2      	b.n	800ab0c <__d2b+0x70>
 800ab46:	bf00      	nop
 800ab48:	0800cc41 	.word	0x0800cc41
 800ab4c:	0800cc52 	.word	0x0800cc52

0800ab50 <__ratio>:
 800ab50:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab54:	4688      	mov	r8, r1
 800ab56:	4669      	mov	r1, sp
 800ab58:	4681      	mov	r9, r0
 800ab5a:	f7ff ff55 	bl	800aa08 <__b2d>
 800ab5e:	a901      	add	r1, sp, #4
 800ab60:	4640      	mov	r0, r8
 800ab62:	ec55 4b10 	vmov	r4, r5, d0
 800ab66:	f7ff ff4f 	bl	800aa08 <__b2d>
 800ab6a:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ab6e:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800ab72:	eba3 0c02 	sub.w	ip, r3, r2
 800ab76:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ab7a:	1a9b      	subs	r3, r3, r2
 800ab7c:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800ab80:	ec51 0b10 	vmov	r0, r1, d0
 800ab84:	2b00      	cmp	r3, #0
 800ab86:	bfd6      	itet	le
 800ab88:	460a      	movle	r2, r1
 800ab8a:	462a      	movgt	r2, r5
 800ab8c:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800ab90:	468b      	mov	fp, r1
 800ab92:	462f      	mov	r7, r5
 800ab94:	bfd4      	ite	le
 800ab96:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800ab9a:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800ab9e:	4620      	mov	r0, r4
 800aba0:	ee10 2a10 	vmov	r2, s0
 800aba4:	465b      	mov	r3, fp
 800aba6:	4639      	mov	r1, r7
 800aba8:	f7f5 fe70 	bl	800088c <__aeabi_ddiv>
 800abac:	ec41 0b10 	vmov	d0, r0, r1
 800abb0:	b003      	add	sp, #12
 800abb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800abb6 <__copybits>:
 800abb6:	3901      	subs	r1, #1
 800abb8:	b570      	push	{r4, r5, r6, lr}
 800abba:	1149      	asrs	r1, r1, #5
 800abbc:	6914      	ldr	r4, [r2, #16]
 800abbe:	3101      	adds	r1, #1
 800abc0:	f102 0314 	add.w	r3, r2, #20
 800abc4:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800abc8:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800abcc:	1f05      	subs	r5, r0, #4
 800abce:	42a3      	cmp	r3, r4
 800abd0:	d30c      	bcc.n	800abec <__copybits+0x36>
 800abd2:	1aa3      	subs	r3, r4, r2
 800abd4:	3b11      	subs	r3, #17
 800abd6:	f023 0303 	bic.w	r3, r3, #3
 800abda:	3211      	adds	r2, #17
 800abdc:	42a2      	cmp	r2, r4
 800abde:	bf88      	it	hi
 800abe0:	2300      	movhi	r3, #0
 800abe2:	4418      	add	r0, r3
 800abe4:	2300      	movs	r3, #0
 800abe6:	4288      	cmp	r0, r1
 800abe8:	d305      	bcc.n	800abf6 <__copybits+0x40>
 800abea:	bd70      	pop	{r4, r5, r6, pc}
 800abec:	f853 6b04 	ldr.w	r6, [r3], #4
 800abf0:	f845 6f04 	str.w	r6, [r5, #4]!
 800abf4:	e7eb      	b.n	800abce <__copybits+0x18>
 800abf6:	f840 3b04 	str.w	r3, [r0], #4
 800abfa:	e7f4      	b.n	800abe6 <__copybits+0x30>

0800abfc <__any_on>:
 800abfc:	f100 0214 	add.w	r2, r0, #20
 800ac00:	6900      	ldr	r0, [r0, #16]
 800ac02:	114b      	asrs	r3, r1, #5
 800ac04:	4298      	cmp	r0, r3
 800ac06:	b510      	push	{r4, lr}
 800ac08:	db11      	blt.n	800ac2e <__any_on+0x32>
 800ac0a:	dd0a      	ble.n	800ac22 <__any_on+0x26>
 800ac0c:	f011 011f 	ands.w	r1, r1, #31
 800ac10:	d007      	beq.n	800ac22 <__any_on+0x26>
 800ac12:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800ac16:	fa24 f001 	lsr.w	r0, r4, r1
 800ac1a:	fa00 f101 	lsl.w	r1, r0, r1
 800ac1e:	428c      	cmp	r4, r1
 800ac20:	d10b      	bne.n	800ac3a <__any_on+0x3e>
 800ac22:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ac26:	4293      	cmp	r3, r2
 800ac28:	d803      	bhi.n	800ac32 <__any_on+0x36>
 800ac2a:	2000      	movs	r0, #0
 800ac2c:	bd10      	pop	{r4, pc}
 800ac2e:	4603      	mov	r3, r0
 800ac30:	e7f7      	b.n	800ac22 <__any_on+0x26>
 800ac32:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800ac36:	2900      	cmp	r1, #0
 800ac38:	d0f5      	beq.n	800ac26 <__any_on+0x2a>
 800ac3a:	2001      	movs	r0, #1
 800ac3c:	e7f6      	b.n	800ac2c <__any_on+0x30>

0800ac3e <sulp>:
 800ac3e:	b570      	push	{r4, r5, r6, lr}
 800ac40:	4604      	mov	r4, r0
 800ac42:	460d      	mov	r5, r1
 800ac44:	ec45 4b10 	vmov	d0, r4, r5
 800ac48:	4616      	mov	r6, r2
 800ac4a:	f7ff feb7 	bl	800a9bc <__ulp>
 800ac4e:	ec51 0b10 	vmov	r0, r1, d0
 800ac52:	b17e      	cbz	r6, 800ac74 <sulp+0x36>
 800ac54:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ac58:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	dd09      	ble.n	800ac74 <sulp+0x36>
 800ac60:	051b      	lsls	r3, r3, #20
 800ac62:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ac66:	2400      	movs	r4, #0
 800ac68:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ac6c:	4622      	mov	r2, r4
 800ac6e:	462b      	mov	r3, r5
 800ac70:	f7f5 fce2 	bl	8000638 <__aeabi_dmul>
 800ac74:	bd70      	pop	{r4, r5, r6, pc}
	...

0800ac78 <_strtod_l>:
 800ac78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac7c:	ed2d 8b02 	vpush	{d8}
 800ac80:	b09b      	sub	sp, #108	; 0x6c
 800ac82:	4604      	mov	r4, r0
 800ac84:	9213      	str	r2, [sp, #76]	; 0x4c
 800ac86:	2200      	movs	r2, #0
 800ac88:	9216      	str	r2, [sp, #88]	; 0x58
 800ac8a:	460d      	mov	r5, r1
 800ac8c:	f04f 0800 	mov.w	r8, #0
 800ac90:	f04f 0900 	mov.w	r9, #0
 800ac94:	460a      	mov	r2, r1
 800ac96:	9215      	str	r2, [sp, #84]	; 0x54
 800ac98:	7811      	ldrb	r1, [r2, #0]
 800ac9a:	292b      	cmp	r1, #43	; 0x2b
 800ac9c:	d04c      	beq.n	800ad38 <_strtod_l+0xc0>
 800ac9e:	d83a      	bhi.n	800ad16 <_strtod_l+0x9e>
 800aca0:	290d      	cmp	r1, #13
 800aca2:	d834      	bhi.n	800ad0e <_strtod_l+0x96>
 800aca4:	2908      	cmp	r1, #8
 800aca6:	d834      	bhi.n	800ad12 <_strtod_l+0x9a>
 800aca8:	2900      	cmp	r1, #0
 800acaa:	d03d      	beq.n	800ad28 <_strtod_l+0xb0>
 800acac:	2200      	movs	r2, #0
 800acae:	920a      	str	r2, [sp, #40]	; 0x28
 800acb0:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800acb2:	7832      	ldrb	r2, [r6, #0]
 800acb4:	2a30      	cmp	r2, #48	; 0x30
 800acb6:	f040 80b4 	bne.w	800ae22 <_strtod_l+0x1aa>
 800acba:	7872      	ldrb	r2, [r6, #1]
 800acbc:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800acc0:	2a58      	cmp	r2, #88	; 0x58
 800acc2:	d170      	bne.n	800ada6 <_strtod_l+0x12e>
 800acc4:	9302      	str	r3, [sp, #8]
 800acc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acc8:	9301      	str	r3, [sp, #4]
 800acca:	ab16      	add	r3, sp, #88	; 0x58
 800accc:	9300      	str	r3, [sp, #0]
 800acce:	4a8e      	ldr	r2, [pc, #568]	; (800af08 <_strtod_l+0x290>)
 800acd0:	ab17      	add	r3, sp, #92	; 0x5c
 800acd2:	a915      	add	r1, sp, #84	; 0x54
 800acd4:	4620      	mov	r0, r4
 800acd6:	f001 f93f 	bl	800bf58 <__gethex>
 800acda:	f010 070f 	ands.w	r7, r0, #15
 800acde:	4605      	mov	r5, r0
 800ace0:	d005      	beq.n	800acee <_strtod_l+0x76>
 800ace2:	2f06      	cmp	r7, #6
 800ace4:	d12a      	bne.n	800ad3c <_strtod_l+0xc4>
 800ace6:	3601      	adds	r6, #1
 800ace8:	2300      	movs	r3, #0
 800acea:	9615      	str	r6, [sp, #84]	; 0x54
 800acec:	930a      	str	r3, [sp, #40]	; 0x28
 800acee:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	f040 857f 	bne.w	800b7f4 <_strtod_l+0xb7c>
 800acf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acf8:	b1db      	cbz	r3, 800ad32 <_strtod_l+0xba>
 800acfa:	4642      	mov	r2, r8
 800acfc:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ad00:	ec43 2b10 	vmov	d0, r2, r3
 800ad04:	b01b      	add	sp, #108	; 0x6c
 800ad06:	ecbd 8b02 	vpop	{d8}
 800ad0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad0e:	2920      	cmp	r1, #32
 800ad10:	d1cc      	bne.n	800acac <_strtod_l+0x34>
 800ad12:	3201      	adds	r2, #1
 800ad14:	e7bf      	b.n	800ac96 <_strtod_l+0x1e>
 800ad16:	292d      	cmp	r1, #45	; 0x2d
 800ad18:	d1c8      	bne.n	800acac <_strtod_l+0x34>
 800ad1a:	2101      	movs	r1, #1
 800ad1c:	910a      	str	r1, [sp, #40]	; 0x28
 800ad1e:	1c51      	adds	r1, r2, #1
 800ad20:	9115      	str	r1, [sp, #84]	; 0x54
 800ad22:	7852      	ldrb	r2, [r2, #1]
 800ad24:	2a00      	cmp	r2, #0
 800ad26:	d1c3      	bne.n	800acb0 <_strtod_l+0x38>
 800ad28:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad2a:	9515      	str	r5, [sp, #84]	; 0x54
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	f040 855f 	bne.w	800b7f0 <_strtod_l+0xb78>
 800ad32:	4642      	mov	r2, r8
 800ad34:	464b      	mov	r3, r9
 800ad36:	e7e3      	b.n	800ad00 <_strtod_l+0x88>
 800ad38:	2100      	movs	r1, #0
 800ad3a:	e7ef      	b.n	800ad1c <_strtod_l+0xa4>
 800ad3c:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ad3e:	b13a      	cbz	r2, 800ad50 <_strtod_l+0xd8>
 800ad40:	2135      	movs	r1, #53	; 0x35
 800ad42:	a818      	add	r0, sp, #96	; 0x60
 800ad44:	f7ff ff37 	bl	800abb6 <__copybits>
 800ad48:	9916      	ldr	r1, [sp, #88]	; 0x58
 800ad4a:	4620      	mov	r0, r4
 800ad4c:	f7ff fb0a 	bl	800a364 <_Bfree>
 800ad50:	3f01      	subs	r7, #1
 800ad52:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ad54:	2f04      	cmp	r7, #4
 800ad56:	d806      	bhi.n	800ad66 <_strtod_l+0xee>
 800ad58:	e8df f007 	tbb	[pc, r7]
 800ad5c:	201d0314 	.word	0x201d0314
 800ad60:	14          	.byte	0x14
 800ad61:	00          	.byte	0x00
 800ad62:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800ad66:	05e9      	lsls	r1, r5, #23
 800ad68:	bf48      	it	mi
 800ad6a:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800ad6e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ad72:	0d1b      	lsrs	r3, r3, #20
 800ad74:	051b      	lsls	r3, r3, #20
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d1b9      	bne.n	800acee <_strtod_l+0x76>
 800ad7a:	f7fe fb03 	bl	8009384 <__errno>
 800ad7e:	2322      	movs	r3, #34	; 0x22
 800ad80:	6003      	str	r3, [r0, #0]
 800ad82:	e7b4      	b.n	800acee <_strtod_l+0x76>
 800ad84:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800ad88:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ad8c:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ad90:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800ad94:	e7e7      	b.n	800ad66 <_strtod_l+0xee>
 800ad96:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800af10 <_strtod_l+0x298>
 800ad9a:	e7e4      	b.n	800ad66 <_strtod_l+0xee>
 800ad9c:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800ada0:	f04f 38ff 	mov.w	r8, #4294967295
 800ada4:	e7df      	b.n	800ad66 <_strtod_l+0xee>
 800ada6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ada8:	1c5a      	adds	r2, r3, #1
 800adaa:	9215      	str	r2, [sp, #84]	; 0x54
 800adac:	785b      	ldrb	r3, [r3, #1]
 800adae:	2b30      	cmp	r3, #48	; 0x30
 800adb0:	d0f9      	beq.n	800ada6 <_strtod_l+0x12e>
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d09b      	beq.n	800acee <_strtod_l+0x76>
 800adb6:	2301      	movs	r3, #1
 800adb8:	f04f 0a00 	mov.w	sl, #0
 800adbc:	9304      	str	r3, [sp, #16]
 800adbe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800adc0:	930b      	str	r3, [sp, #44]	; 0x2c
 800adc2:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800adc6:	46d3      	mov	fp, sl
 800adc8:	220a      	movs	r2, #10
 800adca:	9815      	ldr	r0, [sp, #84]	; 0x54
 800adcc:	7806      	ldrb	r6, [r0, #0]
 800adce:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800add2:	b2d9      	uxtb	r1, r3
 800add4:	2909      	cmp	r1, #9
 800add6:	d926      	bls.n	800ae26 <_strtod_l+0x1ae>
 800add8:	494c      	ldr	r1, [pc, #304]	; (800af0c <_strtod_l+0x294>)
 800adda:	2201      	movs	r2, #1
 800addc:	f000 ffe6 	bl	800bdac <strncmp>
 800ade0:	2800      	cmp	r0, #0
 800ade2:	d030      	beq.n	800ae46 <_strtod_l+0x1ce>
 800ade4:	2000      	movs	r0, #0
 800ade6:	4632      	mov	r2, r6
 800ade8:	9005      	str	r0, [sp, #20]
 800adea:	465e      	mov	r6, fp
 800adec:	4603      	mov	r3, r0
 800adee:	2a65      	cmp	r2, #101	; 0x65
 800adf0:	d001      	beq.n	800adf6 <_strtod_l+0x17e>
 800adf2:	2a45      	cmp	r2, #69	; 0x45
 800adf4:	d113      	bne.n	800ae1e <_strtod_l+0x1a6>
 800adf6:	b91e      	cbnz	r6, 800ae00 <_strtod_l+0x188>
 800adf8:	9a04      	ldr	r2, [sp, #16]
 800adfa:	4302      	orrs	r2, r0
 800adfc:	d094      	beq.n	800ad28 <_strtod_l+0xb0>
 800adfe:	2600      	movs	r6, #0
 800ae00:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800ae02:	1c6a      	adds	r2, r5, #1
 800ae04:	9215      	str	r2, [sp, #84]	; 0x54
 800ae06:	786a      	ldrb	r2, [r5, #1]
 800ae08:	2a2b      	cmp	r2, #43	; 0x2b
 800ae0a:	d074      	beq.n	800aef6 <_strtod_l+0x27e>
 800ae0c:	2a2d      	cmp	r2, #45	; 0x2d
 800ae0e:	d078      	beq.n	800af02 <_strtod_l+0x28a>
 800ae10:	f04f 0c00 	mov.w	ip, #0
 800ae14:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ae18:	2909      	cmp	r1, #9
 800ae1a:	d97f      	bls.n	800af1c <_strtod_l+0x2a4>
 800ae1c:	9515      	str	r5, [sp, #84]	; 0x54
 800ae1e:	2700      	movs	r7, #0
 800ae20:	e09e      	b.n	800af60 <_strtod_l+0x2e8>
 800ae22:	2300      	movs	r3, #0
 800ae24:	e7c8      	b.n	800adb8 <_strtod_l+0x140>
 800ae26:	f1bb 0f08 	cmp.w	fp, #8
 800ae2a:	bfd8      	it	le
 800ae2c:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ae2e:	f100 0001 	add.w	r0, r0, #1
 800ae32:	bfda      	itte	le
 800ae34:	fb02 3301 	mlale	r3, r2, r1, r3
 800ae38:	9309      	strle	r3, [sp, #36]	; 0x24
 800ae3a:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ae3e:	f10b 0b01 	add.w	fp, fp, #1
 800ae42:	9015      	str	r0, [sp, #84]	; 0x54
 800ae44:	e7c1      	b.n	800adca <_strtod_l+0x152>
 800ae46:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae48:	1c5a      	adds	r2, r3, #1
 800ae4a:	9215      	str	r2, [sp, #84]	; 0x54
 800ae4c:	785a      	ldrb	r2, [r3, #1]
 800ae4e:	f1bb 0f00 	cmp.w	fp, #0
 800ae52:	d037      	beq.n	800aec4 <_strtod_l+0x24c>
 800ae54:	9005      	str	r0, [sp, #20]
 800ae56:	465e      	mov	r6, fp
 800ae58:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ae5c:	2b09      	cmp	r3, #9
 800ae5e:	d912      	bls.n	800ae86 <_strtod_l+0x20e>
 800ae60:	2301      	movs	r3, #1
 800ae62:	e7c4      	b.n	800adee <_strtod_l+0x176>
 800ae64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae66:	1c5a      	adds	r2, r3, #1
 800ae68:	9215      	str	r2, [sp, #84]	; 0x54
 800ae6a:	785a      	ldrb	r2, [r3, #1]
 800ae6c:	3001      	adds	r0, #1
 800ae6e:	2a30      	cmp	r2, #48	; 0x30
 800ae70:	d0f8      	beq.n	800ae64 <_strtod_l+0x1ec>
 800ae72:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ae76:	2b08      	cmp	r3, #8
 800ae78:	f200 84c1 	bhi.w	800b7fe <_strtod_l+0xb86>
 800ae7c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ae7e:	9005      	str	r0, [sp, #20]
 800ae80:	2000      	movs	r0, #0
 800ae82:	930b      	str	r3, [sp, #44]	; 0x2c
 800ae84:	4606      	mov	r6, r0
 800ae86:	3a30      	subs	r2, #48	; 0x30
 800ae88:	f100 0301 	add.w	r3, r0, #1
 800ae8c:	d014      	beq.n	800aeb8 <_strtod_l+0x240>
 800ae8e:	9905      	ldr	r1, [sp, #20]
 800ae90:	4419      	add	r1, r3
 800ae92:	9105      	str	r1, [sp, #20]
 800ae94:	4633      	mov	r3, r6
 800ae96:	eb00 0c06 	add.w	ip, r0, r6
 800ae9a:	210a      	movs	r1, #10
 800ae9c:	4563      	cmp	r3, ip
 800ae9e:	d113      	bne.n	800aec8 <_strtod_l+0x250>
 800aea0:	1833      	adds	r3, r6, r0
 800aea2:	2b08      	cmp	r3, #8
 800aea4:	f106 0601 	add.w	r6, r6, #1
 800aea8:	4406      	add	r6, r0
 800aeaa:	dc1a      	bgt.n	800aee2 <_strtod_l+0x26a>
 800aeac:	9909      	ldr	r1, [sp, #36]	; 0x24
 800aeae:	230a      	movs	r3, #10
 800aeb0:	fb03 2301 	mla	r3, r3, r1, r2
 800aeb4:	9309      	str	r3, [sp, #36]	; 0x24
 800aeb6:	2300      	movs	r3, #0
 800aeb8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800aeba:	1c51      	adds	r1, r2, #1
 800aebc:	9115      	str	r1, [sp, #84]	; 0x54
 800aebe:	7852      	ldrb	r2, [r2, #1]
 800aec0:	4618      	mov	r0, r3
 800aec2:	e7c9      	b.n	800ae58 <_strtod_l+0x1e0>
 800aec4:	4658      	mov	r0, fp
 800aec6:	e7d2      	b.n	800ae6e <_strtod_l+0x1f6>
 800aec8:	2b08      	cmp	r3, #8
 800aeca:	f103 0301 	add.w	r3, r3, #1
 800aece:	dc03      	bgt.n	800aed8 <_strtod_l+0x260>
 800aed0:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800aed2:	434f      	muls	r7, r1
 800aed4:	9709      	str	r7, [sp, #36]	; 0x24
 800aed6:	e7e1      	b.n	800ae9c <_strtod_l+0x224>
 800aed8:	2b10      	cmp	r3, #16
 800aeda:	bfd8      	it	le
 800aedc:	fb01 fa0a 	mulle.w	sl, r1, sl
 800aee0:	e7dc      	b.n	800ae9c <_strtod_l+0x224>
 800aee2:	2e10      	cmp	r6, #16
 800aee4:	bfdc      	itt	le
 800aee6:	230a      	movle	r3, #10
 800aee8:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800aeec:	e7e3      	b.n	800aeb6 <_strtod_l+0x23e>
 800aeee:	2300      	movs	r3, #0
 800aef0:	9305      	str	r3, [sp, #20]
 800aef2:	2301      	movs	r3, #1
 800aef4:	e780      	b.n	800adf8 <_strtod_l+0x180>
 800aef6:	f04f 0c00 	mov.w	ip, #0
 800aefa:	1caa      	adds	r2, r5, #2
 800aefc:	9215      	str	r2, [sp, #84]	; 0x54
 800aefe:	78aa      	ldrb	r2, [r5, #2]
 800af00:	e788      	b.n	800ae14 <_strtod_l+0x19c>
 800af02:	f04f 0c01 	mov.w	ip, #1
 800af06:	e7f8      	b.n	800aefa <_strtod_l+0x282>
 800af08:	0800cdb0 	.word	0x0800cdb0
 800af0c:	0800cdac 	.word	0x0800cdac
 800af10:	7ff00000 	.word	0x7ff00000
 800af14:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800af16:	1c51      	adds	r1, r2, #1
 800af18:	9115      	str	r1, [sp, #84]	; 0x54
 800af1a:	7852      	ldrb	r2, [r2, #1]
 800af1c:	2a30      	cmp	r2, #48	; 0x30
 800af1e:	d0f9      	beq.n	800af14 <_strtod_l+0x29c>
 800af20:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800af24:	2908      	cmp	r1, #8
 800af26:	f63f af7a 	bhi.w	800ae1e <_strtod_l+0x1a6>
 800af2a:	3a30      	subs	r2, #48	; 0x30
 800af2c:	9208      	str	r2, [sp, #32]
 800af2e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800af30:	920c      	str	r2, [sp, #48]	; 0x30
 800af32:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800af34:	1c57      	adds	r7, r2, #1
 800af36:	9715      	str	r7, [sp, #84]	; 0x54
 800af38:	7852      	ldrb	r2, [r2, #1]
 800af3a:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800af3e:	f1be 0f09 	cmp.w	lr, #9
 800af42:	d938      	bls.n	800afb6 <_strtod_l+0x33e>
 800af44:	990c      	ldr	r1, [sp, #48]	; 0x30
 800af46:	1a7f      	subs	r7, r7, r1
 800af48:	2f08      	cmp	r7, #8
 800af4a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800af4e:	dc03      	bgt.n	800af58 <_strtod_l+0x2e0>
 800af50:	9908      	ldr	r1, [sp, #32]
 800af52:	428f      	cmp	r7, r1
 800af54:	bfa8      	it	ge
 800af56:	460f      	movge	r7, r1
 800af58:	f1bc 0f00 	cmp.w	ip, #0
 800af5c:	d000      	beq.n	800af60 <_strtod_l+0x2e8>
 800af5e:	427f      	negs	r7, r7
 800af60:	2e00      	cmp	r6, #0
 800af62:	d14f      	bne.n	800b004 <_strtod_l+0x38c>
 800af64:	9904      	ldr	r1, [sp, #16]
 800af66:	4301      	orrs	r1, r0
 800af68:	f47f aec1 	bne.w	800acee <_strtod_l+0x76>
 800af6c:	2b00      	cmp	r3, #0
 800af6e:	f47f aedb 	bne.w	800ad28 <_strtod_l+0xb0>
 800af72:	2a69      	cmp	r2, #105	; 0x69
 800af74:	d029      	beq.n	800afca <_strtod_l+0x352>
 800af76:	dc26      	bgt.n	800afc6 <_strtod_l+0x34e>
 800af78:	2a49      	cmp	r2, #73	; 0x49
 800af7a:	d026      	beq.n	800afca <_strtod_l+0x352>
 800af7c:	2a4e      	cmp	r2, #78	; 0x4e
 800af7e:	f47f aed3 	bne.w	800ad28 <_strtod_l+0xb0>
 800af82:	499b      	ldr	r1, [pc, #620]	; (800b1f0 <_strtod_l+0x578>)
 800af84:	a815      	add	r0, sp, #84	; 0x54
 800af86:	f001 fa27 	bl	800c3d8 <__match>
 800af8a:	2800      	cmp	r0, #0
 800af8c:	f43f aecc 	beq.w	800ad28 <_strtod_l+0xb0>
 800af90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800af92:	781b      	ldrb	r3, [r3, #0]
 800af94:	2b28      	cmp	r3, #40	; 0x28
 800af96:	d12f      	bne.n	800aff8 <_strtod_l+0x380>
 800af98:	4996      	ldr	r1, [pc, #600]	; (800b1f4 <_strtod_l+0x57c>)
 800af9a:	aa18      	add	r2, sp, #96	; 0x60
 800af9c:	a815      	add	r0, sp, #84	; 0x54
 800af9e:	f001 fa2f 	bl	800c400 <__hexnan>
 800afa2:	2805      	cmp	r0, #5
 800afa4:	d128      	bne.n	800aff8 <_strtod_l+0x380>
 800afa6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800afa8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800afac:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800afb0:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800afb4:	e69b      	b.n	800acee <_strtod_l+0x76>
 800afb6:	9f08      	ldr	r7, [sp, #32]
 800afb8:	210a      	movs	r1, #10
 800afba:	fb01 2107 	mla	r1, r1, r7, r2
 800afbe:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800afc2:	9208      	str	r2, [sp, #32]
 800afc4:	e7b5      	b.n	800af32 <_strtod_l+0x2ba>
 800afc6:	2a6e      	cmp	r2, #110	; 0x6e
 800afc8:	e7d9      	b.n	800af7e <_strtod_l+0x306>
 800afca:	498b      	ldr	r1, [pc, #556]	; (800b1f8 <_strtod_l+0x580>)
 800afcc:	a815      	add	r0, sp, #84	; 0x54
 800afce:	f001 fa03 	bl	800c3d8 <__match>
 800afd2:	2800      	cmp	r0, #0
 800afd4:	f43f aea8 	beq.w	800ad28 <_strtod_l+0xb0>
 800afd8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afda:	4988      	ldr	r1, [pc, #544]	; (800b1fc <_strtod_l+0x584>)
 800afdc:	3b01      	subs	r3, #1
 800afde:	a815      	add	r0, sp, #84	; 0x54
 800afe0:	9315      	str	r3, [sp, #84]	; 0x54
 800afe2:	f001 f9f9 	bl	800c3d8 <__match>
 800afe6:	b910      	cbnz	r0, 800afee <_strtod_l+0x376>
 800afe8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800afea:	3301      	adds	r3, #1
 800afec:	9315      	str	r3, [sp, #84]	; 0x54
 800afee:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800b20c <_strtod_l+0x594>
 800aff2:	f04f 0800 	mov.w	r8, #0
 800aff6:	e67a      	b.n	800acee <_strtod_l+0x76>
 800aff8:	4881      	ldr	r0, [pc, #516]	; (800b200 <_strtod_l+0x588>)
 800affa:	f000 ff09 	bl	800be10 <nan>
 800affe:	ec59 8b10 	vmov	r8, r9, d0
 800b002:	e674      	b.n	800acee <_strtod_l+0x76>
 800b004:	9b05      	ldr	r3, [sp, #20]
 800b006:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b008:	1afb      	subs	r3, r7, r3
 800b00a:	f1bb 0f00 	cmp.w	fp, #0
 800b00e:	bf08      	it	eq
 800b010:	46b3      	moveq	fp, r6
 800b012:	2e10      	cmp	r6, #16
 800b014:	9308      	str	r3, [sp, #32]
 800b016:	4635      	mov	r5, r6
 800b018:	bfa8      	it	ge
 800b01a:	2510      	movge	r5, #16
 800b01c:	f7f5 fa92 	bl	8000544 <__aeabi_ui2d>
 800b020:	2e09      	cmp	r6, #9
 800b022:	4680      	mov	r8, r0
 800b024:	4689      	mov	r9, r1
 800b026:	dd13      	ble.n	800b050 <_strtod_l+0x3d8>
 800b028:	4b76      	ldr	r3, [pc, #472]	; (800b204 <_strtod_l+0x58c>)
 800b02a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800b02e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b032:	f7f5 fb01 	bl	8000638 <__aeabi_dmul>
 800b036:	4680      	mov	r8, r0
 800b038:	4650      	mov	r0, sl
 800b03a:	4689      	mov	r9, r1
 800b03c:	f7f5 fa82 	bl	8000544 <__aeabi_ui2d>
 800b040:	4602      	mov	r2, r0
 800b042:	460b      	mov	r3, r1
 800b044:	4640      	mov	r0, r8
 800b046:	4649      	mov	r1, r9
 800b048:	f7f5 f940 	bl	80002cc <__adddf3>
 800b04c:	4680      	mov	r8, r0
 800b04e:	4689      	mov	r9, r1
 800b050:	2e0f      	cmp	r6, #15
 800b052:	dc38      	bgt.n	800b0c6 <_strtod_l+0x44e>
 800b054:	9b08      	ldr	r3, [sp, #32]
 800b056:	2b00      	cmp	r3, #0
 800b058:	f43f ae49 	beq.w	800acee <_strtod_l+0x76>
 800b05c:	dd24      	ble.n	800b0a8 <_strtod_l+0x430>
 800b05e:	2b16      	cmp	r3, #22
 800b060:	dc0b      	bgt.n	800b07a <_strtod_l+0x402>
 800b062:	4968      	ldr	r1, [pc, #416]	; (800b204 <_strtod_l+0x58c>)
 800b064:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b068:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b06c:	4642      	mov	r2, r8
 800b06e:	464b      	mov	r3, r9
 800b070:	f7f5 fae2 	bl	8000638 <__aeabi_dmul>
 800b074:	4680      	mov	r8, r0
 800b076:	4689      	mov	r9, r1
 800b078:	e639      	b.n	800acee <_strtod_l+0x76>
 800b07a:	9a08      	ldr	r2, [sp, #32]
 800b07c:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800b080:	4293      	cmp	r3, r2
 800b082:	db20      	blt.n	800b0c6 <_strtod_l+0x44e>
 800b084:	4c5f      	ldr	r4, [pc, #380]	; (800b204 <_strtod_l+0x58c>)
 800b086:	f1c6 060f 	rsb	r6, r6, #15
 800b08a:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800b08e:	4642      	mov	r2, r8
 800b090:	464b      	mov	r3, r9
 800b092:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b096:	f7f5 facf 	bl	8000638 <__aeabi_dmul>
 800b09a:	9b08      	ldr	r3, [sp, #32]
 800b09c:	1b9e      	subs	r6, r3, r6
 800b09e:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800b0a2:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b0a6:	e7e3      	b.n	800b070 <_strtod_l+0x3f8>
 800b0a8:	9b08      	ldr	r3, [sp, #32]
 800b0aa:	3316      	adds	r3, #22
 800b0ac:	db0b      	blt.n	800b0c6 <_strtod_l+0x44e>
 800b0ae:	9b05      	ldr	r3, [sp, #20]
 800b0b0:	1bdf      	subs	r7, r3, r7
 800b0b2:	4b54      	ldr	r3, [pc, #336]	; (800b204 <_strtod_l+0x58c>)
 800b0b4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800b0b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b0bc:	4640      	mov	r0, r8
 800b0be:	4649      	mov	r1, r9
 800b0c0:	f7f5 fbe4 	bl	800088c <__aeabi_ddiv>
 800b0c4:	e7d6      	b.n	800b074 <_strtod_l+0x3fc>
 800b0c6:	9b08      	ldr	r3, [sp, #32]
 800b0c8:	1b75      	subs	r5, r6, r5
 800b0ca:	441d      	add	r5, r3
 800b0cc:	2d00      	cmp	r5, #0
 800b0ce:	dd70      	ble.n	800b1b2 <_strtod_l+0x53a>
 800b0d0:	f015 030f 	ands.w	r3, r5, #15
 800b0d4:	d00a      	beq.n	800b0ec <_strtod_l+0x474>
 800b0d6:	494b      	ldr	r1, [pc, #300]	; (800b204 <_strtod_l+0x58c>)
 800b0d8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b0dc:	4642      	mov	r2, r8
 800b0de:	464b      	mov	r3, r9
 800b0e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0e4:	f7f5 faa8 	bl	8000638 <__aeabi_dmul>
 800b0e8:	4680      	mov	r8, r0
 800b0ea:	4689      	mov	r9, r1
 800b0ec:	f035 050f 	bics.w	r5, r5, #15
 800b0f0:	d04d      	beq.n	800b18e <_strtod_l+0x516>
 800b0f2:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800b0f6:	dd22      	ble.n	800b13e <_strtod_l+0x4c6>
 800b0f8:	2500      	movs	r5, #0
 800b0fa:	46ab      	mov	fp, r5
 800b0fc:	9509      	str	r5, [sp, #36]	; 0x24
 800b0fe:	9505      	str	r5, [sp, #20]
 800b100:	2322      	movs	r3, #34	; 0x22
 800b102:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800b20c <_strtod_l+0x594>
 800b106:	6023      	str	r3, [r4, #0]
 800b108:	f04f 0800 	mov.w	r8, #0
 800b10c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b10e:	2b00      	cmp	r3, #0
 800b110:	f43f aded 	beq.w	800acee <_strtod_l+0x76>
 800b114:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b116:	4620      	mov	r0, r4
 800b118:	f7ff f924 	bl	800a364 <_Bfree>
 800b11c:	9905      	ldr	r1, [sp, #20]
 800b11e:	4620      	mov	r0, r4
 800b120:	f7ff f920 	bl	800a364 <_Bfree>
 800b124:	4659      	mov	r1, fp
 800b126:	4620      	mov	r0, r4
 800b128:	f7ff f91c 	bl	800a364 <_Bfree>
 800b12c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b12e:	4620      	mov	r0, r4
 800b130:	f7ff f918 	bl	800a364 <_Bfree>
 800b134:	4629      	mov	r1, r5
 800b136:	4620      	mov	r0, r4
 800b138:	f7ff f914 	bl	800a364 <_Bfree>
 800b13c:	e5d7      	b.n	800acee <_strtod_l+0x76>
 800b13e:	4b32      	ldr	r3, [pc, #200]	; (800b208 <_strtod_l+0x590>)
 800b140:	9304      	str	r3, [sp, #16]
 800b142:	2300      	movs	r3, #0
 800b144:	112d      	asrs	r5, r5, #4
 800b146:	4640      	mov	r0, r8
 800b148:	4649      	mov	r1, r9
 800b14a:	469a      	mov	sl, r3
 800b14c:	2d01      	cmp	r5, #1
 800b14e:	dc21      	bgt.n	800b194 <_strtod_l+0x51c>
 800b150:	b10b      	cbz	r3, 800b156 <_strtod_l+0x4de>
 800b152:	4680      	mov	r8, r0
 800b154:	4689      	mov	r9, r1
 800b156:	492c      	ldr	r1, [pc, #176]	; (800b208 <_strtod_l+0x590>)
 800b158:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800b15c:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800b160:	4642      	mov	r2, r8
 800b162:	464b      	mov	r3, r9
 800b164:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b168:	f7f5 fa66 	bl	8000638 <__aeabi_dmul>
 800b16c:	4b27      	ldr	r3, [pc, #156]	; (800b20c <_strtod_l+0x594>)
 800b16e:	460a      	mov	r2, r1
 800b170:	400b      	ands	r3, r1
 800b172:	4927      	ldr	r1, [pc, #156]	; (800b210 <_strtod_l+0x598>)
 800b174:	428b      	cmp	r3, r1
 800b176:	4680      	mov	r8, r0
 800b178:	d8be      	bhi.n	800b0f8 <_strtod_l+0x480>
 800b17a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b17e:	428b      	cmp	r3, r1
 800b180:	bf86      	itte	hi
 800b182:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800b214 <_strtod_l+0x59c>
 800b186:	f04f 38ff 	movhi.w	r8, #4294967295
 800b18a:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800b18e:	2300      	movs	r3, #0
 800b190:	9304      	str	r3, [sp, #16]
 800b192:	e07b      	b.n	800b28c <_strtod_l+0x614>
 800b194:	07ea      	lsls	r2, r5, #31
 800b196:	d505      	bpl.n	800b1a4 <_strtod_l+0x52c>
 800b198:	9b04      	ldr	r3, [sp, #16]
 800b19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19e:	f7f5 fa4b 	bl	8000638 <__aeabi_dmul>
 800b1a2:	2301      	movs	r3, #1
 800b1a4:	9a04      	ldr	r2, [sp, #16]
 800b1a6:	3208      	adds	r2, #8
 800b1a8:	f10a 0a01 	add.w	sl, sl, #1
 800b1ac:	106d      	asrs	r5, r5, #1
 800b1ae:	9204      	str	r2, [sp, #16]
 800b1b0:	e7cc      	b.n	800b14c <_strtod_l+0x4d4>
 800b1b2:	d0ec      	beq.n	800b18e <_strtod_l+0x516>
 800b1b4:	426d      	negs	r5, r5
 800b1b6:	f015 020f 	ands.w	r2, r5, #15
 800b1ba:	d00a      	beq.n	800b1d2 <_strtod_l+0x55a>
 800b1bc:	4b11      	ldr	r3, [pc, #68]	; (800b204 <_strtod_l+0x58c>)
 800b1be:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1c2:	4640      	mov	r0, r8
 800b1c4:	4649      	mov	r1, r9
 800b1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ca:	f7f5 fb5f 	bl	800088c <__aeabi_ddiv>
 800b1ce:	4680      	mov	r8, r0
 800b1d0:	4689      	mov	r9, r1
 800b1d2:	112d      	asrs	r5, r5, #4
 800b1d4:	d0db      	beq.n	800b18e <_strtod_l+0x516>
 800b1d6:	2d1f      	cmp	r5, #31
 800b1d8:	dd1e      	ble.n	800b218 <_strtod_l+0x5a0>
 800b1da:	2500      	movs	r5, #0
 800b1dc:	46ab      	mov	fp, r5
 800b1de:	9509      	str	r5, [sp, #36]	; 0x24
 800b1e0:	9505      	str	r5, [sp, #20]
 800b1e2:	2322      	movs	r3, #34	; 0x22
 800b1e4:	f04f 0800 	mov.w	r8, #0
 800b1e8:	f04f 0900 	mov.w	r9, #0
 800b1ec:	6023      	str	r3, [r4, #0]
 800b1ee:	e78d      	b.n	800b10c <_strtod_l+0x494>
 800b1f0:	0800cb99 	.word	0x0800cb99
 800b1f4:	0800cdc4 	.word	0x0800cdc4
 800b1f8:	0800cb91 	.word	0x0800cb91
 800b1fc:	0800cbc8 	.word	0x0800cbc8
 800b200:	0800cf55 	.word	0x0800cf55
 800b204:	0800ccd8 	.word	0x0800ccd8
 800b208:	0800ccb0 	.word	0x0800ccb0
 800b20c:	7ff00000 	.word	0x7ff00000
 800b210:	7ca00000 	.word	0x7ca00000
 800b214:	7fefffff 	.word	0x7fefffff
 800b218:	f015 0310 	ands.w	r3, r5, #16
 800b21c:	bf18      	it	ne
 800b21e:	236a      	movne	r3, #106	; 0x6a
 800b220:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800b5c4 <_strtod_l+0x94c>
 800b224:	9304      	str	r3, [sp, #16]
 800b226:	4640      	mov	r0, r8
 800b228:	4649      	mov	r1, r9
 800b22a:	2300      	movs	r3, #0
 800b22c:	07ea      	lsls	r2, r5, #31
 800b22e:	d504      	bpl.n	800b23a <_strtod_l+0x5c2>
 800b230:	e9da 2300 	ldrd	r2, r3, [sl]
 800b234:	f7f5 fa00 	bl	8000638 <__aeabi_dmul>
 800b238:	2301      	movs	r3, #1
 800b23a:	106d      	asrs	r5, r5, #1
 800b23c:	f10a 0a08 	add.w	sl, sl, #8
 800b240:	d1f4      	bne.n	800b22c <_strtod_l+0x5b4>
 800b242:	b10b      	cbz	r3, 800b248 <_strtod_l+0x5d0>
 800b244:	4680      	mov	r8, r0
 800b246:	4689      	mov	r9, r1
 800b248:	9b04      	ldr	r3, [sp, #16]
 800b24a:	b1bb      	cbz	r3, 800b27c <_strtod_l+0x604>
 800b24c:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800b250:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b254:	2b00      	cmp	r3, #0
 800b256:	4649      	mov	r1, r9
 800b258:	dd10      	ble.n	800b27c <_strtod_l+0x604>
 800b25a:	2b1f      	cmp	r3, #31
 800b25c:	f340 811e 	ble.w	800b49c <_strtod_l+0x824>
 800b260:	2b34      	cmp	r3, #52	; 0x34
 800b262:	bfde      	ittt	le
 800b264:	f04f 33ff 	movle.w	r3, #4294967295
 800b268:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b26c:	4093      	lslle	r3, r2
 800b26e:	f04f 0800 	mov.w	r8, #0
 800b272:	bfcc      	ite	gt
 800b274:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800b278:	ea03 0901 	andle.w	r9, r3, r1
 800b27c:	2200      	movs	r2, #0
 800b27e:	2300      	movs	r3, #0
 800b280:	4640      	mov	r0, r8
 800b282:	4649      	mov	r1, r9
 800b284:	f7f5 fc40 	bl	8000b08 <__aeabi_dcmpeq>
 800b288:	2800      	cmp	r0, #0
 800b28a:	d1a6      	bne.n	800b1da <_strtod_l+0x562>
 800b28c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b28e:	9300      	str	r3, [sp, #0]
 800b290:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b292:	4633      	mov	r3, r6
 800b294:	465a      	mov	r2, fp
 800b296:	4620      	mov	r0, r4
 800b298:	f7ff f8cc 	bl	800a434 <__s2b>
 800b29c:	9009      	str	r0, [sp, #36]	; 0x24
 800b29e:	2800      	cmp	r0, #0
 800b2a0:	f43f af2a 	beq.w	800b0f8 <_strtod_l+0x480>
 800b2a4:	9a08      	ldr	r2, [sp, #32]
 800b2a6:	9b05      	ldr	r3, [sp, #20]
 800b2a8:	2a00      	cmp	r2, #0
 800b2aa:	eba3 0307 	sub.w	r3, r3, r7
 800b2ae:	bfa8      	it	ge
 800b2b0:	2300      	movge	r3, #0
 800b2b2:	930c      	str	r3, [sp, #48]	; 0x30
 800b2b4:	2500      	movs	r5, #0
 800b2b6:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800b2ba:	9312      	str	r3, [sp, #72]	; 0x48
 800b2bc:	46ab      	mov	fp, r5
 800b2be:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2c0:	4620      	mov	r0, r4
 800b2c2:	6859      	ldr	r1, [r3, #4]
 800b2c4:	f7ff f80e 	bl	800a2e4 <_Balloc>
 800b2c8:	9005      	str	r0, [sp, #20]
 800b2ca:	2800      	cmp	r0, #0
 800b2cc:	f43f af18 	beq.w	800b100 <_strtod_l+0x488>
 800b2d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2d2:	691a      	ldr	r2, [r3, #16]
 800b2d4:	3202      	adds	r2, #2
 800b2d6:	f103 010c 	add.w	r1, r3, #12
 800b2da:	0092      	lsls	r2, r2, #2
 800b2dc:	300c      	adds	r0, #12
 800b2de:	f000 fd87 	bl	800bdf0 <memcpy>
 800b2e2:	ec49 8b10 	vmov	d0, r8, r9
 800b2e6:	aa18      	add	r2, sp, #96	; 0x60
 800b2e8:	a917      	add	r1, sp, #92	; 0x5c
 800b2ea:	4620      	mov	r0, r4
 800b2ec:	f7ff fbd6 	bl	800aa9c <__d2b>
 800b2f0:	ec49 8b18 	vmov	d8, r8, r9
 800b2f4:	9016      	str	r0, [sp, #88]	; 0x58
 800b2f6:	2800      	cmp	r0, #0
 800b2f8:	f43f af02 	beq.w	800b100 <_strtod_l+0x488>
 800b2fc:	2101      	movs	r1, #1
 800b2fe:	4620      	mov	r0, r4
 800b300:	f7ff f930 	bl	800a564 <__i2b>
 800b304:	4683      	mov	fp, r0
 800b306:	2800      	cmp	r0, #0
 800b308:	f43f aefa 	beq.w	800b100 <_strtod_l+0x488>
 800b30c:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800b30e:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b310:	2e00      	cmp	r6, #0
 800b312:	bfab      	itete	ge
 800b314:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800b316:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800b318:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b31a:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800b31e:	bfac      	ite	ge
 800b320:	eb06 0a03 	addge.w	sl, r6, r3
 800b324:	1b9f      	sublt	r7, r3, r6
 800b326:	9b04      	ldr	r3, [sp, #16]
 800b328:	1af6      	subs	r6, r6, r3
 800b32a:	4416      	add	r6, r2
 800b32c:	4ba0      	ldr	r3, [pc, #640]	; (800b5b0 <_strtod_l+0x938>)
 800b32e:	3e01      	subs	r6, #1
 800b330:	429e      	cmp	r6, r3
 800b332:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b336:	f280 80c4 	bge.w	800b4c2 <_strtod_l+0x84a>
 800b33a:	1b9b      	subs	r3, r3, r6
 800b33c:	2b1f      	cmp	r3, #31
 800b33e:	eba2 0203 	sub.w	r2, r2, r3
 800b342:	f04f 0101 	mov.w	r1, #1
 800b346:	f300 80b0 	bgt.w	800b4aa <_strtod_l+0x832>
 800b34a:	fa01 f303 	lsl.w	r3, r1, r3
 800b34e:	930e      	str	r3, [sp, #56]	; 0x38
 800b350:	2300      	movs	r3, #0
 800b352:	930d      	str	r3, [sp, #52]	; 0x34
 800b354:	eb0a 0602 	add.w	r6, sl, r2
 800b358:	9b04      	ldr	r3, [sp, #16]
 800b35a:	45b2      	cmp	sl, r6
 800b35c:	4417      	add	r7, r2
 800b35e:	441f      	add	r7, r3
 800b360:	4653      	mov	r3, sl
 800b362:	bfa8      	it	ge
 800b364:	4633      	movge	r3, r6
 800b366:	42bb      	cmp	r3, r7
 800b368:	bfa8      	it	ge
 800b36a:	463b      	movge	r3, r7
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	bfc2      	ittt	gt
 800b370:	1af6      	subgt	r6, r6, r3
 800b372:	1aff      	subgt	r7, r7, r3
 800b374:	ebaa 0a03 	subgt.w	sl, sl, r3
 800b378:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	dd17      	ble.n	800b3ae <_strtod_l+0x736>
 800b37e:	4659      	mov	r1, fp
 800b380:	461a      	mov	r2, r3
 800b382:	4620      	mov	r0, r4
 800b384:	f7ff f9ae 	bl	800a6e4 <__pow5mult>
 800b388:	4683      	mov	fp, r0
 800b38a:	2800      	cmp	r0, #0
 800b38c:	f43f aeb8 	beq.w	800b100 <_strtod_l+0x488>
 800b390:	4601      	mov	r1, r0
 800b392:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b394:	4620      	mov	r0, r4
 800b396:	f7ff f8fb 	bl	800a590 <__multiply>
 800b39a:	900b      	str	r0, [sp, #44]	; 0x2c
 800b39c:	2800      	cmp	r0, #0
 800b39e:	f43f aeaf 	beq.w	800b100 <_strtod_l+0x488>
 800b3a2:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b3a4:	4620      	mov	r0, r4
 800b3a6:	f7fe ffdd 	bl	800a364 <_Bfree>
 800b3aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3ac:	9316      	str	r3, [sp, #88]	; 0x58
 800b3ae:	2e00      	cmp	r6, #0
 800b3b0:	f300 808c 	bgt.w	800b4cc <_strtod_l+0x854>
 800b3b4:	9b08      	ldr	r3, [sp, #32]
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	dd08      	ble.n	800b3cc <_strtod_l+0x754>
 800b3ba:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b3bc:	9905      	ldr	r1, [sp, #20]
 800b3be:	4620      	mov	r0, r4
 800b3c0:	f7ff f990 	bl	800a6e4 <__pow5mult>
 800b3c4:	9005      	str	r0, [sp, #20]
 800b3c6:	2800      	cmp	r0, #0
 800b3c8:	f43f ae9a 	beq.w	800b100 <_strtod_l+0x488>
 800b3cc:	2f00      	cmp	r7, #0
 800b3ce:	dd08      	ble.n	800b3e2 <_strtod_l+0x76a>
 800b3d0:	9905      	ldr	r1, [sp, #20]
 800b3d2:	463a      	mov	r2, r7
 800b3d4:	4620      	mov	r0, r4
 800b3d6:	f7ff f9df 	bl	800a798 <__lshift>
 800b3da:	9005      	str	r0, [sp, #20]
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	f43f ae8f 	beq.w	800b100 <_strtod_l+0x488>
 800b3e2:	f1ba 0f00 	cmp.w	sl, #0
 800b3e6:	dd08      	ble.n	800b3fa <_strtod_l+0x782>
 800b3e8:	4659      	mov	r1, fp
 800b3ea:	4652      	mov	r2, sl
 800b3ec:	4620      	mov	r0, r4
 800b3ee:	f7ff f9d3 	bl	800a798 <__lshift>
 800b3f2:	4683      	mov	fp, r0
 800b3f4:	2800      	cmp	r0, #0
 800b3f6:	f43f ae83 	beq.w	800b100 <_strtod_l+0x488>
 800b3fa:	9a05      	ldr	r2, [sp, #20]
 800b3fc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b3fe:	4620      	mov	r0, r4
 800b400:	f7ff fa52 	bl	800a8a8 <__mdiff>
 800b404:	4605      	mov	r5, r0
 800b406:	2800      	cmp	r0, #0
 800b408:	f43f ae7a 	beq.w	800b100 <_strtod_l+0x488>
 800b40c:	68c3      	ldr	r3, [r0, #12]
 800b40e:	930b      	str	r3, [sp, #44]	; 0x2c
 800b410:	2300      	movs	r3, #0
 800b412:	60c3      	str	r3, [r0, #12]
 800b414:	4659      	mov	r1, fp
 800b416:	f7ff fa2b 	bl	800a870 <__mcmp>
 800b41a:	2800      	cmp	r0, #0
 800b41c:	da60      	bge.n	800b4e0 <_strtod_l+0x868>
 800b41e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b420:	ea53 0308 	orrs.w	r3, r3, r8
 800b424:	f040 8084 	bne.w	800b530 <_strtod_l+0x8b8>
 800b428:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b42c:	2b00      	cmp	r3, #0
 800b42e:	d17f      	bne.n	800b530 <_strtod_l+0x8b8>
 800b430:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b434:	0d1b      	lsrs	r3, r3, #20
 800b436:	051b      	lsls	r3, r3, #20
 800b438:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b43c:	d978      	bls.n	800b530 <_strtod_l+0x8b8>
 800b43e:	696b      	ldr	r3, [r5, #20]
 800b440:	b913      	cbnz	r3, 800b448 <_strtod_l+0x7d0>
 800b442:	692b      	ldr	r3, [r5, #16]
 800b444:	2b01      	cmp	r3, #1
 800b446:	dd73      	ble.n	800b530 <_strtod_l+0x8b8>
 800b448:	4629      	mov	r1, r5
 800b44a:	2201      	movs	r2, #1
 800b44c:	4620      	mov	r0, r4
 800b44e:	f7ff f9a3 	bl	800a798 <__lshift>
 800b452:	4659      	mov	r1, fp
 800b454:	4605      	mov	r5, r0
 800b456:	f7ff fa0b 	bl	800a870 <__mcmp>
 800b45a:	2800      	cmp	r0, #0
 800b45c:	dd68      	ble.n	800b530 <_strtod_l+0x8b8>
 800b45e:	9904      	ldr	r1, [sp, #16]
 800b460:	4a54      	ldr	r2, [pc, #336]	; (800b5b4 <_strtod_l+0x93c>)
 800b462:	464b      	mov	r3, r9
 800b464:	2900      	cmp	r1, #0
 800b466:	f000 8084 	beq.w	800b572 <_strtod_l+0x8fa>
 800b46a:	ea02 0109 	and.w	r1, r2, r9
 800b46e:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b472:	dc7e      	bgt.n	800b572 <_strtod_l+0x8fa>
 800b474:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b478:	f77f aeb3 	ble.w	800b1e2 <_strtod_l+0x56a>
 800b47c:	4b4e      	ldr	r3, [pc, #312]	; (800b5b8 <_strtod_l+0x940>)
 800b47e:	4640      	mov	r0, r8
 800b480:	4649      	mov	r1, r9
 800b482:	2200      	movs	r2, #0
 800b484:	f7f5 f8d8 	bl	8000638 <__aeabi_dmul>
 800b488:	4b4a      	ldr	r3, [pc, #296]	; (800b5b4 <_strtod_l+0x93c>)
 800b48a:	400b      	ands	r3, r1
 800b48c:	4680      	mov	r8, r0
 800b48e:	4689      	mov	r9, r1
 800b490:	2b00      	cmp	r3, #0
 800b492:	f47f ae3f 	bne.w	800b114 <_strtod_l+0x49c>
 800b496:	2322      	movs	r3, #34	; 0x22
 800b498:	6023      	str	r3, [r4, #0]
 800b49a:	e63b      	b.n	800b114 <_strtod_l+0x49c>
 800b49c:	f04f 32ff 	mov.w	r2, #4294967295
 800b4a0:	fa02 f303 	lsl.w	r3, r2, r3
 800b4a4:	ea03 0808 	and.w	r8, r3, r8
 800b4a8:	e6e8      	b.n	800b27c <_strtod_l+0x604>
 800b4aa:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800b4ae:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800b4b2:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800b4b6:	36e2      	adds	r6, #226	; 0xe2
 800b4b8:	fa01 f306 	lsl.w	r3, r1, r6
 800b4bc:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800b4c0:	e748      	b.n	800b354 <_strtod_l+0x6dc>
 800b4c2:	2100      	movs	r1, #0
 800b4c4:	2301      	movs	r3, #1
 800b4c6:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800b4ca:	e743      	b.n	800b354 <_strtod_l+0x6dc>
 800b4cc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b4ce:	4632      	mov	r2, r6
 800b4d0:	4620      	mov	r0, r4
 800b4d2:	f7ff f961 	bl	800a798 <__lshift>
 800b4d6:	9016      	str	r0, [sp, #88]	; 0x58
 800b4d8:	2800      	cmp	r0, #0
 800b4da:	f47f af6b 	bne.w	800b3b4 <_strtod_l+0x73c>
 800b4de:	e60f      	b.n	800b100 <_strtod_l+0x488>
 800b4e0:	46ca      	mov	sl, r9
 800b4e2:	d171      	bne.n	800b5c8 <_strtod_l+0x950>
 800b4e4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b4e6:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b4ea:	b352      	cbz	r2, 800b542 <_strtod_l+0x8ca>
 800b4ec:	4a33      	ldr	r2, [pc, #204]	; (800b5bc <_strtod_l+0x944>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d12a      	bne.n	800b548 <_strtod_l+0x8d0>
 800b4f2:	9b04      	ldr	r3, [sp, #16]
 800b4f4:	4641      	mov	r1, r8
 800b4f6:	b1fb      	cbz	r3, 800b538 <_strtod_l+0x8c0>
 800b4f8:	4b2e      	ldr	r3, [pc, #184]	; (800b5b4 <_strtod_l+0x93c>)
 800b4fa:	ea09 0303 	and.w	r3, r9, r3
 800b4fe:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b502:	f04f 32ff 	mov.w	r2, #4294967295
 800b506:	d81a      	bhi.n	800b53e <_strtod_l+0x8c6>
 800b508:	0d1b      	lsrs	r3, r3, #20
 800b50a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b50e:	fa02 f303 	lsl.w	r3, r2, r3
 800b512:	4299      	cmp	r1, r3
 800b514:	d118      	bne.n	800b548 <_strtod_l+0x8d0>
 800b516:	4b2a      	ldr	r3, [pc, #168]	; (800b5c0 <_strtod_l+0x948>)
 800b518:	459a      	cmp	sl, r3
 800b51a:	d102      	bne.n	800b522 <_strtod_l+0x8aa>
 800b51c:	3101      	adds	r1, #1
 800b51e:	f43f adef 	beq.w	800b100 <_strtod_l+0x488>
 800b522:	4b24      	ldr	r3, [pc, #144]	; (800b5b4 <_strtod_l+0x93c>)
 800b524:	ea0a 0303 	and.w	r3, sl, r3
 800b528:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800b52c:	f04f 0800 	mov.w	r8, #0
 800b530:	9b04      	ldr	r3, [sp, #16]
 800b532:	2b00      	cmp	r3, #0
 800b534:	d1a2      	bne.n	800b47c <_strtod_l+0x804>
 800b536:	e5ed      	b.n	800b114 <_strtod_l+0x49c>
 800b538:	f04f 33ff 	mov.w	r3, #4294967295
 800b53c:	e7e9      	b.n	800b512 <_strtod_l+0x89a>
 800b53e:	4613      	mov	r3, r2
 800b540:	e7e7      	b.n	800b512 <_strtod_l+0x89a>
 800b542:	ea53 0308 	orrs.w	r3, r3, r8
 800b546:	d08a      	beq.n	800b45e <_strtod_l+0x7e6>
 800b548:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b54a:	b1e3      	cbz	r3, 800b586 <_strtod_l+0x90e>
 800b54c:	ea13 0f0a 	tst.w	r3, sl
 800b550:	d0ee      	beq.n	800b530 <_strtod_l+0x8b8>
 800b552:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b554:	9a04      	ldr	r2, [sp, #16]
 800b556:	4640      	mov	r0, r8
 800b558:	4649      	mov	r1, r9
 800b55a:	b1c3      	cbz	r3, 800b58e <_strtod_l+0x916>
 800b55c:	f7ff fb6f 	bl	800ac3e <sulp>
 800b560:	4602      	mov	r2, r0
 800b562:	460b      	mov	r3, r1
 800b564:	ec51 0b18 	vmov	r0, r1, d8
 800b568:	f7f4 feb0 	bl	80002cc <__adddf3>
 800b56c:	4680      	mov	r8, r0
 800b56e:	4689      	mov	r9, r1
 800b570:	e7de      	b.n	800b530 <_strtod_l+0x8b8>
 800b572:	4013      	ands	r3, r2
 800b574:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b578:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800b57c:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800b580:	f04f 38ff 	mov.w	r8, #4294967295
 800b584:	e7d4      	b.n	800b530 <_strtod_l+0x8b8>
 800b586:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800b588:	ea13 0f08 	tst.w	r3, r8
 800b58c:	e7e0      	b.n	800b550 <_strtod_l+0x8d8>
 800b58e:	f7ff fb56 	bl	800ac3e <sulp>
 800b592:	4602      	mov	r2, r0
 800b594:	460b      	mov	r3, r1
 800b596:	ec51 0b18 	vmov	r0, r1, d8
 800b59a:	f7f4 fe95 	bl	80002c8 <__aeabi_dsub>
 800b59e:	2200      	movs	r2, #0
 800b5a0:	2300      	movs	r3, #0
 800b5a2:	4680      	mov	r8, r0
 800b5a4:	4689      	mov	r9, r1
 800b5a6:	f7f5 faaf 	bl	8000b08 <__aeabi_dcmpeq>
 800b5aa:	2800      	cmp	r0, #0
 800b5ac:	d0c0      	beq.n	800b530 <_strtod_l+0x8b8>
 800b5ae:	e618      	b.n	800b1e2 <_strtod_l+0x56a>
 800b5b0:	fffffc02 	.word	0xfffffc02
 800b5b4:	7ff00000 	.word	0x7ff00000
 800b5b8:	39500000 	.word	0x39500000
 800b5bc:	000fffff 	.word	0x000fffff
 800b5c0:	7fefffff 	.word	0x7fefffff
 800b5c4:	0800cdd8 	.word	0x0800cdd8
 800b5c8:	4659      	mov	r1, fp
 800b5ca:	4628      	mov	r0, r5
 800b5cc:	f7ff fac0 	bl	800ab50 <__ratio>
 800b5d0:	ec57 6b10 	vmov	r6, r7, d0
 800b5d4:	ee10 0a10 	vmov	r0, s0
 800b5d8:	2200      	movs	r2, #0
 800b5da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b5de:	4639      	mov	r1, r7
 800b5e0:	f7f5 faa6 	bl	8000b30 <__aeabi_dcmple>
 800b5e4:	2800      	cmp	r0, #0
 800b5e6:	d071      	beq.n	800b6cc <_strtod_l+0xa54>
 800b5e8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5ea:	2b00      	cmp	r3, #0
 800b5ec:	d17c      	bne.n	800b6e8 <_strtod_l+0xa70>
 800b5ee:	f1b8 0f00 	cmp.w	r8, #0
 800b5f2:	d15a      	bne.n	800b6aa <_strtod_l+0xa32>
 800b5f4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b5f8:	2b00      	cmp	r3, #0
 800b5fa:	d15d      	bne.n	800b6b8 <_strtod_l+0xa40>
 800b5fc:	4b90      	ldr	r3, [pc, #576]	; (800b840 <_strtod_l+0xbc8>)
 800b5fe:	2200      	movs	r2, #0
 800b600:	4630      	mov	r0, r6
 800b602:	4639      	mov	r1, r7
 800b604:	f7f5 fa8a 	bl	8000b1c <__aeabi_dcmplt>
 800b608:	2800      	cmp	r0, #0
 800b60a:	d15c      	bne.n	800b6c6 <_strtod_l+0xa4e>
 800b60c:	4630      	mov	r0, r6
 800b60e:	4639      	mov	r1, r7
 800b610:	4b8c      	ldr	r3, [pc, #560]	; (800b844 <_strtod_l+0xbcc>)
 800b612:	2200      	movs	r2, #0
 800b614:	f7f5 f810 	bl	8000638 <__aeabi_dmul>
 800b618:	4606      	mov	r6, r0
 800b61a:	460f      	mov	r7, r1
 800b61c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800b620:	9606      	str	r6, [sp, #24]
 800b622:	9307      	str	r3, [sp, #28]
 800b624:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b628:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b62c:	4b86      	ldr	r3, [pc, #536]	; (800b848 <_strtod_l+0xbd0>)
 800b62e:	ea0a 0303 	and.w	r3, sl, r3
 800b632:	930d      	str	r3, [sp, #52]	; 0x34
 800b634:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b636:	4b85      	ldr	r3, [pc, #532]	; (800b84c <_strtod_l+0xbd4>)
 800b638:	429a      	cmp	r2, r3
 800b63a:	f040 8090 	bne.w	800b75e <_strtod_l+0xae6>
 800b63e:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800b642:	ec49 8b10 	vmov	d0, r8, r9
 800b646:	f7ff f9b9 	bl	800a9bc <__ulp>
 800b64a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b64e:	ec51 0b10 	vmov	r0, r1, d0
 800b652:	f7f4 fff1 	bl	8000638 <__aeabi_dmul>
 800b656:	4642      	mov	r2, r8
 800b658:	464b      	mov	r3, r9
 800b65a:	f7f4 fe37 	bl	80002cc <__adddf3>
 800b65e:	460b      	mov	r3, r1
 800b660:	4979      	ldr	r1, [pc, #484]	; (800b848 <_strtod_l+0xbd0>)
 800b662:	4a7b      	ldr	r2, [pc, #492]	; (800b850 <_strtod_l+0xbd8>)
 800b664:	4019      	ands	r1, r3
 800b666:	4291      	cmp	r1, r2
 800b668:	4680      	mov	r8, r0
 800b66a:	d944      	bls.n	800b6f6 <_strtod_l+0xa7e>
 800b66c:	ee18 2a90 	vmov	r2, s17
 800b670:	4b78      	ldr	r3, [pc, #480]	; (800b854 <_strtod_l+0xbdc>)
 800b672:	429a      	cmp	r2, r3
 800b674:	d104      	bne.n	800b680 <_strtod_l+0xa08>
 800b676:	ee18 3a10 	vmov	r3, s16
 800b67a:	3301      	adds	r3, #1
 800b67c:	f43f ad40 	beq.w	800b100 <_strtod_l+0x488>
 800b680:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800b854 <_strtod_l+0xbdc>
 800b684:	f04f 38ff 	mov.w	r8, #4294967295
 800b688:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b68a:	4620      	mov	r0, r4
 800b68c:	f7fe fe6a 	bl	800a364 <_Bfree>
 800b690:	9905      	ldr	r1, [sp, #20]
 800b692:	4620      	mov	r0, r4
 800b694:	f7fe fe66 	bl	800a364 <_Bfree>
 800b698:	4659      	mov	r1, fp
 800b69a:	4620      	mov	r0, r4
 800b69c:	f7fe fe62 	bl	800a364 <_Bfree>
 800b6a0:	4629      	mov	r1, r5
 800b6a2:	4620      	mov	r0, r4
 800b6a4:	f7fe fe5e 	bl	800a364 <_Bfree>
 800b6a8:	e609      	b.n	800b2be <_strtod_l+0x646>
 800b6aa:	f1b8 0f01 	cmp.w	r8, #1
 800b6ae:	d103      	bne.n	800b6b8 <_strtod_l+0xa40>
 800b6b0:	f1b9 0f00 	cmp.w	r9, #0
 800b6b4:	f43f ad95 	beq.w	800b1e2 <_strtod_l+0x56a>
 800b6b8:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800b810 <_strtod_l+0xb98>
 800b6bc:	4f60      	ldr	r7, [pc, #384]	; (800b840 <_strtod_l+0xbc8>)
 800b6be:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b6c2:	2600      	movs	r6, #0
 800b6c4:	e7ae      	b.n	800b624 <_strtod_l+0x9ac>
 800b6c6:	4f5f      	ldr	r7, [pc, #380]	; (800b844 <_strtod_l+0xbcc>)
 800b6c8:	2600      	movs	r6, #0
 800b6ca:	e7a7      	b.n	800b61c <_strtod_l+0x9a4>
 800b6cc:	4b5d      	ldr	r3, [pc, #372]	; (800b844 <_strtod_l+0xbcc>)
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	4639      	mov	r1, r7
 800b6d2:	2200      	movs	r2, #0
 800b6d4:	f7f4 ffb0 	bl	8000638 <__aeabi_dmul>
 800b6d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b6da:	4606      	mov	r6, r0
 800b6dc:	460f      	mov	r7, r1
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d09c      	beq.n	800b61c <_strtod_l+0x9a4>
 800b6e2:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800b6e6:	e79d      	b.n	800b624 <_strtod_l+0x9ac>
 800b6e8:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800b818 <_strtod_l+0xba0>
 800b6ec:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b6f0:	ec57 6b17 	vmov	r6, r7, d7
 800b6f4:	e796      	b.n	800b624 <_strtod_l+0x9ac>
 800b6f6:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800b6fa:	9b04      	ldr	r3, [sp, #16]
 800b6fc:	46ca      	mov	sl, r9
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d1c2      	bne.n	800b688 <_strtod_l+0xa10>
 800b702:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b706:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b708:	0d1b      	lsrs	r3, r3, #20
 800b70a:	051b      	lsls	r3, r3, #20
 800b70c:	429a      	cmp	r2, r3
 800b70e:	d1bb      	bne.n	800b688 <_strtod_l+0xa10>
 800b710:	4630      	mov	r0, r6
 800b712:	4639      	mov	r1, r7
 800b714:	f7f5 faf0 	bl	8000cf8 <__aeabi_d2lz>
 800b718:	f7f4 ff60 	bl	80005dc <__aeabi_l2d>
 800b71c:	4602      	mov	r2, r0
 800b71e:	460b      	mov	r3, r1
 800b720:	4630      	mov	r0, r6
 800b722:	4639      	mov	r1, r7
 800b724:	f7f4 fdd0 	bl	80002c8 <__aeabi_dsub>
 800b728:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b72a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b72e:	ea43 0308 	orr.w	r3, r3, r8
 800b732:	4313      	orrs	r3, r2
 800b734:	4606      	mov	r6, r0
 800b736:	460f      	mov	r7, r1
 800b738:	d054      	beq.n	800b7e4 <_strtod_l+0xb6c>
 800b73a:	a339      	add	r3, pc, #228	; (adr r3, 800b820 <_strtod_l+0xba8>)
 800b73c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b740:	f7f5 f9ec 	bl	8000b1c <__aeabi_dcmplt>
 800b744:	2800      	cmp	r0, #0
 800b746:	f47f ace5 	bne.w	800b114 <_strtod_l+0x49c>
 800b74a:	a337      	add	r3, pc, #220	; (adr r3, 800b828 <_strtod_l+0xbb0>)
 800b74c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b750:	4630      	mov	r0, r6
 800b752:	4639      	mov	r1, r7
 800b754:	f7f5 fa00 	bl	8000b58 <__aeabi_dcmpgt>
 800b758:	2800      	cmp	r0, #0
 800b75a:	d095      	beq.n	800b688 <_strtod_l+0xa10>
 800b75c:	e4da      	b.n	800b114 <_strtod_l+0x49c>
 800b75e:	9b04      	ldr	r3, [sp, #16]
 800b760:	b333      	cbz	r3, 800b7b0 <_strtod_l+0xb38>
 800b762:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b764:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b768:	d822      	bhi.n	800b7b0 <_strtod_l+0xb38>
 800b76a:	a331      	add	r3, pc, #196	; (adr r3, 800b830 <_strtod_l+0xbb8>)
 800b76c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b770:	4630      	mov	r0, r6
 800b772:	4639      	mov	r1, r7
 800b774:	f7f5 f9dc 	bl	8000b30 <__aeabi_dcmple>
 800b778:	b1a0      	cbz	r0, 800b7a4 <_strtod_l+0xb2c>
 800b77a:	4639      	mov	r1, r7
 800b77c:	4630      	mov	r0, r6
 800b77e:	f7f5 fa33 	bl	8000be8 <__aeabi_d2uiz>
 800b782:	2801      	cmp	r0, #1
 800b784:	bf38      	it	cc
 800b786:	2001      	movcc	r0, #1
 800b788:	f7f4 fedc 	bl	8000544 <__aeabi_ui2d>
 800b78c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b78e:	4606      	mov	r6, r0
 800b790:	460f      	mov	r7, r1
 800b792:	bb23      	cbnz	r3, 800b7de <_strtod_l+0xb66>
 800b794:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b798:	9010      	str	r0, [sp, #64]	; 0x40
 800b79a:	9311      	str	r3, [sp, #68]	; 0x44
 800b79c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b7a0:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800b7a4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800b7a6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b7a8:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b7ac:	1a9b      	subs	r3, r3, r2
 800b7ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800b7b0:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b7b4:	eeb0 0a48 	vmov.f32	s0, s16
 800b7b8:	eef0 0a68 	vmov.f32	s1, s17
 800b7bc:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800b7c0:	f7ff f8fc 	bl	800a9bc <__ulp>
 800b7c4:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800b7c8:	ec53 2b10 	vmov	r2, r3, d0
 800b7cc:	f7f4 ff34 	bl	8000638 <__aeabi_dmul>
 800b7d0:	ec53 2b18 	vmov	r2, r3, d8
 800b7d4:	f7f4 fd7a 	bl	80002cc <__adddf3>
 800b7d8:	4680      	mov	r8, r0
 800b7da:	4689      	mov	r9, r1
 800b7dc:	e78d      	b.n	800b6fa <_strtod_l+0xa82>
 800b7de:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800b7e2:	e7db      	b.n	800b79c <_strtod_l+0xb24>
 800b7e4:	a314      	add	r3, pc, #80	; (adr r3, 800b838 <_strtod_l+0xbc0>)
 800b7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ea:	f7f5 f997 	bl	8000b1c <__aeabi_dcmplt>
 800b7ee:	e7b3      	b.n	800b758 <_strtod_l+0xae0>
 800b7f0:	2300      	movs	r3, #0
 800b7f2:	930a      	str	r3, [sp, #40]	; 0x28
 800b7f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b7f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b7f8:	6013      	str	r3, [r2, #0]
 800b7fa:	f7ff ba7c 	b.w	800acf6 <_strtod_l+0x7e>
 800b7fe:	2a65      	cmp	r2, #101	; 0x65
 800b800:	f43f ab75 	beq.w	800aeee <_strtod_l+0x276>
 800b804:	2a45      	cmp	r2, #69	; 0x45
 800b806:	f43f ab72 	beq.w	800aeee <_strtod_l+0x276>
 800b80a:	2301      	movs	r3, #1
 800b80c:	f7ff bbaa 	b.w	800af64 <_strtod_l+0x2ec>
 800b810:	00000000 	.word	0x00000000
 800b814:	bff00000 	.word	0xbff00000
 800b818:	00000000 	.word	0x00000000
 800b81c:	3ff00000 	.word	0x3ff00000
 800b820:	94a03595 	.word	0x94a03595
 800b824:	3fdfffff 	.word	0x3fdfffff
 800b828:	35afe535 	.word	0x35afe535
 800b82c:	3fe00000 	.word	0x3fe00000
 800b830:	ffc00000 	.word	0xffc00000
 800b834:	41dfffff 	.word	0x41dfffff
 800b838:	94a03595 	.word	0x94a03595
 800b83c:	3fcfffff 	.word	0x3fcfffff
 800b840:	3ff00000 	.word	0x3ff00000
 800b844:	3fe00000 	.word	0x3fe00000
 800b848:	7ff00000 	.word	0x7ff00000
 800b84c:	7fe00000 	.word	0x7fe00000
 800b850:	7c9fffff 	.word	0x7c9fffff
 800b854:	7fefffff 	.word	0x7fefffff

0800b858 <_strtod_r>:
 800b858:	4b01      	ldr	r3, [pc, #4]	; (800b860 <_strtod_r+0x8>)
 800b85a:	f7ff ba0d 	b.w	800ac78 <_strtod_l>
 800b85e:	bf00      	nop
 800b860:	2000007c 	.word	0x2000007c

0800b864 <_strtol_l.constprop.0>:
 800b864:	2b01      	cmp	r3, #1
 800b866:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b86a:	d001      	beq.n	800b870 <_strtol_l.constprop.0+0xc>
 800b86c:	2b24      	cmp	r3, #36	; 0x24
 800b86e:	d906      	bls.n	800b87e <_strtol_l.constprop.0+0x1a>
 800b870:	f7fd fd88 	bl	8009384 <__errno>
 800b874:	2316      	movs	r3, #22
 800b876:	6003      	str	r3, [r0, #0]
 800b878:	2000      	movs	r0, #0
 800b87a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b87e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800b964 <_strtol_l.constprop.0+0x100>
 800b882:	460d      	mov	r5, r1
 800b884:	462e      	mov	r6, r5
 800b886:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b88a:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800b88e:	f017 0708 	ands.w	r7, r7, #8
 800b892:	d1f7      	bne.n	800b884 <_strtol_l.constprop.0+0x20>
 800b894:	2c2d      	cmp	r4, #45	; 0x2d
 800b896:	d132      	bne.n	800b8fe <_strtol_l.constprop.0+0x9a>
 800b898:	782c      	ldrb	r4, [r5, #0]
 800b89a:	2701      	movs	r7, #1
 800b89c:	1cb5      	adds	r5, r6, #2
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d05b      	beq.n	800b95a <_strtol_l.constprop.0+0xf6>
 800b8a2:	2b10      	cmp	r3, #16
 800b8a4:	d109      	bne.n	800b8ba <_strtol_l.constprop.0+0x56>
 800b8a6:	2c30      	cmp	r4, #48	; 0x30
 800b8a8:	d107      	bne.n	800b8ba <_strtol_l.constprop.0+0x56>
 800b8aa:	782c      	ldrb	r4, [r5, #0]
 800b8ac:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b8b0:	2c58      	cmp	r4, #88	; 0x58
 800b8b2:	d14d      	bne.n	800b950 <_strtol_l.constprop.0+0xec>
 800b8b4:	786c      	ldrb	r4, [r5, #1]
 800b8b6:	2310      	movs	r3, #16
 800b8b8:	3502      	adds	r5, #2
 800b8ba:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b8be:	f108 38ff 	add.w	r8, r8, #4294967295
 800b8c2:	f04f 0e00 	mov.w	lr, #0
 800b8c6:	fbb8 f9f3 	udiv	r9, r8, r3
 800b8ca:	4676      	mov	r6, lr
 800b8cc:	fb03 8a19 	mls	sl, r3, r9, r8
 800b8d0:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800b8d4:	f1bc 0f09 	cmp.w	ip, #9
 800b8d8:	d816      	bhi.n	800b908 <_strtol_l.constprop.0+0xa4>
 800b8da:	4664      	mov	r4, ip
 800b8dc:	42a3      	cmp	r3, r4
 800b8de:	dd24      	ble.n	800b92a <_strtol_l.constprop.0+0xc6>
 800b8e0:	f1be 3fff 	cmp.w	lr, #4294967295
 800b8e4:	d008      	beq.n	800b8f8 <_strtol_l.constprop.0+0x94>
 800b8e6:	45b1      	cmp	r9, r6
 800b8e8:	d31c      	bcc.n	800b924 <_strtol_l.constprop.0+0xc0>
 800b8ea:	d101      	bne.n	800b8f0 <_strtol_l.constprop.0+0x8c>
 800b8ec:	45a2      	cmp	sl, r4
 800b8ee:	db19      	blt.n	800b924 <_strtol_l.constprop.0+0xc0>
 800b8f0:	fb06 4603 	mla	r6, r6, r3, r4
 800b8f4:	f04f 0e01 	mov.w	lr, #1
 800b8f8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b8fc:	e7e8      	b.n	800b8d0 <_strtol_l.constprop.0+0x6c>
 800b8fe:	2c2b      	cmp	r4, #43	; 0x2b
 800b900:	bf04      	itt	eq
 800b902:	782c      	ldrbeq	r4, [r5, #0]
 800b904:	1cb5      	addeq	r5, r6, #2
 800b906:	e7ca      	b.n	800b89e <_strtol_l.constprop.0+0x3a>
 800b908:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800b90c:	f1bc 0f19 	cmp.w	ip, #25
 800b910:	d801      	bhi.n	800b916 <_strtol_l.constprop.0+0xb2>
 800b912:	3c37      	subs	r4, #55	; 0x37
 800b914:	e7e2      	b.n	800b8dc <_strtol_l.constprop.0+0x78>
 800b916:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800b91a:	f1bc 0f19 	cmp.w	ip, #25
 800b91e:	d804      	bhi.n	800b92a <_strtol_l.constprop.0+0xc6>
 800b920:	3c57      	subs	r4, #87	; 0x57
 800b922:	e7db      	b.n	800b8dc <_strtol_l.constprop.0+0x78>
 800b924:	f04f 3eff 	mov.w	lr, #4294967295
 800b928:	e7e6      	b.n	800b8f8 <_strtol_l.constprop.0+0x94>
 800b92a:	f1be 3fff 	cmp.w	lr, #4294967295
 800b92e:	d105      	bne.n	800b93c <_strtol_l.constprop.0+0xd8>
 800b930:	2322      	movs	r3, #34	; 0x22
 800b932:	6003      	str	r3, [r0, #0]
 800b934:	4646      	mov	r6, r8
 800b936:	b942      	cbnz	r2, 800b94a <_strtol_l.constprop.0+0xe6>
 800b938:	4630      	mov	r0, r6
 800b93a:	e79e      	b.n	800b87a <_strtol_l.constprop.0+0x16>
 800b93c:	b107      	cbz	r7, 800b940 <_strtol_l.constprop.0+0xdc>
 800b93e:	4276      	negs	r6, r6
 800b940:	2a00      	cmp	r2, #0
 800b942:	d0f9      	beq.n	800b938 <_strtol_l.constprop.0+0xd4>
 800b944:	f1be 0f00 	cmp.w	lr, #0
 800b948:	d000      	beq.n	800b94c <_strtol_l.constprop.0+0xe8>
 800b94a:	1e69      	subs	r1, r5, #1
 800b94c:	6011      	str	r1, [r2, #0]
 800b94e:	e7f3      	b.n	800b938 <_strtol_l.constprop.0+0xd4>
 800b950:	2430      	movs	r4, #48	; 0x30
 800b952:	2b00      	cmp	r3, #0
 800b954:	d1b1      	bne.n	800b8ba <_strtol_l.constprop.0+0x56>
 800b956:	2308      	movs	r3, #8
 800b958:	e7af      	b.n	800b8ba <_strtol_l.constprop.0+0x56>
 800b95a:	2c30      	cmp	r4, #48	; 0x30
 800b95c:	d0a5      	beq.n	800b8aa <_strtol_l.constprop.0+0x46>
 800b95e:	230a      	movs	r3, #10
 800b960:	e7ab      	b.n	800b8ba <_strtol_l.constprop.0+0x56>
 800b962:	bf00      	nop
 800b964:	0800ce01 	.word	0x0800ce01

0800b968 <_strtol_r>:
 800b968:	f7ff bf7c 	b.w	800b864 <_strtol_l.constprop.0>

0800b96c <__ssputs_r>:
 800b96c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b970:	688e      	ldr	r6, [r1, #8]
 800b972:	461f      	mov	r7, r3
 800b974:	42be      	cmp	r6, r7
 800b976:	680b      	ldr	r3, [r1, #0]
 800b978:	4682      	mov	sl, r0
 800b97a:	460c      	mov	r4, r1
 800b97c:	4690      	mov	r8, r2
 800b97e:	d82c      	bhi.n	800b9da <__ssputs_r+0x6e>
 800b980:	898a      	ldrh	r2, [r1, #12]
 800b982:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b986:	d026      	beq.n	800b9d6 <__ssputs_r+0x6a>
 800b988:	6965      	ldr	r5, [r4, #20]
 800b98a:	6909      	ldr	r1, [r1, #16]
 800b98c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b990:	eba3 0901 	sub.w	r9, r3, r1
 800b994:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b998:	1c7b      	adds	r3, r7, #1
 800b99a:	444b      	add	r3, r9
 800b99c:	106d      	asrs	r5, r5, #1
 800b99e:	429d      	cmp	r5, r3
 800b9a0:	bf38      	it	cc
 800b9a2:	461d      	movcc	r5, r3
 800b9a4:	0553      	lsls	r3, r2, #21
 800b9a6:	d527      	bpl.n	800b9f8 <__ssputs_r+0x8c>
 800b9a8:	4629      	mov	r1, r5
 800b9aa:	f7fe fc0f 	bl	800a1cc <_malloc_r>
 800b9ae:	4606      	mov	r6, r0
 800b9b0:	b360      	cbz	r0, 800ba0c <__ssputs_r+0xa0>
 800b9b2:	6921      	ldr	r1, [r4, #16]
 800b9b4:	464a      	mov	r2, r9
 800b9b6:	f000 fa1b 	bl	800bdf0 <memcpy>
 800b9ba:	89a3      	ldrh	r3, [r4, #12]
 800b9bc:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b9c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b9c4:	81a3      	strh	r3, [r4, #12]
 800b9c6:	6126      	str	r6, [r4, #16]
 800b9c8:	6165      	str	r5, [r4, #20]
 800b9ca:	444e      	add	r6, r9
 800b9cc:	eba5 0509 	sub.w	r5, r5, r9
 800b9d0:	6026      	str	r6, [r4, #0]
 800b9d2:	60a5      	str	r5, [r4, #8]
 800b9d4:	463e      	mov	r6, r7
 800b9d6:	42be      	cmp	r6, r7
 800b9d8:	d900      	bls.n	800b9dc <__ssputs_r+0x70>
 800b9da:	463e      	mov	r6, r7
 800b9dc:	6820      	ldr	r0, [r4, #0]
 800b9de:	4632      	mov	r2, r6
 800b9e0:	4641      	mov	r1, r8
 800b9e2:	f000 f9c9 	bl	800bd78 <memmove>
 800b9e6:	68a3      	ldr	r3, [r4, #8]
 800b9e8:	1b9b      	subs	r3, r3, r6
 800b9ea:	60a3      	str	r3, [r4, #8]
 800b9ec:	6823      	ldr	r3, [r4, #0]
 800b9ee:	4433      	add	r3, r6
 800b9f0:	6023      	str	r3, [r4, #0]
 800b9f2:	2000      	movs	r0, #0
 800b9f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9f8:	462a      	mov	r2, r5
 800b9fa:	f000 fdae 	bl	800c55a <_realloc_r>
 800b9fe:	4606      	mov	r6, r0
 800ba00:	2800      	cmp	r0, #0
 800ba02:	d1e0      	bne.n	800b9c6 <__ssputs_r+0x5a>
 800ba04:	6921      	ldr	r1, [r4, #16]
 800ba06:	4650      	mov	r0, sl
 800ba08:	f7fe fb6c 	bl	800a0e4 <_free_r>
 800ba0c:	230c      	movs	r3, #12
 800ba0e:	f8ca 3000 	str.w	r3, [sl]
 800ba12:	89a3      	ldrh	r3, [r4, #12]
 800ba14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba18:	81a3      	strh	r3, [r4, #12]
 800ba1a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba1e:	e7e9      	b.n	800b9f4 <__ssputs_r+0x88>

0800ba20 <_svfiprintf_r>:
 800ba20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba24:	4698      	mov	r8, r3
 800ba26:	898b      	ldrh	r3, [r1, #12]
 800ba28:	061b      	lsls	r3, r3, #24
 800ba2a:	b09d      	sub	sp, #116	; 0x74
 800ba2c:	4607      	mov	r7, r0
 800ba2e:	460d      	mov	r5, r1
 800ba30:	4614      	mov	r4, r2
 800ba32:	d50e      	bpl.n	800ba52 <_svfiprintf_r+0x32>
 800ba34:	690b      	ldr	r3, [r1, #16]
 800ba36:	b963      	cbnz	r3, 800ba52 <_svfiprintf_r+0x32>
 800ba38:	2140      	movs	r1, #64	; 0x40
 800ba3a:	f7fe fbc7 	bl	800a1cc <_malloc_r>
 800ba3e:	6028      	str	r0, [r5, #0]
 800ba40:	6128      	str	r0, [r5, #16]
 800ba42:	b920      	cbnz	r0, 800ba4e <_svfiprintf_r+0x2e>
 800ba44:	230c      	movs	r3, #12
 800ba46:	603b      	str	r3, [r7, #0]
 800ba48:	f04f 30ff 	mov.w	r0, #4294967295
 800ba4c:	e0d0      	b.n	800bbf0 <_svfiprintf_r+0x1d0>
 800ba4e:	2340      	movs	r3, #64	; 0x40
 800ba50:	616b      	str	r3, [r5, #20]
 800ba52:	2300      	movs	r3, #0
 800ba54:	9309      	str	r3, [sp, #36]	; 0x24
 800ba56:	2320      	movs	r3, #32
 800ba58:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ba5c:	f8cd 800c 	str.w	r8, [sp, #12]
 800ba60:	2330      	movs	r3, #48	; 0x30
 800ba62:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bc08 <_svfiprintf_r+0x1e8>
 800ba66:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ba6a:	f04f 0901 	mov.w	r9, #1
 800ba6e:	4623      	mov	r3, r4
 800ba70:	469a      	mov	sl, r3
 800ba72:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ba76:	b10a      	cbz	r2, 800ba7c <_svfiprintf_r+0x5c>
 800ba78:	2a25      	cmp	r2, #37	; 0x25
 800ba7a:	d1f9      	bne.n	800ba70 <_svfiprintf_r+0x50>
 800ba7c:	ebba 0b04 	subs.w	fp, sl, r4
 800ba80:	d00b      	beq.n	800ba9a <_svfiprintf_r+0x7a>
 800ba82:	465b      	mov	r3, fp
 800ba84:	4622      	mov	r2, r4
 800ba86:	4629      	mov	r1, r5
 800ba88:	4638      	mov	r0, r7
 800ba8a:	f7ff ff6f 	bl	800b96c <__ssputs_r>
 800ba8e:	3001      	adds	r0, #1
 800ba90:	f000 80a9 	beq.w	800bbe6 <_svfiprintf_r+0x1c6>
 800ba94:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ba96:	445a      	add	r2, fp
 800ba98:	9209      	str	r2, [sp, #36]	; 0x24
 800ba9a:	f89a 3000 	ldrb.w	r3, [sl]
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	f000 80a1 	beq.w	800bbe6 <_svfiprintf_r+0x1c6>
 800baa4:	2300      	movs	r3, #0
 800baa6:	f04f 32ff 	mov.w	r2, #4294967295
 800baaa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800baae:	f10a 0a01 	add.w	sl, sl, #1
 800bab2:	9304      	str	r3, [sp, #16]
 800bab4:	9307      	str	r3, [sp, #28]
 800bab6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800baba:	931a      	str	r3, [sp, #104]	; 0x68
 800babc:	4654      	mov	r4, sl
 800babe:	2205      	movs	r2, #5
 800bac0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bac4:	4850      	ldr	r0, [pc, #320]	; (800bc08 <_svfiprintf_r+0x1e8>)
 800bac6:	f7f4 fba3 	bl	8000210 <memchr>
 800baca:	9a04      	ldr	r2, [sp, #16]
 800bacc:	b9d8      	cbnz	r0, 800bb06 <_svfiprintf_r+0xe6>
 800bace:	06d0      	lsls	r0, r2, #27
 800bad0:	bf44      	itt	mi
 800bad2:	2320      	movmi	r3, #32
 800bad4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bad8:	0711      	lsls	r1, r2, #28
 800bada:	bf44      	itt	mi
 800badc:	232b      	movmi	r3, #43	; 0x2b
 800bade:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bae2:	f89a 3000 	ldrb.w	r3, [sl]
 800bae6:	2b2a      	cmp	r3, #42	; 0x2a
 800bae8:	d015      	beq.n	800bb16 <_svfiprintf_r+0xf6>
 800baea:	9a07      	ldr	r2, [sp, #28]
 800baec:	4654      	mov	r4, sl
 800baee:	2000      	movs	r0, #0
 800baf0:	f04f 0c0a 	mov.w	ip, #10
 800baf4:	4621      	mov	r1, r4
 800baf6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bafa:	3b30      	subs	r3, #48	; 0x30
 800bafc:	2b09      	cmp	r3, #9
 800bafe:	d94d      	bls.n	800bb9c <_svfiprintf_r+0x17c>
 800bb00:	b1b0      	cbz	r0, 800bb30 <_svfiprintf_r+0x110>
 800bb02:	9207      	str	r2, [sp, #28]
 800bb04:	e014      	b.n	800bb30 <_svfiprintf_r+0x110>
 800bb06:	eba0 0308 	sub.w	r3, r0, r8
 800bb0a:	fa09 f303 	lsl.w	r3, r9, r3
 800bb0e:	4313      	orrs	r3, r2
 800bb10:	9304      	str	r3, [sp, #16]
 800bb12:	46a2      	mov	sl, r4
 800bb14:	e7d2      	b.n	800babc <_svfiprintf_r+0x9c>
 800bb16:	9b03      	ldr	r3, [sp, #12]
 800bb18:	1d19      	adds	r1, r3, #4
 800bb1a:	681b      	ldr	r3, [r3, #0]
 800bb1c:	9103      	str	r1, [sp, #12]
 800bb1e:	2b00      	cmp	r3, #0
 800bb20:	bfbb      	ittet	lt
 800bb22:	425b      	neglt	r3, r3
 800bb24:	f042 0202 	orrlt.w	r2, r2, #2
 800bb28:	9307      	strge	r3, [sp, #28]
 800bb2a:	9307      	strlt	r3, [sp, #28]
 800bb2c:	bfb8      	it	lt
 800bb2e:	9204      	strlt	r2, [sp, #16]
 800bb30:	7823      	ldrb	r3, [r4, #0]
 800bb32:	2b2e      	cmp	r3, #46	; 0x2e
 800bb34:	d10c      	bne.n	800bb50 <_svfiprintf_r+0x130>
 800bb36:	7863      	ldrb	r3, [r4, #1]
 800bb38:	2b2a      	cmp	r3, #42	; 0x2a
 800bb3a:	d134      	bne.n	800bba6 <_svfiprintf_r+0x186>
 800bb3c:	9b03      	ldr	r3, [sp, #12]
 800bb3e:	1d1a      	adds	r2, r3, #4
 800bb40:	681b      	ldr	r3, [r3, #0]
 800bb42:	9203      	str	r2, [sp, #12]
 800bb44:	2b00      	cmp	r3, #0
 800bb46:	bfb8      	it	lt
 800bb48:	f04f 33ff 	movlt.w	r3, #4294967295
 800bb4c:	3402      	adds	r4, #2
 800bb4e:	9305      	str	r3, [sp, #20]
 800bb50:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bc18 <_svfiprintf_r+0x1f8>
 800bb54:	7821      	ldrb	r1, [r4, #0]
 800bb56:	2203      	movs	r2, #3
 800bb58:	4650      	mov	r0, sl
 800bb5a:	f7f4 fb59 	bl	8000210 <memchr>
 800bb5e:	b138      	cbz	r0, 800bb70 <_svfiprintf_r+0x150>
 800bb60:	9b04      	ldr	r3, [sp, #16]
 800bb62:	eba0 000a 	sub.w	r0, r0, sl
 800bb66:	2240      	movs	r2, #64	; 0x40
 800bb68:	4082      	lsls	r2, r0
 800bb6a:	4313      	orrs	r3, r2
 800bb6c:	3401      	adds	r4, #1
 800bb6e:	9304      	str	r3, [sp, #16]
 800bb70:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bb74:	4825      	ldr	r0, [pc, #148]	; (800bc0c <_svfiprintf_r+0x1ec>)
 800bb76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800bb7a:	2206      	movs	r2, #6
 800bb7c:	f7f4 fb48 	bl	8000210 <memchr>
 800bb80:	2800      	cmp	r0, #0
 800bb82:	d038      	beq.n	800bbf6 <_svfiprintf_r+0x1d6>
 800bb84:	4b22      	ldr	r3, [pc, #136]	; (800bc10 <_svfiprintf_r+0x1f0>)
 800bb86:	bb1b      	cbnz	r3, 800bbd0 <_svfiprintf_r+0x1b0>
 800bb88:	9b03      	ldr	r3, [sp, #12]
 800bb8a:	3307      	adds	r3, #7
 800bb8c:	f023 0307 	bic.w	r3, r3, #7
 800bb90:	3308      	adds	r3, #8
 800bb92:	9303      	str	r3, [sp, #12]
 800bb94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bb96:	4433      	add	r3, r6
 800bb98:	9309      	str	r3, [sp, #36]	; 0x24
 800bb9a:	e768      	b.n	800ba6e <_svfiprintf_r+0x4e>
 800bb9c:	fb0c 3202 	mla	r2, ip, r2, r3
 800bba0:	460c      	mov	r4, r1
 800bba2:	2001      	movs	r0, #1
 800bba4:	e7a6      	b.n	800baf4 <_svfiprintf_r+0xd4>
 800bba6:	2300      	movs	r3, #0
 800bba8:	3401      	adds	r4, #1
 800bbaa:	9305      	str	r3, [sp, #20]
 800bbac:	4619      	mov	r1, r3
 800bbae:	f04f 0c0a 	mov.w	ip, #10
 800bbb2:	4620      	mov	r0, r4
 800bbb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bbb8:	3a30      	subs	r2, #48	; 0x30
 800bbba:	2a09      	cmp	r2, #9
 800bbbc:	d903      	bls.n	800bbc6 <_svfiprintf_r+0x1a6>
 800bbbe:	2b00      	cmp	r3, #0
 800bbc0:	d0c6      	beq.n	800bb50 <_svfiprintf_r+0x130>
 800bbc2:	9105      	str	r1, [sp, #20]
 800bbc4:	e7c4      	b.n	800bb50 <_svfiprintf_r+0x130>
 800bbc6:	fb0c 2101 	mla	r1, ip, r1, r2
 800bbca:	4604      	mov	r4, r0
 800bbcc:	2301      	movs	r3, #1
 800bbce:	e7f0      	b.n	800bbb2 <_svfiprintf_r+0x192>
 800bbd0:	ab03      	add	r3, sp, #12
 800bbd2:	9300      	str	r3, [sp, #0]
 800bbd4:	462a      	mov	r2, r5
 800bbd6:	4b0f      	ldr	r3, [pc, #60]	; (800bc14 <_svfiprintf_r+0x1f4>)
 800bbd8:	a904      	add	r1, sp, #16
 800bbda:	4638      	mov	r0, r7
 800bbdc:	f7fc fc50 	bl	8008480 <_printf_float>
 800bbe0:	1c42      	adds	r2, r0, #1
 800bbe2:	4606      	mov	r6, r0
 800bbe4:	d1d6      	bne.n	800bb94 <_svfiprintf_r+0x174>
 800bbe6:	89ab      	ldrh	r3, [r5, #12]
 800bbe8:	065b      	lsls	r3, r3, #25
 800bbea:	f53f af2d 	bmi.w	800ba48 <_svfiprintf_r+0x28>
 800bbee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbf0:	b01d      	add	sp, #116	; 0x74
 800bbf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbf6:	ab03      	add	r3, sp, #12
 800bbf8:	9300      	str	r3, [sp, #0]
 800bbfa:	462a      	mov	r2, r5
 800bbfc:	4b05      	ldr	r3, [pc, #20]	; (800bc14 <_svfiprintf_r+0x1f4>)
 800bbfe:	a904      	add	r1, sp, #16
 800bc00:	4638      	mov	r0, r7
 800bc02:	f7fc fee1 	bl	80089c8 <_printf_i>
 800bc06:	e7eb      	b.n	800bbe0 <_svfiprintf_r+0x1c0>
 800bc08:	0800cf01 	.word	0x0800cf01
 800bc0c:	0800cf0b 	.word	0x0800cf0b
 800bc10:	08008481 	.word	0x08008481
 800bc14:	0800b96d 	.word	0x0800b96d
 800bc18:	0800cf07 	.word	0x0800cf07

0800bc1c <__sflush_r>:
 800bc1c:	898a      	ldrh	r2, [r1, #12]
 800bc1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc22:	4605      	mov	r5, r0
 800bc24:	0710      	lsls	r0, r2, #28
 800bc26:	460c      	mov	r4, r1
 800bc28:	d458      	bmi.n	800bcdc <__sflush_r+0xc0>
 800bc2a:	684b      	ldr	r3, [r1, #4]
 800bc2c:	2b00      	cmp	r3, #0
 800bc2e:	dc05      	bgt.n	800bc3c <__sflush_r+0x20>
 800bc30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	dc02      	bgt.n	800bc3c <__sflush_r+0x20>
 800bc36:	2000      	movs	r0, #0
 800bc38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bc3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc3e:	2e00      	cmp	r6, #0
 800bc40:	d0f9      	beq.n	800bc36 <__sflush_r+0x1a>
 800bc42:	2300      	movs	r3, #0
 800bc44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bc48:	682f      	ldr	r7, [r5, #0]
 800bc4a:	6a21      	ldr	r1, [r4, #32]
 800bc4c:	602b      	str	r3, [r5, #0]
 800bc4e:	d032      	beq.n	800bcb6 <__sflush_r+0x9a>
 800bc50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bc52:	89a3      	ldrh	r3, [r4, #12]
 800bc54:	075a      	lsls	r2, r3, #29
 800bc56:	d505      	bpl.n	800bc64 <__sflush_r+0x48>
 800bc58:	6863      	ldr	r3, [r4, #4]
 800bc5a:	1ac0      	subs	r0, r0, r3
 800bc5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bc5e:	b10b      	cbz	r3, 800bc64 <__sflush_r+0x48>
 800bc60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bc62:	1ac0      	subs	r0, r0, r3
 800bc64:	2300      	movs	r3, #0
 800bc66:	4602      	mov	r2, r0
 800bc68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bc6a:	6a21      	ldr	r1, [r4, #32]
 800bc6c:	4628      	mov	r0, r5
 800bc6e:	47b0      	blx	r6
 800bc70:	1c43      	adds	r3, r0, #1
 800bc72:	89a3      	ldrh	r3, [r4, #12]
 800bc74:	d106      	bne.n	800bc84 <__sflush_r+0x68>
 800bc76:	6829      	ldr	r1, [r5, #0]
 800bc78:	291d      	cmp	r1, #29
 800bc7a:	d82b      	bhi.n	800bcd4 <__sflush_r+0xb8>
 800bc7c:	4a29      	ldr	r2, [pc, #164]	; (800bd24 <__sflush_r+0x108>)
 800bc7e:	410a      	asrs	r2, r1
 800bc80:	07d6      	lsls	r6, r2, #31
 800bc82:	d427      	bmi.n	800bcd4 <__sflush_r+0xb8>
 800bc84:	2200      	movs	r2, #0
 800bc86:	6062      	str	r2, [r4, #4]
 800bc88:	04d9      	lsls	r1, r3, #19
 800bc8a:	6922      	ldr	r2, [r4, #16]
 800bc8c:	6022      	str	r2, [r4, #0]
 800bc8e:	d504      	bpl.n	800bc9a <__sflush_r+0x7e>
 800bc90:	1c42      	adds	r2, r0, #1
 800bc92:	d101      	bne.n	800bc98 <__sflush_r+0x7c>
 800bc94:	682b      	ldr	r3, [r5, #0]
 800bc96:	b903      	cbnz	r3, 800bc9a <__sflush_r+0x7e>
 800bc98:	6560      	str	r0, [r4, #84]	; 0x54
 800bc9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bc9c:	602f      	str	r7, [r5, #0]
 800bc9e:	2900      	cmp	r1, #0
 800bca0:	d0c9      	beq.n	800bc36 <__sflush_r+0x1a>
 800bca2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bca6:	4299      	cmp	r1, r3
 800bca8:	d002      	beq.n	800bcb0 <__sflush_r+0x94>
 800bcaa:	4628      	mov	r0, r5
 800bcac:	f7fe fa1a 	bl	800a0e4 <_free_r>
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	6360      	str	r0, [r4, #52]	; 0x34
 800bcb4:	e7c0      	b.n	800bc38 <__sflush_r+0x1c>
 800bcb6:	2301      	movs	r3, #1
 800bcb8:	4628      	mov	r0, r5
 800bcba:	47b0      	blx	r6
 800bcbc:	1c41      	adds	r1, r0, #1
 800bcbe:	d1c8      	bne.n	800bc52 <__sflush_r+0x36>
 800bcc0:	682b      	ldr	r3, [r5, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d0c5      	beq.n	800bc52 <__sflush_r+0x36>
 800bcc6:	2b1d      	cmp	r3, #29
 800bcc8:	d001      	beq.n	800bcce <__sflush_r+0xb2>
 800bcca:	2b16      	cmp	r3, #22
 800bccc:	d101      	bne.n	800bcd2 <__sflush_r+0xb6>
 800bcce:	602f      	str	r7, [r5, #0]
 800bcd0:	e7b1      	b.n	800bc36 <__sflush_r+0x1a>
 800bcd2:	89a3      	ldrh	r3, [r4, #12]
 800bcd4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcd8:	81a3      	strh	r3, [r4, #12]
 800bcda:	e7ad      	b.n	800bc38 <__sflush_r+0x1c>
 800bcdc:	690f      	ldr	r7, [r1, #16]
 800bcde:	2f00      	cmp	r7, #0
 800bce0:	d0a9      	beq.n	800bc36 <__sflush_r+0x1a>
 800bce2:	0793      	lsls	r3, r2, #30
 800bce4:	680e      	ldr	r6, [r1, #0]
 800bce6:	bf08      	it	eq
 800bce8:	694b      	ldreq	r3, [r1, #20]
 800bcea:	600f      	str	r7, [r1, #0]
 800bcec:	bf18      	it	ne
 800bcee:	2300      	movne	r3, #0
 800bcf0:	eba6 0807 	sub.w	r8, r6, r7
 800bcf4:	608b      	str	r3, [r1, #8]
 800bcf6:	f1b8 0f00 	cmp.w	r8, #0
 800bcfa:	dd9c      	ble.n	800bc36 <__sflush_r+0x1a>
 800bcfc:	6a21      	ldr	r1, [r4, #32]
 800bcfe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd00:	4643      	mov	r3, r8
 800bd02:	463a      	mov	r2, r7
 800bd04:	4628      	mov	r0, r5
 800bd06:	47b0      	blx	r6
 800bd08:	2800      	cmp	r0, #0
 800bd0a:	dc06      	bgt.n	800bd1a <__sflush_r+0xfe>
 800bd0c:	89a3      	ldrh	r3, [r4, #12]
 800bd0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd12:	81a3      	strh	r3, [r4, #12]
 800bd14:	f04f 30ff 	mov.w	r0, #4294967295
 800bd18:	e78e      	b.n	800bc38 <__sflush_r+0x1c>
 800bd1a:	4407      	add	r7, r0
 800bd1c:	eba8 0800 	sub.w	r8, r8, r0
 800bd20:	e7e9      	b.n	800bcf6 <__sflush_r+0xda>
 800bd22:	bf00      	nop
 800bd24:	dfbffffe 	.word	0xdfbffffe

0800bd28 <_fflush_r>:
 800bd28:	b538      	push	{r3, r4, r5, lr}
 800bd2a:	690b      	ldr	r3, [r1, #16]
 800bd2c:	4605      	mov	r5, r0
 800bd2e:	460c      	mov	r4, r1
 800bd30:	b913      	cbnz	r3, 800bd38 <_fflush_r+0x10>
 800bd32:	2500      	movs	r5, #0
 800bd34:	4628      	mov	r0, r5
 800bd36:	bd38      	pop	{r3, r4, r5, pc}
 800bd38:	b118      	cbz	r0, 800bd42 <_fflush_r+0x1a>
 800bd3a:	6a03      	ldr	r3, [r0, #32]
 800bd3c:	b90b      	cbnz	r3, 800bd42 <_fflush_r+0x1a>
 800bd3e:	f7fd fa01 	bl	8009144 <__sinit>
 800bd42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d0f3      	beq.n	800bd32 <_fflush_r+0xa>
 800bd4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bd4c:	07d0      	lsls	r0, r2, #31
 800bd4e:	d404      	bmi.n	800bd5a <_fflush_r+0x32>
 800bd50:	0599      	lsls	r1, r3, #22
 800bd52:	d402      	bmi.n	800bd5a <_fflush_r+0x32>
 800bd54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd56:	f7fd fb40 	bl	80093da <__retarget_lock_acquire_recursive>
 800bd5a:	4628      	mov	r0, r5
 800bd5c:	4621      	mov	r1, r4
 800bd5e:	f7ff ff5d 	bl	800bc1c <__sflush_r>
 800bd62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bd64:	07da      	lsls	r2, r3, #31
 800bd66:	4605      	mov	r5, r0
 800bd68:	d4e4      	bmi.n	800bd34 <_fflush_r+0xc>
 800bd6a:	89a3      	ldrh	r3, [r4, #12]
 800bd6c:	059b      	lsls	r3, r3, #22
 800bd6e:	d4e1      	bmi.n	800bd34 <_fflush_r+0xc>
 800bd70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bd72:	f7fd fb33 	bl	80093dc <__retarget_lock_release_recursive>
 800bd76:	e7dd      	b.n	800bd34 <_fflush_r+0xc>

0800bd78 <memmove>:
 800bd78:	4288      	cmp	r0, r1
 800bd7a:	b510      	push	{r4, lr}
 800bd7c:	eb01 0402 	add.w	r4, r1, r2
 800bd80:	d902      	bls.n	800bd88 <memmove+0x10>
 800bd82:	4284      	cmp	r4, r0
 800bd84:	4623      	mov	r3, r4
 800bd86:	d807      	bhi.n	800bd98 <memmove+0x20>
 800bd88:	1e43      	subs	r3, r0, #1
 800bd8a:	42a1      	cmp	r1, r4
 800bd8c:	d008      	beq.n	800bda0 <memmove+0x28>
 800bd8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd92:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd96:	e7f8      	b.n	800bd8a <memmove+0x12>
 800bd98:	4402      	add	r2, r0
 800bd9a:	4601      	mov	r1, r0
 800bd9c:	428a      	cmp	r2, r1
 800bd9e:	d100      	bne.n	800bda2 <memmove+0x2a>
 800bda0:	bd10      	pop	{r4, pc}
 800bda2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bda6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bdaa:	e7f7      	b.n	800bd9c <memmove+0x24>

0800bdac <strncmp>:
 800bdac:	b510      	push	{r4, lr}
 800bdae:	b16a      	cbz	r2, 800bdcc <strncmp+0x20>
 800bdb0:	3901      	subs	r1, #1
 800bdb2:	1884      	adds	r4, r0, r2
 800bdb4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800bdb8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800bdbc:	429a      	cmp	r2, r3
 800bdbe:	d103      	bne.n	800bdc8 <strncmp+0x1c>
 800bdc0:	42a0      	cmp	r0, r4
 800bdc2:	d001      	beq.n	800bdc8 <strncmp+0x1c>
 800bdc4:	2a00      	cmp	r2, #0
 800bdc6:	d1f5      	bne.n	800bdb4 <strncmp+0x8>
 800bdc8:	1ad0      	subs	r0, r2, r3
 800bdca:	bd10      	pop	{r4, pc}
 800bdcc:	4610      	mov	r0, r2
 800bdce:	e7fc      	b.n	800bdca <strncmp+0x1e>

0800bdd0 <_sbrk_r>:
 800bdd0:	b538      	push	{r3, r4, r5, lr}
 800bdd2:	4d06      	ldr	r5, [pc, #24]	; (800bdec <_sbrk_r+0x1c>)
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	4604      	mov	r4, r0
 800bdd8:	4608      	mov	r0, r1
 800bdda:	602b      	str	r3, [r5, #0]
 800bddc:	f7f5 feb6 	bl	8001b4c <_sbrk>
 800bde0:	1c43      	adds	r3, r0, #1
 800bde2:	d102      	bne.n	800bdea <_sbrk_r+0x1a>
 800bde4:	682b      	ldr	r3, [r5, #0]
 800bde6:	b103      	cbz	r3, 800bdea <_sbrk_r+0x1a>
 800bde8:	6023      	str	r3, [r4, #0]
 800bdea:	bd38      	pop	{r3, r4, r5, pc}
 800bdec:	20000c80 	.word	0x20000c80

0800bdf0 <memcpy>:
 800bdf0:	440a      	add	r2, r1
 800bdf2:	4291      	cmp	r1, r2
 800bdf4:	f100 33ff 	add.w	r3, r0, #4294967295
 800bdf8:	d100      	bne.n	800bdfc <memcpy+0xc>
 800bdfa:	4770      	bx	lr
 800bdfc:	b510      	push	{r4, lr}
 800bdfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800be02:	f803 4f01 	strb.w	r4, [r3, #1]!
 800be06:	4291      	cmp	r1, r2
 800be08:	d1f9      	bne.n	800bdfe <memcpy+0xe>
 800be0a:	bd10      	pop	{r4, pc}
 800be0c:	0000      	movs	r0, r0
	...

0800be10 <nan>:
 800be10:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800be18 <nan+0x8>
 800be14:	4770      	bx	lr
 800be16:	bf00      	nop
 800be18:	00000000 	.word	0x00000000
 800be1c:	7ff80000 	.word	0x7ff80000

0800be20 <__assert_func>:
 800be20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800be22:	4614      	mov	r4, r2
 800be24:	461a      	mov	r2, r3
 800be26:	4b09      	ldr	r3, [pc, #36]	; (800be4c <__assert_func+0x2c>)
 800be28:	681b      	ldr	r3, [r3, #0]
 800be2a:	4605      	mov	r5, r0
 800be2c:	68d8      	ldr	r0, [r3, #12]
 800be2e:	b14c      	cbz	r4, 800be44 <__assert_func+0x24>
 800be30:	4b07      	ldr	r3, [pc, #28]	; (800be50 <__assert_func+0x30>)
 800be32:	9100      	str	r1, [sp, #0]
 800be34:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800be38:	4906      	ldr	r1, [pc, #24]	; (800be54 <__assert_func+0x34>)
 800be3a:	462b      	mov	r3, r5
 800be3c:	f000 fbca 	bl	800c5d4 <fiprintf>
 800be40:	f000 fbda 	bl	800c5f8 <abort>
 800be44:	4b04      	ldr	r3, [pc, #16]	; (800be58 <__assert_func+0x38>)
 800be46:	461c      	mov	r4, r3
 800be48:	e7f3      	b.n	800be32 <__assert_func+0x12>
 800be4a:	bf00      	nop
 800be4c:	20000078 	.word	0x20000078
 800be50:	0800cf1a 	.word	0x0800cf1a
 800be54:	0800cf27 	.word	0x0800cf27
 800be58:	0800cf55 	.word	0x0800cf55

0800be5c <_calloc_r>:
 800be5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800be5e:	fba1 2402 	umull	r2, r4, r1, r2
 800be62:	b94c      	cbnz	r4, 800be78 <_calloc_r+0x1c>
 800be64:	4611      	mov	r1, r2
 800be66:	9201      	str	r2, [sp, #4]
 800be68:	f7fe f9b0 	bl	800a1cc <_malloc_r>
 800be6c:	9a01      	ldr	r2, [sp, #4]
 800be6e:	4605      	mov	r5, r0
 800be70:	b930      	cbnz	r0, 800be80 <_calloc_r+0x24>
 800be72:	4628      	mov	r0, r5
 800be74:	b003      	add	sp, #12
 800be76:	bd30      	pop	{r4, r5, pc}
 800be78:	220c      	movs	r2, #12
 800be7a:	6002      	str	r2, [r0, #0]
 800be7c:	2500      	movs	r5, #0
 800be7e:	e7f8      	b.n	800be72 <_calloc_r+0x16>
 800be80:	4621      	mov	r1, r4
 800be82:	f7fd fa2c 	bl	80092de <memset>
 800be86:	e7f4      	b.n	800be72 <_calloc_r+0x16>

0800be88 <rshift>:
 800be88:	6903      	ldr	r3, [r0, #16]
 800be8a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800be8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800be92:	ea4f 1261 	mov.w	r2, r1, asr #5
 800be96:	f100 0414 	add.w	r4, r0, #20
 800be9a:	dd45      	ble.n	800bf28 <rshift+0xa0>
 800be9c:	f011 011f 	ands.w	r1, r1, #31
 800bea0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bea4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bea8:	d10c      	bne.n	800bec4 <rshift+0x3c>
 800beaa:	f100 0710 	add.w	r7, r0, #16
 800beae:	4629      	mov	r1, r5
 800beb0:	42b1      	cmp	r1, r6
 800beb2:	d334      	bcc.n	800bf1e <rshift+0x96>
 800beb4:	1a9b      	subs	r3, r3, r2
 800beb6:	009b      	lsls	r3, r3, #2
 800beb8:	1eea      	subs	r2, r5, #3
 800beba:	4296      	cmp	r6, r2
 800bebc:	bf38      	it	cc
 800bebe:	2300      	movcc	r3, #0
 800bec0:	4423      	add	r3, r4
 800bec2:	e015      	b.n	800bef0 <rshift+0x68>
 800bec4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bec8:	f1c1 0820 	rsb	r8, r1, #32
 800becc:	40cf      	lsrs	r7, r1
 800bece:	f105 0e04 	add.w	lr, r5, #4
 800bed2:	46a1      	mov	r9, r4
 800bed4:	4576      	cmp	r6, lr
 800bed6:	46f4      	mov	ip, lr
 800bed8:	d815      	bhi.n	800bf06 <rshift+0x7e>
 800beda:	1a9a      	subs	r2, r3, r2
 800bedc:	0092      	lsls	r2, r2, #2
 800bede:	3a04      	subs	r2, #4
 800bee0:	3501      	adds	r5, #1
 800bee2:	42ae      	cmp	r6, r5
 800bee4:	bf38      	it	cc
 800bee6:	2200      	movcc	r2, #0
 800bee8:	18a3      	adds	r3, r4, r2
 800beea:	50a7      	str	r7, [r4, r2]
 800beec:	b107      	cbz	r7, 800bef0 <rshift+0x68>
 800beee:	3304      	adds	r3, #4
 800bef0:	1b1a      	subs	r2, r3, r4
 800bef2:	42a3      	cmp	r3, r4
 800bef4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bef8:	bf08      	it	eq
 800befa:	2300      	moveq	r3, #0
 800befc:	6102      	str	r2, [r0, #16]
 800befe:	bf08      	it	eq
 800bf00:	6143      	streq	r3, [r0, #20]
 800bf02:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bf06:	f8dc c000 	ldr.w	ip, [ip]
 800bf0a:	fa0c fc08 	lsl.w	ip, ip, r8
 800bf0e:	ea4c 0707 	orr.w	r7, ip, r7
 800bf12:	f849 7b04 	str.w	r7, [r9], #4
 800bf16:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bf1a:	40cf      	lsrs	r7, r1
 800bf1c:	e7da      	b.n	800bed4 <rshift+0x4c>
 800bf1e:	f851 cb04 	ldr.w	ip, [r1], #4
 800bf22:	f847 cf04 	str.w	ip, [r7, #4]!
 800bf26:	e7c3      	b.n	800beb0 <rshift+0x28>
 800bf28:	4623      	mov	r3, r4
 800bf2a:	e7e1      	b.n	800bef0 <rshift+0x68>

0800bf2c <__hexdig_fun>:
 800bf2c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bf30:	2b09      	cmp	r3, #9
 800bf32:	d802      	bhi.n	800bf3a <__hexdig_fun+0xe>
 800bf34:	3820      	subs	r0, #32
 800bf36:	b2c0      	uxtb	r0, r0
 800bf38:	4770      	bx	lr
 800bf3a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bf3e:	2b05      	cmp	r3, #5
 800bf40:	d801      	bhi.n	800bf46 <__hexdig_fun+0x1a>
 800bf42:	3847      	subs	r0, #71	; 0x47
 800bf44:	e7f7      	b.n	800bf36 <__hexdig_fun+0xa>
 800bf46:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bf4a:	2b05      	cmp	r3, #5
 800bf4c:	d801      	bhi.n	800bf52 <__hexdig_fun+0x26>
 800bf4e:	3827      	subs	r0, #39	; 0x27
 800bf50:	e7f1      	b.n	800bf36 <__hexdig_fun+0xa>
 800bf52:	2000      	movs	r0, #0
 800bf54:	4770      	bx	lr
	...

0800bf58 <__gethex>:
 800bf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bf5c:	4617      	mov	r7, r2
 800bf5e:	680a      	ldr	r2, [r1, #0]
 800bf60:	b085      	sub	sp, #20
 800bf62:	f102 0b02 	add.w	fp, r2, #2
 800bf66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bf6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bf6e:	4681      	mov	r9, r0
 800bf70:	468a      	mov	sl, r1
 800bf72:	9302      	str	r3, [sp, #8]
 800bf74:	32fe      	adds	r2, #254	; 0xfe
 800bf76:	eb02 030b 	add.w	r3, r2, fp
 800bf7a:	46d8      	mov	r8, fp
 800bf7c:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800bf80:	9301      	str	r3, [sp, #4]
 800bf82:	2830      	cmp	r0, #48	; 0x30
 800bf84:	d0f7      	beq.n	800bf76 <__gethex+0x1e>
 800bf86:	f7ff ffd1 	bl	800bf2c <__hexdig_fun>
 800bf8a:	4604      	mov	r4, r0
 800bf8c:	2800      	cmp	r0, #0
 800bf8e:	d138      	bne.n	800c002 <__gethex+0xaa>
 800bf90:	49a7      	ldr	r1, [pc, #668]	; (800c230 <__gethex+0x2d8>)
 800bf92:	2201      	movs	r2, #1
 800bf94:	4640      	mov	r0, r8
 800bf96:	f7ff ff09 	bl	800bdac <strncmp>
 800bf9a:	4606      	mov	r6, r0
 800bf9c:	2800      	cmp	r0, #0
 800bf9e:	d169      	bne.n	800c074 <__gethex+0x11c>
 800bfa0:	f898 0001 	ldrb.w	r0, [r8, #1]
 800bfa4:	465d      	mov	r5, fp
 800bfa6:	f7ff ffc1 	bl	800bf2c <__hexdig_fun>
 800bfaa:	2800      	cmp	r0, #0
 800bfac:	d064      	beq.n	800c078 <__gethex+0x120>
 800bfae:	465a      	mov	r2, fp
 800bfb0:	7810      	ldrb	r0, [r2, #0]
 800bfb2:	2830      	cmp	r0, #48	; 0x30
 800bfb4:	4690      	mov	r8, r2
 800bfb6:	f102 0201 	add.w	r2, r2, #1
 800bfba:	d0f9      	beq.n	800bfb0 <__gethex+0x58>
 800bfbc:	f7ff ffb6 	bl	800bf2c <__hexdig_fun>
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	fab0 f480 	clz	r4, r0
 800bfc6:	0964      	lsrs	r4, r4, #5
 800bfc8:	465e      	mov	r6, fp
 800bfca:	9301      	str	r3, [sp, #4]
 800bfcc:	4642      	mov	r2, r8
 800bfce:	4615      	mov	r5, r2
 800bfd0:	3201      	adds	r2, #1
 800bfd2:	7828      	ldrb	r0, [r5, #0]
 800bfd4:	f7ff ffaa 	bl	800bf2c <__hexdig_fun>
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d1f8      	bne.n	800bfce <__gethex+0x76>
 800bfdc:	4994      	ldr	r1, [pc, #592]	; (800c230 <__gethex+0x2d8>)
 800bfde:	2201      	movs	r2, #1
 800bfe0:	4628      	mov	r0, r5
 800bfe2:	f7ff fee3 	bl	800bdac <strncmp>
 800bfe6:	b978      	cbnz	r0, 800c008 <__gethex+0xb0>
 800bfe8:	b946      	cbnz	r6, 800bffc <__gethex+0xa4>
 800bfea:	1c6e      	adds	r6, r5, #1
 800bfec:	4632      	mov	r2, r6
 800bfee:	4615      	mov	r5, r2
 800bff0:	3201      	adds	r2, #1
 800bff2:	7828      	ldrb	r0, [r5, #0]
 800bff4:	f7ff ff9a 	bl	800bf2c <__hexdig_fun>
 800bff8:	2800      	cmp	r0, #0
 800bffa:	d1f8      	bne.n	800bfee <__gethex+0x96>
 800bffc:	1b73      	subs	r3, r6, r5
 800bffe:	009e      	lsls	r6, r3, #2
 800c000:	e004      	b.n	800c00c <__gethex+0xb4>
 800c002:	2400      	movs	r4, #0
 800c004:	4626      	mov	r6, r4
 800c006:	e7e1      	b.n	800bfcc <__gethex+0x74>
 800c008:	2e00      	cmp	r6, #0
 800c00a:	d1f7      	bne.n	800bffc <__gethex+0xa4>
 800c00c:	782b      	ldrb	r3, [r5, #0]
 800c00e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c012:	2b50      	cmp	r3, #80	; 0x50
 800c014:	d13d      	bne.n	800c092 <__gethex+0x13a>
 800c016:	786b      	ldrb	r3, [r5, #1]
 800c018:	2b2b      	cmp	r3, #43	; 0x2b
 800c01a:	d02f      	beq.n	800c07c <__gethex+0x124>
 800c01c:	2b2d      	cmp	r3, #45	; 0x2d
 800c01e:	d031      	beq.n	800c084 <__gethex+0x12c>
 800c020:	1c69      	adds	r1, r5, #1
 800c022:	f04f 0b00 	mov.w	fp, #0
 800c026:	7808      	ldrb	r0, [r1, #0]
 800c028:	f7ff ff80 	bl	800bf2c <__hexdig_fun>
 800c02c:	1e42      	subs	r2, r0, #1
 800c02e:	b2d2      	uxtb	r2, r2
 800c030:	2a18      	cmp	r2, #24
 800c032:	d82e      	bhi.n	800c092 <__gethex+0x13a>
 800c034:	f1a0 0210 	sub.w	r2, r0, #16
 800c038:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c03c:	f7ff ff76 	bl	800bf2c <__hexdig_fun>
 800c040:	f100 3cff 	add.w	ip, r0, #4294967295
 800c044:	fa5f fc8c 	uxtb.w	ip, ip
 800c048:	f1bc 0f18 	cmp.w	ip, #24
 800c04c:	d91d      	bls.n	800c08a <__gethex+0x132>
 800c04e:	f1bb 0f00 	cmp.w	fp, #0
 800c052:	d000      	beq.n	800c056 <__gethex+0xfe>
 800c054:	4252      	negs	r2, r2
 800c056:	4416      	add	r6, r2
 800c058:	f8ca 1000 	str.w	r1, [sl]
 800c05c:	b1dc      	cbz	r4, 800c096 <__gethex+0x13e>
 800c05e:	9b01      	ldr	r3, [sp, #4]
 800c060:	2b00      	cmp	r3, #0
 800c062:	bf14      	ite	ne
 800c064:	f04f 0800 	movne.w	r8, #0
 800c068:	f04f 0806 	moveq.w	r8, #6
 800c06c:	4640      	mov	r0, r8
 800c06e:	b005      	add	sp, #20
 800c070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c074:	4645      	mov	r5, r8
 800c076:	4626      	mov	r6, r4
 800c078:	2401      	movs	r4, #1
 800c07a:	e7c7      	b.n	800c00c <__gethex+0xb4>
 800c07c:	f04f 0b00 	mov.w	fp, #0
 800c080:	1ca9      	adds	r1, r5, #2
 800c082:	e7d0      	b.n	800c026 <__gethex+0xce>
 800c084:	f04f 0b01 	mov.w	fp, #1
 800c088:	e7fa      	b.n	800c080 <__gethex+0x128>
 800c08a:	230a      	movs	r3, #10
 800c08c:	fb03 0002 	mla	r0, r3, r2, r0
 800c090:	e7d0      	b.n	800c034 <__gethex+0xdc>
 800c092:	4629      	mov	r1, r5
 800c094:	e7e0      	b.n	800c058 <__gethex+0x100>
 800c096:	eba5 0308 	sub.w	r3, r5, r8
 800c09a:	3b01      	subs	r3, #1
 800c09c:	4621      	mov	r1, r4
 800c09e:	2b07      	cmp	r3, #7
 800c0a0:	dc0a      	bgt.n	800c0b8 <__gethex+0x160>
 800c0a2:	4648      	mov	r0, r9
 800c0a4:	f7fe f91e 	bl	800a2e4 <_Balloc>
 800c0a8:	4604      	mov	r4, r0
 800c0aa:	b940      	cbnz	r0, 800c0be <__gethex+0x166>
 800c0ac:	4b61      	ldr	r3, [pc, #388]	; (800c234 <__gethex+0x2dc>)
 800c0ae:	4602      	mov	r2, r0
 800c0b0:	21e4      	movs	r1, #228	; 0xe4
 800c0b2:	4861      	ldr	r0, [pc, #388]	; (800c238 <__gethex+0x2e0>)
 800c0b4:	f7ff feb4 	bl	800be20 <__assert_func>
 800c0b8:	3101      	adds	r1, #1
 800c0ba:	105b      	asrs	r3, r3, #1
 800c0bc:	e7ef      	b.n	800c09e <__gethex+0x146>
 800c0be:	f100 0a14 	add.w	sl, r0, #20
 800c0c2:	2300      	movs	r3, #0
 800c0c4:	495a      	ldr	r1, [pc, #360]	; (800c230 <__gethex+0x2d8>)
 800c0c6:	f8cd a004 	str.w	sl, [sp, #4]
 800c0ca:	469b      	mov	fp, r3
 800c0cc:	45a8      	cmp	r8, r5
 800c0ce:	d342      	bcc.n	800c156 <__gethex+0x1fe>
 800c0d0:	9801      	ldr	r0, [sp, #4]
 800c0d2:	f840 bb04 	str.w	fp, [r0], #4
 800c0d6:	eba0 000a 	sub.w	r0, r0, sl
 800c0da:	1080      	asrs	r0, r0, #2
 800c0dc:	6120      	str	r0, [r4, #16]
 800c0de:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800c0e2:	4658      	mov	r0, fp
 800c0e4:	f7fe f9f0 	bl	800a4c8 <__hi0bits>
 800c0e8:	683d      	ldr	r5, [r7, #0]
 800c0ea:	eba8 0000 	sub.w	r0, r8, r0
 800c0ee:	42a8      	cmp	r0, r5
 800c0f0:	dd59      	ble.n	800c1a6 <__gethex+0x24e>
 800c0f2:	eba0 0805 	sub.w	r8, r0, r5
 800c0f6:	4641      	mov	r1, r8
 800c0f8:	4620      	mov	r0, r4
 800c0fa:	f7fe fd7f 	bl	800abfc <__any_on>
 800c0fe:	4683      	mov	fp, r0
 800c100:	b1b8      	cbz	r0, 800c132 <__gethex+0x1da>
 800c102:	f108 33ff 	add.w	r3, r8, #4294967295
 800c106:	1159      	asrs	r1, r3, #5
 800c108:	f003 021f 	and.w	r2, r3, #31
 800c10c:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800c110:	f04f 0b01 	mov.w	fp, #1
 800c114:	fa0b f202 	lsl.w	r2, fp, r2
 800c118:	420a      	tst	r2, r1
 800c11a:	d00a      	beq.n	800c132 <__gethex+0x1da>
 800c11c:	455b      	cmp	r3, fp
 800c11e:	dd06      	ble.n	800c12e <__gethex+0x1d6>
 800c120:	f1a8 0102 	sub.w	r1, r8, #2
 800c124:	4620      	mov	r0, r4
 800c126:	f7fe fd69 	bl	800abfc <__any_on>
 800c12a:	2800      	cmp	r0, #0
 800c12c:	d138      	bne.n	800c1a0 <__gethex+0x248>
 800c12e:	f04f 0b02 	mov.w	fp, #2
 800c132:	4641      	mov	r1, r8
 800c134:	4620      	mov	r0, r4
 800c136:	f7ff fea7 	bl	800be88 <rshift>
 800c13a:	4446      	add	r6, r8
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	42b3      	cmp	r3, r6
 800c140:	da41      	bge.n	800c1c6 <__gethex+0x26e>
 800c142:	4621      	mov	r1, r4
 800c144:	4648      	mov	r0, r9
 800c146:	f7fe f90d 	bl	800a364 <_Bfree>
 800c14a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c14c:	2300      	movs	r3, #0
 800c14e:	6013      	str	r3, [r2, #0]
 800c150:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800c154:	e78a      	b.n	800c06c <__gethex+0x114>
 800c156:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800c15a:	2a2e      	cmp	r2, #46	; 0x2e
 800c15c:	d014      	beq.n	800c188 <__gethex+0x230>
 800c15e:	2b20      	cmp	r3, #32
 800c160:	d106      	bne.n	800c170 <__gethex+0x218>
 800c162:	9b01      	ldr	r3, [sp, #4]
 800c164:	f843 bb04 	str.w	fp, [r3], #4
 800c168:	f04f 0b00 	mov.w	fp, #0
 800c16c:	9301      	str	r3, [sp, #4]
 800c16e:	465b      	mov	r3, fp
 800c170:	7828      	ldrb	r0, [r5, #0]
 800c172:	9303      	str	r3, [sp, #12]
 800c174:	f7ff feda 	bl	800bf2c <__hexdig_fun>
 800c178:	9b03      	ldr	r3, [sp, #12]
 800c17a:	f000 000f 	and.w	r0, r0, #15
 800c17e:	4098      	lsls	r0, r3
 800c180:	ea4b 0b00 	orr.w	fp, fp, r0
 800c184:	3304      	adds	r3, #4
 800c186:	e7a1      	b.n	800c0cc <__gethex+0x174>
 800c188:	45a8      	cmp	r8, r5
 800c18a:	d8e8      	bhi.n	800c15e <__gethex+0x206>
 800c18c:	2201      	movs	r2, #1
 800c18e:	4628      	mov	r0, r5
 800c190:	9303      	str	r3, [sp, #12]
 800c192:	f7ff fe0b 	bl	800bdac <strncmp>
 800c196:	4926      	ldr	r1, [pc, #152]	; (800c230 <__gethex+0x2d8>)
 800c198:	9b03      	ldr	r3, [sp, #12]
 800c19a:	2800      	cmp	r0, #0
 800c19c:	d1df      	bne.n	800c15e <__gethex+0x206>
 800c19e:	e795      	b.n	800c0cc <__gethex+0x174>
 800c1a0:	f04f 0b03 	mov.w	fp, #3
 800c1a4:	e7c5      	b.n	800c132 <__gethex+0x1da>
 800c1a6:	da0b      	bge.n	800c1c0 <__gethex+0x268>
 800c1a8:	eba5 0800 	sub.w	r8, r5, r0
 800c1ac:	4621      	mov	r1, r4
 800c1ae:	4642      	mov	r2, r8
 800c1b0:	4648      	mov	r0, r9
 800c1b2:	f7fe faf1 	bl	800a798 <__lshift>
 800c1b6:	eba6 0608 	sub.w	r6, r6, r8
 800c1ba:	4604      	mov	r4, r0
 800c1bc:	f100 0a14 	add.w	sl, r0, #20
 800c1c0:	f04f 0b00 	mov.w	fp, #0
 800c1c4:	e7ba      	b.n	800c13c <__gethex+0x1e4>
 800c1c6:	687b      	ldr	r3, [r7, #4]
 800c1c8:	42b3      	cmp	r3, r6
 800c1ca:	dd73      	ble.n	800c2b4 <__gethex+0x35c>
 800c1cc:	1b9e      	subs	r6, r3, r6
 800c1ce:	42b5      	cmp	r5, r6
 800c1d0:	dc34      	bgt.n	800c23c <__gethex+0x2e4>
 800c1d2:	68fb      	ldr	r3, [r7, #12]
 800c1d4:	2b02      	cmp	r3, #2
 800c1d6:	d023      	beq.n	800c220 <__gethex+0x2c8>
 800c1d8:	2b03      	cmp	r3, #3
 800c1da:	d025      	beq.n	800c228 <__gethex+0x2d0>
 800c1dc:	2b01      	cmp	r3, #1
 800c1de:	d115      	bne.n	800c20c <__gethex+0x2b4>
 800c1e0:	42b5      	cmp	r5, r6
 800c1e2:	d113      	bne.n	800c20c <__gethex+0x2b4>
 800c1e4:	2d01      	cmp	r5, #1
 800c1e6:	d10b      	bne.n	800c200 <__gethex+0x2a8>
 800c1e8:	9a02      	ldr	r2, [sp, #8]
 800c1ea:	687b      	ldr	r3, [r7, #4]
 800c1ec:	6013      	str	r3, [r2, #0]
 800c1ee:	2301      	movs	r3, #1
 800c1f0:	6123      	str	r3, [r4, #16]
 800c1f2:	f8ca 3000 	str.w	r3, [sl]
 800c1f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c1f8:	f04f 0862 	mov.w	r8, #98	; 0x62
 800c1fc:	601c      	str	r4, [r3, #0]
 800c1fe:	e735      	b.n	800c06c <__gethex+0x114>
 800c200:	1e69      	subs	r1, r5, #1
 800c202:	4620      	mov	r0, r4
 800c204:	f7fe fcfa 	bl	800abfc <__any_on>
 800c208:	2800      	cmp	r0, #0
 800c20a:	d1ed      	bne.n	800c1e8 <__gethex+0x290>
 800c20c:	4621      	mov	r1, r4
 800c20e:	4648      	mov	r0, r9
 800c210:	f7fe f8a8 	bl	800a364 <_Bfree>
 800c214:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c216:	2300      	movs	r3, #0
 800c218:	6013      	str	r3, [r2, #0]
 800c21a:	f04f 0850 	mov.w	r8, #80	; 0x50
 800c21e:	e725      	b.n	800c06c <__gethex+0x114>
 800c220:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c222:	2b00      	cmp	r3, #0
 800c224:	d1f2      	bne.n	800c20c <__gethex+0x2b4>
 800c226:	e7df      	b.n	800c1e8 <__gethex+0x290>
 800c228:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d1dc      	bne.n	800c1e8 <__gethex+0x290>
 800c22e:	e7ed      	b.n	800c20c <__gethex+0x2b4>
 800c230:	0800cdac 	.word	0x0800cdac
 800c234:	0800cc41 	.word	0x0800cc41
 800c238:	0800cf56 	.word	0x0800cf56
 800c23c:	f106 38ff 	add.w	r8, r6, #4294967295
 800c240:	f1bb 0f00 	cmp.w	fp, #0
 800c244:	d133      	bne.n	800c2ae <__gethex+0x356>
 800c246:	f1b8 0f00 	cmp.w	r8, #0
 800c24a:	d004      	beq.n	800c256 <__gethex+0x2fe>
 800c24c:	4641      	mov	r1, r8
 800c24e:	4620      	mov	r0, r4
 800c250:	f7fe fcd4 	bl	800abfc <__any_on>
 800c254:	4683      	mov	fp, r0
 800c256:	ea4f 1268 	mov.w	r2, r8, asr #5
 800c25a:	2301      	movs	r3, #1
 800c25c:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800c260:	f008 081f 	and.w	r8, r8, #31
 800c264:	fa03 f308 	lsl.w	r3, r3, r8
 800c268:	4213      	tst	r3, r2
 800c26a:	4631      	mov	r1, r6
 800c26c:	4620      	mov	r0, r4
 800c26e:	bf18      	it	ne
 800c270:	f04b 0b02 	orrne.w	fp, fp, #2
 800c274:	1bad      	subs	r5, r5, r6
 800c276:	f7ff fe07 	bl	800be88 <rshift>
 800c27a:	687e      	ldr	r6, [r7, #4]
 800c27c:	f04f 0802 	mov.w	r8, #2
 800c280:	f1bb 0f00 	cmp.w	fp, #0
 800c284:	d04a      	beq.n	800c31c <__gethex+0x3c4>
 800c286:	68fb      	ldr	r3, [r7, #12]
 800c288:	2b02      	cmp	r3, #2
 800c28a:	d016      	beq.n	800c2ba <__gethex+0x362>
 800c28c:	2b03      	cmp	r3, #3
 800c28e:	d018      	beq.n	800c2c2 <__gethex+0x36a>
 800c290:	2b01      	cmp	r3, #1
 800c292:	d109      	bne.n	800c2a8 <__gethex+0x350>
 800c294:	f01b 0f02 	tst.w	fp, #2
 800c298:	d006      	beq.n	800c2a8 <__gethex+0x350>
 800c29a:	f8da 3000 	ldr.w	r3, [sl]
 800c29e:	ea4b 0b03 	orr.w	fp, fp, r3
 800c2a2:	f01b 0f01 	tst.w	fp, #1
 800c2a6:	d10f      	bne.n	800c2c8 <__gethex+0x370>
 800c2a8:	f048 0810 	orr.w	r8, r8, #16
 800c2ac:	e036      	b.n	800c31c <__gethex+0x3c4>
 800c2ae:	f04f 0b01 	mov.w	fp, #1
 800c2b2:	e7d0      	b.n	800c256 <__gethex+0x2fe>
 800c2b4:	f04f 0801 	mov.w	r8, #1
 800c2b8:	e7e2      	b.n	800c280 <__gethex+0x328>
 800c2ba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2bc:	f1c3 0301 	rsb	r3, r3, #1
 800c2c0:	930f      	str	r3, [sp, #60]	; 0x3c
 800c2c2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d0ef      	beq.n	800c2a8 <__gethex+0x350>
 800c2c8:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c2cc:	f104 0214 	add.w	r2, r4, #20
 800c2d0:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800c2d4:	9301      	str	r3, [sp, #4]
 800c2d6:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800c2da:	2300      	movs	r3, #0
 800c2dc:	4694      	mov	ip, r2
 800c2de:	f852 1b04 	ldr.w	r1, [r2], #4
 800c2e2:	f1b1 3fff 	cmp.w	r1, #4294967295
 800c2e6:	d01e      	beq.n	800c326 <__gethex+0x3ce>
 800c2e8:	3101      	adds	r1, #1
 800c2ea:	f8cc 1000 	str.w	r1, [ip]
 800c2ee:	f1b8 0f02 	cmp.w	r8, #2
 800c2f2:	f104 0214 	add.w	r2, r4, #20
 800c2f6:	d13d      	bne.n	800c374 <__gethex+0x41c>
 800c2f8:	683b      	ldr	r3, [r7, #0]
 800c2fa:	3b01      	subs	r3, #1
 800c2fc:	42ab      	cmp	r3, r5
 800c2fe:	d10b      	bne.n	800c318 <__gethex+0x3c0>
 800c300:	1169      	asrs	r1, r5, #5
 800c302:	2301      	movs	r3, #1
 800c304:	f005 051f 	and.w	r5, r5, #31
 800c308:	fa03 f505 	lsl.w	r5, r3, r5
 800c30c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c310:	421d      	tst	r5, r3
 800c312:	bf18      	it	ne
 800c314:	f04f 0801 	movne.w	r8, #1
 800c318:	f048 0820 	orr.w	r8, r8, #32
 800c31c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c31e:	601c      	str	r4, [r3, #0]
 800c320:	9b02      	ldr	r3, [sp, #8]
 800c322:	601e      	str	r6, [r3, #0]
 800c324:	e6a2      	b.n	800c06c <__gethex+0x114>
 800c326:	4290      	cmp	r0, r2
 800c328:	f842 3c04 	str.w	r3, [r2, #-4]
 800c32c:	d8d6      	bhi.n	800c2dc <__gethex+0x384>
 800c32e:	68a2      	ldr	r2, [r4, #8]
 800c330:	4593      	cmp	fp, r2
 800c332:	db17      	blt.n	800c364 <__gethex+0x40c>
 800c334:	6861      	ldr	r1, [r4, #4]
 800c336:	4648      	mov	r0, r9
 800c338:	3101      	adds	r1, #1
 800c33a:	f7fd ffd3 	bl	800a2e4 <_Balloc>
 800c33e:	4682      	mov	sl, r0
 800c340:	b918      	cbnz	r0, 800c34a <__gethex+0x3f2>
 800c342:	4b1b      	ldr	r3, [pc, #108]	; (800c3b0 <__gethex+0x458>)
 800c344:	4602      	mov	r2, r0
 800c346:	2184      	movs	r1, #132	; 0x84
 800c348:	e6b3      	b.n	800c0b2 <__gethex+0x15a>
 800c34a:	6922      	ldr	r2, [r4, #16]
 800c34c:	3202      	adds	r2, #2
 800c34e:	f104 010c 	add.w	r1, r4, #12
 800c352:	0092      	lsls	r2, r2, #2
 800c354:	300c      	adds	r0, #12
 800c356:	f7ff fd4b 	bl	800bdf0 <memcpy>
 800c35a:	4621      	mov	r1, r4
 800c35c:	4648      	mov	r0, r9
 800c35e:	f7fe f801 	bl	800a364 <_Bfree>
 800c362:	4654      	mov	r4, sl
 800c364:	6922      	ldr	r2, [r4, #16]
 800c366:	1c51      	adds	r1, r2, #1
 800c368:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800c36c:	6121      	str	r1, [r4, #16]
 800c36e:	2101      	movs	r1, #1
 800c370:	6151      	str	r1, [r2, #20]
 800c372:	e7bc      	b.n	800c2ee <__gethex+0x396>
 800c374:	6921      	ldr	r1, [r4, #16]
 800c376:	4559      	cmp	r1, fp
 800c378:	dd0b      	ble.n	800c392 <__gethex+0x43a>
 800c37a:	2101      	movs	r1, #1
 800c37c:	4620      	mov	r0, r4
 800c37e:	f7ff fd83 	bl	800be88 <rshift>
 800c382:	68bb      	ldr	r3, [r7, #8]
 800c384:	3601      	adds	r6, #1
 800c386:	42b3      	cmp	r3, r6
 800c388:	f6ff aedb 	blt.w	800c142 <__gethex+0x1ea>
 800c38c:	f04f 0801 	mov.w	r8, #1
 800c390:	e7c2      	b.n	800c318 <__gethex+0x3c0>
 800c392:	f015 051f 	ands.w	r5, r5, #31
 800c396:	d0f9      	beq.n	800c38c <__gethex+0x434>
 800c398:	9b01      	ldr	r3, [sp, #4]
 800c39a:	441a      	add	r2, r3
 800c39c:	f1c5 0520 	rsb	r5, r5, #32
 800c3a0:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800c3a4:	f7fe f890 	bl	800a4c8 <__hi0bits>
 800c3a8:	42a8      	cmp	r0, r5
 800c3aa:	dbe6      	blt.n	800c37a <__gethex+0x422>
 800c3ac:	e7ee      	b.n	800c38c <__gethex+0x434>
 800c3ae:	bf00      	nop
 800c3b0:	0800cc41 	.word	0x0800cc41

0800c3b4 <L_shift>:
 800c3b4:	f1c2 0208 	rsb	r2, r2, #8
 800c3b8:	0092      	lsls	r2, r2, #2
 800c3ba:	b570      	push	{r4, r5, r6, lr}
 800c3bc:	f1c2 0620 	rsb	r6, r2, #32
 800c3c0:	6843      	ldr	r3, [r0, #4]
 800c3c2:	6804      	ldr	r4, [r0, #0]
 800c3c4:	fa03 f506 	lsl.w	r5, r3, r6
 800c3c8:	432c      	orrs	r4, r5
 800c3ca:	40d3      	lsrs	r3, r2
 800c3cc:	6004      	str	r4, [r0, #0]
 800c3ce:	f840 3f04 	str.w	r3, [r0, #4]!
 800c3d2:	4288      	cmp	r0, r1
 800c3d4:	d3f4      	bcc.n	800c3c0 <L_shift+0xc>
 800c3d6:	bd70      	pop	{r4, r5, r6, pc}

0800c3d8 <__match>:
 800c3d8:	b530      	push	{r4, r5, lr}
 800c3da:	6803      	ldr	r3, [r0, #0]
 800c3dc:	3301      	adds	r3, #1
 800c3de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c3e2:	b914      	cbnz	r4, 800c3ea <__match+0x12>
 800c3e4:	6003      	str	r3, [r0, #0]
 800c3e6:	2001      	movs	r0, #1
 800c3e8:	bd30      	pop	{r4, r5, pc}
 800c3ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c3ee:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c3f2:	2d19      	cmp	r5, #25
 800c3f4:	bf98      	it	ls
 800c3f6:	3220      	addls	r2, #32
 800c3f8:	42a2      	cmp	r2, r4
 800c3fa:	d0f0      	beq.n	800c3de <__match+0x6>
 800c3fc:	2000      	movs	r0, #0
 800c3fe:	e7f3      	b.n	800c3e8 <__match+0x10>

0800c400 <__hexnan>:
 800c400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c404:	680b      	ldr	r3, [r1, #0]
 800c406:	6801      	ldr	r1, [r0, #0]
 800c408:	115e      	asrs	r6, r3, #5
 800c40a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c40e:	f013 031f 	ands.w	r3, r3, #31
 800c412:	b087      	sub	sp, #28
 800c414:	bf18      	it	ne
 800c416:	3604      	addne	r6, #4
 800c418:	2500      	movs	r5, #0
 800c41a:	1f37      	subs	r7, r6, #4
 800c41c:	4682      	mov	sl, r0
 800c41e:	4690      	mov	r8, r2
 800c420:	9301      	str	r3, [sp, #4]
 800c422:	f846 5c04 	str.w	r5, [r6, #-4]
 800c426:	46b9      	mov	r9, r7
 800c428:	463c      	mov	r4, r7
 800c42a:	9502      	str	r5, [sp, #8]
 800c42c:	46ab      	mov	fp, r5
 800c42e:	784a      	ldrb	r2, [r1, #1]
 800c430:	1c4b      	adds	r3, r1, #1
 800c432:	9303      	str	r3, [sp, #12]
 800c434:	b342      	cbz	r2, 800c488 <__hexnan+0x88>
 800c436:	4610      	mov	r0, r2
 800c438:	9105      	str	r1, [sp, #20]
 800c43a:	9204      	str	r2, [sp, #16]
 800c43c:	f7ff fd76 	bl	800bf2c <__hexdig_fun>
 800c440:	2800      	cmp	r0, #0
 800c442:	d14f      	bne.n	800c4e4 <__hexnan+0xe4>
 800c444:	9a04      	ldr	r2, [sp, #16]
 800c446:	9905      	ldr	r1, [sp, #20]
 800c448:	2a20      	cmp	r2, #32
 800c44a:	d818      	bhi.n	800c47e <__hexnan+0x7e>
 800c44c:	9b02      	ldr	r3, [sp, #8]
 800c44e:	459b      	cmp	fp, r3
 800c450:	dd13      	ble.n	800c47a <__hexnan+0x7a>
 800c452:	454c      	cmp	r4, r9
 800c454:	d206      	bcs.n	800c464 <__hexnan+0x64>
 800c456:	2d07      	cmp	r5, #7
 800c458:	dc04      	bgt.n	800c464 <__hexnan+0x64>
 800c45a:	462a      	mov	r2, r5
 800c45c:	4649      	mov	r1, r9
 800c45e:	4620      	mov	r0, r4
 800c460:	f7ff ffa8 	bl	800c3b4 <L_shift>
 800c464:	4544      	cmp	r4, r8
 800c466:	d950      	bls.n	800c50a <__hexnan+0x10a>
 800c468:	2300      	movs	r3, #0
 800c46a:	f1a4 0904 	sub.w	r9, r4, #4
 800c46e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c472:	f8cd b008 	str.w	fp, [sp, #8]
 800c476:	464c      	mov	r4, r9
 800c478:	461d      	mov	r5, r3
 800c47a:	9903      	ldr	r1, [sp, #12]
 800c47c:	e7d7      	b.n	800c42e <__hexnan+0x2e>
 800c47e:	2a29      	cmp	r2, #41	; 0x29
 800c480:	d155      	bne.n	800c52e <__hexnan+0x12e>
 800c482:	3102      	adds	r1, #2
 800c484:	f8ca 1000 	str.w	r1, [sl]
 800c488:	f1bb 0f00 	cmp.w	fp, #0
 800c48c:	d04f      	beq.n	800c52e <__hexnan+0x12e>
 800c48e:	454c      	cmp	r4, r9
 800c490:	d206      	bcs.n	800c4a0 <__hexnan+0xa0>
 800c492:	2d07      	cmp	r5, #7
 800c494:	dc04      	bgt.n	800c4a0 <__hexnan+0xa0>
 800c496:	462a      	mov	r2, r5
 800c498:	4649      	mov	r1, r9
 800c49a:	4620      	mov	r0, r4
 800c49c:	f7ff ff8a 	bl	800c3b4 <L_shift>
 800c4a0:	4544      	cmp	r4, r8
 800c4a2:	d934      	bls.n	800c50e <__hexnan+0x10e>
 800c4a4:	f1a8 0204 	sub.w	r2, r8, #4
 800c4a8:	4623      	mov	r3, r4
 800c4aa:	f853 1b04 	ldr.w	r1, [r3], #4
 800c4ae:	f842 1f04 	str.w	r1, [r2, #4]!
 800c4b2:	429f      	cmp	r7, r3
 800c4b4:	d2f9      	bcs.n	800c4aa <__hexnan+0xaa>
 800c4b6:	1b3b      	subs	r3, r7, r4
 800c4b8:	f023 0303 	bic.w	r3, r3, #3
 800c4bc:	3304      	adds	r3, #4
 800c4be:	3e03      	subs	r6, #3
 800c4c0:	3401      	adds	r4, #1
 800c4c2:	42a6      	cmp	r6, r4
 800c4c4:	bf38      	it	cc
 800c4c6:	2304      	movcc	r3, #4
 800c4c8:	4443      	add	r3, r8
 800c4ca:	2200      	movs	r2, #0
 800c4cc:	f843 2b04 	str.w	r2, [r3], #4
 800c4d0:	429f      	cmp	r7, r3
 800c4d2:	d2fb      	bcs.n	800c4cc <__hexnan+0xcc>
 800c4d4:	683b      	ldr	r3, [r7, #0]
 800c4d6:	b91b      	cbnz	r3, 800c4e0 <__hexnan+0xe0>
 800c4d8:	4547      	cmp	r7, r8
 800c4da:	d126      	bne.n	800c52a <__hexnan+0x12a>
 800c4dc:	2301      	movs	r3, #1
 800c4de:	603b      	str	r3, [r7, #0]
 800c4e0:	2005      	movs	r0, #5
 800c4e2:	e025      	b.n	800c530 <__hexnan+0x130>
 800c4e4:	3501      	adds	r5, #1
 800c4e6:	2d08      	cmp	r5, #8
 800c4e8:	f10b 0b01 	add.w	fp, fp, #1
 800c4ec:	dd06      	ble.n	800c4fc <__hexnan+0xfc>
 800c4ee:	4544      	cmp	r4, r8
 800c4f0:	d9c3      	bls.n	800c47a <__hexnan+0x7a>
 800c4f2:	2300      	movs	r3, #0
 800c4f4:	f844 3c04 	str.w	r3, [r4, #-4]
 800c4f8:	2501      	movs	r5, #1
 800c4fa:	3c04      	subs	r4, #4
 800c4fc:	6822      	ldr	r2, [r4, #0]
 800c4fe:	f000 000f 	and.w	r0, r0, #15
 800c502:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800c506:	6020      	str	r0, [r4, #0]
 800c508:	e7b7      	b.n	800c47a <__hexnan+0x7a>
 800c50a:	2508      	movs	r5, #8
 800c50c:	e7b5      	b.n	800c47a <__hexnan+0x7a>
 800c50e:	9b01      	ldr	r3, [sp, #4]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d0df      	beq.n	800c4d4 <__hexnan+0xd4>
 800c514:	f1c3 0320 	rsb	r3, r3, #32
 800c518:	f04f 32ff 	mov.w	r2, #4294967295
 800c51c:	40da      	lsrs	r2, r3
 800c51e:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800c522:	4013      	ands	r3, r2
 800c524:	f846 3c04 	str.w	r3, [r6, #-4]
 800c528:	e7d4      	b.n	800c4d4 <__hexnan+0xd4>
 800c52a:	3f04      	subs	r7, #4
 800c52c:	e7d2      	b.n	800c4d4 <__hexnan+0xd4>
 800c52e:	2004      	movs	r0, #4
 800c530:	b007      	add	sp, #28
 800c532:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c536 <__ascii_mbtowc>:
 800c536:	b082      	sub	sp, #8
 800c538:	b901      	cbnz	r1, 800c53c <__ascii_mbtowc+0x6>
 800c53a:	a901      	add	r1, sp, #4
 800c53c:	b142      	cbz	r2, 800c550 <__ascii_mbtowc+0x1a>
 800c53e:	b14b      	cbz	r3, 800c554 <__ascii_mbtowc+0x1e>
 800c540:	7813      	ldrb	r3, [r2, #0]
 800c542:	600b      	str	r3, [r1, #0]
 800c544:	7812      	ldrb	r2, [r2, #0]
 800c546:	1e10      	subs	r0, r2, #0
 800c548:	bf18      	it	ne
 800c54a:	2001      	movne	r0, #1
 800c54c:	b002      	add	sp, #8
 800c54e:	4770      	bx	lr
 800c550:	4610      	mov	r0, r2
 800c552:	e7fb      	b.n	800c54c <__ascii_mbtowc+0x16>
 800c554:	f06f 0001 	mvn.w	r0, #1
 800c558:	e7f8      	b.n	800c54c <__ascii_mbtowc+0x16>

0800c55a <_realloc_r>:
 800c55a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c55e:	4680      	mov	r8, r0
 800c560:	4614      	mov	r4, r2
 800c562:	460e      	mov	r6, r1
 800c564:	b921      	cbnz	r1, 800c570 <_realloc_r+0x16>
 800c566:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c56a:	4611      	mov	r1, r2
 800c56c:	f7fd be2e 	b.w	800a1cc <_malloc_r>
 800c570:	b92a      	cbnz	r2, 800c57e <_realloc_r+0x24>
 800c572:	f7fd fdb7 	bl	800a0e4 <_free_r>
 800c576:	4625      	mov	r5, r4
 800c578:	4628      	mov	r0, r5
 800c57a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c57e:	f000 f842 	bl	800c606 <_malloc_usable_size_r>
 800c582:	4284      	cmp	r4, r0
 800c584:	4607      	mov	r7, r0
 800c586:	d802      	bhi.n	800c58e <_realloc_r+0x34>
 800c588:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c58c:	d812      	bhi.n	800c5b4 <_realloc_r+0x5a>
 800c58e:	4621      	mov	r1, r4
 800c590:	4640      	mov	r0, r8
 800c592:	f7fd fe1b 	bl	800a1cc <_malloc_r>
 800c596:	4605      	mov	r5, r0
 800c598:	2800      	cmp	r0, #0
 800c59a:	d0ed      	beq.n	800c578 <_realloc_r+0x1e>
 800c59c:	42bc      	cmp	r4, r7
 800c59e:	4622      	mov	r2, r4
 800c5a0:	4631      	mov	r1, r6
 800c5a2:	bf28      	it	cs
 800c5a4:	463a      	movcs	r2, r7
 800c5a6:	f7ff fc23 	bl	800bdf0 <memcpy>
 800c5aa:	4631      	mov	r1, r6
 800c5ac:	4640      	mov	r0, r8
 800c5ae:	f7fd fd99 	bl	800a0e4 <_free_r>
 800c5b2:	e7e1      	b.n	800c578 <_realloc_r+0x1e>
 800c5b4:	4635      	mov	r5, r6
 800c5b6:	e7df      	b.n	800c578 <_realloc_r+0x1e>

0800c5b8 <__ascii_wctomb>:
 800c5b8:	b149      	cbz	r1, 800c5ce <__ascii_wctomb+0x16>
 800c5ba:	2aff      	cmp	r2, #255	; 0xff
 800c5bc:	bf85      	ittet	hi
 800c5be:	238a      	movhi	r3, #138	; 0x8a
 800c5c0:	6003      	strhi	r3, [r0, #0]
 800c5c2:	700a      	strbls	r2, [r1, #0]
 800c5c4:	f04f 30ff 	movhi.w	r0, #4294967295
 800c5c8:	bf98      	it	ls
 800c5ca:	2001      	movls	r0, #1
 800c5cc:	4770      	bx	lr
 800c5ce:	4608      	mov	r0, r1
 800c5d0:	4770      	bx	lr
	...

0800c5d4 <fiprintf>:
 800c5d4:	b40e      	push	{r1, r2, r3}
 800c5d6:	b503      	push	{r0, r1, lr}
 800c5d8:	4601      	mov	r1, r0
 800c5da:	ab03      	add	r3, sp, #12
 800c5dc:	4805      	ldr	r0, [pc, #20]	; (800c5f4 <fiprintf+0x20>)
 800c5de:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5e2:	6800      	ldr	r0, [r0, #0]
 800c5e4:	9301      	str	r3, [sp, #4]
 800c5e6:	f000 f83f 	bl	800c668 <_vfiprintf_r>
 800c5ea:	b002      	add	sp, #8
 800c5ec:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5f0:	b003      	add	sp, #12
 800c5f2:	4770      	bx	lr
 800c5f4:	20000078 	.word	0x20000078

0800c5f8 <abort>:
 800c5f8:	b508      	push	{r3, lr}
 800c5fa:	2006      	movs	r0, #6
 800c5fc:	f000 fa0c 	bl	800ca18 <raise>
 800c600:	2001      	movs	r0, #1
 800c602:	f7f5 fa2b 	bl	8001a5c <_exit>

0800c606 <_malloc_usable_size_r>:
 800c606:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c60a:	1f18      	subs	r0, r3, #4
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	bfbc      	itt	lt
 800c610:	580b      	ldrlt	r3, [r1, r0]
 800c612:	18c0      	addlt	r0, r0, r3
 800c614:	4770      	bx	lr

0800c616 <__sfputc_r>:
 800c616:	6893      	ldr	r3, [r2, #8]
 800c618:	3b01      	subs	r3, #1
 800c61a:	2b00      	cmp	r3, #0
 800c61c:	b410      	push	{r4}
 800c61e:	6093      	str	r3, [r2, #8]
 800c620:	da08      	bge.n	800c634 <__sfputc_r+0x1e>
 800c622:	6994      	ldr	r4, [r2, #24]
 800c624:	42a3      	cmp	r3, r4
 800c626:	db01      	blt.n	800c62c <__sfputc_r+0x16>
 800c628:	290a      	cmp	r1, #10
 800c62a:	d103      	bne.n	800c634 <__sfputc_r+0x1e>
 800c62c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c630:	f000 b934 	b.w	800c89c <__swbuf_r>
 800c634:	6813      	ldr	r3, [r2, #0]
 800c636:	1c58      	adds	r0, r3, #1
 800c638:	6010      	str	r0, [r2, #0]
 800c63a:	7019      	strb	r1, [r3, #0]
 800c63c:	4608      	mov	r0, r1
 800c63e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c642:	4770      	bx	lr

0800c644 <__sfputs_r>:
 800c644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c646:	4606      	mov	r6, r0
 800c648:	460f      	mov	r7, r1
 800c64a:	4614      	mov	r4, r2
 800c64c:	18d5      	adds	r5, r2, r3
 800c64e:	42ac      	cmp	r4, r5
 800c650:	d101      	bne.n	800c656 <__sfputs_r+0x12>
 800c652:	2000      	movs	r0, #0
 800c654:	e007      	b.n	800c666 <__sfputs_r+0x22>
 800c656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c65a:	463a      	mov	r2, r7
 800c65c:	4630      	mov	r0, r6
 800c65e:	f7ff ffda 	bl	800c616 <__sfputc_r>
 800c662:	1c43      	adds	r3, r0, #1
 800c664:	d1f3      	bne.n	800c64e <__sfputs_r+0xa>
 800c666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c668 <_vfiprintf_r>:
 800c668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c66c:	460d      	mov	r5, r1
 800c66e:	b09d      	sub	sp, #116	; 0x74
 800c670:	4614      	mov	r4, r2
 800c672:	4698      	mov	r8, r3
 800c674:	4606      	mov	r6, r0
 800c676:	b118      	cbz	r0, 800c680 <_vfiprintf_r+0x18>
 800c678:	6a03      	ldr	r3, [r0, #32]
 800c67a:	b90b      	cbnz	r3, 800c680 <_vfiprintf_r+0x18>
 800c67c:	f7fc fd62 	bl	8009144 <__sinit>
 800c680:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c682:	07d9      	lsls	r1, r3, #31
 800c684:	d405      	bmi.n	800c692 <_vfiprintf_r+0x2a>
 800c686:	89ab      	ldrh	r3, [r5, #12]
 800c688:	059a      	lsls	r2, r3, #22
 800c68a:	d402      	bmi.n	800c692 <_vfiprintf_r+0x2a>
 800c68c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c68e:	f7fc fea4 	bl	80093da <__retarget_lock_acquire_recursive>
 800c692:	89ab      	ldrh	r3, [r5, #12]
 800c694:	071b      	lsls	r3, r3, #28
 800c696:	d501      	bpl.n	800c69c <_vfiprintf_r+0x34>
 800c698:	692b      	ldr	r3, [r5, #16]
 800c69a:	b99b      	cbnz	r3, 800c6c4 <_vfiprintf_r+0x5c>
 800c69c:	4629      	mov	r1, r5
 800c69e:	4630      	mov	r0, r6
 800c6a0:	f000 f93a 	bl	800c918 <__swsetup_r>
 800c6a4:	b170      	cbz	r0, 800c6c4 <_vfiprintf_r+0x5c>
 800c6a6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c6a8:	07dc      	lsls	r4, r3, #31
 800c6aa:	d504      	bpl.n	800c6b6 <_vfiprintf_r+0x4e>
 800c6ac:	f04f 30ff 	mov.w	r0, #4294967295
 800c6b0:	b01d      	add	sp, #116	; 0x74
 800c6b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c6b6:	89ab      	ldrh	r3, [r5, #12]
 800c6b8:	0598      	lsls	r0, r3, #22
 800c6ba:	d4f7      	bmi.n	800c6ac <_vfiprintf_r+0x44>
 800c6bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c6be:	f7fc fe8d 	bl	80093dc <__retarget_lock_release_recursive>
 800c6c2:	e7f3      	b.n	800c6ac <_vfiprintf_r+0x44>
 800c6c4:	2300      	movs	r3, #0
 800c6c6:	9309      	str	r3, [sp, #36]	; 0x24
 800c6c8:	2320      	movs	r3, #32
 800c6ca:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c6ce:	f8cd 800c 	str.w	r8, [sp, #12]
 800c6d2:	2330      	movs	r3, #48	; 0x30
 800c6d4:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c888 <_vfiprintf_r+0x220>
 800c6d8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c6dc:	f04f 0901 	mov.w	r9, #1
 800c6e0:	4623      	mov	r3, r4
 800c6e2:	469a      	mov	sl, r3
 800c6e4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c6e8:	b10a      	cbz	r2, 800c6ee <_vfiprintf_r+0x86>
 800c6ea:	2a25      	cmp	r2, #37	; 0x25
 800c6ec:	d1f9      	bne.n	800c6e2 <_vfiprintf_r+0x7a>
 800c6ee:	ebba 0b04 	subs.w	fp, sl, r4
 800c6f2:	d00b      	beq.n	800c70c <_vfiprintf_r+0xa4>
 800c6f4:	465b      	mov	r3, fp
 800c6f6:	4622      	mov	r2, r4
 800c6f8:	4629      	mov	r1, r5
 800c6fa:	4630      	mov	r0, r6
 800c6fc:	f7ff ffa2 	bl	800c644 <__sfputs_r>
 800c700:	3001      	adds	r0, #1
 800c702:	f000 80a9 	beq.w	800c858 <_vfiprintf_r+0x1f0>
 800c706:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c708:	445a      	add	r2, fp
 800c70a:	9209      	str	r2, [sp, #36]	; 0x24
 800c70c:	f89a 3000 	ldrb.w	r3, [sl]
 800c710:	2b00      	cmp	r3, #0
 800c712:	f000 80a1 	beq.w	800c858 <_vfiprintf_r+0x1f0>
 800c716:	2300      	movs	r3, #0
 800c718:	f04f 32ff 	mov.w	r2, #4294967295
 800c71c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c720:	f10a 0a01 	add.w	sl, sl, #1
 800c724:	9304      	str	r3, [sp, #16]
 800c726:	9307      	str	r3, [sp, #28]
 800c728:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c72c:	931a      	str	r3, [sp, #104]	; 0x68
 800c72e:	4654      	mov	r4, sl
 800c730:	2205      	movs	r2, #5
 800c732:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c736:	4854      	ldr	r0, [pc, #336]	; (800c888 <_vfiprintf_r+0x220>)
 800c738:	f7f3 fd6a 	bl	8000210 <memchr>
 800c73c:	9a04      	ldr	r2, [sp, #16]
 800c73e:	b9d8      	cbnz	r0, 800c778 <_vfiprintf_r+0x110>
 800c740:	06d1      	lsls	r1, r2, #27
 800c742:	bf44      	itt	mi
 800c744:	2320      	movmi	r3, #32
 800c746:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c74a:	0713      	lsls	r3, r2, #28
 800c74c:	bf44      	itt	mi
 800c74e:	232b      	movmi	r3, #43	; 0x2b
 800c750:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c754:	f89a 3000 	ldrb.w	r3, [sl]
 800c758:	2b2a      	cmp	r3, #42	; 0x2a
 800c75a:	d015      	beq.n	800c788 <_vfiprintf_r+0x120>
 800c75c:	9a07      	ldr	r2, [sp, #28]
 800c75e:	4654      	mov	r4, sl
 800c760:	2000      	movs	r0, #0
 800c762:	f04f 0c0a 	mov.w	ip, #10
 800c766:	4621      	mov	r1, r4
 800c768:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c76c:	3b30      	subs	r3, #48	; 0x30
 800c76e:	2b09      	cmp	r3, #9
 800c770:	d94d      	bls.n	800c80e <_vfiprintf_r+0x1a6>
 800c772:	b1b0      	cbz	r0, 800c7a2 <_vfiprintf_r+0x13a>
 800c774:	9207      	str	r2, [sp, #28]
 800c776:	e014      	b.n	800c7a2 <_vfiprintf_r+0x13a>
 800c778:	eba0 0308 	sub.w	r3, r0, r8
 800c77c:	fa09 f303 	lsl.w	r3, r9, r3
 800c780:	4313      	orrs	r3, r2
 800c782:	9304      	str	r3, [sp, #16]
 800c784:	46a2      	mov	sl, r4
 800c786:	e7d2      	b.n	800c72e <_vfiprintf_r+0xc6>
 800c788:	9b03      	ldr	r3, [sp, #12]
 800c78a:	1d19      	adds	r1, r3, #4
 800c78c:	681b      	ldr	r3, [r3, #0]
 800c78e:	9103      	str	r1, [sp, #12]
 800c790:	2b00      	cmp	r3, #0
 800c792:	bfbb      	ittet	lt
 800c794:	425b      	neglt	r3, r3
 800c796:	f042 0202 	orrlt.w	r2, r2, #2
 800c79a:	9307      	strge	r3, [sp, #28]
 800c79c:	9307      	strlt	r3, [sp, #28]
 800c79e:	bfb8      	it	lt
 800c7a0:	9204      	strlt	r2, [sp, #16]
 800c7a2:	7823      	ldrb	r3, [r4, #0]
 800c7a4:	2b2e      	cmp	r3, #46	; 0x2e
 800c7a6:	d10c      	bne.n	800c7c2 <_vfiprintf_r+0x15a>
 800c7a8:	7863      	ldrb	r3, [r4, #1]
 800c7aa:	2b2a      	cmp	r3, #42	; 0x2a
 800c7ac:	d134      	bne.n	800c818 <_vfiprintf_r+0x1b0>
 800c7ae:	9b03      	ldr	r3, [sp, #12]
 800c7b0:	1d1a      	adds	r2, r3, #4
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	9203      	str	r2, [sp, #12]
 800c7b6:	2b00      	cmp	r3, #0
 800c7b8:	bfb8      	it	lt
 800c7ba:	f04f 33ff 	movlt.w	r3, #4294967295
 800c7be:	3402      	adds	r4, #2
 800c7c0:	9305      	str	r3, [sp, #20]
 800c7c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c898 <_vfiprintf_r+0x230>
 800c7c6:	7821      	ldrb	r1, [r4, #0]
 800c7c8:	2203      	movs	r2, #3
 800c7ca:	4650      	mov	r0, sl
 800c7cc:	f7f3 fd20 	bl	8000210 <memchr>
 800c7d0:	b138      	cbz	r0, 800c7e2 <_vfiprintf_r+0x17a>
 800c7d2:	9b04      	ldr	r3, [sp, #16]
 800c7d4:	eba0 000a 	sub.w	r0, r0, sl
 800c7d8:	2240      	movs	r2, #64	; 0x40
 800c7da:	4082      	lsls	r2, r0
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	3401      	adds	r4, #1
 800c7e0:	9304      	str	r3, [sp, #16]
 800c7e2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c7e6:	4829      	ldr	r0, [pc, #164]	; (800c88c <_vfiprintf_r+0x224>)
 800c7e8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c7ec:	2206      	movs	r2, #6
 800c7ee:	f7f3 fd0f 	bl	8000210 <memchr>
 800c7f2:	2800      	cmp	r0, #0
 800c7f4:	d03f      	beq.n	800c876 <_vfiprintf_r+0x20e>
 800c7f6:	4b26      	ldr	r3, [pc, #152]	; (800c890 <_vfiprintf_r+0x228>)
 800c7f8:	bb1b      	cbnz	r3, 800c842 <_vfiprintf_r+0x1da>
 800c7fa:	9b03      	ldr	r3, [sp, #12]
 800c7fc:	3307      	adds	r3, #7
 800c7fe:	f023 0307 	bic.w	r3, r3, #7
 800c802:	3308      	adds	r3, #8
 800c804:	9303      	str	r3, [sp, #12]
 800c806:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c808:	443b      	add	r3, r7
 800c80a:	9309      	str	r3, [sp, #36]	; 0x24
 800c80c:	e768      	b.n	800c6e0 <_vfiprintf_r+0x78>
 800c80e:	fb0c 3202 	mla	r2, ip, r2, r3
 800c812:	460c      	mov	r4, r1
 800c814:	2001      	movs	r0, #1
 800c816:	e7a6      	b.n	800c766 <_vfiprintf_r+0xfe>
 800c818:	2300      	movs	r3, #0
 800c81a:	3401      	adds	r4, #1
 800c81c:	9305      	str	r3, [sp, #20]
 800c81e:	4619      	mov	r1, r3
 800c820:	f04f 0c0a 	mov.w	ip, #10
 800c824:	4620      	mov	r0, r4
 800c826:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c82a:	3a30      	subs	r2, #48	; 0x30
 800c82c:	2a09      	cmp	r2, #9
 800c82e:	d903      	bls.n	800c838 <_vfiprintf_r+0x1d0>
 800c830:	2b00      	cmp	r3, #0
 800c832:	d0c6      	beq.n	800c7c2 <_vfiprintf_r+0x15a>
 800c834:	9105      	str	r1, [sp, #20]
 800c836:	e7c4      	b.n	800c7c2 <_vfiprintf_r+0x15a>
 800c838:	fb0c 2101 	mla	r1, ip, r1, r2
 800c83c:	4604      	mov	r4, r0
 800c83e:	2301      	movs	r3, #1
 800c840:	e7f0      	b.n	800c824 <_vfiprintf_r+0x1bc>
 800c842:	ab03      	add	r3, sp, #12
 800c844:	9300      	str	r3, [sp, #0]
 800c846:	462a      	mov	r2, r5
 800c848:	4b12      	ldr	r3, [pc, #72]	; (800c894 <_vfiprintf_r+0x22c>)
 800c84a:	a904      	add	r1, sp, #16
 800c84c:	4630      	mov	r0, r6
 800c84e:	f7fb fe17 	bl	8008480 <_printf_float>
 800c852:	4607      	mov	r7, r0
 800c854:	1c78      	adds	r0, r7, #1
 800c856:	d1d6      	bne.n	800c806 <_vfiprintf_r+0x19e>
 800c858:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c85a:	07d9      	lsls	r1, r3, #31
 800c85c:	d405      	bmi.n	800c86a <_vfiprintf_r+0x202>
 800c85e:	89ab      	ldrh	r3, [r5, #12]
 800c860:	059a      	lsls	r2, r3, #22
 800c862:	d402      	bmi.n	800c86a <_vfiprintf_r+0x202>
 800c864:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c866:	f7fc fdb9 	bl	80093dc <__retarget_lock_release_recursive>
 800c86a:	89ab      	ldrh	r3, [r5, #12]
 800c86c:	065b      	lsls	r3, r3, #25
 800c86e:	f53f af1d 	bmi.w	800c6ac <_vfiprintf_r+0x44>
 800c872:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c874:	e71c      	b.n	800c6b0 <_vfiprintf_r+0x48>
 800c876:	ab03      	add	r3, sp, #12
 800c878:	9300      	str	r3, [sp, #0]
 800c87a:	462a      	mov	r2, r5
 800c87c:	4b05      	ldr	r3, [pc, #20]	; (800c894 <_vfiprintf_r+0x22c>)
 800c87e:	a904      	add	r1, sp, #16
 800c880:	4630      	mov	r0, r6
 800c882:	f7fc f8a1 	bl	80089c8 <_printf_i>
 800c886:	e7e4      	b.n	800c852 <_vfiprintf_r+0x1ea>
 800c888:	0800cf01 	.word	0x0800cf01
 800c88c:	0800cf0b 	.word	0x0800cf0b
 800c890:	08008481 	.word	0x08008481
 800c894:	0800c645 	.word	0x0800c645
 800c898:	0800cf07 	.word	0x0800cf07

0800c89c <__swbuf_r>:
 800c89c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c89e:	460e      	mov	r6, r1
 800c8a0:	4614      	mov	r4, r2
 800c8a2:	4605      	mov	r5, r0
 800c8a4:	b118      	cbz	r0, 800c8ae <__swbuf_r+0x12>
 800c8a6:	6a03      	ldr	r3, [r0, #32]
 800c8a8:	b90b      	cbnz	r3, 800c8ae <__swbuf_r+0x12>
 800c8aa:	f7fc fc4b 	bl	8009144 <__sinit>
 800c8ae:	69a3      	ldr	r3, [r4, #24]
 800c8b0:	60a3      	str	r3, [r4, #8]
 800c8b2:	89a3      	ldrh	r3, [r4, #12]
 800c8b4:	071a      	lsls	r2, r3, #28
 800c8b6:	d525      	bpl.n	800c904 <__swbuf_r+0x68>
 800c8b8:	6923      	ldr	r3, [r4, #16]
 800c8ba:	b31b      	cbz	r3, 800c904 <__swbuf_r+0x68>
 800c8bc:	6823      	ldr	r3, [r4, #0]
 800c8be:	6922      	ldr	r2, [r4, #16]
 800c8c0:	1a98      	subs	r0, r3, r2
 800c8c2:	6963      	ldr	r3, [r4, #20]
 800c8c4:	b2f6      	uxtb	r6, r6
 800c8c6:	4283      	cmp	r3, r0
 800c8c8:	4637      	mov	r7, r6
 800c8ca:	dc04      	bgt.n	800c8d6 <__swbuf_r+0x3a>
 800c8cc:	4621      	mov	r1, r4
 800c8ce:	4628      	mov	r0, r5
 800c8d0:	f7ff fa2a 	bl	800bd28 <_fflush_r>
 800c8d4:	b9e0      	cbnz	r0, 800c910 <__swbuf_r+0x74>
 800c8d6:	68a3      	ldr	r3, [r4, #8]
 800c8d8:	3b01      	subs	r3, #1
 800c8da:	60a3      	str	r3, [r4, #8]
 800c8dc:	6823      	ldr	r3, [r4, #0]
 800c8de:	1c5a      	adds	r2, r3, #1
 800c8e0:	6022      	str	r2, [r4, #0]
 800c8e2:	701e      	strb	r6, [r3, #0]
 800c8e4:	6962      	ldr	r2, [r4, #20]
 800c8e6:	1c43      	adds	r3, r0, #1
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d004      	beq.n	800c8f6 <__swbuf_r+0x5a>
 800c8ec:	89a3      	ldrh	r3, [r4, #12]
 800c8ee:	07db      	lsls	r3, r3, #31
 800c8f0:	d506      	bpl.n	800c900 <__swbuf_r+0x64>
 800c8f2:	2e0a      	cmp	r6, #10
 800c8f4:	d104      	bne.n	800c900 <__swbuf_r+0x64>
 800c8f6:	4621      	mov	r1, r4
 800c8f8:	4628      	mov	r0, r5
 800c8fa:	f7ff fa15 	bl	800bd28 <_fflush_r>
 800c8fe:	b938      	cbnz	r0, 800c910 <__swbuf_r+0x74>
 800c900:	4638      	mov	r0, r7
 800c902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c904:	4621      	mov	r1, r4
 800c906:	4628      	mov	r0, r5
 800c908:	f000 f806 	bl	800c918 <__swsetup_r>
 800c90c:	2800      	cmp	r0, #0
 800c90e:	d0d5      	beq.n	800c8bc <__swbuf_r+0x20>
 800c910:	f04f 37ff 	mov.w	r7, #4294967295
 800c914:	e7f4      	b.n	800c900 <__swbuf_r+0x64>
	...

0800c918 <__swsetup_r>:
 800c918:	b538      	push	{r3, r4, r5, lr}
 800c91a:	4b2a      	ldr	r3, [pc, #168]	; (800c9c4 <__swsetup_r+0xac>)
 800c91c:	4605      	mov	r5, r0
 800c91e:	6818      	ldr	r0, [r3, #0]
 800c920:	460c      	mov	r4, r1
 800c922:	b118      	cbz	r0, 800c92c <__swsetup_r+0x14>
 800c924:	6a03      	ldr	r3, [r0, #32]
 800c926:	b90b      	cbnz	r3, 800c92c <__swsetup_r+0x14>
 800c928:	f7fc fc0c 	bl	8009144 <__sinit>
 800c92c:	89a3      	ldrh	r3, [r4, #12]
 800c92e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c932:	0718      	lsls	r0, r3, #28
 800c934:	d422      	bmi.n	800c97c <__swsetup_r+0x64>
 800c936:	06d9      	lsls	r1, r3, #27
 800c938:	d407      	bmi.n	800c94a <__swsetup_r+0x32>
 800c93a:	2309      	movs	r3, #9
 800c93c:	602b      	str	r3, [r5, #0]
 800c93e:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c942:	81a3      	strh	r3, [r4, #12]
 800c944:	f04f 30ff 	mov.w	r0, #4294967295
 800c948:	e034      	b.n	800c9b4 <__swsetup_r+0x9c>
 800c94a:	0758      	lsls	r0, r3, #29
 800c94c:	d512      	bpl.n	800c974 <__swsetup_r+0x5c>
 800c94e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c950:	b141      	cbz	r1, 800c964 <__swsetup_r+0x4c>
 800c952:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c956:	4299      	cmp	r1, r3
 800c958:	d002      	beq.n	800c960 <__swsetup_r+0x48>
 800c95a:	4628      	mov	r0, r5
 800c95c:	f7fd fbc2 	bl	800a0e4 <_free_r>
 800c960:	2300      	movs	r3, #0
 800c962:	6363      	str	r3, [r4, #52]	; 0x34
 800c964:	89a3      	ldrh	r3, [r4, #12]
 800c966:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c96a:	81a3      	strh	r3, [r4, #12]
 800c96c:	2300      	movs	r3, #0
 800c96e:	6063      	str	r3, [r4, #4]
 800c970:	6923      	ldr	r3, [r4, #16]
 800c972:	6023      	str	r3, [r4, #0]
 800c974:	89a3      	ldrh	r3, [r4, #12]
 800c976:	f043 0308 	orr.w	r3, r3, #8
 800c97a:	81a3      	strh	r3, [r4, #12]
 800c97c:	6923      	ldr	r3, [r4, #16]
 800c97e:	b94b      	cbnz	r3, 800c994 <__swsetup_r+0x7c>
 800c980:	89a3      	ldrh	r3, [r4, #12]
 800c982:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c986:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c98a:	d003      	beq.n	800c994 <__swsetup_r+0x7c>
 800c98c:	4621      	mov	r1, r4
 800c98e:	4628      	mov	r0, r5
 800c990:	f000 f884 	bl	800ca9c <__smakebuf_r>
 800c994:	89a0      	ldrh	r0, [r4, #12]
 800c996:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c99a:	f010 0301 	ands.w	r3, r0, #1
 800c99e:	d00a      	beq.n	800c9b6 <__swsetup_r+0x9e>
 800c9a0:	2300      	movs	r3, #0
 800c9a2:	60a3      	str	r3, [r4, #8]
 800c9a4:	6963      	ldr	r3, [r4, #20]
 800c9a6:	425b      	negs	r3, r3
 800c9a8:	61a3      	str	r3, [r4, #24]
 800c9aa:	6923      	ldr	r3, [r4, #16]
 800c9ac:	b943      	cbnz	r3, 800c9c0 <__swsetup_r+0xa8>
 800c9ae:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c9b2:	d1c4      	bne.n	800c93e <__swsetup_r+0x26>
 800c9b4:	bd38      	pop	{r3, r4, r5, pc}
 800c9b6:	0781      	lsls	r1, r0, #30
 800c9b8:	bf58      	it	pl
 800c9ba:	6963      	ldrpl	r3, [r4, #20]
 800c9bc:	60a3      	str	r3, [r4, #8]
 800c9be:	e7f4      	b.n	800c9aa <__swsetup_r+0x92>
 800c9c0:	2000      	movs	r0, #0
 800c9c2:	e7f7      	b.n	800c9b4 <__swsetup_r+0x9c>
 800c9c4:	20000078 	.word	0x20000078

0800c9c8 <_raise_r>:
 800c9c8:	291f      	cmp	r1, #31
 800c9ca:	b538      	push	{r3, r4, r5, lr}
 800c9cc:	4604      	mov	r4, r0
 800c9ce:	460d      	mov	r5, r1
 800c9d0:	d904      	bls.n	800c9dc <_raise_r+0x14>
 800c9d2:	2316      	movs	r3, #22
 800c9d4:	6003      	str	r3, [r0, #0]
 800c9d6:	f04f 30ff 	mov.w	r0, #4294967295
 800c9da:	bd38      	pop	{r3, r4, r5, pc}
 800c9dc:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c9de:	b112      	cbz	r2, 800c9e6 <_raise_r+0x1e>
 800c9e0:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c9e4:	b94b      	cbnz	r3, 800c9fa <_raise_r+0x32>
 800c9e6:	4620      	mov	r0, r4
 800c9e8:	f000 f830 	bl	800ca4c <_getpid_r>
 800c9ec:	462a      	mov	r2, r5
 800c9ee:	4601      	mov	r1, r0
 800c9f0:	4620      	mov	r0, r4
 800c9f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c9f6:	f000 b817 	b.w	800ca28 <_kill_r>
 800c9fa:	2b01      	cmp	r3, #1
 800c9fc:	d00a      	beq.n	800ca14 <_raise_r+0x4c>
 800c9fe:	1c59      	adds	r1, r3, #1
 800ca00:	d103      	bne.n	800ca0a <_raise_r+0x42>
 800ca02:	2316      	movs	r3, #22
 800ca04:	6003      	str	r3, [r0, #0]
 800ca06:	2001      	movs	r0, #1
 800ca08:	e7e7      	b.n	800c9da <_raise_r+0x12>
 800ca0a:	2400      	movs	r4, #0
 800ca0c:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800ca10:	4628      	mov	r0, r5
 800ca12:	4798      	blx	r3
 800ca14:	2000      	movs	r0, #0
 800ca16:	e7e0      	b.n	800c9da <_raise_r+0x12>

0800ca18 <raise>:
 800ca18:	4b02      	ldr	r3, [pc, #8]	; (800ca24 <raise+0xc>)
 800ca1a:	4601      	mov	r1, r0
 800ca1c:	6818      	ldr	r0, [r3, #0]
 800ca1e:	f7ff bfd3 	b.w	800c9c8 <_raise_r>
 800ca22:	bf00      	nop
 800ca24:	20000078 	.word	0x20000078

0800ca28 <_kill_r>:
 800ca28:	b538      	push	{r3, r4, r5, lr}
 800ca2a:	4d07      	ldr	r5, [pc, #28]	; (800ca48 <_kill_r+0x20>)
 800ca2c:	2300      	movs	r3, #0
 800ca2e:	4604      	mov	r4, r0
 800ca30:	4608      	mov	r0, r1
 800ca32:	4611      	mov	r1, r2
 800ca34:	602b      	str	r3, [r5, #0]
 800ca36:	f7f5 f801 	bl	8001a3c <_kill>
 800ca3a:	1c43      	adds	r3, r0, #1
 800ca3c:	d102      	bne.n	800ca44 <_kill_r+0x1c>
 800ca3e:	682b      	ldr	r3, [r5, #0]
 800ca40:	b103      	cbz	r3, 800ca44 <_kill_r+0x1c>
 800ca42:	6023      	str	r3, [r4, #0]
 800ca44:	bd38      	pop	{r3, r4, r5, pc}
 800ca46:	bf00      	nop
 800ca48:	20000c80 	.word	0x20000c80

0800ca4c <_getpid_r>:
 800ca4c:	f7f4 bfee 	b.w	8001a2c <_getpid>

0800ca50 <__swhatbuf_r>:
 800ca50:	b570      	push	{r4, r5, r6, lr}
 800ca52:	460c      	mov	r4, r1
 800ca54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ca58:	2900      	cmp	r1, #0
 800ca5a:	b096      	sub	sp, #88	; 0x58
 800ca5c:	4615      	mov	r5, r2
 800ca5e:	461e      	mov	r6, r3
 800ca60:	da0d      	bge.n	800ca7e <__swhatbuf_r+0x2e>
 800ca62:	89a3      	ldrh	r3, [r4, #12]
 800ca64:	f013 0f80 	tst.w	r3, #128	; 0x80
 800ca68:	f04f 0100 	mov.w	r1, #0
 800ca6c:	bf0c      	ite	eq
 800ca6e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800ca72:	2340      	movne	r3, #64	; 0x40
 800ca74:	2000      	movs	r0, #0
 800ca76:	6031      	str	r1, [r6, #0]
 800ca78:	602b      	str	r3, [r5, #0]
 800ca7a:	b016      	add	sp, #88	; 0x58
 800ca7c:	bd70      	pop	{r4, r5, r6, pc}
 800ca7e:	466a      	mov	r2, sp
 800ca80:	f000 f848 	bl	800cb14 <_fstat_r>
 800ca84:	2800      	cmp	r0, #0
 800ca86:	dbec      	blt.n	800ca62 <__swhatbuf_r+0x12>
 800ca88:	9901      	ldr	r1, [sp, #4]
 800ca8a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800ca8e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800ca92:	4259      	negs	r1, r3
 800ca94:	4159      	adcs	r1, r3
 800ca96:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ca9a:	e7eb      	b.n	800ca74 <__swhatbuf_r+0x24>

0800ca9c <__smakebuf_r>:
 800ca9c:	898b      	ldrh	r3, [r1, #12]
 800ca9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800caa0:	079d      	lsls	r5, r3, #30
 800caa2:	4606      	mov	r6, r0
 800caa4:	460c      	mov	r4, r1
 800caa6:	d507      	bpl.n	800cab8 <__smakebuf_r+0x1c>
 800caa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800caac:	6023      	str	r3, [r4, #0]
 800caae:	6123      	str	r3, [r4, #16]
 800cab0:	2301      	movs	r3, #1
 800cab2:	6163      	str	r3, [r4, #20]
 800cab4:	b002      	add	sp, #8
 800cab6:	bd70      	pop	{r4, r5, r6, pc}
 800cab8:	ab01      	add	r3, sp, #4
 800caba:	466a      	mov	r2, sp
 800cabc:	f7ff ffc8 	bl	800ca50 <__swhatbuf_r>
 800cac0:	9900      	ldr	r1, [sp, #0]
 800cac2:	4605      	mov	r5, r0
 800cac4:	4630      	mov	r0, r6
 800cac6:	f7fd fb81 	bl	800a1cc <_malloc_r>
 800caca:	b948      	cbnz	r0, 800cae0 <__smakebuf_r+0x44>
 800cacc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cad0:	059a      	lsls	r2, r3, #22
 800cad2:	d4ef      	bmi.n	800cab4 <__smakebuf_r+0x18>
 800cad4:	f023 0303 	bic.w	r3, r3, #3
 800cad8:	f043 0302 	orr.w	r3, r3, #2
 800cadc:	81a3      	strh	r3, [r4, #12]
 800cade:	e7e3      	b.n	800caa8 <__smakebuf_r+0xc>
 800cae0:	89a3      	ldrh	r3, [r4, #12]
 800cae2:	6020      	str	r0, [r4, #0]
 800cae4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cae8:	81a3      	strh	r3, [r4, #12]
 800caea:	9b00      	ldr	r3, [sp, #0]
 800caec:	6163      	str	r3, [r4, #20]
 800caee:	9b01      	ldr	r3, [sp, #4]
 800caf0:	6120      	str	r0, [r4, #16]
 800caf2:	b15b      	cbz	r3, 800cb0c <__smakebuf_r+0x70>
 800caf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800caf8:	4630      	mov	r0, r6
 800cafa:	f000 f81d 	bl	800cb38 <_isatty_r>
 800cafe:	b128      	cbz	r0, 800cb0c <__smakebuf_r+0x70>
 800cb00:	89a3      	ldrh	r3, [r4, #12]
 800cb02:	f023 0303 	bic.w	r3, r3, #3
 800cb06:	f043 0301 	orr.w	r3, r3, #1
 800cb0a:	81a3      	strh	r3, [r4, #12]
 800cb0c:	89a3      	ldrh	r3, [r4, #12]
 800cb0e:	431d      	orrs	r5, r3
 800cb10:	81a5      	strh	r5, [r4, #12]
 800cb12:	e7cf      	b.n	800cab4 <__smakebuf_r+0x18>

0800cb14 <_fstat_r>:
 800cb14:	b538      	push	{r3, r4, r5, lr}
 800cb16:	4d07      	ldr	r5, [pc, #28]	; (800cb34 <_fstat_r+0x20>)
 800cb18:	2300      	movs	r3, #0
 800cb1a:	4604      	mov	r4, r0
 800cb1c:	4608      	mov	r0, r1
 800cb1e:	4611      	mov	r1, r2
 800cb20:	602b      	str	r3, [r5, #0]
 800cb22:	f7f4 ffea 	bl	8001afa <_fstat>
 800cb26:	1c43      	adds	r3, r0, #1
 800cb28:	d102      	bne.n	800cb30 <_fstat_r+0x1c>
 800cb2a:	682b      	ldr	r3, [r5, #0]
 800cb2c:	b103      	cbz	r3, 800cb30 <_fstat_r+0x1c>
 800cb2e:	6023      	str	r3, [r4, #0]
 800cb30:	bd38      	pop	{r3, r4, r5, pc}
 800cb32:	bf00      	nop
 800cb34:	20000c80 	.word	0x20000c80

0800cb38 <_isatty_r>:
 800cb38:	b538      	push	{r3, r4, r5, lr}
 800cb3a:	4d06      	ldr	r5, [pc, #24]	; (800cb54 <_isatty_r+0x1c>)
 800cb3c:	2300      	movs	r3, #0
 800cb3e:	4604      	mov	r4, r0
 800cb40:	4608      	mov	r0, r1
 800cb42:	602b      	str	r3, [r5, #0]
 800cb44:	f7f4 ffe9 	bl	8001b1a <_isatty>
 800cb48:	1c43      	adds	r3, r0, #1
 800cb4a:	d102      	bne.n	800cb52 <_isatty_r+0x1a>
 800cb4c:	682b      	ldr	r3, [r5, #0]
 800cb4e:	b103      	cbz	r3, 800cb52 <_isatty_r+0x1a>
 800cb50:	6023      	str	r3, [r4, #0]
 800cb52:	bd38      	pop	{r3, r4, r5, pc}
 800cb54:	20000c80 	.word	0x20000c80

0800cb58 <_init>:
 800cb58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb5a:	bf00      	nop
 800cb5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb5e:	bc08      	pop	{r3}
 800cb60:	469e      	mov	lr, r3
 800cb62:	4770      	bx	lr

0800cb64 <_fini>:
 800cb64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cb66:	bf00      	nop
 800cb68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cb6a:	bc08      	pop	{r3}
 800cb6c:	469e      	mov	lr, r3
 800cb6e:	4770      	bx	lr
