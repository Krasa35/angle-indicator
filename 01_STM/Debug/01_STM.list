
01_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d4f8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000480  0800d6c8  0800d6c8  0001d6c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800db48  0800db48  00020328  2**0
                  CONTENTS
  4 .ARM          00000008  0800db48  0800db48  0001db48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db50  0800db50  00020328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db50  0800db50  0001db50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db54  0800db54  0001db54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800db58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001e8  0800dd40  000201e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000288  0800dde0  00020288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000009f8  20000328  0800de80  00020328  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20000d20  0800de80  00020d20  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 15 .debug_info   00020fb9  00000000  00000000  0002039b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004967  00000000  00000000  00041354  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001a68  00000000  00000000  00045cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000145c  00000000  00000000  00047728  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002ccad  00000000  00000000  00048b84  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   000282b2  00000000  00000000  00075831  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    001007e2  00000000  00000000  0009dae3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000835c  00000000  00000000  0019e2c8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  001a6624  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000328 	.word	0x20000328
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d6b0 	.word	0x0800d6b0

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000032c 	.word	0x2000032c
 800020c:	0800d6b0 	.word	0x0800d6b0

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a6 	b.w	800104c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9e08      	ldr	r6, [sp, #32]
 8000d8a:	460d      	mov	r5, r1
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	460f      	mov	r7, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14a      	bne.n	8000e2a <__udivmoddi4+0xa6>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4694      	mov	ip, r2
 8000d98:	d965      	bls.n	8000e66 <__udivmoddi4+0xe2>
 8000d9a:	fab2 f382 	clz	r3, r2
 8000d9e:	b143      	cbz	r3, 8000db2 <__udivmoddi4+0x2e>
 8000da0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da4:	f1c3 0220 	rsb	r2, r3, #32
 8000da8:	409f      	lsls	r7, r3
 8000daa:	fa20 f202 	lsr.w	r2, r0, r2
 8000dae:	4317      	orrs	r7, r2
 8000db0:	409c      	lsls	r4, r3
 8000db2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000db6:	fa1f f58c 	uxth.w	r5, ip
 8000dba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dbe:	0c22      	lsrs	r2, r4, #16
 8000dc0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dc4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000dc8:	fb01 f005 	mul.w	r0, r1, r5
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x62>
 8000dd0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dd4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dd8:	f080 811c 	bcs.w	8001014 <__udivmoddi4+0x290>
 8000ddc:	4290      	cmp	r0, r2
 8000dde:	f240 8119 	bls.w	8001014 <__udivmoddi4+0x290>
 8000de2:	3902      	subs	r1, #2
 8000de4:	4462      	add	r2, ip
 8000de6:	1a12      	subs	r2, r2, r0
 8000de8:	b2a4      	uxth	r4, r4
 8000dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000df6:	fb00 f505 	mul.w	r5, r0, r5
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	d90a      	bls.n	8000e14 <__udivmoddi4+0x90>
 8000dfe:	eb1c 0404 	adds.w	r4, ip, r4
 8000e02:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e06:	f080 8107 	bcs.w	8001018 <__udivmoddi4+0x294>
 8000e0a:	42a5      	cmp	r5, r4
 8000e0c:	f240 8104 	bls.w	8001018 <__udivmoddi4+0x294>
 8000e10:	4464      	add	r4, ip
 8000e12:	3802      	subs	r0, #2
 8000e14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e18:	1b64      	subs	r4, r4, r5
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b11e      	cbz	r6, 8000e26 <__udivmoddi4+0xa2>
 8000e1e:	40dc      	lsrs	r4, r3
 8000e20:	2300      	movs	r3, #0
 8000e22:	e9c6 4300 	strd	r4, r3, [r6]
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0xbc>
 8000e2e:	2e00      	cmp	r6, #0
 8000e30:	f000 80ed 	beq.w	800100e <__udivmoddi4+0x28a>
 8000e34:	2100      	movs	r1, #0
 8000e36:	e9c6 0500 	strd	r0, r5, [r6]
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e40:	fab3 f183 	clz	r1, r3
 8000e44:	2900      	cmp	r1, #0
 8000e46:	d149      	bne.n	8000edc <__udivmoddi4+0x158>
 8000e48:	42ab      	cmp	r3, r5
 8000e4a:	d302      	bcc.n	8000e52 <__udivmoddi4+0xce>
 8000e4c:	4282      	cmp	r2, r0
 8000e4e:	f200 80f8 	bhi.w	8001042 <__udivmoddi4+0x2be>
 8000e52:	1a84      	subs	r4, r0, r2
 8000e54:	eb65 0203 	sbc.w	r2, r5, r3
 8000e58:	2001      	movs	r0, #1
 8000e5a:	4617      	mov	r7, r2
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d0e2      	beq.n	8000e26 <__udivmoddi4+0xa2>
 8000e60:	e9c6 4700 	strd	r4, r7, [r6]
 8000e64:	e7df      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e66:	b902      	cbnz	r2, 8000e6a <__udivmoddi4+0xe6>
 8000e68:	deff      	udf	#255	; 0xff
 8000e6a:	fab2 f382 	clz	r3, r2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f040 8090 	bne.w	8000f94 <__udivmoddi4+0x210>
 8000e74:	1a8a      	subs	r2, r1, r2
 8000e76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e7a:	fa1f fe8c 	uxth.w	lr, ip
 8000e7e:	2101      	movs	r1, #1
 8000e80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e84:	fb07 2015 	mls	r0, r7, r5, r2
 8000e88:	0c22      	lsrs	r2, r4, #16
 8000e8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e8e:	fb0e f005 	mul.w	r0, lr, r5
 8000e92:	4290      	cmp	r0, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x124>
 8000e96:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x122>
 8000ea0:	4290      	cmp	r0, r2
 8000ea2:	f200 80cb 	bhi.w	800103c <__udivmoddi4+0x2b8>
 8000ea6:	4645      	mov	r5, r8
 8000ea8:	1a12      	subs	r2, r2, r0
 8000eaa:	b2a4      	uxth	r4, r4
 8000eac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000eb0:	fb07 2210 	mls	r2, r7, r0, r2
 8000eb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000eb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ebc:	45a6      	cmp	lr, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x14e>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ec8:	d202      	bcs.n	8000ed0 <__udivmoddi4+0x14c>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f200 80bb 	bhi.w	8001046 <__udivmoddi4+0x2c2>
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	eba4 040e 	sub.w	r4, r4, lr
 8000ed6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eda:	e79f      	b.n	8000e1c <__udivmoddi4+0x98>
 8000edc:	f1c1 0720 	rsb	r7, r1, #32
 8000ee0:	408b      	lsls	r3, r1
 8000ee2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ee6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eea:	fa05 f401 	lsl.w	r4, r5, r1
 8000eee:	fa20 f307 	lsr.w	r3, r0, r7
 8000ef2:	40fd      	lsrs	r5, r7
 8000ef4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef8:	4323      	orrs	r3, r4
 8000efa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000efe:	fa1f fe8c 	uxth.w	lr, ip
 8000f02:	fb09 5518 	mls	r5, r9, r8, r5
 8000f06:	0c1c      	lsrs	r4, r3, #16
 8000f08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f10:	42a5      	cmp	r5, r4
 8000f12:	fa02 f201 	lsl.w	r2, r2, r1
 8000f16:	fa00 f001 	lsl.w	r0, r0, r1
 8000f1a:	d90b      	bls.n	8000f34 <__udivmoddi4+0x1b0>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f24:	f080 8088 	bcs.w	8001038 <__udivmoddi4+0x2b4>
 8000f28:	42a5      	cmp	r5, r4
 8000f2a:	f240 8085 	bls.w	8001038 <__udivmoddi4+0x2b4>
 8000f2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f32:	4464      	add	r4, ip
 8000f34:	1b64      	subs	r4, r4, r5
 8000f36:	b29d      	uxth	r5, r3
 8000f38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f48:	45a6      	cmp	lr, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x1da>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f54:	d26c      	bcs.n	8001030 <__udivmoddi4+0x2ac>
 8000f56:	45a6      	cmp	lr, r4
 8000f58:	d96a      	bls.n	8001030 <__udivmoddi4+0x2ac>
 8000f5a:	3b02      	subs	r3, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f62:	fba3 9502 	umull	r9, r5, r3, r2
 8000f66:	eba4 040e 	sub.w	r4, r4, lr
 8000f6a:	42ac      	cmp	r4, r5
 8000f6c:	46c8      	mov	r8, r9
 8000f6e:	46ae      	mov	lr, r5
 8000f70:	d356      	bcc.n	8001020 <__udivmoddi4+0x29c>
 8000f72:	d053      	beq.n	800101c <__udivmoddi4+0x298>
 8000f74:	b156      	cbz	r6, 8000f8c <__udivmoddi4+0x208>
 8000f76:	ebb0 0208 	subs.w	r2, r0, r8
 8000f7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f82:	40ca      	lsrs	r2, r1
 8000f84:	40cc      	lsrs	r4, r1
 8000f86:	4317      	orrs	r7, r2
 8000f88:	e9c6 7400 	strd	r7, r4, [r6]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	2100      	movs	r1, #0
 8000f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f94:	f1c3 0120 	rsb	r1, r3, #32
 8000f98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000fa0:	fa25 f101 	lsr.w	r1, r5, r1
 8000fa4:	409d      	lsls	r5, r3
 8000fa6:	432a      	orrs	r2, r5
 8000fa8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fac:	fa1f fe8c 	uxth.w	lr, ip
 8000fb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fb4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fbe:	fb00 f50e 	mul.w	r5, r0, lr
 8000fc2:	428d      	cmp	r5, r1
 8000fc4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fc8:	d908      	bls.n	8000fdc <__udivmoddi4+0x258>
 8000fca:	eb1c 0101 	adds.w	r1, ip, r1
 8000fce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fd2:	d22f      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8000fd4:	428d      	cmp	r5, r1
 8000fd6:	d92d      	bls.n	8001034 <__udivmoddi4+0x2b0>
 8000fd8:	3802      	subs	r0, #2
 8000fda:	4461      	add	r1, ip
 8000fdc:	1b49      	subs	r1, r1, r5
 8000fde:	b292      	uxth	r2, r2
 8000fe0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fe4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fe8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fec:	fb05 f10e 	mul.w	r1, r5, lr
 8000ff0:	4291      	cmp	r1, r2
 8000ff2:	d908      	bls.n	8001006 <__udivmoddi4+0x282>
 8000ff4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ff8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ffc:	d216      	bcs.n	800102c <__udivmoddi4+0x2a8>
 8000ffe:	4291      	cmp	r1, r2
 8001000:	d914      	bls.n	800102c <__udivmoddi4+0x2a8>
 8001002:	3d02      	subs	r5, #2
 8001004:	4462      	add	r2, ip
 8001006:	1a52      	subs	r2, r2, r1
 8001008:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800100c:	e738      	b.n	8000e80 <__udivmoddi4+0xfc>
 800100e:	4631      	mov	r1, r6
 8001010:	4630      	mov	r0, r6
 8001012:	e708      	b.n	8000e26 <__udivmoddi4+0xa2>
 8001014:	4639      	mov	r1, r7
 8001016:	e6e6      	b.n	8000de6 <__udivmoddi4+0x62>
 8001018:	4610      	mov	r0, r2
 800101a:	e6fb      	b.n	8000e14 <__udivmoddi4+0x90>
 800101c:	4548      	cmp	r0, r9
 800101e:	d2a9      	bcs.n	8000f74 <__udivmoddi4+0x1f0>
 8001020:	ebb9 0802 	subs.w	r8, r9, r2
 8001024:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001028:	3b01      	subs	r3, #1
 800102a:	e7a3      	b.n	8000f74 <__udivmoddi4+0x1f0>
 800102c:	4645      	mov	r5, r8
 800102e:	e7ea      	b.n	8001006 <__udivmoddi4+0x282>
 8001030:	462b      	mov	r3, r5
 8001032:	e794      	b.n	8000f5e <__udivmoddi4+0x1da>
 8001034:	4640      	mov	r0, r8
 8001036:	e7d1      	b.n	8000fdc <__udivmoddi4+0x258>
 8001038:	46d0      	mov	r8, sl
 800103a:	e77b      	b.n	8000f34 <__udivmoddi4+0x1b0>
 800103c:	3d02      	subs	r5, #2
 800103e:	4462      	add	r2, ip
 8001040:	e732      	b.n	8000ea8 <__udivmoddi4+0x124>
 8001042:	4608      	mov	r0, r1
 8001044:	e70a      	b.n	8000e5c <__udivmoddi4+0xd8>
 8001046:	4464      	add	r4, ip
 8001048:	3802      	subs	r0, #2
 800104a:	e742      	b.n	8000ed2 <__udivmoddi4+0x14e>

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <AS5600_Init>:
 *      Author: Kurus
 */

#include "AS5600.h"

void AS5600_Init(struct AS5600* device){
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    device->ADDRESS = _AS5600_ADDRESS;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2236      	movs	r2, #54	; 0x36
 800105c:	701a      	strb	r2, [r3, #0]
    device->ZMCO = 0;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	705a      	strb	r2, [r3, #1]
    device->ZPOS1 = 0;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	709a      	strb	r2, [r3, #2]
    device->ZPOS2 = 0;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	70da      	strb	r2, [r3, #3]
    device->MPOS1 = 0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	711a      	strb	r2, [r3, #4]
    device->MPOS2 = 0;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	715a      	strb	r2, [r3, #5]
    device->MANG1 = 0;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	719a      	strb	r2, [r3, #6]
    device->MANG2 = 0;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	71da      	strb	r2, [r3, #7]
    device->CONF1 = 0;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	721a      	strb	r2, [r3, #8]
    device->CONF2 = 0;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	725a      	strb	r2, [r3, #9]
    device->RAW_ANGLE1 = 0;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	729a      	strb	r2, [r3, #10]
    device->RAW_ANGLE2 = 0;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	72da      	strb	r2, [r3, #11]
    device->ANGLE1 = _ANGLE;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	220e      	movs	r2, #14
 80010a4:	731a      	strb	r2, [r3, #12]
    device->ANGLE2 = 0;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	735a      	strb	r2, [r3, #13]
    device->STATUS = _STATUS;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	220b      	movs	r2, #11
 80010b0:	739a      	strb	r2, [r3, #14]
    device->AGC = 0;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	73da      	strb	r2, [r3, #15]
    device->MAGNITUDE1 = 0;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	741a      	strb	r2, [r3, #16]
    device->MAGNITUDE2 = 0;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	745a      	strb	r2, [r3, #17]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <AS5600_Angle>:
float AS5600_Angle(struct AS5600* device)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af04      	add	r7, sp, #16
 80010d6:	6078      	str	r0, [r7, #4]
    uint16_t angle;
    HAL_I2C_Mem_Read(&hi2c1, device->ADDRESS << 1, device->ANGLE1, 1, (uint8_t*)&angle, 2, HAL_MAX_DELAY);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	b299      	uxth	r1, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	7b1b      	ldrb	r3, [r3, #12]
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	9302      	str	r3, [sp, #8]
 80010ee:	2302      	movs	r3, #2
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	f107 030a 	add.w	r3, r7, #10
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	4815      	ldr	r0, [pc, #84]	; (8001150 <AS5600_Angle+0x80>)
 80010fc:	f002 f956 	bl	80033ac <HAL_I2C_Mem_Read>
    angle = (angle >> 8) | (angle << 8); // zamiana bitow LH
 8001100:	897b      	ldrh	r3, [r7, #10]
 8001102:	0a1b      	lsrs	r3, r3, #8
 8001104:	b29b      	uxth	r3, r3
 8001106:	b21a      	sxth	r2, r3
 8001108:	897b      	ldrh	r3, [r7, #10]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	b21b      	sxth	r3, r3
 800110e:	4313      	orrs	r3, r2
 8001110:	b21b      	sxth	r3, r3
 8001112:	b29b      	uxth	r3, r3
 8001114:	817b      	strh	r3, [r7, #10]
    float angle_float = angle / 11.38;
 8001116:	897b      	ldrh	r3, [r7, #10]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fa33 	bl	8000584 <__aeabi_i2d>
 800111e:	a30a      	add	r3, pc, #40	; (adr r3, 8001148 <AS5600_Angle+0x78>)
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	f7ff fbc2 	bl	80008ac <__aeabi_ddiv>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fd8a 	bl	8000c48 <__aeabi_d2f>
 8001134:	4603      	mov	r3, r0
 8001136:	60fb      	str	r3, [r7, #12]
    return angle_float;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	ee07 3a90 	vmov	s15, r3
}
 800113e:	eeb0 0a67 	vmov.f32	s0, s15
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	5c28f5c3 	.word	0x5c28f5c3
 800114c:	4026c28f 	.word	0x4026c28f
 8001150:	20000478 	.word	0x20000478

08001154 <HAL_TIM_PeriodElapsedCallback>:
extern struct AS5600 device;
extern _BUFFER_UARThandle hbfr;


// Initialize constant strings
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001154:	b580      	push	{r7, lr}
 8001156:	b08c      	sub	sp, #48	; 0x30
 8001158:	af02      	add	r7, sp, #8
 800115a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a1b      	ldr	r2, [pc, #108]	; (80011d0 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d12f      	bne.n	80011c6 <HAL_TIM_PeriodElapsedCallback+0x72>
	  float zmienna = AS5600_Angle(&device);
 8001166:	481b      	ldr	r0, [pc, #108]	; (80011d4 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001168:	f7ff ffb2 	bl	80010d0 <AS5600_Angle>
 800116c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	  if(hbfr.state == _DEBUG){
 8001170:	4b19      	ldr	r3, [pc, #100]	; (80011d8 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8001172:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001176:	2b00      	cmp	r3, #0
 8001178:	d125      	bne.n	80011c6 <HAL_TIM_PeriodElapsedCallback+0x72>
		  char buffer[20];  // Adjust the size as needed
		  int len = snprintf(buffer, sizeof(buffer), "%f", zmienna);
 800117a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800117c:	f7ff fa14 	bl	80005a8 <__aeabi_f2d>
 8001180:	4602      	mov	r2, r0
 8001182:	460b      	mov	r3, r1
 8001184:	f107 000c 	add.w	r0, r7, #12
 8001188:	e9cd 2300 	strd	r2, r3, [sp]
 800118c:	4a13      	ldr	r2, [pc, #76]	; (80011dc <HAL_TIM_PeriodElapsedCallback+0x88>)
 800118e:	2114      	movs	r1, #20
 8001190:	f008 fdba 	bl	8009d08 <sniprintf>
 8001194:	6238      	str	r0, [r7, #32]
		  buffer[len++] = '\r';
 8001196:	6a3b      	ldr	r3, [r7, #32]
 8001198:	1c5a      	adds	r2, r3, #1
 800119a:	623a      	str	r2, [r7, #32]
 800119c:	3328      	adds	r3, #40	; 0x28
 800119e:	443b      	add	r3, r7
 80011a0:	220d      	movs	r2, #13
 80011a2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		  buffer[len++] = '\n';
 80011a6:	6a3b      	ldr	r3, [r7, #32]
 80011a8:	1c5a      	adds	r2, r3, #1
 80011aa:	623a      	str	r2, [r7, #32]
 80011ac:	3328      	adds	r3, #40	; 0x28
 80011ae:	443b      	add	r3, r7
 80011b0:	220a      	movs	r2, #10
 80011b2:	f803 2c1c 	strb.w	r2, [r3, #-28]
		  HAL_UART_Transmit(&huart3, (uint8_t *)buffer, len, 100);
 80011b6:	6a3b      	ldr	r3, [r7, #32]
 80011b8:	b29a      	uxth	r2, r3
 80011ba:	f107 010c 	add.w	r1, r7, #12
 80011be:	2364      	movs	r3, #100	; 0x64
 80011c0:	4807      	ldr	r0, [pc, #28]	; (80011e0 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80011c2:	f006 f821 	bl	8007208 <HAL_UART_Transmit>
	  }
	}
}
 80011c6:	bf00      	nop
 80011c8:	3728      	adds	r7, #40	; 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
 80011ce:	bf00      	nop
 80011d0:	40000400 	.word	0x40000400
 80011d4:	200004cc 	.word	0x200004cc
 80011d8:	20000344 	.word	0x20000344
 80011dc:	0800d6e0 	.word	0x0800d6e0
 80011e0:	2000062c 	.word	0x2000062c

080011e4 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b082      	sub	sp, #8
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	if (huart == &huart3)
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	4a29      	ldr	r2, [pc, #164]	; (8001294 <HAL_UART_RxCpltCallback+0xb0>)
 80011f0:	4293      	cmp	r3, r2
 80011f2:	d14a      	bne.n	800128a <HAL_UART_RxCpltCallback+0xa6>
	  {
	    if (hbfr.rxBuffer[hbfr.rxIndex] == '\n' || hbfr.rxBuffer[hbfr.rxIndex] == '\r')
 80011f4:	4b28      	ldr	r3, [pc, #160]	; (8001298 <HAL_UART_RxCpltCallback+0xb4>)
 80011f6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80011fa:	461a      	mov	r2, r3
 80011fc:	4b26      	ldr	r3, [pc, #152]	; (8001298 <HAL_UART_RxCpltCallback+0xb4>)
 80011fe:	5c9b      	ldrb	r3, [r3, r2]
 8001200:	2b0a      	cmp	r3, #10
 8001202:	d007      	beq.n	8001214 <HAL_UART_RxCpltCallback+0x30>
 8001204:	4b24      	ldr	r3, [pc, #144]	; (8001298 <HAL_UART_RxCpltCallback+0xb4>)
 8001206:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800120a:	461a      	mov	r2, r3
 800120c:	4b22      	ldr	r3, [pc, #136]	; (8001298 <HAL_UART_RxCpltCallback+0xb4>)
 800120e:	5c9b      	ldrb	r3, [r3, r2]
 8001210:	2b0d      	cmp	r3, #13
 8001212:	d118      	bne.n	8001246 <HAL_UART_RxCpltCallback+0x62>
	    {
	      // End of command received
	      hbfr.rxBuffer[hbfr.rxIndex] = '\0'; // Null-terminate the string
 8001214:	4b20      	ldr	r3, [pc, #128]	; (8001298 <HAL_UART_RxCpltCallback+0xb4>)
 8001216:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800121a:	461a      	mov	r2, r3
 800121c:	4b1e      	ldr	r3, [pc, #120]	; (8001298 <HAL_UART_RxCpltCallback+0xb4>)
 800121e:	2100      	movs	r1, #0
 8001220:	5499      	strb	r1, [r3, r2]
	      hbfr.state = processCommand(hbfr.rxBuffer);
 8001222:	481d      	ldr	r0, [pc, #116]	; (8001298 <HAL_UART_RxCpltCallback+0xb4>)
 8001224:	f000 f85e 	bl	80012e4 <processCommand>
 8001228:	4603      	mov	r3, r0
 800122a:	461a      	mov	r2, r3
 800122c:	4b1a      	ldr	r3, [pc, #104]	; (8001298 <HAL_UART_RxCpltCallback+0xb4>)
 800122e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

	      // Reset buffer index for the next command
	      hbfr.rxIndex = 0;
 8001232:	4b19      	ldr	r3, [pc, #100]	; (8001298 <HAL_UART_RxCpltCallback+0xb4>)
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

	      // Restart UART reception
	      HAL_UART_Receive_IT(&huart3, (uint8_t *)hbfr.rxBuffer, 1);
 800123a:	2201      	movs	r2, #1
 800123c:	4916      	ldr	r1, [pc, #88]	; (8001298 <HAL_UART_RxCpltCallback+0xb4>)
 800123e:	4815      	ldr	r0, [pc, #84]	; (8001294 <HAL_UART_RxCpltCallback+0xb0>)
 8001240:	f006 f865 	bl	800730e <HAL_UART_Receive_IT>
	        hbfr.rxIndex = 0;
	        HAL_UART_Receive_IT(&huart3, (uint8_t *)hbfr.rxBuffer, 1);
	      }
	    }
	  }
}
 8001244:	e021      	b.n	800128a <HAL_UART_RxCpltCallback+0xa6>
	    	hbfr.rxIndex++;
 8001246:	4b14      	ldr	r3, [pc, #80]	; (8001298 <HAL_UART_RxCpltCallback+0xb4>)
 8001248:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800124c:	3301      	adds	r3, #1
 800124e:	b2da      	uxtb	r2, r3
 8001250:	4b11      	ldr	r3, [pc, #68]	; (8001298 <HAL_UART_RxCpltCallback+0xb4>)
 8001252:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	      if (hbfr.rxIndex < MAX_BUFFER_SIZE - 1)
 8001256:	4b10      	ldr	r3, [pc, #64]	; (8001298 <HAL_UART_RxCpltCallback+0xb4>)
 8001258:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800125c:	2b3e      	cmp	r3, #62	; 0x3e
 800125e:	d80b      	bhi.n	8001278 <HAL_UART_RxCpltCallback+0x94>
	        HAL_UART_Receive_IT(&huart3, (uint8_t *)&hbfr.rxBuffer[hbfr.rxIndex], 1);
 8001260:	4b0d      	ldr	r3, [pc, #52]	; (8001298 <HAL_UART_RxCpltCallback+0xb4>)
 8001262:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001266:	461a      	mov	r2, r3
 8001268:	4b0b      	ldr	r3, [pc, #44]	; (8001298 <HAL_UART_RxCpltCallback+0xb4>)
 800126a:	4413      	add	r3, r2
 800126c:	2201      	movs	r2, #1
 800126e:	4619      	mov	r1, r3
 8001270:	4808      	ldr	r0, [pc, #32]	; (8001294 <HAL_UART_RxCpltCallback+0xb0>)
 8001272:	f006 f84c 	bl	800730e <HAL_UART_Receive_IT>
}
 8001276:	e008      	b.n	800128a <HAL_UART_RxCpltCallback+0xa6>
	        hbfr.rxIndex = 0;
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <HAL_UART_RxCpltCallback+0xb4>)
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
	        HAL_UART_Receive_IT(&huart3, (uint8_t *)hbfr.rxBuffer, 1);
 8001280:	2201      	movs	r2, #1
 8001282:	4905      	ldr	r1, [pc, #20]	; (8001298 <HAL_UART_RxCpltCallback+0xb4>)
 8001284:	4803      	ldr	r0, [pc, #12]	; (8001294 <HAL_UART_RxCpltCallback+0xb0>)
 8001286:	f006 f842 	bl	800730e <HAL_UART_Receive_IT>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
 8001292:	bf00      	nop
 8001294:	2000062c 	.word	0x2000062c
 8001298:	20000344 	.word	0x20000344

0800129c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 800129c:	b480      	push	{r7}
 800129e:	b083      	sub	sp, #12
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	4603      	mov	r3, r0
 80012a4:	80fb      	strh	r3, [r7, #6]
	if (GPIO_Pin == USER_Btn_Pin){
	}
}
 80012a6:	bf00      	nop
 80012a8:	370c      	adds	r7, #12
 80012aa:	46bd      	mov	sp, r7
 80012ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b0:	4770      	bx	lr
	...

080012b4 <send_uart>:
#include "miscellaneous.h"

extern const MenuStrings menuStrings;

void send_uart (const char* string)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]
	uint8_t len = strlen(string);
 80012bc:	6878      	ldr	r0, [r7, #4]
 80012be:	f7ff f807 	bl	80002d0 <strlen>
 80012c2:	4603      	mov	r3, r0
 80012c4:	73fb      	strb	r3, [r7, #15]
	HAL_UART_Transmit(&huart3, (uint8_t *)string, len, 2000);
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80012ce:	6879      	ldr	r1, [r7, #4]
 80012d0:	4803      	ldr	r0, [pc, #12]	; (80012e0 <send_uart+0x2c>)
 80012d2:	f005 ff99 	bl	8007208 <HAL_UART_Transmit>
}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	2000062c 	.word	0x2000062c

080012e4 <processCommand>:

Menu_States processCommand(char *command)
{
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	  Menu_States val;
	  if (strcmp(command, menuStrings._DEBUG) == 0)
 80012ec:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <processCommand+0x84>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4619      	mov	r1, r3
 80012f2:	6878      	ldr	r0, [r7, #4]
 80012f4:	f7fe ff8c 	bl	8000210 <strcmp>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d107      	bne.n	800130e <processCommand+0x2a>
	  {
		// Handle Option 1
		send_uart(menuStrings._DEBUG);
 80012fe:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <processCommand+0x84>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	4618      	mov	r0, r3
 8001304:	f7ff ffd6 	bl	80012b4 <send_uart>
		val = _DEBUG;
 8001308:	2300      	movs	r3, #0
 800130a:	73fb      	strb	r3, [r7, #15]
 800130c:	e026      	b.n	800135c <processCommand+0x78>
	  }
	  else if (strcmp(command, menuStrings._REMOTE) == 0)
 800130e:	4b16      	ldr	r3, [pc, #88]	; (8001368 <processCommand+0x84>)
 8001310:	685b      	ldr	r3, [r3, #4]
 8001312:	4619      	mov	r1, r3
 8001314:	6878      	ldr	r0, [r7, #4]
 8001316:	f7fe ff7b 	bl	8000210 <strcmp>
 800131a:	4603      	mov	r3, r0
 800131c:	2b00      	cmp	r3, #0
 800131e:	d107      	bne.n	8001330 <processCommand+0x4c>
	  {
		// Handle Option 2
		send_uart(menuStrings._REMOTE);
 8001320:	4b11      	ldr	r3, [pc, #68]	; (8001368 <processCommand+0x84>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff ffc5 	bl	80012b4 <send_uart>
		val = _REMOTE;
 800132a:	2301      	movs	r3, #1
 800132c:	73fb      	strb	r3, [r7, #15]
 800132e:	e015      	b.n	800135c <processCommand+0x78>
	  }
	  else if (strcmp(command, menuStrings._MANUAL) == 0)
 8001330:	4b0d      	ldr	r3, [pc, #52]	; (8001368 <processCommand+0x84>)
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	4619      	mov	r1, r3
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7fe ff6a 	bl	8000210 <strcmp>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d107      	bne.n	8001352 <processCommand+0x6e>
	  {
		// Handle Option 3
		send_uart(menuStrings._MANUAL);
 8001342:	4b09      	ldr	r3, [pc, #36]	; (8001368 <processCommand+0x84>)
 8001344:	689b      	ldr	r3, [r3, #8]
 8001346:	4618      	mov	r0, r3
 8001348:	f7ff ffb4 	bl	80012b4 <send_uart>
		val = _MANUAL;
 800134c:	2302      	movs	r3, #2
 800134e:	73fb      	strb	r3, [r7, #15]
 8001350:	e004      	b.n	800135c <processCommand+0x78>
	  }
	  else
	  {
		// Invalid command
		send_uart("Invalid command\r\n");
 8001352:	4806      	ldr	r0, [pc, #24]	; (800136c <processCommand+0x88>)
 8001354:	f7ff ffae 	bl	80012b4 <send_uart>
		val = _IDLE;
 8001358:	2309      	movs	r3, #9
 800135a:	73fb      	strb	r3, [r7, #15]
	  }
  return val;
 800135c:	7bfb      	ldrb	r3, [r7, #15]
}
 800135e:	4618      	mov	r0, r3
 8001360:	3710      	adds	r7, #16
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	0800d6f8 	.word	0x0800d6f8
 800136c:	0800d6e4 	.word	0x0800d6e4

08001370 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8001374:	4b1f      	ldr	r3, [pc, #124]	; (80013f4 <MX_ETH_Init+0x84>)
 8001376:	4a20      	ldr	r2, [pc, #128]	; (80013f8 <MX_ETH_Init+0x88>)
 8001378:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800137a:	4b20      	ldr	r3, [pc, #128]	; (80013fc <MX_ETH_Init+0x8c>)
 800137c:	2200      	movs	r2, #0
 800137e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8001380:	4b1e      	ldr	r3, [pc, #120]	; (80013fc <MX_ETH_Init+0x8c>)
 8001382:	2280      	movs	r2, #128	; 0x80
 8001384:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8001386:	4b1d      	ldr	r3, [pc, #116]	; (80013fc <MX_ETH_Init+0x8c>)
 8001388:	22e1      	movs	r2, #225	; 0xe1
 800138a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 800138c:	4b1b      	ldr	r3, [pc, #108]	; (80013fc <MX_ETH_Init+0x8c>)
 800138e:	2200      	movs	r2, #0
 8001390:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8001392:	4b1a      	ldr	r3, [pc, #104]	; (80013fc <MX_ETH_Init+0x8c>)
 8001394:	2200      	movs	r2, #0
 8001396:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8001398:	4b18      	ldr	r3, [pc, #96]	; (80013fc <MX_ETH_Init+0x8c>)
 800139a:	2200      	movs	r2, #0
 800139c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 800139e:	4b15      	ldr	r3, [pc, #84]	; (80013f4 <MX_ETH_Init+0x84>)
 80013a0:	4a16      	ldr	r2, [pc, #88]	; (80013fc <MX_ETH_Init+0x8c>)
 80013a2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80013a4:	4b13      	ldr	r3, [pc, #76]	; (80013f4 <MX_ETH_Init+0x84>)
 80013a6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80013aa:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 80013ac:	4b11      	ldr	r3, [pc, #68]	; (80013f4 <MX_ETH_Init+0x84>)
 80013ae:	4a14      	ldr	r2, [pc, #80]	; (8001400 <MX_ETH_Init+0x90>)
 80013b0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <MX_ETH_Init+0x84>)
 80013b4:	4a13      	ldr	r2, [pc, #76]	; (8001404 <MX_ETH_Init+0x94>)
 80013b6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 80013b8:	4b0e      	ldr	r3, [pc, #56]	; (80013f4 <MX_ETH_Init+0x84>)
 80013ba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 80013be:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 80013c0:	480c      	ldr	r0, [pc, #48]	; (80013f4 <MX_ETH_Init+0x84>)
 80013c2:	f001 fa5f 	bl	8002884 <HAL_ETH_Init>
 80013c6:	4603      	mov	r3, r0
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d001      	beq.n	80013d0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 80013cc:	f000 fb04 	bl	80019d8 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 80013d0:	2238      	movs	r2, #56	; 0x38
 80013d2:	2100      	movs	r1, #0
 80013d4:	480c      	ldr	r0, [pc, #48]	; (8001408 <MX_ETH_Init+0x98>)
 80013d6:	f008 fd2e 	bl	8009e36 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 80013da:	4b0b      	ldr	r3, [pc, #44]	; (8001408 <MX_ETH_Init+0x98>)
 80013dc:	2221      	movs	r2, #33	; 0x21
 80013de:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 80013e0:	4b09      	ldr	r3, [pc, #36]	; (8001408 <MX_ETH_Init+0x98>)
 80013e2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 80013e6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 80013e8:	4b07      	ldr	r3, [pc, #28]	; (8001408 <MX_ETH_Init+0x98>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 80013ee:	bf00      	nop
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200003c0 	.word	0x200003c0
 80013f8:	40028000 	.word	0x40028000
 80013fc:	20000470 	.word	0x20000470
 8001400:	20000288 	.word	0x20000288
 8001404:	200001e8 	.word	0x200001e8
 8001408:	20000388 	.word	0x20000388

0800140c <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b08e      	sub	sp, #56	; 0x38
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	4a4e      	ldr	r2, [pc, #312]	; (8001564 <HAL_ETH_MspInit+0x158>)
 800142a:	4293      	cmp	r3, r2
 800142c:	f040 8096 	bne.w	800155c <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001430:	4b4d      	ldr	r3, [pc, #308]	; (8001568 <HAL_ETH_MspInit+0x15c>)
 8001432:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001434:	4a4c      	ldr	r2, [pc, #304]	; (8001568 <HAL_ETH_MspInit+0x15c>)
 8001436:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800143a:	6313      	str	r3, [r2, #48]	; 0x30
 800143c:	4b4a      	ldr	r3, [pc, #296]	; (8001568 <HAL_ETH_MspInit+0x15c>)
 800143e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001444:	623b      	str	r3, [r7, #32]
 8001446:	6a3b      	ldr	r3, [r7, #32]
 8001448:	4b47      	ldr	r3, [pc, #284]	; (8001568 <HAL_ETH_MspInit+0x15c>)
 800144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800144c:	4a46      	ldr	r2, [pc, #280]	; (8001568 <HAL_ETH_MspInit+0x15c>)
 800144e:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001452:	6313      	str	r3, [r2, #48]	; 0x30
 8001454:	4b44      	ldr	r3, [pc, #272]	; (8001568 <HAL_ETH_MspInit+0x15c>)
 8001456:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001458:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800145c:	61fb      	str	r3, [r7, #28]
 800145e:	69fb      	ldr	r3, [r7, #28]
 8001460:	4b41      	ldr	r3, [pc, #260]	; (8001568 <HAL_ETH_MspInit+0x15c>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	4a40      	ldr	r2, [pc, #256]	; (8001568 <HAL_ETH_MspInit+0x15c>)
 8001466:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800146a:	6313      	str	r3, [r2, #48]	; 0x30
 800146c:	4b3e      	ldr	r3, [pc, #248]	; (8001568 <HAL_ETH_MspInit+0x15c>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001474:	61bb      	str	r3, [r7, #24]
 8001476:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001478:	4b3b      	ldr	r3, [pc, #236]	; (8001568 <HAL_ETH_MspInit+0x15c>)
 800147a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800147c:	4a3a      	ldr	r2, [pc, #232]	; (8001568 <HAL_ETH_MspInit+0x15c>)
 800147e:	f043 0304 	orr.w	r3, r3, #4
 8001482:	6313      	str	r3, [r2, #48]	; 0x30
 8001484:	4b38      	ldr	r3, [pc, #224]	; (8001568 <HAL_ETH_MspInit+0x15c>)
 8001486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001488:	f003 0304 	and.w	r3, r3, #4
 800148c:	617b      	str	r3, [r7, #20]
 800148e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001490:	4b35      	ldr	r3, [pc, #212]	; (8001568 <HAL_ETH_MspInit+0x15c>)
 8001492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001494:	4a34      	ldr	r2, [pc, #208]	; (8001568 <HAL_ETH_MspInit+0x15c>)
 8001496:	f043 0301 	orr.w	r3, r3, #1
 800149a:	6313      	str	r3, [r2, #48]	; 0x30
 800149c:	4b32      	ldr	r3, [pc, #200]	; (8001568 <HAL_ETH_MspInit+0x15c>)
 800149e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014a0:	f003 0301 	and.w	r3, r3, #1
 80014a4:	613b      	str	r3, [r7, #16]
 80014a6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a8:	4b2f      	ldr	r3, [pc, #188]	; (8001568 <HAL_ETH_MspInit+0x15c>)
 80014aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ac:	4a2e      	ldr	r2, [pc, #184]	; (8001568 <HAL_ETH_MspInit+0x15c>)
 80014ae:	f043 0302 	orr.w	r3, r3, #2
 80014b2:	6313      	str	r3, [r2, #48]	; 0x30
 80014b4:	4b2c      	ldr	r3, [pc, #176]	; (8001568 <HAL_ETH_MspInit+0x15c>)
 80014b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b8:	f003 0302 	and.w	r3, r3, #2
 80014bc:	60fb      	str	r3, [r7, #12]
 80014be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80014c0:	4b29      	ldr	r3, [pc, #164]	; (8001568 <HAL_ETH_MspInit+0x15c>)
 80014c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c4:	4a28      	ldr	r2, [pc, #160]	; (8001568 <HAL_ETH_MspInit+0x15c>)
 80014c6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80014ca:	6313      	str	r3, [r2, #48]	; 0x30
 80014cc:	4b26      	ldr	r3, [pc, #152]	; (8001568 <HAL_ETH_MspInit+0x15c>)
 80014ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014d4:	60bb      	str	r3, [r7, #8]
 80014d6:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 80014d8:	2332      	movs	r3, #50	; 0x32
 80014da:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014dc:	2302      	movs	r3, #2
 80014de:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014e0:	2300      	movs	r3, #0
 80014e2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014e4:	2303      	movs	r3, #3
 80014e6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014e8:	230b      	movs	r3, #11
 80014ea:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80014ec:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014f0:	4619      	mov	r1, r3
 80014f2:	481e      	ldr	r0, [pc, #120]	; (800156c <HAL_ETH_MspInit+0x160>)
 80014f4:	f001 fcec 	bl	8002ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80014f8:	2386      	movs	r3, #134	; 0x86
 80014fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fc:	2302      	movs	r3, #2
 80014fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001500:	2300      	movs	r3, #0
 8001502:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001504:	2303      	movs	r3, #3
 8001506:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001508:	230b      	movs	r3, #11
 800150a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800150c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001510:	4619      	mov	r1, r3
 8001512:	4817      	ldr	r0, [pc, #92]	; (8001570 <HAL_ETH_MspInit+0x164>)
 8001514:	f001 fcdc 	bl	8002ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001518:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800151c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800151e:	2302      	movs	r3, #2
 8001520:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001522:	2300      	movs	r3, #0
 8001524:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001526:	2303      	movs	r3, #3
 8001528:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800152a:	230b      	movs	r3, #11
 800152c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800152e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001532:	4619      	mov	r1, r3
 8001534:	480f      	ldr	r0, [pc, #60]	; (8001574 <HAL_ETH_MspInit+0x168>)
 8001536:	f001 fccb 	bl	8002ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800153a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800153e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001540:	2302      	movs	r3, #2
 8001542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001544:	2300      	movs	r3, #0
 8001546:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001548:	2303      	movs	r3, #3
 800154a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800154c:	230b      	movs	r3, #11
 800154e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001554:	4619      	mov	r1, r3
 8001556:	4808      	ldr	r0, [pc, #32]	; (8001578 <HAL_ETH_MspInit+0x16c>)
 8001558:	f001 fcba 	bl	8002ed0 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800155c:	bf00      	nop
 800155e:	3738      	adds	r7, #56	; 0x38
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40028000 	.word	0x40028000
 8001568:	40023800 	.word	0x40023800
 800156c:	40020800 	.word	0x40020800
 8001570:	40020000 	.word	0x40020000
 8001574:	40020400 	.word	0x40020400
 8001578:	40021800 	.word	0x40021800

0800157c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08c      	sub	sp, #48	; 0x30
 8001580:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001582:	f107 031c 	add.w	r3, r7, #28
 8001586:	2200      	movs	r2, #0
 8001588:	601a      	str	r2, [r3, #0]
 800158a:	605a      	str	r2, [r3, #4]
 800158c:	609a      	str	r2, [r3, #8]
 800158e:	60da      	str	r2, [r3, #12]
 8001590:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001592:	4b5f      	ldr	r3, [pc, #380]	; (8001710 <MX_GPIO_Init+0x194>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a5e      	ldr	r2, [pc, #376]	; (8001710 <MX_GPIO_Init+0x194>)
 8001598:	f043 0304 	orr.w	r3, r3, #4
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b5c      	ldr	r3, [pc, #368]	; (8001710 <MX_GPIO_Init+0x194>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0304 	and.w	r3, r3, #4
 80015a6:	61bb      	str	r3, [r7, #24]
 80015a8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015aa:	4b59      	ldr	r3, [pc, #356]	; (8001710 <MX_GPIO_Init+0x194>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	4a58      	ldr	r2, [pc, #352]	; (8001710 <MX_GPIO_Init+0x194>)
 80015b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015b4:	6313      	str	r3, [r2, #48]	; 0x30
 80015b6:	4b56      	ldr	r3, [pc, #344]	; (8001710 <MX_GPIO_Init+0x194>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015be:	617b      	str	r3, [r7, #20]
 80015c0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015c2:	4b53      	ldr	r3, [pc, #332]	; (8001710 <MX_GPIO_Init+0x194>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	4a52      	ldr	r2, [pc, #328]	; (8001710 <MX_GPIO_Init+0x194>)
 80015c8:	f043 0301 	orr.w	r3, r3, #1
 80015cc:	6313      	str	r3, [r2, #48]	; 0x30
 80015ce:	4b50      	ldr	r3, [pc, #320]	; (8001710 <MX_GPIO_Init+0x194>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d2:	f003 0301 	and.w	r3, r3, #1
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80015da:	4b4d      	ldr	r3, [pc, #308]	; (8001710 <MX_GPIO_Init+0x194>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015de:	4a4c      	ldr	r2, [pc, #304]	; (8001710 <MX_GPIO_Init+0x194>)
 80015e0:	f043 0302 	orr.w	r3, r3, #2
 80015e4:	6313      	str	r3, [r2, #48]	; 0x30
 80015e6:	4b4a      	ldr	r3, [pc, #296]	; (8001710 <MX_GPIO_Init+0x194>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	f003 0302 	and.w	r3, r3, #2
 80015ee:	60fb      	str	r3, [r7, #12]
 80015f0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80015f2:	4b47      	ldr	r3, [pc, #284]	; (8001710 <MX_GPIO_Init+0x194>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	4a46      	ldr	r2, [pc, #280]	; (8001710 <MX_GPIO_Init+0x194>)
 80015f8:	f043 0308 	orr.w	r3, r3, #8
 80015fc:	6313      	str	r3, [r2, #48]	; 0x30
 80015fe:	4b44      	ldr	r3, [pc, #272]	; (8001710 <MX_GPIO_Init+0x194>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	f003 0308 	and.w	r3, r3, #8
 8001606:	60bb      	str	r3, [r7, #8]
 8001608:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800160a:	4b41      	ldr	r3, [pc, #260]	; (8001710 <MX_GPIO_Init+0x194>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a40      	ldr	r2, [pc, #256]	; (8001710 <MX_GPIO_Init+0x194>)
 8001610:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b3e      	ldr	r3, [pc, #248]	; (8001710 <MX_GPIO_Init+0x194>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8001622:	2200      	movs	r2, #0
 8001624:	f244 0181 	movw	r1, #16513	; 0x4081
 8001628:	483a      	ldr	r0, [pc, #232]	; (8001714 <MX_GPIO_Init+0x198>)
 800162a:	f001 fdfd 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Dir_GPIO_Port, Dir_Pin, GPIO_PIN_RESET);
 800162e:	2200      	movs	r2, #0
 8001630:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001634:	4838      	ldr	r0, [pc, #224]	; (8001718 <MX_GPIO_Init+0x19c>)
 8001636:	f001 fdf7 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800163a:	2200      	movs	r2, #0
 800163c:	2140      	movs	r1, #64	; 0x40
 800163e:	4837      	ldr	r0, [pc, #220]	; (800171c <MX_GPIO_Init+0x1a0>)
 8001640:	f001 fdf2 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Debug_GPIO_Port, Debug_Pin, GPIO_PIN_RESET);
 8001644:	2200      	movs	r2, #0
 8001646:	2180      	movs	r1, #128	; 0x80
 8001648:	4835      	ldr	r0, [pc, #212]	; (8001720 <MX_GPIO_Init+0x1a4>)
 800164a:	f001 fded 	bl	8003228 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800164e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001652:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001654:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001658:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800165e:	f107 031c 	add.w	r3, r7, #28
 8001662:	4619      	mov	r1, r3
 8001664:	482e      	ldr	r0, [pc, #184]	; (8001720 <MX_GPIO_Init+0x1a4>)
 8001666:	f001 fc33 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800166a:	f244 0381 	movw	r3, #16513	; 0x4081
 800166e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001670:	2301      	movs	r3, #1
 8001672:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001678:	2300      	movs	r3, #0
 800167a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800167c:	f107 031c 	add.w	r3, r7, #28
 8001680:	4619      	mov	r1, r3
 8001682:	4824      	ldr	r0, [pc, #144]	; (8001714 <MX_GPIO_Init+0x198>)
 8001684:	f001 fc24 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Dir_Pin;
 8001688:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800168c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168e:	2301      	movs	r3, #1
 8001690:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001692:	2300      	movs	r3, #0
 8001694:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001696:	2300      	movs	r3, #0
 8001698:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Dir_GPIO_Port, &GPIO_InitStruct);
 800169a:	f107 031c 	add.w	r3, r7, #28
 800169e:	4619      	mov	r1, r3
 80016a0:	481d      	ldr	r0, [pc, #116]	; (8001718 <MX_GPIO_Init+0x19c>)
 80016a2:	f001 fc15 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80016a6:	2340      	movs	r3, #64	; 0x40
 80016a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016aa:	2301      	movs	r3, #1
 80016ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ae:	2300      	movs	r3, #0
 80016b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016b2:	2300      	movs	r3, #0
 80016b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80016b6:	f107 031c 	add.w	r3, r7, #28
 80016ba:	4619      	mov	r1, r3
 80016bc:	4817      	ldr	r0, [pc, #92]	; (800171c <MX_GPIO_Init+0x1a0>)
 80016be:	f001 fc07 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80016c2:	2380      	movs	r3, #128	; 0x80
 80016c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016c6:	2300      	movs	r3, #0
 80016c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ca:	2300      	movs	r3, #0
 80016cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80016ce:	f107 031c 	add.w	r3, r7, #28
 80016d2:	4619      	mov	r1, r3
 80016d4:	4811      	ldr	r0, [pc, #68]	; (800171c <MX_GPIO_Init+0x1a0>)
 80016d6:	f001 fbfb 	bl	8002ed0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Debug_Pin;
 80016da:	2380      	movs	r3, #128	; 0x80
 80016dc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80016de:	2301      	movs	r3, #1
 80016e0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016e2:	2300      	movs	r3, #0
 80016e4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e6:	2300      	movs	r3, #0
 80016e8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Debug_GPIO_Port, &GPIO_InitStruct);
 80016ea:	f107 031c 	add.w	r3, r7, #28
 80016ee:	4619      	mov	r1, r3
 80016f0:	480b      	ldr	r0, [pc, #44]	; (8001720 <MX_GPIO_Init+0x1a4>)
 80016f2:	f001 fbed 	bl	8002ed0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80016f6:	2200      	movs	r2, #0
 80016f8:	2100      	movs	r1, #0
 80016fa:	2028      	movs	r0, #40	; 0x28
 80016fc:	f000 ffeb 	bl	80026d6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001700:	2028      	movs	r0, #40	; 0x28
 8001702:	f001 f804 	bl	800270e <HAL_NVIC_EnableIRQ>

}
 8001706:	bf00      	nop
 8001708:	3730      	adds	r7, #48	; 0x30
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40023800 	.word	0x40023800
 8001714:	40020400 	.word	0x40020400
 8001718:	40020c00 	.word	0x40020c00
 800171c:	40021800 	.word	0x40021800
 8001720:	40020800 	.word	0x40020800

08001724 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001724:	b580      	push	{r7, lr}
 8001726:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001728:	4b1b      	ldr	r3, [pc, #108]	; (8001798 <MX_I2C1_Init+0x74>)
 800172a:	4a1c      	ldr	r2, [pc, #112]	; (800179c <MX_I2C1_Init+0x78>)
 800172c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 800172e:	4b1a      	ldr	r3, [pc, #104]	; (8001798 <MX_I2C1_Init+0x74>)
 8001730:	4a1b      	ldr	r2, [pc, #108]	; (80017a0 <MX_I2C1_Init+0x7c>)
 8001732:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001734:	4b18      	ldr	r3, [pc, #96]	; (8001798 <MX_I2C1_Init+0x74>)
 8001736:	2200      	movs	r2, #0
 8001738:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800173a:	4b17      	ldr	r3, [pc, #92]	; (8001798 <MX_I2C1_Init+0x74>)
 800173c:	2201      	movs	r2, #1
 800173e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001740:	4b15      	ldr	r3, [pc, #84]	; (8001798 <MX_I2C1_Init+0x74>)
 8001742:	2200      	movs	r2, #0
 8001744:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8001746:	4b14      	ldr	r3, [pc, #80]	; (8001798 <MX_I2C1_Init+0x74>)
 8001748:	2200      	movs	r2, #0
 800174a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800174c:	4b12      	ldr	r3, [pc, #72]	; (8001798 <MX_I2C1_Init+0x74>)
 800174e:	2200      	movs	r2, #0
 8001750:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001752:	4b11      	ldr	r3, [pc, #68]	; (8001798 <MX_I2C1_Init+0x74>)
 8001754:	2200      	movs	r2, #0
 8001756:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001758:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <MX_I2C1_Init+0x74>)
 800175a:	2200      	movs	r2, #0
 800175c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800175e:	480e      	ldr	r0, [pc, #56]	; (8001798 <MX_I2C1_Init+0x74>)
 8001760:	f001 fd94 	bl	800328c <HAL_I2C_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800176a:	f000 f935 	bl	80019d8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800176e:	2100      	movs	r1, #0
 8001770:	4809      	ldr	r0, [pc, #36]	; (8001798 <MX_I2C1_Init+0x74>)
 8001772:	f002 fed7 	bl	8004524 <HAL_I2CEx_ConfigAnalogFilter>
 8001776:	4603      	mov	r3, r0
 8001778:	2b00      	cmp	r3, #0
 800177a:	d001      	beq.n	8001780 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800177c:	f000 f92c 	bl	80019d8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8001780:	2100      	movs	r1, #0
 8001782:	4805      	ldr	r0, [pc, #20]	; (8001798 <MX_I2C1_Init+0x74>)
 8001784:	f002 ff19 	bl	80045ba <HAL_I2CEx_ConfigDigitalFilter>
 8001788:	4603      	mov	r3, r0
 800178a:	2b00      	cmp	r3, #0
 800178c:	d001      	beq.n	8001792 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800178e:	f000 f923 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001792:	bf00      	nop
 8001794:	bd80      	pop	{r7, pc}
 8001796:	bf00      	nop
 8001798:	20000478 	.word	0x20000478
 800179c:	40005400 	.word	0x40005400
 80017a0:	00808cd2 	.word	0x00808cd2

080017a4 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b0aa      	sub	sp, #168	; 0xa8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017ac:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80017b0:	2200      	movs	r2, #0
 80017b2:	601a      	str	r2, [r3, #0]
 80017b4:	605a      	str	r2, [r3, #4]
 80017b6:	609a      	str	r2, [r3, #8]
 80017b8:	60da      	str	r2, [r3, #12]
 80017ba:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017bc:	f107 0310 	add.w	r3, r7, #16
 80017c0:	2284      	movs	r2, #132	; 0x84
 80017c2:	2100      	movs	r1, #0
 80017c4:	4618      	mov	r0, r3
 80017c6:	f008 fb36 	bl	8009e36 <memset>
  if(i2cHandle->Instance==I2C1)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a2a      	ldr	r2, [pc, #168]	; (8001878 <HAL_I2C_MspInit+0xd4>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d14c      	bne.n	800186e <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80017d4:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80017d8:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80017da:	2300      	movs	r3, #0
 80017dc:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80017de:	f107 0310 	add.w	r3, r7, #16
 80017e2:	4618      	mov	r0, r3
 80017e4:	f003 fd58 	bl	8005298 <HAL_RCCEx_PeriphCLKConfig>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80017ee:	f000 f8f3 	bl	80019d8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80017f2:	4b22      	ldr	r3, [pc, #136]	; (800187c <HAL_I2C_MspInit+0xd8>)
 80017f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017f6:	4a21      	ldr	r2, [pc, #132]	; (800187c <HAL_I2C_MspInit+0xd8>)
 80017f8:	f043 0302 	orr.w	r3, r3, #2
 80017fc:	6313      	str	r3, [r2, #48]	; 0x30
 80017fe:	4b1f      	ldr	r3, [pc, #124]	; (800187c <HAL_I2C_MspInit+0xd8>)
 8001800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	60fb      	str	r3, [r7, #12]
 8001808:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800180a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800180e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001812:	2312      	movs	r3, #18
 8001814:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001818:	2300      	movs	r3, #0
 800181a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800181e:	2303      	movs	r3, #3
 8001820:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001824:	2304      	movs	r3, #4
 8001826:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800182a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800182e:	4619      	mov	r1, r3
 8001830:	4813      	ldr	r0, [pc, #76]	; (8001880 <HAL_I2C_MspInit+0xdc>)
 8001832:	f001 fb4d 	bl	8002ed0 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001836:	4b11      	ldr	r3, [pc, #68]	; (800187c <HAL_I2C_MspInit+0xd8>)
 8001838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800183a:	4a10      	ldr	r2, [pc, #64]	; (800187c <HAL_I2C_MspInit+0xd8>)
 800183c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001840:	6413      	str	r3, [r2, #64]	; 0x40
 8001842:	4b0e      	ldr	r3, [pc, #56]	; (800187c <HAL_I2C_MspInit+0xd8>)
 8001844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001846:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800184a:	60bb      	str	r3, [r7, #8]
 800184c:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800184e:	2200      	movs	r2, #0
 8001850:	2100      	movs	r1, #0
 8001852:	201f      	movs	r0, #31
 8001854:	f000 ff3f 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001858:	201f      	movs	r0, #31
 800185a:	f000 ff58 	bl	800270e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800185e:	2200      	movs	r2, #0
 8001860:	2100      	movs	r1, #0
 8001862:	2020      	movs	r0, #32
 8001864:	f000 ff37 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001868:	2020      	movs	r0, #32
 800186a:	f000 ff50 	bl	800270e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800186e:	bf00      	nop
 8001870:	37a8      	adds	r7, #168	; 0xa8
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40005400 	.word	0x40005400
 800187c:	40023800 	.word	0x40023800
 8001880:	40020400 	.word	0x40020400

08001884 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001888:	f000 fdc9 	bl	800241e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800188c:	f000 f83c 	bl	8001908 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001890:	f7ff fe74 	bl	800157c <MX_GPIO_Init>
  MX_ETH_Init();
 8001894:	f7ff fd6c 	bl	8001370 <MX_ETH_Init>
  MX_USART3_UART_Init();
 8001898:	f000 fc58 	bl	800214c <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 800189c:	f000 fcee 	bl	800227c <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80018a0:	f7ff ff40 	bl	8001724 <MX_I2C1_Init>
  MX_TIM3_Init();
 80018a4:	f000 faba 	bl	8001e1c <MX_TIM3_Init>
  MX_TIM9_Init();
 80018a8:	f000 fb80 	bl	8001fac <MX_TIM9_Init>
  MX_SPI1_Init();
 80018ac:	f000 f89a 	bl	80019e4 <MX_SPI1_Init>
  MX_FATFS_Init();
 80018b0:	f007 fa2c 	bl	8008d0c <MX_FATFS_Init>
  MX_TIM4_Init();
 80018b4:	f000 fb02 	bl	8001ebc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, (uint8_t *)&hbfr.rxBuffer[hbfr.rxIndex], 1);
 80018b8:	4b0d      	ldr	r3, [pc, #52]	; (80018f0 <main+0x6c>)
 80018ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80018be:	461a      	mov	r2, r3
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <main+0x6c>)
 80018c2:	4413      	add	r3, r2
 80018c4:	2201      	movs	r2, #1
 80018c6:	4619      	mov	r1, r3
 80018c8:	480a      	ldr	r0, [pc, #40]	; (80018f4 <main+0x70>)
 80018ca:	f005 fd20 	bl	800730e <HAL_UART_Receive_IT>
  AS5600_Init(&device);
 80018ce:	480a      	ldr	r0, [pc, #40]	; (80018f8 <main+0x74>)
 80018d0:	f7ff fbbe 	bl	8001050 <AS5600_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 80018d4:	4809      	ldr	r0, [pc, #36]	; (80018fc <main+0x78>)
 80018d6:	f004 fae5 	bl	8005ea4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 80018da:	2100      	movs	r1, #0
 80018dc:	4808      	ldr	r0, [pc, #32]	; (8001900 <main+0x7c>)
 80018de:	f004 fbbb 	bl	8006058 <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(Dir_GPIO_Port, Dir_Pin, GPIO_PIN_SET);
 80018e2:	2201      	movs	r2, #1
 80018e4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80018e8:	4806      	ldr	r0, [pc, #24]	; (8001904 <main+0x80>)
 80018ea:	f001 fc9d 	bl	8003228 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80018ee:	e7fe      	b.n	80018ee <main+0x6a>
 80018f0:	20000344 	.word	0x20000344
 80018f4:	2000062c 	.word	0x2000062c
 80018f8:	200004cc 	.word	0x200004cc
 80018fc:	20000548 	.word	0x20000548
 8001900:	20000594 	.word	0x20000594
 8001904:	40020c00 	.word	0x40020c00

08001908 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	b094      	sub	sp, #80	; 0x50
 800190c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800190e:	f107 0320 	add.w	r3, r7, #32
 8001912:	2230      	movs	r2, #48	; 0x30
 8001914:	2100      	movs	r1, #0
 8001916:	4618      	mov	r0, r3
 8001918:	f008 fa8d 	bl	8009e36 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800192c:	f002 ffda 	bl	80048e4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001930:	4b27      	ldr	r3, [pc, #156]	; (80019d0 <SystemClock_Config+0xc8>)
 8001932:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001934:	4a26      	ldr	r2, [pc, #152]	; (80019d0 <SystemClock_Config+0xc8>)
 8001936:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800193a:	6413      	str	r3, [r2, #64]	; 0x40
 800193c:	4b24      	ldr	r3, [pc, #144]	; (80019d0 <SystemClock_Config+0xc8>)
 800193e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001940:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001948:	4b22      	ldr	r3, [pc, #136]	; (80019d4 <SystemClock_Config+0xcc>)
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001950:	4a20      	ldr	r2, [pc, #128]	; (80019d4 <SystemClock_Config+0xcc>)
 8001952:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001956:	6013      	str	r3, [r2, #0]
 8001958:	4b1e      	ldr	r3, [pc, #120]	; (80019d4 <SystemClock_Config+0xcc>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001964:	2301      	movs	r3, #1
 8001966:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001968:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800196c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800196e:	2302      	movs	r3, #2
 8001970:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001972:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001976:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001978:	2304      	movs	r3, #4
 800197a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 800197c:	2348      	movs	r3, #72	; 0x48
 800197e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001980:	2302      	movs	r3, #2
 8001982:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001984:	2303      	movs	r3, #3
 8001986:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001988:	f107 0320 	add.w	r3, r7, #32
 800198c:	4618      	mov	r0, r3
 800198e:	f002 ffb9 	bl	8004904 <HAL_RCC_OscConfig>
 8001992:	4603      	mov	r3, r0
 8001994:	2b00      	cmp	r3, #0
 8001996:	d001      	beq.n	800199c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001998:	f000 f81e 	bl	80019d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800199c:	230f      	movs	r3, #15
 800199e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80019a0:	2302      	movs	r3, #2
 80019a2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80019a4:	2300      	movs	r3, #0
 80019a6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80019a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80019ac:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80019b2:	f107 030c 	add.w	r3, r7, #12
 80019b6:	2102      	movs	r1, #2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f003 fa47 	bl	8004e4c <HAL_RCC_ClockConfig>
 80019be:	4603      	mov	r3, r0
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d001      	beq.n	80019c8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80019c4:	f000 f808 	bl	80019d8 <Error_Handler>
  }
}
 80019c8:	bf00      	nop
 80019ca:	3750      	adds	r7, #80	; 0x50
 80019cc:	46bd      	mov	sp, r7
 80019ce:	bd80      	pop	{r7, pc}
 80019d0:	40023800 	.word	0x40023800
 80019d4:	40007000 	.word	0x40007000

080019d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80019d8:	b480      	push	{r7}
 80019da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80019dc:	b672      	cpsid	i
}
 80019de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80019e0:	e7fe      	b.n	80019e0 <Error_Handler+0x8>
	...

080019e4 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80019e8:	4b1b      	ldr	r3, [pc, #108]	; (8001a58 <MX_SPI1_Init+0x74>)
 80019ea:	4a1c      	ldr	r2, [pc, #112]	; (8001a5c <MX_SPI1_Init+0x78>)
 80019ec:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019ee:	4b1a      	ldr	r3, [pc, #104]	; (8001a58 <MX_SPI1_Init+0x74>)
 80019f0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80019f4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019f6:	4b18      	ldr	r3, [pc, #96]	; (8001a58 <MX_SPI1_Init+0x74>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80019fc:	4b16      	ldr	r3, [pc, #88]	; (8001a58 <MX_SPI1_Init+0x74>)
 80019fe:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8001a02:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a04:	4b14      	ldr	r3, [pc, #80]	; (8001a58 <MX_SPI1_Init+0x74>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a0a:	4b13      	ldr	r3, [pc, #76]	; (8001a58 <MX_SPI1_Init+0x74>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a10:	4b11      	ldr	r3, [pc, #68]	; (8001a58 <MX_SPI1_Init+0x74>)
 8001a12:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001a16:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001a18:	4b0f      	ldr	r3, [pc, #60]	; (8001a58 <MX_SPI1_Init+0x74>)
 8001a1a:	2230      	movs	r2, #48	; 0x30
 8001a1c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a1e:	4b0e      	ldr	r3, [pc, #56]	; (8001a58 <MX_SPI1_Init+0x74>)
 8001a20:	2200      	movs	r2, #0
 8001a22:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a24:	4b0c      	ldr	r3, [pc, #48]	; (8001a58 <MX_SPI1_Init+0x74>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a2a:	4b0b      	ldr	r3, [pc, #44]	; (8001a58 <MX_SPI1_Init+0x74>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001a30:	4b09      	ldr	r3, [pc, #36]	; (8001a58 <MX_SPI1_Init+0x74>)
 8001a32:	2207      	movs	r2, #7
 8001a34:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001a36:	4b08      	ldr	r3, [pc, #32]	; (8001a58 <MX_SPI1_Init+0x74>)
 8001a38:	2200      	movs	r2, #0
 8001a3a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001a3c:	4b06      	ldr	r3, [pc, #24]	; (8001a58 <MX_SPI1_Init+0x74>)
 8001a3e:	2208      	movs	r2, #8
 8001a40:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a42:	4805      	ldr	r0, [pc, #20]	; (8001a58 <MX_SPI1_Init+0x74>)
 8001a44:	f004 f818 	bl	8005a78 <HAL_SPI_Init>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8001a4e:	f7ff ffc3 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a52:	bf00      	nop
 8001a54:	bd80      	pop	{r7, pc}
 8001a56:	bf00      	nop
 8001a58:	200004e0 	.word	0x200004e0
 8001a5c:	40013000 	.word	0x40013000

08001a60 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001a60:	b580      	push	{r7, lr}
 8001a62:	b08a      	sub	sp, #40	; 0x28
 8001a64:	af00      	add	r7, sp, #0
 8001a66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a68:	f107 0314 	add.w	r3, r7, #20
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	601a      	str	r2, [r3, #0]
 8001a70:	605a      	str	r2, [r3, #4]
 8001a72:	609a      	str	r2, [r3, #8]
 8001a74:	60da      	str	r2, [r3, #12]
 8001a76:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a29      	ldr	r2, [pc, #164]	; (8001b24 <HAL_SPI_MspInit+0xc4>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d14b      	bne.n	8001b1a <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001a82:	4b29      	ldr	r3, [pc, #164]	; (8001b28 <HAL_SPI_MspInit+0xc8>)
 8001a84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a86:	4a28      	ldr	r2, [pc, #160]	; (8001b28 <HAL_SPI_MspInit+0xc8>)
 8001a88:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001a8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001a8e:	4b26      	ldr	r3, [pc, #152]	; (8001b28 <HAL_SPI_MspInit+0xc8>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a96:	613b      	str	r3, [r7, #16]
 8001a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a9a:	4b23      	ldr	r3, [pc, #140]	; (8001b28 <HAL_SPI_MspInit+0xc8>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a9e:	4a22      	ldr	r2, [pc, #136]	; (8001b28 <HAL_SPI_MspInit+0xc8>)
 8001aa0:	f043 0301 	orr.w	r3, r3, #1
 8001aa4:	6313      	str	r3, [r2, #48]	; 0x30
 8001aa6:	4b20      	ldr	r3, [pc, #128]	; (8001b28 <HAL_SPI_MspInit+0xc8>)
 8001aa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aaa:	f003 0301 	and.w	r3, r3, #1
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ab2:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <HAL_SPI_MspInit+0xc8>)
 8001ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab6:	4a1c      	ldr	r2, [pc, #112]	; (8001b28 <HAL_SPI_MspInit+0xc8>)
 8001ab8:	f043 0302 	orr.w	r3, r3, #2
 8001abc:	6313      	str	r3, [r2, #48]	; 0x30
 8001abe:	4b1a      	ldr	r3, [pc, #104]	; (8001b28 <HAL_SPI_MspInit+0xc8>)
 8001ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac2:	f003 0302 	and.w	r3, r3, #2
 8001ac6:	60bb      	str	r3, [r7, #8]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001aca:	2360      	movs	r3, #96	; 0x60
 8001acc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ace:	2302      	movs	r3, #2
 8001ad0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad2:	2300      	movs	r3, #0
 8001ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001ada:	2305      	movs	r3, #5
 8001adc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ade:	f107 0314 	add.w	r3, r7, #20
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	4811      	ldr	r0, [pc, #68]	; (8001b2c <HAL_SPI_MspInit+0xcc>)
 8001ae6:	f001 f9f3 	bl	8002ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001aea:	2320      	movs	r3, #32
 8001aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af6:	2303      	movs	r3, #3
 8001af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001afa:	2305      	movs	r3, #5
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	480a      	ldr	r0, [pc, #40]	; (8001b30 <HAL_SPI_MspInit+0xd0>)
 8001b06:	f001 f9e3 	bl	8002ed0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	2100      	movs	r1, #0
 8001b0e:	2023      	movs	r0, #35	; 0x23
 8001b10:	f000 fde1 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001b14:	2023      	movs	r0, #35	; 0x23
 8001b16:	f000 fdfa 	bl	800270e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001b1a:	bf00      	nop
 8001b1c:	3728      	adds	r7, #40	; 0x28
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	40013000 	.word	0x40013000
 8001b28:	40023800 	.word	0x40023800
 8001b2c:	40020000 	.word	0x40020000
 8001b30:	40020400 	.word	0x40020400

08001b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001b3a:	4b0f      	ldr	r3, [pc, #60]	; (8001b78 <HAL_MspInit+0x44>)
 8001b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3e:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <HAL_MspInit+0x44>)
 8001b40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b44:	6413      	str	r3, [r2, #64]	; 0x40
 8001b46:	4b0c      	ldr	r3, [pc, #48]	; (8001b78 <HAL_MspInit+0x44>)
 8001b48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b52:	4b09      	ldr	r3, [pc, #36]	; (8001b78 <HAL_MspInit+0x44>)
 8001b54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b56:	4a08      	ldr	r2, [pc, #32]	; (8001b78 <HAL_MspInit+0x44>)
 8001b58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001b5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <HAL_MspInit+0x44>)
 8001b60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001b66:	603b      	str	r3, [r7, #0]
 8001b68:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	40023800 	.word	0x40023800

08001b7c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001b7c:	b480      	push	{r7}
 8001b7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b80:	e7fe      	b.n	8001b80 <NMI_Handler+0x4>

08001b82 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001b82:	b480      	push	{r7}
 8001b84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b86:	e7fe      	b.n	8001b86 <HardFault_Handler+0x4>

08001b88 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b8c:	e7fe      	b.n	8001b8c <MemManage_Handler+0x4>

08001b8e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001b8e:	b480      	push	{r7}
 8001b90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b92:	e7fe      	b.n	8001b92 <BusFault_Handler+0x4>

08001b94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001b94:	b480      	push	{r7}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b98:	e7fe      	b.n	8001b98 <UsageFault_Handler+0x4>

08001b9a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001b9a:	b480      	push	{r7}
 8001b9c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	46bd      	mov	sp, r7
 8001ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba6:	4770      	bx	lr

08001ba8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001bac:	bf00      	nop
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr

08001bb6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001bb6:	b480      	push	{r7}
 8001bb8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001bba:	bf00      	nop
 8001bbc:	46bd      	mov	sp, r7
 8001bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc2:	4770      	bx	lr

08001bc4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001bc8:	f000 fc66 	bl	8002498 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001bcc:	bf00      	nop
 8001bce:	bd80      	pop	{r7, pc}

08001bd0 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001bd4:	4802      	ldr	r0, [pc, #8]	; (8001be0 <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001bd6:	f004 fb39 	bl	800624c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001bda:	bf00      	nop
 8001bdc:	bd80      	pop	{r7, pc}
 8001bde:	bf00      	nop
 8001be0:	200005e0 	.word	0x200005e0

08001be4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001be8:	4802      	ldr	r0, [pc, #8]	; (8001bf4 <TIM3_IRQHandler+0x10>)
 8001bea:	f004 fb2f 	bl	800624c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001bee:	bf00      	nop
 8001bf0:	bd80      	pop	{r7, pc}
 8001bf2:	bf00      	nop
 8001bf4:	20000548 	.word	0x20000548

08001bf8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001bf8:	b580      	push	{r7, lr}
 8001bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001bfc:	4802      	ldr	r0, [pc, #8]	; (8001c08 <TIM4_IRQHandler+0x10>)
 8001bfe:	f004 fb25 	bl	800624c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	20000594 	.word	0x20000594

08001c0c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001c10:	4802      	ldr	r0, [pc, #8]	; (8001c1c <I2C1_EV_IRQHandler+0x10>)
 8001c12:	f001 fce5 	bl	80035e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001c16:	bf00      	nop
 8001c18:	bd80      	pop	{r7, pc}
 8001c1a:	bf00      	nop
 8001c1c:	20000478 	.word	0x20000478

08001c20 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001c20:	b580      	push	{r7, lr}
 8001c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001c24:	4802      	ldr	r0, [pc, #8]	; (8001c30 <I2C1_ER_IRQHandler+0x10>)
 8001c26:	f001 fcf5 	bl	8003614 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001c2a:	bf00      	nop
 8001c2c:	bd80      	pop	{r7, pc}
 8001c2e:	bf00      	nop
 8001c30:	20000478 	.word	0x20000478

08001c34 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001c34:	b580      	push	{r7, lr}
 8001c36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001c38:	4802      	ldr	r0, [pc, #8]	; (8001c44 <SPI1_IRQHandler+0x10>)
 8001c3a:	f003 ffc9 	bl	8005bd0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001c3e:	bf00      	nop
 8001c40:	bd80      	pop	{r7, pc}
 8001c42:	bf00      	nop
 8001c44:	200004e0 	.word	0x200004e0

08001c48 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001c48:	b580      	push	{r7, lr}
 8001c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001c4c:	4802      	ldr	r0, [pc, #8]	; (8001c58 <USART3_IRQHandler+0x10>)
 8001c4e:	f005 fba3 	bl	8007398 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001c52:	bf00      	nop
 8001c54:	bd80      	pop	{r7, pc}
 8001c56:	bf00      	nop
 8001c58:	2000062c 	.word	0x2000062c

08001c5c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001c5c:	b580      	push	{r7, lr}
 8001c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001c60:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001c64:	f001 fafa 	bl	800325c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001c68:	bf00      	nop
 8001c6a:	bd80      	pop	{r7, pc}

08001c6c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return 1;
 8001c70:	2301      	movs	r3, #1
}
 8001c72:	4618      	mov	r0, r3
 8001c74:	46bd      	mov	sp, r7
 8001c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c7a:	4770      	bx	lr

08001c7c <_kill>:

int _kill(int pid, int sig)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b082      	sub	sp, #8
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001c86:	f008 f929 	bl	8009edc <__errno>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2216      	movs	r2, #22
 8001c8e:	601a      	str	r2, [r3, #0]
  return -1;
 8001c90:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c94:	4618      	mov	r0, r3
 8001c96:	3708      	adds	r7, #8
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	bd80      	pop	{r7, pc}

08001c9c <_exit>:

void _exit (int status)
{
 8001c9c:	b580      	push	{r7, lr}
 8001c9e:	b082      	sub	sp, #8
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001ca4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ca8:	6878      	ldr	r0, [r7, #4]
 8001caa:	f7ff ffe7 	bl	8001c7c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001cae:	e7fe      	b.n	8001cae <_exit+0x12>

08001cb0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001cb0:	b580      	push	{r7, lr}
 8001cb2:	b086      	sub	sp, #24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	617b      	str	r3, [r7, #20]
 8001cc0:	e00a      	b.n	8001cd8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001cc2:	f3af 8000 	nop.w
 8001cc6:	4601      	mov	r1, r0
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	1c5a      	adds	r2, r3, #1
 8001ccc:	60ba      	str	r2, [r7, #8]
 8001cce:	b2ca      	uxtb	r2, r1
 8001cd0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	617b      	str	r3, [r7, #20]
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	429a      	cmp	r2, r3
 8001cde:	dbf0      	blt.n	8001cc2 <_read+0x12>
  }

  return len;
 8001ce0:	687b      	ldr	r3, [r7, #4]
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3718      	adds	r7, #24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}

08001cea <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001cea:	b580      	push	{r7, lr}
 8001cec:	b086      	sub	sp, #24
 8001cee:	af00      	add	r7, sp, #0
 8001cf0:	60f8      	str	r0, [r7, #12]
 8001cf2:	60b9      	str	r1, [r7, #8]
 8001cf4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	e009      	b.n	8001d10 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	1c5a      	adds	r2, r3, #1
 8001d00:	60ba      	str	r2, [r7, #8]
 8001d02:	781b      	ldrb	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	617b      	str	r3, [r7, #20]
 8001d10:	697a      	ldr	r2, [r7, #20]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	dbf1      	blt.n	8001cfc <_write+0x12>
  }
  return len;
 8001d18:	687b      	ldr	r3, [r7, #4]
}
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	3718      	adds	r7, #24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}

08001d22 <_close>:

int _close(int file)
{
 8001d22:	b480      	push	{r7}
 8001d24:	b083      	sub	sp, #12
 8001d26:	af00      	add	r7, sp, #0
 8001d28:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001d2a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	370c      	adds	r7, #12
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr

08001d3a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	b083      	sub	sp, #12
 8001d3e:	af00      	add	r7, sp, #0
 8001d40:	6078      	str	r0, [r7, #4]
 8001d42:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001d44:	683b      	ldr	r3, [r7, #0]
 8001d46:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001d4a:	605a      	str	r2, [r3, #4]
  return 0;
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr

08001d5a <_isatty>:

int _isatty(int file)
{
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001d62:	2301      	movs	r3, #1
}
 8001d64:	4618      	mov	r0, r3
 8001d66:	370c      	adds	r7, #12
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6e:	4770      	bx	lr

08001d70 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b085      	sub	sp, #20
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001d7c:	2300      	movs	r3, #0
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	3714      	adds	r7, #20
 8001d82:	46bd      	mov	sp, r7
 8001d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d88:	4770      	bx	lr
	...

08001d8c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b086      	sub	sp, #24
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d94:	4a14      	ldr	r2, [pc, #80]	; (8001de8 <_sbrk+0x5c>)
 8001d96:	4b15      	ldr	r3, [pc, #84]	; (8001dec <_sbrk+0x60>)
 8001d98:	1ad3      	subs	r3, r2, r3
 8001d9a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d9c:	697b      	ldr	r3, [r7, #20]
 8001d9e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001da0:	4b13      	ldr	r3, [pc, #76]	; (8001df0 <_sbrk+0x64>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d102      	bne.n	8001dae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001da8:	4b11      	ldr	r3, [pc, #68]	; (8001df0 <_sbrk+0x64>)
 8001daa:	4a12      	ldr	r2, [pc, #72]	; (8001df4 <_sbrk+0x68>)
 8001dac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001dae:	4b10      	ldr	r3, [pc, #64]	; (8001df0 <_sbrk+0x64>)
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4413      	add	r3, r2
 8001db6:	693a      	ldr	r2, [r7, #16]
 8001db8:	429a      	cmp	r2, r3
 8001dba:	d207      	bcs.n	8001dcc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001dbc:	f008 f88e 	bl	8009edc <__errno>
 8001dc0:	4603      	mov	r3, r0
 8001dc2:	220c      	movs	r2, #12
 8001dc4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001dc6:	f04f 33ff 	mov.w	r3, #4294967295
 8001dca:	e009      	b.n	8001de0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001dcc:	4b08      	ldr	r3, [pc, #32]	; (8001df0 <_sbrk+0x64>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001dd2:	4b07      	ldr	r3, [pc, #28]	; (8001df0 <_sbrk+0x64>)
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	4413      	add	r3, r2
 8001dda:	4a05      	ldr	r2, [pc, #20]	; (8001df0 <_sbrk+0x64>)
 8001ddc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001dde:	68fb      	ldr	r3, [r7, #12]
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3718      	adds	r7, #24
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	20050000 	.word	0x20050000
 8001dec:	00000400 	.word	0x00000400
 8001df0:	20000544 	.word	0x20000544
 8001df4:	20000d20 	.word	0x20000d20

08001df8 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001dfc:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <SystemInit+0x20>)
 8001dfe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e02:	4a05      	ldr	r2, [pc, #20]	; (8001e18 <SystemInit+0x20>)
 8001e04:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001e08:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001e0c:	bf00      	nop
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e14:	4770      	bx	lr
 8001e16:	bf00      	nop
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim9;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e22:	f107 0310 	add.w	r3, r7, #16
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001e3a:	4b1e      	ldr	r3, [pc, #120]	; (8001eb4 <MX_TIM3_Init+0x98>)
 8001e3c:	4a1e      	ldr	r2, [pc, #120]	; (8001eb8 <MX_TIM3_Init+0x9c>)
 8001e3e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8001e40:	4b1c      	ldr	r3, [pc, #112]	; (8001eb4 <MX_TIM3_Init+0x98>)
 8001e42:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001e46:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e48:	4b1a      	ldr	r3, [pc, #104]	; (8001eb4 <MX_TIM3_Init+0x98>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001e4e:	4b19      	ldr	r3, [pc, #100]	; (8001eb4 <MX_TIM3_Init+0x98>)
 8001e50:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e54:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e56:	4b17      	ldr	r3, [pc, #92]	; (8001eb4 <MX_TIM3_Init+0x98>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5c:	4b15      	ldr	r3, [pc, #84]	; (8001eb4 <MX_TIM3_Init+0x98>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001e62:	4814      	ldr	r0, [pc, #80]	; (8001eb4 <MX_TIM3_Init+0x98>)
 8001e64:	f003 ffc7 	bl	8005df6 <HAL_TIM_Base_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001e6e:	f7ff fdb3 	bl	80019d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e76:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001e78:	f107 0310 	add.w	r3, r7, #16
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	480d      	ldr	r0, [pc, #52]	; (8001eb4 <MX_TIM3_Init+0x98>)
 8001e80:	f004 fc18 	bl	80066b4 <HAL_TIM_ConfigClockSource>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001e8a:	f7ff fda5 	bl	80019d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e92:	2300      	movs	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001e96:	1d3b      	adds	r3, r7, #4
 8001e98:	4619      	mov	r1, r3
 8001e9a:	4806      	ldr	r0, [pc, #24]	; (8001eb4 <MX_TIM3_Init+0x98>)
 8001e9c:	f005 f8ba 	bl	8007014 <HAL_TIMEx_MasterConfigSynchronization>
 8001ea0:	4603      	mov	r3, r0
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d001      	beq.n	8001eaa <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001ea6:	f7ff fd97 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001eaa:	bf00      	nop
 8001eac:	3720      	adds	r7, #32
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	20000548 	.word	0x20000548
 8001eb8:	40000400 	.word	0x40000400

08001ebc <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001ebc:	b580      	push	{r7, lr}
 8001ebe:	b08e      	sub	sp, #56	; 0x38
 8001ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001ec2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001ec6:	2200      	movs	r2, #0
 8001ec8:	601a      	str	r2, [r3, #0]
 8001eca:	605a      	str	r2, [r3, #4]
 8001ecc:	609a      	str	r2, [r3, #8]
 8001ece:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ed0:	f107 031c 	add.w	r3, r7, #28
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	601a      	str	r2, [r3, #0]
 8001ed8:	605a      	str	r2, [r3, #4]
 8001eda:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001edc:	463b      	mov	r3, r7
 8001ede:	2200      	movs	r2, #0
 8001ee0:	601a      	str	r2, [r3, #0]
 8001ee2:	605a      	str	r2, [r3, #4]
 8001ee4:	609a      	str	r2, [r3, #8]
 8001ee6:	60da      	str	r2, [r3, #12]
 8001ee8:	611a      	str	r2, [r3, #16]
 8001eea:	615a      	str	r2, [r3, #20]
 8001eec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001eee:	4b2d      	ldr	r3, [pc, #180]	; (8001fa4 <MX_TIM4_Init+0xe8>)
 8001ef0:	4a2d      	ldr	r2, [pc, #180]	; (8001fa8 <MX_TIM4_Init+0xec>)
 8001ef2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 8001ef4:	4b2b      	ldr	r3, [pc, #172]	; (8001fa4 <MX_TIM4_Init+0xe8>)
 8001ef6:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001efa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efc:	4b29      	ldr	r3, [pc, #164]	; (8001fa4 <MX_TIM4_Init+0xe8>)
 8001efe:	2200      	movs	r2, #0
 8001f00:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001f02:	4b28      	ldr	r3, [pc, #160]	; (8001fa4 <MX_TIM4_Init+0xe8>)
 8001f04:	f242 720f 	movw	r2, #9999	; 0x270f
 8001f08:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f0a:	4b26      	ldr	r3, [pc, #152]	; (8001fa4 <MX_TIM4_Init+0xe8>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f10:	4b24      	ldr	r3, [pc, #144]	; (8001fa4 <MX_TIM4_Init+0xe8>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001f16:	4823      	ldr	r0, [pc, #140]	; (8001fa4 <MX_TIM4_Init+0xe8>)
 8001f18:	f003 ff6d 	bl	8005df6 <HAL_TIM_Base_Init>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d001      	beq.n	8001f26 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8001f22:	f7ff fd59 	bl	80019d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f2a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001f2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001f30:	4619      	mov	r1, r3
 8001f32:	481c      	ldr	r0, [pc, #112]	; (8001fa4 <MX_TIM4_Init+0xe8>)
 8001f34:	f004 fbbe 	bl	80066b4 <HAL_TIM_ConfigClockSource>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d001      	beq.n	8001f42 <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8001f3e:	f7ff fd4b 	bl	80019d8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001f42:	4818      	ldr	r0, [pc, #96]	; (8001fa4 <MX_TIM4_Init+0xe8>)
 8001f44:	f004 f826 	bl	8005f94 <HAL_TIM_PWM_Init>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d001      	beq.n	8001f52 <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001f4e:	f7ff fd43 	bl	80019d8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f52:	2300      	movs	r3, #0
 8001f54:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001f5a:	f107 031c 	add.w	r3, r7, #28
 8001f5e:	4619      	mov	r1, r3
 8001f60:	4810      	ldr	r0, [pc, #64]	; (8001fa4 <MX_TIM4_Init+0xe8>)
 8001f62:	f005 f857 	bl	8007014 <HAL_TIMEx_MasterConfigSynchronization>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001f6c:	f7ff fd34 	bl	80019d8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f70:	2360      	movs	r3, #96	; 0x60
 8001f72:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8001f74:	230a      	movs	r3, #10
 8001f76:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f78:	2300      	movs	r3, #0
 8001f7a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f80:	463b      	mov	r3, r7
 8001f82:	2200      	movs	r2, #0
 8001f84:	4619      	mov	r1, r3
 8001f86:	4807      	ldr	r0, [pc, #28]	; (8001fa4 <MX_TIM4_Init+0xe8>)
 8001f88:	f004 fa80 	bl	800648c <HAL_TIM_PWM_ConfigChannel>
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d001      	beq.n	8001f96 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8001f92:	f7ff fd21 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001f96:	4803      	ldr	r0, [pc, #12]	; (8001fa4 <MX_TIM4_Init+0xe8>)
 8001f98:	f000 f8a0 	bl	80020dc <HAL_TIM_MspPostInit>

}
 8001f9c:	bf00      	nop
 8001f9e:	3738      	adds	r7, #56	; 0x38
 8001fa0:	46bd      	mov	sp, r7
 8001fa2:	bd80      	pop	{r7, pc}
 8001fa4:	20000594 	.word	0x20000594
 8001fa8:	40000800 	.word	0x40000800

08001fac <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b084      	sub	sp, #16
 8001fb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001fb2:	463b      	mov	r3, r7
 8001fb4:	2200      	movs	r2, #0
 8001fb6:	601a      	str	r2, [r3, #0]
 8001fb8:	605a      	str	r2, [r3, #4]
 8001fba:	609a      	str	r2, [r3, #8]
 8001fbc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001fbe:	4b16      	ldr	r3, [pc, #88]	; (8002018 <MX_TIM9_Init+0x6c>)
 8001fc0:	4a16      	ldr	r2, [pc, #88]	; (800201c <MX_TIM9_Init+0x70>)
 8001fc2:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 719;
 8001fc4:	4b14      	ldr	r3, [pc, #80]	; (8002018 <MX_TIM9_Init+0x6c>)
 8001fc6:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001fca:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fcc:	4b12      	ldr	r3, [pc, #72]	; (8002018 <MX_TIM9_Init+0x6c>)
 8001fce:	2200      	movs	r2, #0
 8001fd0:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 99;
 8001fd2:	4b11      	ldr	r3, [pc, #68]	; (8002018 <MX_TIM9_Init+0x6c>)
 8001fd4:	2263      	movs	r2, #99	; 0x63
 8001fd6:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	; (8002018 <MX_TIM9_Init+0x6c>)
 8001fda:	2200      	movs	r2, #0
 8001fdc:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fde:	4b0e      	ldr	r3, [pc, #56]	; (8002018 <MX_TIM9_Init+0x6c>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001fe4:	480c      	ldr	r0, [pc, #48]	; (8002018 <MX_TIM9_Init+0x6c>)
 8001fe6:	f003 ff06 	bl	8005df6 <HAL_TIM_Base_Init>
 8001fea:	4603      	mov	r3, r0
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d001      	beq.n	8001ff4 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001ff0:	f7ff fcf2 	bl	80019d8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ff4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001ff8:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001ffa:	463b      	mov	r3, r7
 8001ffc:	4619      	mov	r1, r3
 8001ffe:	4806      	ldr	r0, [pc, #24]	; (8002018 <MX_TIM9_Init+0x6c>)
 8002000:	f004 fb58 	bl	80066b4 <HAL_TIM_ConfigClockSource>
 8002004:	4603      	mov	r3, r0
 8002006:	2b00      	cmp	r3, #0
 8002008:	d001      	beq.n	800200e <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 800200a:	f7ff fce5 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 800200e:	bf00      	nop
 8002010:	3710      	adds	r7, #16
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	200005e0 	.word	0x200005e0
 800201c:	40014000 	.word	0x40014000

08002020 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	4a27      	ldr	r2, [pc, #156]	; (80020cc <HAL_TIM_Base_MspInit+0xac>)
 800202e:	4293      	cmp	r3, r2
 8002030:	d114      	bne.n	800205c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002032:	4b27      	ldr	r3, [pc, #156]	; (80020d0 <HAL_TIM_Base_MspInit+0xb0>)
 8002034:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002036:	4a26      	ldr	r2, [pc, #152]	; (80020d0 <HAL_TIM_Base_MspInit+0xb0>)
 8002038:	f043 0302 	orr.w	r3, r3, #2
 800203c:	6413      	str	r3, [r2, #64]	; 0x40
 800203e:	4b24      	ldr	r3, [pc, #144]	; (80020d0 <HAL_TIM_Base_MspInit+0xb0>)
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	617b      	str	r3, [r7, #20]
 8002048:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800204a:	2200      	movs	r2, #0
 800204c:	2100      	movs	r1, #0
 800204e:	201d      	movs	r0, #29
 8002050:	f000 fb41 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002054:	201d      	movs	r0, #29
 8002056:	f000 fb5a 	bl	800270e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 800205a:	e032      	b.n	80020c2 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM4)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a1c      	ldr	r2, [pc, #112]	; (80020d4 <HAL_TIM_Base_MspInit+0xb4>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d114      	bne.n	8002090 <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002066:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <HAL_TIM_Base_MspInit+0xb0>)
 8002068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800206a:	4a19      	ldr	r2, [pc, #100]	; (80020d0 <HAL_TIM_Base_MspInit+0xb0>)
 800206c:	f043 0304 	orr.w	r3, r3, #4
 8002070:	6413      	str	r3, [r2, #64]	; 0x40
 8002072:	4b17      	ldr	r3, [pc, #92]	; (80020d0 <HAL_TIM_Base_MspInit+0xb0>)
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	f003 0304 	and.w	r3, r3, #4
 800207a:	613b      	str	r3, [r7, #16]
 800207c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 800207e:	2200      	movs	r2, #0
 8002080:	2100      	movs	r1, #0
 8002082:	201e      	movs	r0, #30
 8002084:	f000 fb27 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8002088:	201e      	movs	r0, #30
 800208a:	f000 fb40 	bl	800270e <HAL_NVIC_EnableIRQ>
}
 800208e:	e018      	b.n	80020c2 <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM9)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4a10      	ldr	r2, [pc, #64]	; (80020d8 <HAL_TIM_Base_MspInit+0xb8>)
 8002096:	4293      	cmp	r3, r2
 8002098:	d113      	bne.n	80020c2 <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800209a:	4b0d      	ldr	r3, [pc, #52]	; (80020d0 <HAL_TIM_Base_MspInit+0xb0>)
 800209c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800209e:	4a0c      	ldr	r2, [pc, #48]	; (80020d0 <HAL_TIM_Base_MspInit+0xb0>)
 80020a0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a4:	6453      	str	r3, [r2, #68]	; 0x44
 80020a6:	4b0a      	ldr	r3, [pc, #40]	; (80020d0 <HAL_TIM_Base_MspInit+0xb0>)
 80020a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020ae:	60fb      	str	r3, [r7, #12]
 80020b0:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 80020b2:	2200      	movs	r2, #0
 80020b4:	2100      	movs	r1, #0
 80020b6:	2018      	movs	r0, #24
 80020b8:	f000 fb0d 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80020bc:	2018      	movs	r0, #24
 80020be:	f000 fb26 	bl	800270e <HAL_NVIC_EnableIRQ>
}
 80020c2:	bf00      	nop
 80020c4:	3718      	adds	r7, #24
 80020c6:	46bd      	mov	sp, r7
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	40000400 	.word	0x40000400
 80020d0:	40023800 	.word	0x40023800
 80020d4:	40000800 	.word	0x40000800
 80020d8:	40014000 	.word	0x40014000

080020dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b088      	sub	sp, #32
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020e4:	f107 030c 	add.w	r3, r7, #12
 80020e8:	2200      	movs	r2, #0
 80020ea:	601a      	str	r2, [r3, #0]
 80020ec:	605a      	str	r2, [r3, #4]
 80020ee:	609a      	str	r2, [r3, #8]
 80020f0:	60da      	str	r2, [r3, #12]
 80020f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4a11      	ldr	r2, [pc, #68]	; (8002140 <HAL_TIM_MspPostInit+0x64>)
 80020fa:	4293      	cmp	r3, r2
 80020fc:	d11c      	bne.n	8002138 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80020fe:	4b11      	ldr	r3, [pc, #68]	; (8002144 <HAL_TIM_MspPostInit+0x68>)
 8002100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002102:	4a10      	ldr	r2, [pc, #64]	; (8002144 <HAL_TIM_MspPostInit+0x68>)
 8002104:	f043 0308 	orr.w	r3, r3, #8
 8002108:	6313      	str	r3, [r2, #48]	; 0x30
 800210a:	4b0e      	ldr	r3, [pc, #56]	; (8002144 <HAL_TIM_MspPostInit+0x68>)
 800210c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800210e:	f003 0308 	and.w	r3, r3, #8
 8002112:	60bb      	str	r3, [r7, #8]
 8002114:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800211a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800211c:	2302      	movs	r3, #2
 800211e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002120:	2300      	movs	r3, #0
 8002122:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002124:	2300      	movs	r3, #0
 8002126:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002128:	2302      	movs	r3, #2
 800212a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800212c:	f107 030c 	add.w	r3, r7, #12
 8002130:	4619      	mov	r1, r3
 8002132:	4805      	ldr	r0, [pc, #20]	; (8002148 <HAL_TIM_MspPostInit+0x6c>)
 8002134:	f000 fecc 	bl	8002ed0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002138:	bf00      	nop
 800213a:	3720      	adds	r7, #32
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40000800 	.word	0x40000800
 8002144:	40023800 	.word	0x40023800
 8002148:	40020c00 	.word	0x40020c00

0800214c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002150:	4b14      	ldr	r3, [pc, #80]	; (80021a4 <MX_USART3_UART_Init+0x58>)
 8002152:	4a15      	ldr	r2, [pc, #84]	; (80021a8 <MX_USART3_UART_Init+0x5c>)
 8002154:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002156:	4b13      	ldr	r3, [pc, #76]	; (80021a4 <MX_USART3_UART_Init+0x58>)
 8002158:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800215c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800215e:	4b11      	ldr	r3, [pc, #68]	; (80021a4 <MX_USART3_UART_Init+0x58>)
 8002160:	2200      	movs	r2, #0
 8002162:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <MX_USART3_UART_Init+0x58>)
 8002166:	2200      	movs	r2, #0
 8002168:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800216a:	4b0e      	ldr	r3, [pc, #56]	; (80021a4 <MX_USART3_UART_Init+0x58>)
 800216c:	2200      	movs	r2, #0
 800216e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <MX_USART3_UART_Init+0x58>)
 8002172:	220c      	movs	r2, #12
 8002174:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002176:	4b0b      	ldr	r3, [pc, #44]	; (80021a4 <MX_USART3_UART_Init+0x58>)
 8002178:	2200      	movs	r2, #0
 800217a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <MX_USART3_UART_Init+0x58>)
 800217e:	2200      	movs	r2, #0
 8002180:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002182:	4b08      	ldr	r3, [pc, #32]	; (80021a4 <MX_USART3_UART_Init+0x58>)
 8002184:	2200      	movs	r2, #0
 8002186:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002188:	4b06      	ldr	r3, [pc, #24]	; (80021a4 <MX_USART3_UART_Init+0x58>)
 800218a:	2200      	movs	r2, #0
 800218c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800218e:	4805      	ldr	r0, [pc, #20]	; (80021a4 <MX_USART3_UART_Init+0x58>)
 8002190:	f004 ffec 	bl	800716c <HAL_UART_Init>
 8002194:	4603      	mov	r3, r0
 8002196:	2b00      	cmp	r3, #0
 8002198:	d001      	beq.n	800219e <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 800219a:	f7ff fc1d 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800219e:	bf00      	nop
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	2000062c 	.word	0x2000062c
 80021a8:	40004800 	.word	0x40004800

080021ac <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b0aa      	sub	sp, #168	; 0xa8
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021b4:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
 80021bc:	605a      	str	r2, [r3, #4]
 80021be:	609a      	str	r2, [r3, #8]
 80021c0:	60da      	str	r2, [r3, #12]
 80021c2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80021c4:	f107 0310 	add.w	r3, r7, #16
 80021c8:	2284      	movs	r2, #132	; 0x84
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f007 fe32 	bl	8009e36 <memset>
  if(uartHandle->Instance==USART3)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a26      	ldr	r2, [pc, #152]	; (8002270 <HAL_UART_MspInit+0xc4>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d144      	bne.n	8002266 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80021dc:	f44f 7380 	mov.w	r3, #256	; 0x100
 80021e0:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80021e2:	2300      	movs	r3, #0
 80021e4:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80021e6:	f107 0310 	add.w	r3, r7, #16
 80021ea:	4618      	mov	r0, r3
 80021ec:	f003 f854 	bl	8005298 <HAL_RCCEx_PeriphCLKConfig>
 80021f0:	4603      	mov	r3, r0
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d001      	beq.n	80021fa <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 80021f6:	f7ff fbef 	bl	80019d8 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80021fa:	4b1e      	ldr	r3, [pc, #120]	; (8002274 <HAL_UART_MspInit+0xc8>)
 80021fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021fe:	4a1d      	ldr	r2, [pc, #116]	; (8002274 <HAL_UART_MspInit+0xc8>)
 8002200:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002204:	6413      	str	r3, [r2, #64]	; 0x40
 8002206:	4b1b      	ldr	r3, [pc, #108]	; (8002274 <HAL_UART_MspInit+0xc8>)
 8002208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800220a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800220e:	60fb      	str	r3, [r7, #12]
 8002210:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002212:	4b18      	ldr	r3, [pc, #96]	; (8002274 <HAL_UART_MspInit+0xc8>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a17      	ldr	r2, [pc, #92]	; (8002274 <HAL_UART_MspInit+0xc8>)
 8002218:	f043 0308 	orr.w	r3, r3, #8
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b15      	ldr	r3, [pc, #84]	; (8002274 <HAL_UART_MspInit+0xc8>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	60bb      	str	r3, [r7, #8]
 8002228:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800222a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800222e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002232:	2302      	movs	r3, #2
 8002234:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002238:	2301      	movs	r3, #1
 800223a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800223e:	2303      	movs	r3, #3
 8002240:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002244:	2307      	movs	r3, #7
 8002246:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800224a:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800224e:	4619      	mov	r1, r3
 8002250:	4809      	ldr	r0, [pc, #36]	; (8002278 <HAL_UART_MspInit+0xcc>)
 8002252:	f000 fe3d 	bl	8002ed0 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8002256:	2200      	movs	r2, #0
 8002258:	2100      	movs	r1, #0
 800225a:	2027      	movs	r0, #39	; 0x27
 800225c:	f000 fa3b 	bl	80026d6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002260:	2027      	movs	r0, #39	; 0x27
 8002262:	f000 fa54 	bl	800270e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8002266:	bf00      	nop
 8002268:	37a8      	adds	r7, #168	; 0xa8
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
 800226e:	bf00      	nop
 8002270:	40004800 	.word	0x40004800
 8002274:	40023800 	.word	0x40023800
 8002278:	40020c00 	.word	0x40020c00

0800227c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8002280:	4b14      	ldr	r3, [pc, #80]	; (80022d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002282:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8002286:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8002288:	4b12      	ldr	r3, [pc, #72]	; (80022d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800228a:	2206      	movs	r2, #6
 800228c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800228e:	4b11      	ldr	r3, [pc, #68]	; (80022d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002290:	2202      	movs	r2, #2
 8002292:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8002294:	4b0f      	ldr	r3, [pc, #60]	; (80022d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002296:	2200      	movs	r2, #0
 8002298:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800229a:	4b0e      	ldr	r3, [pc, #56]	; (80022d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800229c:	2202      	movs	r2, #2
 800229e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80022a0:	4b0c      	ldr	r3, [pc, #48]	; (80022d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022a2:	2201      	movs	r2, #1
 80022a4:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80022a6:	4b0b      	ldr	r3, [pc, #44]	; (80022d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80022ac:	4b09      	ldr	r3, [pc, #36]	; (80022d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80022b2:	4b08      	ldr	r3, [pc, #32]	; (80022d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022b4:	2201      	movs	r2, #1
 80022b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80022b8:	4b06      	ldr	r3, [pc, #24]	; (80022d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022ba:	2200      	movs	r2, #0
 80022bc:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80022be:	4805      	ldr	r0, [pc, #20]	; (80022d4 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80022c0:	f002 f9c7 	bl	8004652 <HAL_PCD_Init>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80022ca:	f7ff fb85 	bl	80019d8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	200006b4 	.word	0x200006b4

080022d8 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b0ac      	sub	sp, #176	; 0xb0
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022e4:	2200      	movs	r2, #0
 80022e6:	601a      	str	r2, [r3, #0]
 80022e8:	605a      	str	r2, [r3, #4]
 80022ea:	609a      	str	r2, [r3, #8]
 80022ec:	60da      	str	r2, [r3, #12]
 80022ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80022f0:	f107 0318 	add.w	r3, r7, #24
 80022f4:	2284      	movs	r2, #132	; 0x84
 80022f6:	2100      	movs	r1, #0
 80022f8:	4618      	mov	r0, r3
 80022fa:	f007 fd9c 	bl	8009e36 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002306:	d159      	bne.n	80023bc <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002308:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800230c:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800230e:	2300      	movs	r3, #0
 8002310:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002314:	f107 0318 	add.w	r3, r7, #24
 8002318:	4618      	mov	r0, r3
 800231a:	f002 ffbd 	bl	8005298 <HAL_RCCEx_PeriphCLKConfig>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002324:	f7ff fb58 	bl	80019d8 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002328:	4b26      	ldr	r3, [pc, #152]	; (80023c4 <HAL_PCD_MspInit+0xec>)
 800232a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800232c:	4a25      	ldr	r2, [pc, #148]	; (80023c4 <HAL_PCD_MspInit+0xec>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	6313      	str	r3, [r2, #48]	; 0x30
 8002334:	4b23      	ldr	r3, [pc, #140]	; (80023c4 <HAL_PCD_MspInit+0xec>)
 8002336:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	617b      	str	r3, [r7, #20]
 800233e:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002340:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002344:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002348:	2302      	movs	r3, #2
 800234a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800234e:	2300      	movs	r3, #0
 8002350:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002354:	2303      	movs	r3, #3
 8002356:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800235a:	230a      	movs	r3, #10
 800235c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002360:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002364:	4619      	mov	r1, r3
 8002366:	4818      	ldr	r0, [pc, #96]	; (80023c8 <HAL_PCD_MspInit+0xf0>)
 8002368:	f000 fdb2 	bl	8002ed0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800236c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002370:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002374:	2300      	movs	r3, #0
 8002376:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237a:	2300      	movs	r3, #0
 800237c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8002380:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002384:	4619      	mov	r1, r3
 8002386:	4810      	ldr	r0, [pc, #64]	; (80023c8 <HAL_PCD_MspInit+0xf0>)
 8002388:	f000 fda2 	bl	8002ed0 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800238c:	4b0d      	ldr	r3, [pc, #52]	; (80023c4 <HAL_PCD_MspInit+0xec>)
 800238e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002390:	4a0c      	ldr	r2, [pc, #48]	; (80023c4 <HAL_PCD_MspInit+0xec>)
 8002392:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002396:	6353      	str	r3, [r2, #52]	; 0x34
 8002398:	4b0a      	ldr	r3, [pc, #40]	; (80023c4 <HAL_PCD_MspInit+0xec>)
 800239a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800239c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023a0:	613b      	str	r3, [r7, #16]
 80023a2:	693b      	ldr	r3, [r7, #16]
 80023a4:	4b07      	ldr	r3, [pc, #28]	; (80023c4 <HAL_PCD_MspInit+0xec>)
 80023a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a8:	4a06      	ldr	r2, [pc, #24]	; (80023c4 <HAL_PCD_MspInit+0xec>)
 80023aa:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80023ae:	6453      	str	r3, [r2, #68]	; 0x44
 80023b0:	4b04      	ldr	r3, [pc, #16]	; (80023c4 <HAL_PCD_MspInit+0xec>)
 80023b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80023bc:	bf00      	nop
 80023be:	37b0      	adds	r7, #176	; 0xb0
 80023c0:	46bd      	mov	sp, r7
 80023c2:	bd80      	pop	{r7, pc}
 80023c4:	40023800 	.word	0x40023800
 80023c8:	40020000 	.word	0x40020000

080023cc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80023cc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002404 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80023d0:	480d      	ldr	r0, [pc, #52]	; (8002408 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80023d2:	490e      	ldr	r1, [pc, #56]	; (800240c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80023d4:	4a0e      	ldr	r2, [pc, #56]	; (8002410 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023d6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023d8:	e002      	b.n	80023e0 <LoopCopyDataInit>

080023da <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023da:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023dc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023de:	3304      	adds	r3, #4

080023e0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023e0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023e2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023e4:	d3f9      	bcc.n	80023da <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023e6:	4a0b      	ldr	r2, [pc, #44]	; (8002414 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80023e8:	4c0b      	ldr	r4, [pc, #44]	; (8002418 <LoopFillZerobss+0x26>)
  movs r3, #0
 80023ea:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023ec:	e001      	b.n	80023f2 <LoopFillZerobss>

080023ee <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023ee:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023f0:	3204      	adds	r2, #4

080023f2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023f2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023f4:	d3fb      	bcc.n	80023ee <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80023f6:	f7ff fcff 	bl	8001df8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80023fa:	f007 fd75 	bl	8009ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80023fe:	f7ff fa41 	bl	8001884 <main>
  bx  lr    
 8002402:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002404:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002408:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800240c:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 8002410:	0800db58 	.word	0x0800db58
  ldr r2, =_sbss
 8002414:	20000328 	.word	0x20000328
  ldr r4, =_ebss
 8002418:	20000d20 	.word	0x20000d20

0800241c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800241c:	e7fe      	b.n	800241c <ADC_IRQHandler>

0800241e <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002422:	2003      	movs	r0, #3
 8002424:	f000 f94c 	bl	80026c0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002428:	2000      	movs	r0, #0
 800242a:	f000 f805 	bl	8002438 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800242e:	f7ff fb81 	bl	8001b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002432:	2300      	movs	r3, #0
}
 8002434:	4618      	mov	r0, r3
 8002436:	bd80      	pop	{r7, pc}

08002438 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002438:	b580      	push	{r7, lr}
 800243a:	b082      	sub	sp, #8
 800243c:	af00      	add	r7, sp, #0
 800243e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002440:	4b12      	ldr	r3, [pc, #72]	; (800248c <HAL_InitTick+0x54>)
 8002442:	681a      	ldr	r2, [r3, #0]
 8002444:	4b12      	ldr	r3, [pc, #72]	; (8002490 <HAL_InitTick+0x58>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	4619      	mov	r1, r3
 800244a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800244e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002452:	fbb2 f3f3 	udiv	r3, r2, r3
 8002456:	4618      	mov	r0, r3
 8002458:	f000 f967 	bl	800272a <HAL_SYSTICK_Config>
 800245c:	4603      	mov	r3, r0
 800245e:	2b00      	cmp	r3, #0
 8002460:	d001      	beq.n	8002466 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002462:	2301      	movs	r3, #1
 8002464:	e00e      	b.n	8002484 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	2b0f      	cmp	r3, #15
 800246a:	d80a      	bhi.n	8002482 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800246c:	2200      	movs	r2, #0
 800246e:	6879      	ldr	r1, [r7, #4]
 8002470:	f04f 30ff 	mov.w	r0, #4294967295
 8002474:	f000 f92f 	bl	80026d6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002478:	4a06      	ldr	r2, [pc, #24]	; (8002494 <HAL_InitTick+0x5c>)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800247e:	2300      	movs	r3, #0
 8002480:	e000      	b.n	8002484 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002482:	2301      	movs	r3, #1
}
 8002484:	4618      	mov	r0, r3
 8002486:	3708      	adds	r7, #8
 8002488:	46bd      	mov	sp, r7
 800248a:	bd80      	pop	{r7, pc}
 800248c:	20000000 	.word	0x20000000
 8002490:	20000008 	.word	0x20000008
 8002494:	20000004 	.word	0x20000004

08002498 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800249c:	4b06      	ldr	r3, [pc, #24]	; (80024b8 <HAL_IncTick+0x20>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	461a      	mov	r2, r3
 80024a2:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_IncTick+0x24>)
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	4413      	add	r3, r2
 80024a8:	4a04      	ldr	r2, [pc, #16]	; (80024bc <HAL_IncTick+0x24>)
 80024aa:	6013      	str	r3, [r2, #0]
}
 80024ac:	bf00      	nop
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	20000008 	.word	0x20000008
 80024bc:	20000bbc 	.word	0x20000bbc

080024c0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024c0:	b480      	push	{r7}
 80024c2:	af00      	add	r7, sp, #0
  return uwTick;
 80024c4:	4b03      	ldr	r3, [pc, #12]	; (80024d4 <HAL_GetTick+0x14>)
 80024c6:	681b      	ldr	r3, [r3, #0]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr
 80024d2:	bf00      	nop
 80024d4:	20000bbc 	.word	0x20000bbc

080024d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b084      	sub	sp, #16
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024e0:	f7ff ffee 	bl	80024c0 <HAL_GetTick>
 80024e4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024f0:	d005      	beq.n	80024fe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024f2:	4b0a      	ldr	r3, [pc, #40]	; (800251c <HAL_Delay+0x44>)
 80024f4:	781b      	ldrb	r3, [r3, #0]
 80024f6:	461a      	mov	r2, r3
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4413      	add	r3, r2
 80024fc:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024fe:	bf00      	nop
 8002500:	f7ff ffde 	bl	80024c0 <HAL_GetTick>
 8002504:	4602      	mov	r2, r0
 8002506:	68bb      	ldr	r3, [r7, #8]
 8002508:	1ad3      	subs	r3, r2, r3
 800250a:	68fa      	ldr	r2, [r7, #12]
 800250c:	429a      	cmp	r2, r3
 800250e:	d8f7      	bhi.n	8002500 <HAL_Delay+0x28>
  {
  }
}
 8002510:	bf00      	nop
 8002512:	bf00      	nop
 8002514:	3710      	adds	r7, #16
 8002516:	46bd      	mov	sp, r7
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000008 	.word	0x20000008

08002520 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002520:	b480      	push	{r7}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	f003 0307 	and.w	r3, r3, #7
 800252e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002530:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <__NVIC_SetPriorityGrouping+0x40>)
 8002532:	68db      	ldr	r3, [r3, #12]
 8002534:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002536:	68ba      	ldr	r2, [r7, #8]
 8002538:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800253c:	4013      	ands	r3, r2
 800253e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002544:	68bb      	ldr	r3, [r7, #8]
 8002546:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002548:	4b06      	ldr	r3, [pc, #24]	; (8002564 <__NVIC_SetPriorityGrouping+0x44>)
 800254a:	4313      	orrs	r3, r2
 800254c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800254e:	4a04      	ldr	r2, [pc, #16]	; (8002560 <__NVIC_SetPriorityGrouping+0x40>)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	60d3      	str	r3, [r2, #12]
}
 8002554:	bf00      	nop
 8002556:	3714      	adds	r7, #20
 8002558:	46bd      	mov	sp, r7
 800255a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255e:	4770      	bx	lr
 8002560:	e000ed00 	.word	0xe000ed00
 8002564:	05fa0000 	.word	0x05fa0000

08002568 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002568:	b480      	push	{r7}
 800256a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800256c:	4b04      	ldr	r3, [pc, #16]	; (8002580 <__NVIC_GetPriorityGrouping+0x18>)
 800256e:	68db      	ldr	r3, [r3, #12]
 8002570:	0a1b      	lsrs	r3, r3, #8
 8002572:	f003 0307 	and.w	r3, r3, #7
}
 8002576:	4618      	mov	r0, r3
 8002578:	46bd      	mov	sp, r7
 800257a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257e:	4770      	bx	lr
 8002580:	e000ed00 	.word	0xe000ed00

08002584 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002584:	b480      	push	{r7}
 8002586:	b083      	sub	sp, #12
 8002588:	af00      	add	r7, sp, #0
 800258a:	4603      	mov	r3, r0
 800258c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800258e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002592:	2b00      	cmp	r3, #0
 8002594:	db0b      	blt.n	80025ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002596:	79fb      	ldrb	r3, [r7, #7]
 8002598:	f003 021f 	and.w	r2, r3, #31
 800259c:	4907      	ldr	r1, [pc, #28]	; (80025bc <__NVIC_EnableIRQ+0x38>)
 800259e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025a2:	095b      	lsrs	r3, r3, #5
 80025a4:	2001      	movs	r0, #1
 80025a6:	fa00 f202 	lsl.w	r2, r0, r2
 80025aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025ae:	bf00      	nop
 80025b0:	370c      	adds	r7, #12
 80025b2:	46bd      	mov	sp, r7
 80025b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b8:	4770      	bx	lr
 80025ba:	bf00      	nop
 80025bc:	e000e100 	.word	0xe000e100

080025c0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025c0:	b480      	push	{r7}
 80025c2:	b083      	sub	sp, #12
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	4603      	mov	r3, r0
 80025c8:	6039      	str	r1, [r7, #0]
 80025ca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	db0a      	blt.n	80025ea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	b2da      	uxtb	r2, r3
 80025d8:	490c      	ldr	r1, [pc, #48]	; (800260c <__NVIC_SetPriority+0x4c>)
 80025da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025de:	0112      	lsls	r2, r2, #4
 80025e0:	b2d2      	uxtb	r2, r2
 80025e2:	440b      	add	r3, r1
 80025e4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025e8:	e00a      	b.n	8002600 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	b2da      	uxtb	r2, r3
 80025ee:	4908      	ldr	r1, [pc, #32]	; (8002610 <__NVIC_SetPriority+0x50>)
 80025f0:	79fb      	ldrb	r3, [r7, #7]
 80025f2:	f003 030f 	and.w	r3, r3, #15
 80025f6:	3b04      	subs	r3, #4
 80025f8:	0112      	lsls	r2, r2, #4
 80025fa:	b2d2      	uxtb	r2, r2
 80025fc:	440b      	add	r3, r1
 80025fe:	761a      	strb	r2, [r3, #24]
}
 8002600:	bf00      	nop
 8002602:	370c      	adds	r7, #12
 8002604:	46bd      	mov	sp, r7
 8002606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260a:	4770      	bx	lr
 800260c:	e000e100 	.word	0xe000e100
 8002610:	e000ed00 	.word	0xe000ed00

08002614 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002614:	b480      	push	{r7}
 8002616:	b089      	sub	sp, #36	; 0x24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	60b9      	str	r1, [r7, #8]
 800261e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f003 0307 	and.w	r3, r3, #7
 8002626:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002628:	69fb      	ldr	r3, [r7, #28]
 800262a:	f1c3 0307 	rsb	r3, r3, #7
 800262e:	2b04      	cmp	r3, #4
 8002630:	bf28      	it	cs
 8002632:	2304      	movcs	r3, #4
 8002634:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002636:	69fb      	ldr	r3, [r7, #28]
 8002638:	3304      	adds	r3, #4
 800263a:	2b06      	cmp	r3, #6
 800263c:	d902      	bls.n	8002644 <NVIC_EncodePriority+0x30>
 800263e:	69fb      	ldr	r3, [r7, #28]
 8002640:	3b03      	subs	r3, #3
 8002642:	e000      	b.n	8002646 <NVIC_EncodePriority+0x32>
 8002644:	2300      	movs	r3, #0
 8002646:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002648:	f04f 32ff 	mov.w	r2, #4294967295
 800264c:	69bb      	ldr	r3, [r7, #24]
 800264e:	fa02 f303 	lsl.w	r3, r2, r3
 8002652:	43da      	mvns	r2, r3
 8002654:	68bb      	ldr	r3, [r7, #8]
 8002656:	401a      	ands	r2, r3
 8002658:	697b      	ldr	r3, [r7, #20]
 800265a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800265c:	f04f 31ff 	mov.w	r1, #4294967295
 8002660:	697b      	ldr	r3, [r7, #20]
 8002662:	fa01 f303 	lsl.w	r3, r1, r3
 8002666:	43d9      	mvns	r1, r3
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800266c:	4313      	orrs	r3, r2
         );
}
 800266e:	4618      	mov	r0, r3
 8002670:	3724      	adds	r7, #36	; 0x24
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr
	...

0800267c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b082      	sub	sp, #8
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3b01      	subs	r3, #1
 8002688:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800268c:	d301      	bcc.n	8002692 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800268e:	2301      	movs	r3, #1
 8002690:	e00f      	b.n	80026b2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002692:	4a0a      	ldr	r2, [pc, #40]	; (80026bc <SysTick_Config+0x40>)
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	3b01      	subs	r3, #1
 8002698:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800269a:	210f      	movs	r1, #15
 800269c:	f04f 30ff 	mov.w	r0, #4294967295
 80026a0:	f7ff ff8e 	bl	80025c0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80026a4:	4b05      	ldr	r3, [pc, #20]	; (80026bc <SysTick_Config+0x40>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80026aa:	4b04      	ldr	r3, [pc, #16]	; (80026bc <SysTick_Config+0x40>)
 80026ac:	2207      	movs	r2, #7
 80026ae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	e000e010 	.word	0xe000e010

080026c0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b082      	sub	sp, #8
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026c8:	6878      	ldr	r0, [r7, #4]
 80026ca:	f7ff ff29 	bl	8002520 <__NVIC_SetPriorityGrouping>
}
 80026ce:	bf00      	nop
 80026d0:	3708      	adds	r7, #8
 80026d2:	46bd      	mov	sp, r7
 80026d4:	bd80      	pop	{r7, pc}

080026d6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026d6:	b580      	push	{r7, lr}
 80026d8:	b086      	sub	sp, #24
 80026da:	af00      	add	r7, sp, #0
 80026dc:	4603      	mov	r3, r0
 80026de:	60b9      	str	r1, [r7, #8]
 80026e0:	607a      	str	r2, [r7, #4]
 80026e2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80026e4:	2300      	movs	r3, #0
 80026e6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026e8:	f7ff ff3e 	bl	8002568 <__NVIC_GetPriorityGrouping>
 80026ec:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026ee:	687a      	ldr	r2, [r7, #4]
 80026f0:	68b9      	ldr	r1, [r7, #8]
 80026f2:	6978      	ldr	r0, [r7, #20]
 80026f4:	f7ff ff8e 	bl	8002614 <NVIC_EncodePriority>
 80026f8:	4602      	mov	r2, r0
 80026fa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026fe:	4611      	mov	r1, r2
 8002700:	4618      	mov	r0, r3
 8002702:	f7ff ff5d 	bl	80025c0 <__NVIC_SetPriority>
}
 8002706:	bf00      	nop
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}

0800270e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	b082      	sub	sp, #8
 8002712:	af00      	add	r7, sp, #0
 8002714:	4603      	mov	r3, r0
 8002716:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002718:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800271c:	4618      	mov	r0, r3
 800271e:	f7ff ff31 	bl	8002584 <__NVIC_EnableIRQ>
}
 8002722:	bf00      	nop
 8002724:	3708      	adds	r7, #8
 8002726:	46bd      	mov	sp, r7
 8002728:	bd80      	pop	{r7, pc}

0800272a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800272a:	b580      	push	{r7, lr}
 800272c:	b082      	sub	sp, #8
 800272e:	af00      	add	r7, sp, #0
 8002730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002732:	6878      	ldr	r0, [r7, #4]
 8002734:	f7ff ffa2 	bl	800267c <SysTick_Config>
 8002738:	4603      	mov	r3, r0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b084      	sub	sp, #16
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800274e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002750:	f7ff feb6 	bl	80024c0 <HAL_GetTick>
 8002754:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800275c:	b2db      	uxtb	r3, r3
 800275e:	2b02      	cmp	r3, #2
 8002760:	d008      	beq.n	8002774 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2280      	movs	r2, #128	; 0x80
 8002766:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002770:	2301      	movs	r3, #1
 8002772:	e052      	b.n	800281a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	681a      	ldr	r2, [r3, #0]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f022 0216 	bic.w	r2, r2, #22
 8002782:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	695a      	ldr	r2, [r3, #20]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002792:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002798:	2b00      	cmp	r3, #0
 800279a:	d103      	bne.n	80027a4 <HAL_DMA_Abort+0x62>
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d007      	beq.n	80027b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	f022 0208 	bic.w	r2, r2, #8
 80027b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	681a      	ldr	r2, [r3, #0]
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	f022 0201 	bic.w	r2, r2, #1
 80027c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027c4:	e013      	b.n	80027ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80027c6:	f7ff fe7b 	bl	80024c0 <HAL_GetTick>
 80027ca:	4602      	mov	r2, r0
 80027cc:	68bb      	ldr	r3, [r7, #8]
 80027ce:	1ad3      	subs	r3, r2, r3
 80027d0:	2b05      	cmp	r3, #5
 80027d2:	d90c      	bls.n	80027ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	2220      	movs	r2, #32
 80027d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	2203      	movs	r2, #3
 80027de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	2200      	movs	r2, #0
 80027e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80027ea:	2303      	movs	r3, #3
 80027ec:	e015      	b.n	800281a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0301 	and.w	r3, r3, #1
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	d1e4      	bne.n	80027c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002800:	223f      	movs	r2, #63	; 0x3f
 8002802:	409a      	lsls	r2, r3
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2201      	movs	r2, #1
 800280c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002818:	2300      	movs	r3, #0
}
 800281a:	4618      	mov	r0, r3
 800281c:	3710      	adds	r7, #16
 800281e:	46bd      	mov	sp, r7
 8002820:	bd80      	pop	{r7, pc}

08002822 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002822:	b480      	push	{r7}
 8002824:	b083      	sub	sp, #12
 8002826:	af00      	add	r7, sp, #0
 8002828:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002830:	b2db      	uxtb	r3, r3
 8002832:	2b02      	cmp	r3, #2
 8002834:	d004      	beq.n	8002840 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	2280      	movs	r2, #128	; 0x80
 800283a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800283c:	2301      	movs	r3, #1
 800283e:	e00c      	b.n	800285a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	2205      	movs	r2, #5
 8002844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	681a      	ldr	r2, [r3, #0]
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f022 0201 	bic.w	r2, r2, #1
 8002856:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002858:	2300      	movs	r3, #0
}
 800285a:	4618      	mov	r0, r3
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]
  return hdma->State;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002874:	b2db      	uxtb	r3, r3
}
 8002876:	4618      	mov	r0, r3
 8002878:	370c      	adds	r7, #12
 800287a:	46bd      	mov	sp, r7
 800287c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002880:	4770      	bx	lr
	...

08002884 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2b00      	cmp	r3, #0
 8002890:	d101      	bne.n	8002896 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002892:	2301      	movs	r3, #1
 8002894:	e06a      	b.n	800296c <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800289c:	2b00      	cmp	r3, #0
 800289e:	d106      	bne.n	80028ae <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2223      	movs	r2, #35	; 0x23
 80028a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	f7fe fdaf 	bl	800140c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ae:	4b31      	ldr	r3, [pc, #196]	; (8002974 <HAL_ETH_Init+0xf0>)
 80028b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b2:	4a30      	ldr	r2, [pc, #192]	; (8002974 <HAL_ETH_Init+0xf0>)
 80028b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80028b8:	6453      	str	r3, [r2, #68]	; 0x44
 80028ba:	4b2e      	ldr	r3, [pc, #184]	; (8002974 <HAL_ETH_Init+0xf0>)
 80028bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80028c2:	60bb      	str	r3, [r7, #8]
 80028c4:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80028c6:	4b2c      	ldr	r3, [pc, #176]	; (8002978 <HAL_ETH_Init+0xf4>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4a2b      	ldr	r2, [pc, #172]	; (8002978 <HAL_ETH_Init+0xf4>)
 80028cc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80028d0:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80028d2:	4b29      	ldr	r3, [pc, #164]	; (8002978 <HAL_ETH_Init+0xf4>)
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	689b      	ldr	r3, [r3, #8]
 80028da:	4927      	ldr	r1, [pc, #156]	; (8002978 <HAL_ETH_Init+0xf4>)
 80028dc:	4313      	orrs	r3, r2
 80028de:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 80028e0:	4b25      	ldr	r3, [pc, #148]	; (8002978 <HAL_ETH_Init+0xf4>)
 80028e2:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6812      	ldr	r2, [r2, #0]
 80028f2:	f043 0301 	orr.w	r3, r3, #1
 80028f6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80028fa:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80028fc:	f7ff fde0 	bl	80024c0 <HAL_GetTick>
 8002900:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002902:	e011      	b.n	8002928 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002904:	f7ff fddc 	bl	80024c0 <HAL_GetTick>
 8002908:	4602      	mov	r2, r0
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	1ad3      	subs	r3, r2, r3
 800290e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002912:	d909      	bls.n	8002928 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2204      	movs	r2, #4
 8002918:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	22e0      	movs	r2, #224	; 0xe0
 8002920:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e021      	b.n	800296c <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	f003 0301 	and.w	r3, r3, #1
 8002936:	2b00      	cmp	r3, #0
 8002938:	d1e4      	bne.n	8002904 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 800293a:	6878      	ldr	r0, [r7, #4]
 800293c:	f000 f958 	bl	8002bf0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002940:	6878      	ldr	r0, [r7, #4]
 8002942:	f000 f9ff 	bl	8002d44 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f000 fa55 	bl	8002df6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	461a      	mov	r2, r3
 8002952:	2100      	movs	r1, #0
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 f9bd 	bl	8002cd4 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2200      	movs	r2, #0
 800295e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2210      	movs	r2, #16
 8002966:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800296a:	2300      	movs	r3, #0
}
 800296c:	4618      	mov	r0, r3
 800296e:	3710      	adds	r7, #16
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	40023800 	.word	0x40023800
 8002978:	40013800 	.word	0x40013800

0800297c <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b084      	sub	sp, #16
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800298e:	68fa      	ldr	r2, [r7, #12]
 8002990:	4b51      	ldr	r3, [pc, #324]	; (8002ad8 <ETH_SetMACConfig+0x15c>)
 8002992:	4013      	ands	r3, r2
 8002994:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002996:	683b      	ldr	r3, [r7, #0]
 8002998:	7c1b      	ldrb	r3, [r3, #16]
 800299a:	2b00      	cmp	r3, #0
 800299c:	d102      	bne.n	80029a4 <ETH_SetMACConfig+0x28>
 800299e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80029a2:	e000      	b.n	80029a6 <ETH_SetMACConfig+0x2a>
 80029a4:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	7c5b      	ldrb	r3, [r3, #17]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d102      	bne.n	80029b4 <ETH_SetMACConfig+0x38>
 80029ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80029b2:	e000      	b.n	80029b6 <ETH_SetMACConfig+0x3a>
 80029b4:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80029b6:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80029bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	7fdb      	ldrb	r3, [r3, #31]
 80029c2:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80029c4:	431a      	orrs	r2, r3
                        macconf->Speed |
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80029ca:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80029cc:	683a      	ldr	r2, [r7, #0]
 80029ce:	7f92      	ldrb	r2, [r2, #30]
 80029d0:	2a00      	cmp	r2, #0
 80029d2:	d102      	bne.n	80029da <ETH_SetMACConfig+0x5e>
 80029d4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80029d8:	e000      	b.n	80029dc <ETH_SetMACConfig+0x60>
 80029da:	2200      	movs	r2, #0
                        macconf->Speed |
 80029dc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	7f1b      	ldrb	r3, [r3, #28]
 80029e2:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80029e4:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80029ea:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80029ec:	683b      	ldr	r3, [r7, #0]
 80029ee:	791b      	ldrb	r3, [r3, #4]
 80029f0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80029f2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80029f4:	683a      	ldr	r2, [r7, #0]
 80029f6:	f892 2020 	ldrb.w	r2, [r2, #32]
 80029fa:	2a00      	cmp	r2, #0
 80029fc:	d102      	bne.n	8002a04 <ETH_SetMACConfig+0x88>
 80029fe:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002a02:	e000      	b.n	8002a06 <ETH_SetMACConfig+0x8a>
 8002a04:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002a06:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	7bdb      	ldrb	r3, [r3, #15]
 8002a0c:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002a0e:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8002a10:	683b      	ldr	r3, [r7, #0]
 8002a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002a14:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002a16:	683b      	ldr	r3, [r7, #0]
 8002a18:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002a1c:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	68fa      	ldr	r2, [r7, #12]
 8002a22:	4313      	orrs	r3, r2
 8002a24:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68fa      	ldr	r2, [r7, #12]
 8002a2c:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a36:	2001      	movs	r0, #1
 8002a38:	f7ff fd4e 	bl	80024d8 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	68fa      	ldr	r2, [r7, #12]
 8002a42:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002a4c:	68fa      	ldr	r2, [r7, #12]
 8002a4e:	f64f 7341 	movw	r3, #65345	; 0xff41
 8002a52:	4013      	ands	r3, r2
 8002a54:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002a5a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a5c:	683a      	ldr	r2, [r7, #0]
 8002a5e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002a62:	2a00      	cmp	r2, #0
 8002a64:	d101      	bne.n	8002a6a <ETH_SetMACConfig+0xee>
 8002a66:	2280      	movs	r2, #128	; 0x80
 8002a68:	e000      	b.n	8002a6c <ETH_SetMACConfig+0xf0>
 8002a6a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002a6c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8002a6e:	683b      	ldr	r3, [r7, #0]
 8002a70:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002a72:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a74:	683a      	ldr	r2, [r7, #0]
 8002a76:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002a7a:	2a01      	cmp	r2, #1
 8002a7c:	d101      	bne.n	8002a82 <ETH_SetMACConfig+0x106>
 8002a7e:	2208      	movs	r2, #8
 8002a80:	e000      	b.n	8002a84 <ETH_SetMACConfig+0x108>
 8002a82:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002a84:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002a8c:	2a01      	cmp	r2, #1
 8002a8e:	d101      	bne.n	8002a94 <ETH_SetMACConfig+0x118>
 8002a90:	2204      	movs	r2, #4
 8002a92:	e000      	b.n	8002a96 <ETH_SetMACConfig+0x11a>
 8002a94:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002a96:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8002a98:	683a      	ldr	r2, [r7, #0]
 8002a9a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8002a9e:	2a01      	cmp	r2, #1
 8002aa0:	d101      	bne.n	8002aa6 <ETH_SetMACConfig+0x12a>
 8002aa2:	2202      	movs	r2, #2
 8002aa4:	e000      	b.n	8002aa8 <ETH_SetMACConfig+0x12c>
 8002aa6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002aa8:	4313      	orrs	r3, r2
 8002aaa:	68fa      	ldr	r2, [r7, #12]
 8002aac:	4313      	orrs	r3, r2
 8002aae:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	68fa      	ldr	r2, [r7, #12]
 8002ab6:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699b      	ldr	r3, [r3, #24]
 8002abe:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	f7ff fd09 	bl	80024d8 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	619a      	str	r2, [r3, #24]
}
 8002ace:	bf00      	nop
 8002ad0:	3710      	adds	r7, #16
 8002ad2:	46bd      	mov	sp, r7
 8002ad4:	bd80      	pop	{r7, pc}
 8002ad6:	bf00      	nop
 8002ad8:	ff20810f 	.word	0xff20810f

08002adc <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002adc:	b580      	push	{r7, lr}
 8002ade:	b084      	sub	sp, #16
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	6078      	str	r0, [r7, #4]
 8002ae4:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002af2:	68fa      	ldr	r2, [r7, #12]
 8002af4:	4b3d      	ldr	r3, [pc, #244]	; (8002bec <ETH_SetDMAConfig+0x110>)
 8002af6:	4013      	ands	r3, r2
 8002af8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002afa:	683b      	ldr	r3, [r7, #0]
 8002afc:	7b1b      	ldrb	r3, [r3, #12]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d102      	bne.n	8002b08 <ETH_SetDMAConfig+0x2c>
 8002b02:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002b06:	e000      	b.n	8002b0a <ETH_SetDMAConfig+0x2e>
 8002b08:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002b0a:	683b      	ldr	r3, [r7, #0]
 8002b0c:	7b5b      	ldrb	r3, [r3, #13]
 8002b0e:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b10:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b12:	683a      	ldr	r2, [r7, #0]
 8002b14:	7f52      	ldrb	r2, [r2, #29]
 8002b16:	2a00      	cmp	r2, #0
 8002b18:	d102      	bne.n	8002b20 <ETH_SetDMAConfig+0x44>
 8002b1a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002b1e:	e000      	b.n	8002b22 <ETH_SetDMAConfig+0x46>
 8002b20:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002b22:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002b24:	683b      	ldr	r3, [r7, #0]
 8002b26:	7b9b      	ldrb	r3, [r3, #14]
 8002b28:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002b2a:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002b30:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002b32:	683b      	ldr	r3, [r7, #0]
 8002b34:	7f1b      	ldrb	r3, [r3, #28]
 8002b36:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002b38:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002b3a:	683b      	ldr	r3, [r7, #0]
 8002b3c:	7f9b      	ldrb	r3, [r3, #30]
 8002b3e:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002b40:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002b46:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002b4e:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002b50:	4313      	orrs	r3, r2
 8002b52:	68fa      	ldr	r2, [r7, #12]
 8002b54:	4313      	orrs	r3, r2
 8002b56:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b60:	461a      	mov	r2, r3
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b72:	2001      	movs	r0, #1
 8002b74:	f7ff fcb0 	bl	80024d8 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b80:	461a      	mov	r2, r3
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	791b      	ldrb	r3, [r3, #4]
 8002b8a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b90:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b92:	683b      	ldr	r3, [r7, #0]
 8002b94:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002b96:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002b98:	683b      	ldr	r3, [r7, #0]
 8002b9a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002b9c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002b9e:	683b      	ldr	r3, [r7, #0]
 8002ba0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002ba4:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002ba6:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bac:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002bae:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002bb4:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002bb6:	687a      	ldr	r2, [r7, #4]
 8002bb8:	6812      	ldr	r2, [r2, #0]
 8002bba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002bbe:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002bc2:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002bd0:	2001      	movs	r0, #1
 8002bd2:	f7ff fc81 	bl	80024d8 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002bde:	461a      	mov	r2, r3
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	6013      	str	r3, [r2, #0]
}
 8002be4:	bf00      	nop
 8002be6:	3710      	adds	r7, #16
 8002be8:	46bd      	mov	sp, r7
 8002bea:	bd80      	pop	{r7, pc}
 8002bec:	f8de3f23 	.word	0xf8de3f23

08002bf0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b0a6      	sub	sp, #152	; 0x98
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002bf8:	2301      	movs	r3, #1
 8002bfa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002c04:	2300      	movs	r3, #0
 8002c06:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002c0e:	2301      	movs	r3, #1
 8002c10:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002c14:	2300      	movs	r3, #0
 8002c16:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002c20:	2300      	movs	r3, #0
 8002c22:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002c26:	2300      	movs	r3, #0
 8002c28:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002c30:	2300      	movs	r3, #0
 8002c32:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002c36:	2300      	movs	r3, #0
 8002c38:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002c40:	2300      	movs	r3, #0
 8002c42:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002c46:	2300      	movs	r3, #0
 8002c48:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002c52:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002c56:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002c58:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002c5c:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002c64:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002c68:	4619      	mov	r1, r3
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	f7ff fe86 	bl	800297c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002c70:	2301      	movs	r3, #1
 8002c72:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002c74:	2301      	movs	r3, #1
 8002c76:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002c7e:	2301      	movs	r3, #1
 8002c80:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002c82:	2300      	movs	r3, #0
 8002c84:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002c86:	2300      	movs	r3, #0
 8002c88:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002c92:	2300      	movs	r3, #0
 8002c94:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002c96:	2301      	movs	r3, #1
 8002c98:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002ca0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002ca4:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002ca6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002caa:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002cac:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002cb0:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002cbc:	2300      	movs	r3, #0
 8002cbe:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002cc0:	f107 0308 	add.w	r3, r7, #8
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff ff08 	bl	8002adc <ETH_SetDMAConfig>
}
 8002ccc:	bf00      	nop
 8002cce:	3798      	adds	r7, #152	; 0x98
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b087      	sub	sp, #28
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	60f8      	str	r0, [r7, #12]
 8002cdc:	60b9      	str	r1, [r7, #8]
 8002cde:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3305      	adds	r3, #5
 8002ce4:	781b      	ldrb	r3, [r3, #0]
 8002ce6:	021b      	lsls	r3, r3, #8
 8002ce8:	687a      	ldr	r2, [r7, #4]
 8002cea:	3204      	adds	r2, #4
 8002cec:	7812      	ldrb	r2, [r2, #0]
 8002cee:	4313      	orrs	r3, r2
 8002cf0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002cf2:	68ba      	ldr	r2, [r7, #8]
 8002cf4:	4b11      	ldr	r3, [pc, #68]	; (8002d3c <ETH_MACAddressConfig+0x68>)
 8002cf6:	4413      	add	r3, r2
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	3303      	adds	r3, #3
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	061a      	lsls	r2, r3, #24
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	3302      	adds	r3, #2
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	041b      	lsls	r3, r3, #16
 8002d0e:	431a      	orrs	r2, r3
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	3301      	adds	r3, #1
 8002d14:	781b      	ldrb	r3, [r3, #0]
 8002d16:	021b      	lsls	r3, r3, #8
 8002d18:	4313      	orrs	r3, r2
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	7812      	ldrb	r2, [r2, #0]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002d22:	68ba      	ldr	r2, [r7, #8]
 8002d24:	4b06      	ldr	r3, [pc, #24]	; (8002d40 <ETH_MACAddressConfig+0x6c>)
 8002d26:	4413      	add	r3, r2
 8002d28:	461a      	mov	r2, r3
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	6013      	str	r3, [r2, #0]
}
 8002d2e:	bf00      	nop
 8002d30:	371c      	adds	r7, #28
 8002d32:	46bd      	mov	sp, r7
 8002d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d38:	4770      	bx	lr
 8002d3a:	bf00      	nop
 8002d3c:	40028040 	.word	0x40028040
 8002d40:	40028044 	.word	0x40028044

08002d44 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d44:	b480      	push	{r7}
 8002d46:	b085      	sub	sp, #20
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	60fb      	str	r3, [r7, #12]
 8002d50:	e03e      	b.n	8002dd0 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68d9      	ldr	r1, [r3, #12]
 8002d56:	68fa      	ldr	r2, [r7, #12]
 8002d58:	4613      	mov	r3, r2
 8002d5a:	009b      	lsls	r3, r3, #2
 8002d5c:	4413      	add	r3, r2
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	440b      	add	r3, r1
 8002d62:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002d64:	68bb      	ldr	r3, [r7, #8]
 8002d66:	2200      	movs	r2, #0
 8002d68:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002d6a:	68bb      	ldr	r3, [r7, #8]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	2200      	movs	r2, #0
 8002d74:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002d7c:	68b9      	ldr	r1, [r7, #8]
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	68fa      	ldr	r2, [r7, #12]
 8002d82:	3206      	adds	r2, #6
 8002d84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002d90:	68bb      	ldr	r3, [r7, #8]
 8002d92:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d80c      	bhi.n	8002db4 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	68d9      	ldr	r1, [r3, #12]
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	1c5a      	adds	r2, r3, #1
 8002da2:	4613      	mov	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	4413      	add	r3, r2
 8002da8:	00db      	lsls	r3, r3, #3
 8002daa:	440b      	add	r3, r1
 8002dac:	461a      	mov	r2, r3
 8002dae:	68bb      	ldr	r3, [r7, #8]
 8002db0:	60da      	str	r2, [r3, #12]
 8002db2:	e004      	b.n	8002dbe <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	68db      	ldr	r3, [r3, #12]
 8002db8:	461a      	mov	r2, r3
 8002dba:	68bb      	ldr	r3, [r7, #8]
 8002dbc:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002dbe:	68bb      	ldr	r3, [r7, #8]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002dc6:	68bb      	ldr	r3, [r7, #8]
 8002dc8:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	3301      	adds	r3, #1
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d9bd      	bls.n	8002d52 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2200      	movs	r2, #0
 8002dda:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002de8:	611a      	str	r2, [r3, #16]
}
 8002dea:	bf00      	nop
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b085      	sub	sp, #20
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002dfe:	2300      	movs	r3, #0
 8002e00:	60fb      	str	r3, [r7, #12]
 8002e02:	e046      	b.n	8002e92 <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	6919      	ldr	r1, [r3, #16]
 8002e08:	68fa      	ldr	r2, [r7, #12]
 8002e0a:	4613      	mov	r3, r2
 8002e0c:	009b      	lsls	r3, r3, #2
 8002e0e:	4413      	add	r3, r2
 8002e10:	00db      	lsls	r3, r3, #3
 8002e12:	440b      	add	r3, r1
 8002e14:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002e16:	68bb      	ldr	r3, [r7, #8]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002e1c:	68bb      	ldr	r3, [r7, #8]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002e22:	68bb      	ldr	r3, [r7, #8]
 8002e24:	2200      	movs	r2, #0
 8002e26:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002e28:	68bb      	ldr	r3, [r7, #8]
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002e2e:	68bb      	ldr	r3, [r7, #8]
 8002e30:	2200      	movs	r2, #0
 8002e32:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	2200      	movs	r2, #0
 8002e38:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002e40:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002e42:	68bb      	ldr	r3, [r7, #8]
 8002e44:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002e48:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002e4a:	68bb      	ldr	r3, [r7, #8]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002e52:	68bb      	ldr	r3, [r7, #8]
 8002e54:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002e56:	68b9      	ldr	r1, [r7, #8]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68fa      	ldr	r2, [r7, #12]
 8002e5c:	3212      	adds	r2, #18
 8002e5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	2b02      	cmp	r3, #2
 8002e66:	d80c      	bhi.n	8002e82 <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6919      	ldr	r1, [r3, #16]
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	1c5a      	adds	r2, r3, #1
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	00db      	lsls	r3, r3, #3
 8002e78:	440b      	add	r3, r1
 8002e7a:	461a      	mov	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	60da      	str	r2, [r3, #12]
 8002e80:	e004      	b.n	8002e8c <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	691b      	ldr	r3, [r3, #16]
 8002e86:	461a      	mov	r2, r3
 8002e88:	68bb      	ldr	r3, [r7, #8]
 8002e8a:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3301      	adds	r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b03      	cmp	r3, #3
 8002e96:	d9b5      	bls.n	8002e04 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2200      	movs	r2, #0
 8002ea8:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2200      	movs	r2, #0
 8002eae:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691a      	ldr	r2, [r3, #16]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ec2:	60da      	str	r2, [r3, #12]
}
 8002ec4:	bf00      	nop
 8002ec6:	3714      	adds	r7, #20
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b089      	sub	sp, #36	; 0x24
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
 8002ed8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002eda:	2300      	movs	r3, #0
 8002edc:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002ede:	2300      	movs	r3, #0
 8002ee0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002eea:	2300      	movs	r3, #0
 8002eec:	61fb      	str	r3, [r7, #28]
 8002eee:	e175      	b.n	80031dc <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	697a      	ldr	r2, [r7, #20]
 8002f00:	4013      	ands	r3, r2
 8002f02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f04:	693a      	ldr	r2, [r7, #16]
 8002f06:	697b      	ldr	r3, [r7, #20]
 8002f08:	429a      	cmp	r2, r3
 8002f0a:	f040 8164 	bne.w	80031d6 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f0e:	683b      	ldr	r3, [r7, #0]
 8002f10:	685b      	ldr	r3, [r3, #4]
 8002f12:	f003 0303 	and.w	r3, r3, #3
 8002f16:	2b01      	cmp	r3, #1
 8002f18:	d005      	beq.n	8002f26 <HAL_GPIO_Init+0x56>
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	f003 0303 	and.w	r3, r3, #3
 8002f22:	2b02      	cmp	r3, #2
 8002f24:	d130      	bne.n	8002f88 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	689b      	ldr	r3, [r3, #8]
 8002f2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	005b      	lsls	r3, r3, #1
 8002f30:	2203      	movs	r2, #3
 8002f32:	fa02 f303 	lsl.w	r3, r2, r3
 8002f36:	43db      	mvns	r3, r3
 8002f38:	69ba      	ldr	r2, [r7, #24]
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	68da      	ldr	r2, [r3, #12]
 8002f42:	69fb      	ldr	r3, [r7, #28]
 8002f44:	005b      	lsls	r3, r3, #1
 8002f46:	fa02 f303 	lsl.w	r3, r2, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4313      	orrs	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	69ba      	ldr	r2, [r7, #24]
 8002f54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002f5c:	2201      	movs	r2, #1
 8002f5e:	69fb      	ldr	r3, [r7, #28]
 8002f60:	fa02 f303 	lsl.w	r3, r2, r3
 8002f64:	43db      	mvns	r3, r3
 8002f66:	69ba      	ldr	r2, [r7, #24]
 8002f68:	4013      	ands	r3, r2
 8002f6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f6c:	683b      	ldr	r3, [r7, #0]
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	091b      	lsrs	r3, r3, #4
 8002f72:	f003 0201 	and.w	r2, r3, #1
 8002f76:	69fb      	ldr	r3, [r7, #28]
 8002f78:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7c:	69ba      	ldr	r2, [r7, #24]
 8002f7e:	4313      	orrs	r3, r2
 8002f80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	69ba      	ldr	r2, [r7, #24]
 8002f86:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	f003 0303 	and.w	r3, r3, #3
 8002f90:	2b03      	cmp	r3, #3
 8002f92:	d017      	beq.n	8002fc4 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	68db      	ldr	r3, [r3, #12]
 8002f98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	005b      	lsls	r3, r3, #1
 8002f9e:	2203      	movs	r2, #3
 8002fa0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa4:	43db      	mvns	r3, r3
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4013      	ands	r3, r2
 8002faa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002fac:	683b      	ldr	r3, [r7, #0]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	69fb      	ldr	r3, [r7, #28]
 8002fb2:	005b      	lsls	r3, r3, #1
 8002fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4313      	orrs	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	69ba      	ldr	r2, [r7, #24]
 8002fc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	685b      	ldr	r3, [r3, #4]
 8002fc8:	f003 0303 	and.w	r3, r3, #3
 8002fcc:	2b02      	cmp	r3, #2
 8002fce:	d123      	bne.n	8003018 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002fd0:	69fb      	ldr	r3, [r7, #28]
 8002fd2:	08da      	lsrs	r2, r3, #3
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	3208      	adds	r2, #8
 8002fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002fdc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	f003 0307 	and.w	r3, r3, #7
 8002fe4:	009b      	lsls	r3, r3, #2
 8002fe6:	220f      	movs	r2, #15
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	691a      	ldr	r2, [r3, #16]
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	f003 0307 	and.w	r3, r3, #7
 8002ffe:	009b      	lsls	r3, r3, #2
 8003000:	fa02 f303 	lsl.w	r3, r2, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4313      	orrs	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800300a:	69fb      	ldr	r3, [r7, #28]
 800300c:	08da      	lsrs	r2, r3, #3
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	3208      	adds	r2, #8
 8003012:	69b9      	ldr	r1, [r7, #24]
 8003014:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	005b      	lsls	r3, r3, #1
 8003022:	2203      	movs	r2, #3
 8003024:	fa02 f303 	lsl.w	r3, r2, r3
 8003028:	43db      	mvns	r3, r3
 800302a:	69ba      	ldr	r2, [r7, #24]
 800302c:	4013      	ands	r3, r2
 800302e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	685b      	ldr	r3, [r3, #4]
 8003034:	f003 0203 	and.w	r2, r3, #3
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	005b      	lsls	r3, r3, #1
 800303c:	fa02 f303 	lsl.w	r3, r2, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4313      	orrs	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	69ba      	ldr	r2, [r7, #24]
 800304a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800304c:	683b      	ldr	r3, [r7, #0]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003054:	2b00      	cmp	r3, #0
 8003056:	f000 80be 	beq.w	80031d6 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800305a:	4b66      	ldr	r3, [pc, #408]	; (80031f4 <HAL_GPIO_Init+0x324>)
 800305c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800305e:	4a65      	ldr	r2, [pc, #404]	; (80031f4 <HAL_GPIO_Init+0x324>)
 8003060:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003064:	6453      	str	r3, [r2, #68]	; 0x44
 8003066:	4b63      	ldr	r3, [pc, #396]	; (80031f4 <HAL_GPIO_Init+0x324>)
 8003068:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800306e:	60fb      	str	r3, [r7, #12]
 8003070:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8003072:	4a61      	ldr	r2, [pc, #388]	; (80031f8 <HAL_GPIO_Init+0x328>)
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	089b      	lsrs	r3, r3, #2
 8003078:	3302      	adds	r3, #2
 800307a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800307e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f003 0303 	and.w	r3, r3, #3
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	220f      	movs	r2, #15
 800308a:	fa02 f303 	lsl.w	r3, r2, r3
 800308e:	43db      	mvns	r3, r3
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	4013      	ands	r3, r2
 8003094:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	4a58      	ldr	r2, [pc, #352]	; (80031fc <HAL_GPIO_Init+0x32c>)
 800309a:	4293      	cmp	r3, r2
 800309c:	d037      	beq.n	800310e <HAL_GPIO_Init+0x23e>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	4a57      	ldr	r2, [pc, #348]	; (8003200 <HAL_GPIO_Init+0x330>)
 80030a2:	4293      	cmp	r3, r2
 80030a4:	d031      	beq.n	800310a <HAL_GPIO_Init+0x23a>
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	4a56      	ldr	r2, [pc, #344]	; (8003204 <HAL_GPIO_Init+0x334>)
 80030aa:	4293      	cmp	r3, r2
 80030ac:	d02b      	beq.n	8003106 <HAL_GPIO_Init+0x236>
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	4a55      	ldr	r2, [pc, #340]	; (8003208 <HAL_GPIO_Init+0x338>)
 80030b2:	4293      	cmp	r3, r2
 80030b4:	d025      	beq.n	8003102 <HAL_GPIO_Init+0x232>
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	4a54      	ldr	r2, [pc, #336]	; (800320c <HAL_GPIO_Init+0x33c>)
 80030ba:	4293      	cmp	r3, r2
 80030bc:	d01f      	beq.n	80030fe <HAL_GPIO_Init+0x22e>
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	4a53      	ldr	r2, [pc, #332]	; (8003210 <HAL_GPIO_Init+0x340>)
 80030c2:	4293      	cmp	r3, r2
 80030c4:	d019      	beq.n	80030fa <HAL_GPIO_Init+0x22a>
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	4a52      	ldr	r2, [pc, #328]	; (8003214 <HAL_GPIO_Init+0x344>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d013      	beq.n	80030f6 <HAL_GPIO_Init+0x226>
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	4a51      	ldr	r2, [pc, #324]	; (8003218 <HAL_GPIO_Init+0x348>)
 80030d2:	4293      	cmp	r3, r2
 80030d4:	d00d      	beq.n	80030f2 <HAL_GPIO_Init+0x222>
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	4a50      	ldr	r2, [pc, #320]	; (800321c <HAL_GPIO_Init+0x34c>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d007      	beq.n	80030ee <HAL_GPIO_Init+0x21e>
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	4a4f      	ldr	r2, [pc, #316]	; (8003220 <HAL_GPIO_Init+0x350>)
 80030e2:	4293      	cmp	r3, r2
 80030e4:	d101      	bne.n	80030ea <HAL_GPIO_Init+0x21a>
 80030e6:	2309      	movs	r3, #9
 80030e8:	e012      	b.n	8003110 <HAL_GPIO_Init+0x240>
 80030ea:	230a      	movs	r3, #10
 80030ec:	e010      	b.n	8003110 <HAL_GPIO_Init+0x240>
 80030ee:	2308      	movs	r3, #8
 80030f0:	e00e      	b.n	8003110 <HAL_GPIO_Init+0x240>
 80030f2:	2307      	movs	r3, #7
 80030f4:	e00c      	b.n	8003110 <HAL_GPIO_Init+0x240>
 80030f6:	2306      	movs	r3, #6
 80030f8:	e00a      	b.n	8003110 <HAL_GPIO_Init+0x240>
 80030fa:	2305      	movs	r3, #5
 80030fc:	e008      	b.n	8003110 <HAL_GPIO_Init+0x240>
 80030fe:	2304      	movs	r3, #4
 8003100:	e006      	b.n	8003110 <HAL_GPIO_Init+0x240>
 8003102:	2303      	movs	r3, #3
 8003104:	e004      	b.n	8003110 <HAL_GPIO_Init+0x240>
 8003106:	2302      	movs	r3, #2
 8003108:	e002      	b.n	8003110 <HAL_GPIO_Init+0x240>
 800310a:	2301      	movs	r3, #1
 800310c:	e000      	b.n	8003110 <HAL_GPIO_Init+0x240>
 800310e:	2300      	movs	r3, #0
 8003110:	69fa      	ldr	r2, [r7, #28]
 8003112:	f002 0203 	and.w	r2, r2, #3
 8003116:	0092      	lsls	r2, r2, #2
 8003118:	4093      	lsls	r3, r2
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4313      	orrs	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8003120:	4935      	ldr	r1, [pc, #212]	; (80031f8 <HAL_GPIO_Init+0x328>)
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	089b      	lsrs	r3, r3, #2
 8003126:	3302      	adds	r3, #2
 8003128:	69ba      	ldr	r2, [r7, #24]
 800312a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800312e:	4b3d      	ldr	r3, [pc, #244]	; (8003224 <HAL_GPIO_Init+0x354>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003134:	693b      	ldr	r3, [r7, #16]
 8003136:	43db      	mvns	r3, r3
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	4013      	ands	r3, r2
 800313c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003146:	2b00      	cmp	r3, #0
 8003148:	d003      	beq.n	8003152 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800314a:	69ba      	ldr	r2, [r7, #24]
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	4313      	orrs	r3, r2
 8003150:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003152:	4a34      	ldr	r2, [pc, #208]	; (8003224 <HAL_GPIO_Init+0x354>)
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003158:	4b32      	ldr	r3, [pc, #200]	; (8003224 <HAL_GPIO_Init+0x354>)
 800315a:	68db      	ldr	r3, [r3, #12]
 800315c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800315e:	693b      	ldr	r3, [r7, #16]
 8003160:	43db      	mvns	r3, r3
 8003162:	69ba      	ldr	r2, [r7, #24]
 8003164:	4013      	ands	r3, r2
 8003166:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003170:	2b00      	cmp	r3, #0
 8003172:	d003      	beq.n	800317c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	693b      	ldr	r3, [r7, #16]
 8003178:	4313      	orrs	r3, r2
 800317a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800317c:	4a29      	ldr	r2, [pc, #164]	; (8003224 <HAL_GPIO_Init+0x354>)
 800317e:	69bb      	ldr	r3, [r7, #24]
 8003180:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003182:	4b28      	ldr	r3, [pc, #160]	; (8003224 <HAL_GPIO_Init+0x354>)
 8003184:	685b      	ldr	r3, [r3, #4]
 8003186:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	43db      	mvns	r3, r3
 800318c:	69ba      	ldr	r2, [r7, #24]
 800318e:	4013      	ands	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d003      	beq.n	80031a6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800319e:	69ba      	ldr	r2, [r7, #24]
 80031a0:	693b      	ldr	r3, [r7, #16]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031a6:	4a1f      	ldr	r2, [pc, #124]	; (8003224 <HAL_GPIO_Init+0x354>)
 80031a8:	69bb      	ldr	r3, [r7, #24]
 80031aa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031ac:	4b1d      	ldr	r3, [pc, #116]	; (8003224 <HAL_GPIO_Init+0x354>)
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b2:	693b      	ldr	r3, [r7, #16]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	69ba      	ldr	r2, [r7, #24]
 80031b8:	4013      	ands	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d003      	beq.n	80031d0 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80031c8:	69ba      	ldr	r2, [r7, #24]
 80031ca:	693b      	ldr	r3, [r7, #16]
 80031cc:	4313      	orrs	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031d0:	4a14      	ldr	r2, [pc, #80]	; (8003224 <HAL_GPIO_Init+0x354>)
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	3301      	adds	r3, #1
 80031da:	61fb      	str	r3, [r7, #28]
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	2b0f      	cmp	r3, #15
 80031e0:	f67f ae86 	bls.w	8002ef0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80031e4:	bf00      	nop
 80031e6:	bf00      	nop
 80031e8:	3724      	adds	r7, #36	; 0x24
 80031ea:	46bd      	mov	sp, r7
 80031ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f0:	4770      	bx	lr
 80031f2:	bf00      	nop
 80031f4:	40023800 	.word	0x40023800
 80031f8:	40013800 	.word	0x40013800
 80031fc:	40020000 	.word	0x40020000
 8003200:	40020400 	.word	0x40020400
 8003204:	40020800 	.word	0x40020800
 8003208:	40020c00 	.word	0x40020c00
 800320c:	40021000 	.word	0x40021000
 8003210:	40021400 	.word	0x40021400
 8003214:	40021800 	.word	0x40021800
 8003218:	40021c00 	.word	0x40021c00
 800321c:	40022000 	.word	0x40022000
 8003220:	40022400 	.word	0x40022400
 8003224:	40013c00 	.word	0x40013c00

08003228 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	6078      	str	r0, [r7, #4]
 8003230:	460b      	mov	r3, r1
 8003232:	807b      	strh	r3, [r7, #2]
 8003234:	4613      	mov	r3, r2
 8003236:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003238:	787b      	ldrb	r3, [r7, #1]
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800323e:	887a      	ldrh	r2, [r7, #2]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003244:	e003      	b.n	800324e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003246:	887b      	ldrh	r3, [r7, #2]
 8003248:	041a      	lsls	r2, r3, #16
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	619a      	str	r2, [r3, #24]
}
 800324e:	bf00      	nop
 8003250:	370c      	adds	r7, #12
 8003252:	46bd      	mov	sp, r7
 8003254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003258:	4770      	bx	lr
	...

0800325c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b082      	sub	sp, #8
 8003260:	af00      	add	r7, sp, #0
 8003262:	4603      	mov	r3, r0
 8003264:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003266:	4b08      	ldr	r3, [pc, #32]	; (8003288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003268:	695a      	ldr	r2, [r3, #20]
 800326a:	88fb      	ldrh	r3, [r7, #6]
 800326c:	4013      	ands	r3, r2
 800326e:	2b00      	cmp	r3, #0
 8003270:	d006      	beq.n	8003280 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003272:	4a05      	ldr	r2, [pc, #20]	; (8003288 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003274:	88fb      	ldrh	r3, [r7, #6]
 8003276:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003278:	88fb      	ldrh	r3, [r7, #6]
 800327a:	4618      	mov	r0, r3
 800327c:	f7fe f80e 	bl	800129c <HAL_GPIO_EXTI_Callback>
  }
}
 8003280:	bf00      	nop
 8003282:	3708      	adds	r7, #8
 8003284:	46bd      	mov	sp, r7
 8003286:	bd80      	pop	{r7, pc}
 8003288:	40013c00 	.word	0x40013c00

0800328c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b082      	sub	sp, #8
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	2b00      	cmp	r3, #0
 8003298:	d101      	bne.n	800329e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800329a:	2301      	movs	r3, #1
 800329c:	e07f      	b.n	800339e <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d106      	bne.n	80032b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	2200      	movs	r2, #0
 80032ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032b2:	6878      	ldr	r0, [r7, #4]
 80032b4:	f7fe fa76 	bl	80017a4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2224      	movs	r2, #36	; 0x24
 80032bc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	681a      	ldr	r2, [r3, #0]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f022 0201 	bic.w	r2, r2, #1
 80032ce:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80032dc:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	689a      	ldr	r2, [r3, #8]
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032ec:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d107      	bne.n	8003306 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	689a      	ldr	r2, [r3, #8]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	e006      	b.n	8003314 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	689a      	ldr	r2, [r3, #8]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003312:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	68db      	ldr	r3, [r3, #12]
 8003318:	2b02      	cmp	r3, #2
 800331a:	d104      	bne.n	8003326 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003324:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	6859      	ldr	r1, [r3, #4]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681a      	ldr	r2, [r3, #0]
 8003330:	4b1d      	ldr	r3, [pc, #116]	; (80033a8 <HAL_I2C_Init+0x11c>)
 8003332:	430b      	orrs	r3, r1
 8003334:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68da      	ldr	r2, [r3, #12]
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003344:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	691a      	ldr	r2, [r3, #16]
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	695b      	ldr	r3, [r3, #20]
 800334e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	699b      	ldr	r3, [r3, #24]
 8003356:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	69d9      	ldr	r1, [r3, #28]
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1a      	ldr	r2, [r3, #32]
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	430a      	orrs	r2, r1
 800336e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	681a      	ldr	r2, [r3, #0]
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f042 0201 	orr.w	r2, r2, #1
 800337e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2200      	movs	r2, #0
 8003384:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	2220      	movs	r2, #32
 800338a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800339c:	2300      	movs	r3, #0
}
 800339e:	4618      	mov	r0, r3
 80033a0:	3708      	adds	r7, #8
 80033a2:	46bd      	mov	sp, r7
 80033a4:	bd80      	pop	{r7, pc}
 80033a6:	bf00      	nop
 80033a8:	02008000 	.word	0x02008000

080033ac <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b088      	sub	sp, #32
 80033b0:	af02      	add	r7, sp, #8
 80033b2:	60f8      	str	r0, [r7, #12]
 80033b4:	4608      	mov	r0, r1
 80033b6:	4611      	mov	r1, r2
 80033b8:	461a      	mov	r2, r3
 80033ba:	4603      	mov	r3, r0
 80033bc:	817b      	strh	r3, [r7, #10]
 80033be:	460b      	mov	r3, r1
 80033c0:	813b      	strh	r3, [r7, #8]
 80033c2:	4613      	mov	r3, r2
 80033c4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	2b20      	cmp	r3, #32
 80033d0:	f040 80fd 	bne.w	80035ce <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 80033d4:	6a3b      	ldr	r3, [r7, #32]
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <HAL_I2C_Mem_Read+0x34>
 80033da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d105      	bne.n	80033ec <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80033e6:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0f1      	b.n	80035d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80033f2:	2b01      	cmp	r3, #1
 80033f4:	d101      	bne.n	80033fa <HAL_I2C_Mem_Read+0x4e>
 80033f6:	2302      	movs	r3, #2
 80033f8:	e0ea      	b.n	80035d0 <HAL_I2C_Mem_Read+0x224>
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2201      	movs	r2, #1
 80033fe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003402:	f7ff f85d 	bl	80024c0 <HAL_GetTick>
 8003406:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8003408:	697b      	ldr	r3, [r7, #20]
 800340a:	9300      	str	r3, [sp, #0]
 800340c:	2319      	movs	r3, #25
 800340e:	2201      	movs	r2, #1
 8003410:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003414:	68f8      	ldr	r0, [r7, #12]
 8003416:	f000 fe58 	bl	80040ca <I2C_WaitOnFlagUntilTimeout>
 800341a:	4603      	mov	r3, r0
 800341c:	2b00      	cmp	r3, #0
 800341e:	d001      	beq.n	8003424 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003420:	2301      	movs	r3, #1
 8003422:	e0d5      	b.n	80035d0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2222      	movs	r2, #34	; 0x22
 8003428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2240      	movs	r2, #64	; 0x40
 8003430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	2200      	movs	r2, #0
 8003438:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	6a3a      	ldr	r2, [r7, #32]
 800343e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003444:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	2200      	movs	r2, #0
 800344a:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800344c:	88f8      	ldrh	r0, [r7, #6]
 800344e:	893a      	ldrh	r2, [r7, #8]
 8003450:	8979      	ldrh	r1, [r7, #10]
 8003452:	697b      	ldr	r3, [r7, #20]
 8003454:	9301      	str	r3, [sp, #4]
 8003456:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003458:	9300      	str	r3, [sp, #0]
 800345a:	4603      	mov	r3, r0
 800345c:	68f8      	ldr	r0, [r7, #12]
 800345e:	f000 fa6d 	bl	800393c <I2C_RequestMemoryRead>
 8003462:	4603      	mov	r3, r0
 8003464:	2b00      	cmp	r3, #0
 8003466:	d005      	beq.n	8003474 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2200      	movs	r2, #0
 800346c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e0ad      	b.n	80035d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003478:	b29b      	uxth	r3, r3
 800347a:	2bff      	cmp	r3, #255	; 0xff
 800347c:	d90e      	bls.n	800349c <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	22ff      	movs	r2, #255	; 0xff
 8003482:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003488:	b2da      	uxtb	r2, r3
 800348a:	8979      	ldrh	r1, [r7, #10]
 800348c:	4b52      	ldr	r3, [pc, #328]	; (80035d8 <HAL_I2C_Mem_Read+0x22c>)
 800348e:	9300      	str	r3, [sp, #0]
 8003490:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003494:	68f8      	ldr	r0, [r7, #12]
 8003496:	f000 ffb5 	bl	8004404 <I2C_TransferConfig>
 800349a:	e00f      	b.n	80034bc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034aa:	b2da      	uxtb	r2, r3
 80034ac:	8979      	ldrh	r1, [r7, #10]
 80034ae:	4b4a      	ldr	r3, [pc, #296]	; (80035d8 <HAL_I2C_Mem_Read+0x22c>)
 80034b0:	9300      	str	r3, [sp, #0]
 80034b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034b6:	68f8      	ldr	r0, [r7, #12]
 80034b8:	f000 ffa4 	bl	8004404 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	9300      	str	r3, [sp, #0]
 80034c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034c2:	2200      	movs	r2, #0
 80034c4:	2104      	movs	r1, #4
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 fdff 	bl	80040ca <I2C_WaitOnFlagUntilTimeout>
 80034cc:	4603      	mov	r3, r0
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d001      	beq.n	80034d6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e07c      	b.n	80035d0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e0:	b2d2      	uxtb	r2, r2
 80034e2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e8:	1c5a      	adds	r2, r3, #1
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034f2:	3b01      	subs	r3, #1
 80034f4:	b29a      	uxth	r2, r3
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800350c:	b29b      	uxth	r3, r3
 800350e:	2b00      	cmp	r3, #0
 8003510:	d034      	beq.n	800357c <HAL_I2C_Mem_Read+0x1d0>
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003516:	2b00      	cmp	r3, #0
 8003518:	d130      	bne.n	800357c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800351a:	697b      	ldr	r3, [r7, #20]
 800351c:	9300      	str	r3, [sp, #0]
 800351e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003520:	2200      	movs	r2, #0
 8003522:	2180      	movs	r1, #128	; 0x80
 8003524:	68f8      	ldr	r0, [r7, #12]
 8003526:	f000 fdd0 	bl	80040ca <I2C_WaitOnFlagUntilTimeout>
 800352a:	4603      	mov	r3, r0
 800352c:	2b00      	cmp	r3, #0
 800352e:	d001      	beq.n	8003534 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e04d      	b.n	80035d0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003538:	b29b      	uxth	r3, r3
 800353a:	2bff      	cmp	r3, #255	; 0xff
 800353c:	d90e      	bls.n	800355c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	22ff      	movs	r2, #255	; 0xff
 8003542:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003548:	b2da      	uxtb	r2, r3
 800354a:	8979      	ldrh	r1, [r7, #10]
 800354c:	2300      	movs	r3, #0
 800354e:	9300      	str	r3, [sp, #0]
 8003550:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003554:	68f8      	ldr	r0, [r7, #12]
 8003556:	f000 ff55 	bl	8004404 <I2C_TransferConfig>
 800355a:	e00f      	b.n	800357c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003560:	b29a      	uxth	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800356a:	b2da      	uxtb	r2, r3
 800356c:	8979      	ldrh	r1, [r7, #10]
 800356e:	2300      	movs	r3, #0
 8003570:	9300      	str	r3, [sp, #0]
 8003572:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003576:	68f8      	ldr	r0, [r7, #12]
 8003578:	f000 ff44 	bl	8004404 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003580:	b29b      	uxth	r3, r3
 8003582:	2b00      	cmp	r3, #0
 8003584:	d19a      	bne.n	80034bc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003586:	697a      	ldr	r2, [r7, #20]
 8003588:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800358a:	68f8      	ldr	r0, [r7, #12]
 800358c:	f000 fe1d 	bl	80041ca <I2C_WaitOnSTOPFlagUntilTimeout>
 8003590:	4603      	mov	r3, r0
 8003592:	2b00      	cmp	r3, #0
 8003594:	d001      	beq.n	800359a <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e01a      	b.n	80035d0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	2220      	movs	r2, #32
 80035a0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	6859      	ldr	r1, [r3, #4]
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681a      	ldr	r2, [r3, #0]
 80035ac:	4b0b      	ldr	r3, [pc, #44]	; (80035dc <HAL_I2C_Mem_Read+0x230>)
 80035ae:	400b      	ands	r3, r1
 80035b0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	2220      	movs	r2, #32
 80035b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	2200      	movs	r2, #0
 80035be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	2200      	movs	r2, #0
 80035c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80035ca:	2300      	movs	r3, #0
 80035cc:	e000      	b.n	80035d0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 80035ce:	2302      	movs	r3, #2
  }
}
 80035d0:	4618      	mov	r0, r3
 80035d2:	3718      	adds	r7, #24
 80035d4:	46bd      	mov	sp, r7
 80035d6:	bd80      	pop	{r7, pc}
 80035d8:	80002400 	.word	0x80002400
 80035dc:	fe00e800 	.word	0xfe00e800

080035e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b084      	sub	sp, #16
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	699b      	ldr	r3, [r3, #24]
 80035ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d005      	beq.n	800360c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003604:	68ba      	ldr	r2, [r7, #8]
 8003606:	68f9      	ldr	r1, [r7, #12]
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	4798      	blx	r3
  }
}
 800360c:	bf00      	nop
 800360e:	3710      	adds	r7, #16
 8003610:	46bd      	mov	sp, r7
 8003612:	bd80      	pop	{r7, pc}

08003614 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b086      	sub	sp, #24
 8003618:	af00      	add	r7, sp, #0
 800361a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	699b      	ldr	r3, [r3, #24]
 8003622:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800362c:	697b      	ldr	r3, [r7, #20]
 800362e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003632:	2b00      	cmp	r3, #0
 8003634:	d00f      	beq.n	8003656 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800363c:	2b00      	cmp	r3, #0
 800363e:	d00a      	beq.n	8003656 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003644:	f043 0201 	orr.w	r2, r3, #1
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003654:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00f      	beq.n	8003680 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8003660:	693b      	ldr	r3, [r7, #16]
 8003662:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800366e:	f043 0208 	orr.w	r2, r3, #8
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800367e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003680:	697b      	ldr	r3, [r7, #20]
 8003682:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003686:	2b00      	cmp	r3, #0
 8003688:	d00f      	beq.n	80036aa <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800368a:	693b      	ldr	r3, [r7, #16]
 800368c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8003690:	2b00      	cmp	r3, #0
 8003692:	d00a      	beq.n	80036aa <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003698:	f043 0202 	orr.w	r2, r3, #2
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80036a8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036ae:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	f003 030b 	and.w	r3, r3, #11
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d003      	beq.n	80036c2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80036ba:	68f9      	ldr	r1, [r7, #12]
 80036bc:	6878      	ldr	r0, [r7, #4]
 80036be:	f000 fbcb 	bl	8003e58 <I2C_ITError>
  }
}
 80036c2:	bf00      	nop
 80036c4:	3718      	adds	r7, #24
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}

080036ca <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036ca:	b480      	push	{r7}
 80036cc:	b083      	sub	sp, #12
 80036ce:	af00      	add	r7, sp, #0
 80036d0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80036d2:	bf00      	nop
 80036d4:	370c      	adds	r7, #12
 80036d6:	46bd      	mov	sp, r7
 80036d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036dc:	4770      	bx	lr

080036de <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80036de:	b480      	push	{r7}
 80036e0:	b083      	sub	sp, #12
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80036e6:	bf00      	nop
 80036e8:	370c      	adds	r7, #12
 80036ea:	46bd      	mov	sp, r7
 80036ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f0:	4770      	bx	lr

080036f2 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80036f2:	b480      	push	{r7}
 80036f4:	b083      	sub	sp, #12
 80036f6:	af00      	add	r7, sp, #0
 80036f8:	6078      	str	r0, [r7, #4]
 80036fa:	460b      	mov	r3, r1
 80036fc:	70fb      	strb	r3, [r7, #3]
 80036fe:	4613      	mov	r3, r2
 8003700:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003702:	bf00      	nop
 8003704:	370c      	adds	r7, #12
 8003706:	46bd      	mov	sp, r7
 8003708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800370c:	4770      	bx	lr

0800370e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800370e:	b480      	push	{r7}
 8003710:	b083      	sub	sp, #12
 8003712:	af00      	add	r7, sp, #0
 8003714:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8003716:	bf00      	nop
 8003718:	370c      	adds	r7, #12
 800371a:	46bd      	mov	sp, r7
 800371c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003720:	4770      	bx	lr

08003722 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003722:	b480      	push	{r7}
 8003724:	b083      	sub	sp, #12
 8003726:	af00      	add	r7, sp, #0
 8003728:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800372a:	bf00      	nop
 800372c:	370c      	adds	r7, #12
 800372e:	46bd      	mov	sp, r7
 8003730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003734:	4770      	bx	lr

08003736 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003736:	b480      	push	{r7}
 8003738:	b083      	sub	sp, #12
 800373a:	af00      	add	r7, sp, #0
 800373c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800373e:	bf00      	nop
 8003740:	370c      	adds	r7, #12
 8003742:	46bd      	mov	sp, r7
 8003744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003748:	4770      	bx	lr

0800374a <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800374a:	b580      	push	{r7, lr}
 800374c:	b086      	sub	sp, #24
 800374e:	af00      	add	r7, sp, #0
 8003750:	60f8      	str	r0, [r7, #12]
 8003752:	60b9      	str	r1, [r7, #8]
 8003754:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800375a:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800375c:	68bb      	ldr	r3, [r7, #8]
 800375e:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003766:	2b01      	cmp	r3, #1
 8003768:	d101      	bne.n	800376e <I2C_Slave_ISR_IT+0x24>
 800376a:	2302      	movs	r3, #2
 800376c:	e0e1      	b.n	8003932 <I2C_Slave_ISR_IT+0x1e8>
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	2201      	movs	r2, #1
 8003772:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	f003 0320 	and.w	r3, r3, #32
 800377c:	2b00      	cmp	r3, #0
 800377e:	d008      	beq.n	8003792 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8003786:	2b00      	cmp	r3, #0
 8003788:	d003      	beq.n	8003792 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800378a:	6939      	ldr	r1, [r7, #16]
 800378c:	68f8      	ldr	r0, [r7, #12]
 800378e:	f000 fa09 	bl	8003ba4 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003792:	693b      	ldr	r3, [r7, #16]
 8003794:	f003 0310 	and.w	r3, r3, #16
 8003798:	2b00      	cmp	r3, #0
 800379a:	d04b      	beq.n	8003834 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d046      	beq.n	8003834 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037aa:	b29b      	uxth	r3, r3
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d128      	bne.n	8003802 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037b6:	b2db      	uxtb	r3, r3
 80037b8:	2b28      	cmp	r3, #40	; 0x28
 80037ba:	d108      	bne.n	80037ce <I2C_Slave_ISR_IT+0x84>
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80037c2:	d104      	bne.n	80037ce <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 80037c4:	6939      	ldr	r1, [r7, #16]
 80037c6:	68f8      	ldr	r0, [r7, #12]
 80037c8:	f000 faf2 	bl	8003db0 <I2C_ITListenCplt>
 80037cc:	e031      	b.n	8003832 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80037d4:	b2db      	uxtb	r3, r3
 80037d6:	2b29      	cmp	r3, #41	; 0x29
 80037d8:	d10e      	bne.n	80037f8 <I2C_Slave_ISR_IT+0xae>
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037e0:	d00a      	beq.n	80037f8 <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2210      	movs	r2, #16
 80037e8:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 80037ea:	68f8      	ldr	r0, [r7, #12]
 80037ec:	f000 fc2b 	bl	8004046 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80037f0:	68f8      	ldr	r0, [r7, #12]
 80037f2:	f000 f97b 	bl	8003aec <I2C_ITSlaveSeqCplt>
 80037f6:	e01c      	b.n	8003832 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	2210      	movs	r2, #16
 80037fe:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003800:	e08f      	b.n	8003922 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	2210      	movs	r2, #16
 8003808:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380e:	f043 0204 	orr.w	r2, r3, #4
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8003816:	697b      	ldr	r3, [r7, #20]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d003      	beq.n	8003824 <I2C_Slave_ISR_IT+0xda>
 800381c:	697b      	ldr	r3, [r7, #20]
 800381e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003822:	d17e      	bne.n	8003922 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003828:	4619      	mov	r1, r3
 800382a:	68f8      	ldr	r0, [r7, #12]
 800382c:	f000 fb14 	bl	8003e58 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003830:	e077      	b.n	8003922 <I2C_Slave_ISR_IT+0x1d8>
 8003832:	e076      	b.n	8003922 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003834:	693b      	ldr	r3, [r7, #16]
 8003836:	f003 0304 	and.w	r3, r3, #4
 800383a:	2b00      	cmp	r3, #0
 800383c:	d02f      	beq.n	800389e <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003844:	2b00      	cmp	r3, #0
 8003846:	d02a      	beq.n	800389e <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800384c:	b29b      	uxth	r3, r3
 800384e:	2b00      	cmp	r3, #0
 8003850:	d018      	beq.n	8003884 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800385c:	b2d2      	uxtb	r2, r2
 800385e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003864:	1c5a      	adds	r2, r3, #1
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800386e:	3b01      	subs	r3, #1
 8003870:	b29a      	uxth	r2, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800387a:	b29b      	uxth	r3, r3
 800387c:	3b01      	subs	r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003888:	b29b      	uxth	r3, r3
 800388a:	2b00      	cmp	r3, #0
 800388c:	d14b      	bne.n	8003926 <I2C_Slave_ISR_IT+0x1dc>
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003894:	d047      	beq.n	8003926 <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8003896:	68f8      	ldr	r0, [r7, #12]
 8003898:	f000 f928 	bl	8003aec <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800389c:	e043      	b.n	8003926 <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d009      	beq.n	80038bc <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d004      	beq.n	80038bc <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 80038b2:	6939      	ldr	r1, [r7, #16]
 80038b4:	68f8      	ldr	r0, [r7, #12]
 80038b6:	f000 f895 	bl	80039e4 <I2C_ITAddrCplt>
 80038ba:	e035      	b.n	8003928 <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f003 0302 	and.w	r3, r3, #2
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d030      	beq.n	8003928 <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d02b      	beq.n	8003928 <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038d4:	b29b      	uxth	r3, r3
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d018      	beq.n	800390c <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038de:	781a      	ldrb	r2, [r3, #0]
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	3b01      	subs	r3, #1
 80038f8:	b29a      	uxth	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	851a      	strh	r2, [r3, #40]	; 0x28
 800390a:	e00d      	b.n	8003928 <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800390c:	697b      	ldr	r3, [r7, #20]
 800390e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003912:	d002      	beq.n	800391a <I2C_Slave_ISR_IT+0x1d0>
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d106      	bne.n	8003928 <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800391a:	68f8      	ldr	r0, [r7, #12]
 800391c:	f000 f8e6 	bl	8003aec <I2C_ITSlaveSeqCplt>
 8003920:	e002      	b.n	8003928 <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8003922:	bf00      	nop
 8003924:	e000      	b.n	8003928 <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 8003926:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	2200      	movs	r2, #0
 800392c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003930:	2300      	movs	r3, #0
}
 8003932:	4618      	mov	r0, r3
 8003934:	3718      	adds	r7, #24
 8003936:	46bd      	mov	sp, r7
 8003938:	bd80      	pop	{r7, pc}
	...

0800393c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800393c:	b580      	push	{r7, lr}
 800393e:	b086      	sub	sp, #24
 8003940:	af02      	add	r7, sp, #8
 8003942:	60f8      	str	r0, [r7, #12]
 8003944:	4608      	mov	r0, r1
 8003946:	4611      	mov	r1, r2
 8003948:	461a      	mov	r2, r3
 800394a:	4603      	mov	r3, r0
 800394c:	817b      	strh	r3, [r7, #10]
 800394e:	460b      	mov	r3, r1
 8003950:	813b      	strh	r3, [r7, #8]
 8003952:	4613      	mov	r3, r2
 8003954:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8003956:	88fb      	ldrh	r3, [r7, #6]
 8003958:	b2da      	uxtb	r2, r3
 800395a:	8979      	ldrh	r1, [r7, #10]
 800395c:	4b20      	ldr	r3, [pc, #128]	; (80039e0 <I2C_RequestMemoryRead+0xa4>)
 800395e:	9300      	str	r3, [sp, #0]
 8003960:	2300      	movs	r3, #0
 8003962:	68f8      	ldr	r0, [r7, #12]
 8003964:	f000 fd4e 	bl	8004404 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003968:	69fa      	ldr	r2, [r7, #28]
 800396a:	69b9      	ldr	r1, [r7, #24]
 800396c:	68f8      	ldr	r0, [r7, #12]
 800396e:	f000 fbec 	bl	800414a <I2C_WaitOnTXISFlagUntilTimeout>
 8003972:	4603      	mov	r3, r0
 8003974:	2b00      	cmp	r3, #0
 8003976:	d001      	beq.n	800397c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e02c      	b.n	80039d6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800397c:	88fb      	ldrh	r3, [r7, #6]
 800397e:	2b01      	cmp	r3, #1
 8003980:	d105      	bne.n	800398e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003982:	893b      	ldrh	r3, [r7, #8]
 8003984:	b2da      	uxtb	r2, r3
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	629a      	str	r2, [r3, #40]	; 0x28
 800398c:	e015      	b.n	80039ba <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800398e:	893b      	ldrh	r3, [r7, #8]
 8003990:	0a1b      	lsrs	r3, r3, #8
 8003992:	b29b      	uxth	r3, r3
 8003994:	b2da      	uxtb	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800399c:	69fa      	ldr	r2, [r7, #28]
 800399e:	69b9      	ldr	r1, [r7, #24]
 80039a0:	68f8      	ldr	r0, [r7, #12]
 80039a2:	f000 fbd2 	bl	800414a <I2C_WaitOnTXISFlagUntilTimeout>
 80039a6:	4603      	mov	r3, r0
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d001      	beq.n	80039b0 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 80039ac:	2301      	movs	r3, #1
 80039ae:	e012      	b.n	80039d6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80039b0:	893b      	ldrh	r3, [r7, #8]
 80039b2:	b2da      	uxtb	r2, r3
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80039ba:	69fb      	ldr	r3, [r7, #28]
 80039bc:	9300      	str	r3, [sp, #0]
 80039be:	69bb      	ldr	r3, [r7, #24]
 80039c0:	2200      	movs	r2, #0
 80039c2:	2140      	movs	r1, #64	; 0x40
 80039c4:	68f8      	ldr	r0, [r7, #12]
 80039c6:	f000 fb80 	bl	80040ca <I2C_WaitOnFlagUntilTimeout>
 80039ca:	4603      	mov	r3, r0
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d001      	beq.n	80039d4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80039d0:	2301      	movs	r3, #1
 80039d2:	e000      	b.n	80039d6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	80002000 	.word	0x80002000

080039e4 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80039e4:	b580      	push	{r7, lr}
 80039e6:	b084      	sub	sp, #16
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	6078      	str	r0, [r7, #4]
 80039ec:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80039f4:	b2db      	uxtb	r3, r3
 80039f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80039fa:	2b28      	cmp	r3, #40	; 0x28
 80039fc:	d16a      	bne.n	8003ad4 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	699b      	ldr	r3, [r3, #24]
 8003a04:	0c1b      	lsrs	r3, r3, #16
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	699b      	ldr	r3, [r3, #24]
 8003a14:	0c1b      	lsrs	r3, r3, #16
 8003a16:	b29b      	uxth	r3, r3
 8003a18:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003a1c:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	b29b      	uxth	r3, r3
 8003a26:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8003a2a:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	b29b      	uxth	r3, r3
 8003a34:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003a38:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	2b02      	cmp	r3, #2
 8003a40:	d138      	bne.n	8003ab4 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8003a42:	897b      	ldrh	r3, [r7, #10]
 8003a44:	09db      	lsrs	r3, r3, #7
 8003a46:	b29a      	uxth	r2, r3
 8003a48:	89bb      	ldrh	r3, [r7, #12]
 8003a4a:	4053      	eors	r3, r2
 8003a4c:	b29b      	uxth	r3, r3
 8003a4e:	f003 0306 	and.w	r3, r3, #6
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d11c      	bne.n	8003a90 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8003a56:	897b      	ldrh	r3, [r7, #10]
 8003a58:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003a68:	2b02      	cmp	r3, #2
 8003a6a:	d13b      	bne.n	8003ae4 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	2208      	movs	r2, #8
 8003a78:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a82:	89ba      	ldrh	r2, [r7, #12]
 8003a84:	7bfb      	ldrb	r3, [r7, #15]
 8003a86:	4619      	mov	r1, r3
 8003a88:	6878      	ldr	r0, [r7, #4]
 8003a8a:	f7ff fe32 	bl	80036f2 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8003a8e:	e029      	b.n	8003ae4 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8003a90:	893b      	ldrh	r3, [r7, #8]
 8003a92:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003a94:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 fce5 	bl	8004468 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003aa6:	89ba      	ldrh	r2, [r7, #12]
 8003aa8:	7bfb      	ldrb	r3, [r7, #15]
 8003aaa:	4619      	mov	r1, r3
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f7ff fe20 	bl	80036f2 <HAL_I2C_AddrCallback>
}
 8003ab2:	e017      	b.n	8003ae4 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003ab4:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003ab8:	6878      	ldr	r0, [r7, #4]
 8003aba:	f000 fcd5 	bl	8004468 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003ac6:	89ba      	ldrh	r2, [r7, #12]
 8003ac8:	7bfb      	ldrb	r3, [r7, #15]
 8003aca:	4619      	mov	r1, r3
 8003acc:	6878      	ldr	r0, [r7, #4]
 8003ace:	f7ff fe10 	bl	80036f2 <HAL_I2C_AddrCallback>
}
 8003ad2:	e007      	b.n	8003ae4 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2208      	movs	r2, #8
 8003ada:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2200      	movs	r2, #0
 8003ae0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003ae4:	bf00      	nop
 8003ae6:	3710      	adds	r7, #16
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bd80      	pop	{r7, pc}

08003aec <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b084      	sub	sp, #16
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2200      	movs	r2, #0
 8003b00:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d008      	beq.n	8003b20 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	681a      	ldr	r2, [r3, #0]
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003b1c:	601a      	str	r2, [r3, #0]
 8003b1e:	e00c      	b.n	8003b3a <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d007      	beq.n	8003b3a <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	681a      	ldr	r2, [r3, #0]
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003b38:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b40:	b2db      	uxtb	r3, r3
 8003b42:	2b29      	cmp	r3, #41	; 0x29
 8003b44:	d112      	bne.n	8003b6c <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	2228      	movs	r2, #40	; 0x28
 8003b4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2221      	movs	r2, #33	; 0x21
 8003b52:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003b54:	2101      	movs	r1, #1
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f000 fc86 	bl	8004468 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2200      	movs	r2, #0
 8003b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003b64:	6878      	ldr	r0, [r7, #4]
 8003b66:	f7ff fdb0 	bl	80036ca <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003b6a:	e017      	b.n	8003b9c <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b2a      	cmp	r3, #42	; 0x2a
 8003b76:	d111      	bne.n	8003b9c <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	2228      	movs	r2, #40	; 0x28
 8003b7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	2222      	movs	r2, #34	; 0x22
 8003b84:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003b86:	2102      	movs	r1, #2
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 fc6d 	bl	8004468 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2200      	movs	r2, #0
 8003b92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003b96:	6878      	ldr	r0, [r7, #4]
 8003b98:	f7ff fda1 	bl	80036de <HAL_I2C_SlaveRxCpltCallback>
}
 8003b9c:	bf00      	nop
 8003b9e:	3710      	adds	r7, #16
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	bd80      	pop	{r7, pc}

08003ba4 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003ba4:	b580      	push	{r7, lr}
 8003ba6:	b086      	sub	sp, #24
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
 8003bac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003bc0:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	2220      	movs	r2, #32
 8003bc8:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003bca:	7bfb      	ldrb	r3, [r7, #15]
 8003bcc:	2b21      	cmp	r3, #33	; 0x21
 8003bce:	d002      	beq.n	8003bd6 <I2C_ITSlaveCplt+0x32>
 8003bd0:	7bfb      	ldrb	r3, [r7, #15]
 8003bd2:	2b29      	cmp	r3, #41	; 0x29
 8003bd4:	d108      	bne.n	8003be8 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003bd6:	f248 0101 	movw	r1, #32769	; 0x8001
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f000 fc44 	bl	8004468 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2221      	movs	r2, #33	; 0x21
 8003be4:	631a      	str	r2, [r3, #48]	; 0x30
 8003be6:	e00d      	b.n	8003c04 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003be8:	7bfb      	ldrb	r3, [r7, #15]
 8003bea:	2b22      	cmp	r3, #34	; 0x22
 8003bec:	d002      	beq.n	8003bf4 <I2C_ITSlaveCplt+0x50>
 8003bee:	7bfb      	ldrb	r3, [r7, #15]
 8003bf0:	2b2a      	cmp	r3, #42	; 0x2a
 8003bf2:	d107      	bne.n	8003c04 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003bf4:	f248 0102 	movw	r1, #32770	; 0x8002
 8003bf8:	6878      	ldr	r0, [r7, #4]
 8003bfa:	f000 fc35 	bl	8004468 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	2222      	movs	r2, #34	; 0x22
 8003c02:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	685a      	ldr	r2, [r3, #4]
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c12:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	6859      	ldr	r1, [r3, #4]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	4b62      	ldr	r3, [pc, #392]	; (8003da8 <I2C_ITSlaveCplt+0x204>)
 8003c20:	400b      	ands	r3, r1
 8003c22:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003c24:	6878      	ldr	r0, [r7, #4]
 8003c26:	f000 fa0e 	bl	8004046 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003c30:	2b00      	cmp	r3, #0
 8003c32:	d013      	beq.n	8003c5c <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003c42:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d01f      	beq.n	8003c8c <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	685b      	ldr	r3, [r3, #4]
 8003c54:	b29a      	uxth	r2, r3
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003c5a:	e017      	b.n	8003c8c <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d012      	beq.n	8003c8c <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681a      	ldr	r2, [r3, #0]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c74:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d006      	beq.n	8003c8c <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	b29a      	uxth	r2, r3
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f003 0304 	and.w	r3, r3, #4
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d020      	beq.n	8003cd8 <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003c96:	697b      	ldr	r3, [r7, #20]
 8003c98:	f023 0304 	bic.w	r3, r3, #4
 8003c9c:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ca8:	b2d2      	uxtb	r2, r2
 8003caa:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cb0:	1c5a      	adds	r2, r3, #1
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d00c      	beq.n	8003cd8 <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003cc2:	3b01      	subs	r3, #1
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cce:	b29b      	uxth	r3, r3
 8003cd0:	3b01      	subs	r3, #1
 8003cd2:	b29a      	uxth	r2, r3
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cdc:	b29b      	uxth	r3, r3
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d005      	beq.n	8003cee <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ce6:	f043 0204 	orr.w	r2, r3, #4
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d010      	beq.n	8003d26 <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d08:	4619      	mov	r1, r3
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f000 f8a4 	bl	8003e58 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d16:	b2db      	uxtb	r3, r3
 8003d18:	2b28      	cmp	r3, #40	; 0x28
 8003d1a:	d141      	bne.n	8003da0 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003d1c:	6979      	ldr	r1, [r7, #20]
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f846 	bl	8003db0 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003d24:	e03c      	b.n	8003da0 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d2a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d2e:	d014      	beq.n	8003d5a <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8003d30:	6878      	ldr	r0, [r7, #4]
 8003d32:	f7ff fedb 	bl	8003aec <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	4a1c      	ldr	r2, [pc, #112]	; (8003dac <I2C_ITSlaveCplt+0x208>)
 8003d3a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2220      	movs	r2, #32
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2200      	movs	r2, #0
 8003d48:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2200      	movs	r2, #0
 8003d4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff fcdb 	bl	800370e <HAL_I2C_ListenCpltCallback>
}
 8003d58:	e022      	b.n	8003da0 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003d60:	b2db      	uxtb	r3, r3
 8003d62:	2b22      	cmp	r3, #34	; 0x22
 8003d64:	d10e      	bne.n	8003d84 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	2220      	movs	r2, #32
 8003d6a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	2200      	movs	r2, #0
 8003d72:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2200      	movs	r2, #0
 8003d78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003d7c:	6878      	ldr	r0, [r7, #4]
 8003d7e:	f7ff fcae 	bl	80036de <HAL_I2C_SlaveRxCpltCallback>
}
 8003d82:	e00d      	b.n	8003da0 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2220      	movs	r2, #32
 8003d88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2200      	movs	r2, #0
 8003d90:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	2200      	movs	r2, #0
 8003d96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003d9a:	6878      	ldr	r0, [r7, #4]
 8003d9c:	f7ff fc95 	bl	80036ca <HAL_I2C_SlaveTxCpltCallback>
}
 8003da0:	bf00      	nop
 8003da2:	3718      	adds	r7, #24
 8003da4:	46bd      	mov	sp, r7
 8003da6:	bd80      	pop	{r7, pc}
 8003da8:	fe00e800 	.word	0xfe00e800
 8003dac:	ffff0000 	.word	0xffff0000

08003db0 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b082      	sub	sp, #8
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	4a25      	ldr	r2, [pc, #148]	; (8003e54 <I2C_ITListenCplt+0xa4>)
 8003dbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003ddc:	683b      	ldr	r3, [r7, #0]
 8003dde:	f003 0304 	and.w	r3, r3, #4
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d022      	beq.n	8003e2c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df0:	b2d2      	uxtb	r2, r2
 8003df2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df8:	1c5a      	adds	r2, r3, #1
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d012      	beq.n	8003e2c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003e0a:	3b01      	subs	r3, #1
 8003e0c:	b29a      	uxth	r2, r3
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e16:	b29b      	uxth	r3, r3
 8003e18:	3b01      	subs	r3, #1
 8003e1a:	b29a      	uxth	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e24:	f043 0204 	orr.w	r2, r3, #4
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e2c:	f248 0103 	movw	r1, #32771	; 0x8003
 8003e30:	6878      	ldr	r0, [r7, #4]
 8003e32:	f000 fb19 	bl	8004468 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	2210      	movs	r2, #16
 8003e3c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f7ff fc61 	bl	800370e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003e4c:	bf00      	nop
 8003e4e:	3708      	adds	r7, #8
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	ffff0000 	.word	0xffff0000

08003e58 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b084      	sub	sp, #16
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
 8003e60:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e68:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	2200      	movs	r2, #0
 8003e6e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	4a5d      	ldr	r2, [pc, #372]	; (8003fec <I2C_ITError+0x194>)
 8003e76:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e82:	683b      	ldr	r3, [r7, #0]
 8003e84:	431a      	orrs	r2, r3
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003e8a:	7bfb      	ldrb	r3, [r7, #15]
 8003e8c:	2b28      	cmp	r3, #40	; 0x28
 8003e8e:	d005      	beq.n	8003e9c <I2C_ITError+0x44>
 8003e90:	7bfb      	ldrb	r3, [r7, #15]
 8003e92:	2b29      	cmp	r3, #41	; 0x29
 8003e94:	d002      	beq.n	8003e9c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003e96:	7bfb      	ldrb	r3, [r7, #15]
 8003e98:	2b2a      	cmp	r3, #42	; 0x2a
 8003e9a:	d10b      	bne.n	8003eb4 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e9c:	2103      	movs	r1, #3
 8003e9e:	6878      	ldr	r0, [r7, #4]
 8003ea0:	f000 fae2 	bl	8004468 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2228      	movs	r2, #40	; 0x28
 8003ea8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a50      	ldr	r2, [pc, #320]	; (8003ff0 <I2C_ITError+0x198>)
 8003eb0:	635a      	str	r2, [r3, #52]	; 0x34
 8003eb2:	e011      	b.n	8003ed8 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003eb4:	f248 0103 	movw	r1, #32771	; 0x8003
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 fad5 	bl	8004468 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b60      	cmp	r3, #96	; 0x60
 8003ec8:	d003      	beq.n	8003ed2 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2220      	movs	r2, #32
 8003ece:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003edc:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d039      	beq.n	8003f5a <I2C_ITError+0x102>
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2b11      	cmp	r3, #17
 8003eea:	d002      	beq.n	8003ef2 <I2C_ITError+0x9a>
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	2b21      	cmp	r3, #33	; 0x21
 8003ef0:	d133      	bne.n	8003f5a <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003efc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003f00:	d107      	bne.n	8003f12 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	681a      	ldr	r2, [r3, #0]
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f10:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fe fca5 	bl	8002866 <HAL_DMA_GetState>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b01      	cmp	r3, #1
 8003f20:	d017      	beq.n	8003f52 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f26:	4a33      	ldr	r2, [pc, #204]	; (8003ff4 <I2C_ITError+0x19c>)
 8003f28:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	2200      	movs	r2, #0
 8003f2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f36:	4618      	mov	r0, r3
 8003f38:	f7fe fc73 	bl	8002822 <HAL_DMA_Abort_IT>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d04d      	beq.n	8003fde <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003f4c:	4610      	mov	r0, r2
 8003f4e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f50:	e045      	b.n	8003fde <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f850 	bl	8003ff8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f58:	e041      	b.n	8003fde <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d039      	beq.n	8003fd6 <I2C_ITError+0x17e>
 8003f62:	68bb      	ldr	r3, [r7, #8]
 8003f64:	2b12      	cmp	r3, #18
 8003f66:	d002      	beq.n	8003f6e <I2C_ITError+0x116>
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b22      	cmp	r3, #34	; 0x22
 8003f6c:	d133      	bne.n	8003fd6 <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f78:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f7c:	d107      	bne.n	8003f8e <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	681a      	ldr	r2, [r3, #0]
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003f8c:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f92:	4618      	mov	r0, r3
 8003f94:	f7fe fc67 	bl	8002866 <HAL_DMA_GetState>
 8003f98:	4603      	mov	r3, r0
 8003f9a:	2b01      	cmp	r3, #1
 8003f9c:	d017      	beq.n	8003fce <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fa2:	4a14      	ldr	r2, [pc, #80]	; (8003ff4 <I2C_ITError+0x19c>)
 8003fa4:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	f7fe fc35 	bl	8002822 <HAL_DMA_Abort_IT>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d011      	beq.n	8003fe2 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fc4:	687a      	ldr	r2, [r7, #4]
 8003fc6:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003fc8:	4610      	mov	r0, r2
 8003fca:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fcc:	e009      	b.n	8003fe2 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f812 	bl	8003ff8 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fd4:	e005      	b.n	8003fe2 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f000 f80e 	bl	8003ff8 <I2C_TreatErrorCallback>
  }
}
 8003fdc:	e002      	b.n	8003fe4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003fde:	bf00      	nop
 8003fe0:	e000      	b.n	8003fe4 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003fe2:	bf00      	nop
}
 8003fe4:	bf00      	nop
 8003fe6:	3710      	adds	r7, #16
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd80      	pop	{r7, pc}
 8003fec:	ffff0000 	.word	0xffff0000
 8003ff0:	0800374b 	.word	0x0800374b
 8003ff4:	0800408f 	.word	0x0800408f

08003ff8 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003ff8:	b580      	push	{r7, lr}
 8003ffa:	b082      	sub	sp, #8
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004006:	b2db      	uxtb	r3, r3
 8004008:	2b60      	cmp	r3, #96	; 0x60
 800400a:	d10e      	bne.n	800402a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2200      	movs	r2, #0
 8004018:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2200      	movs	r2, #0
 800401e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004022:	6878      	ldr	r0, [r7, #4]
 8004024:	f7ff fb87 	bl	8003736 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004028:	e009      	b.n	800403e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	2200      	movs	r2, #0
 8004034:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8004038:	6878      	ldr	r0, [r7, #4]
 800403a:	f7ff fb72 	bl	8003722 <HAL_I2C_ErrorCallback>
}
 800403e:	bf00      	nop
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	699b      	ldr	r3, [r3, #24]
 8004054:	f003 0302 	and.w	r3, r3, #2
 8004058:	2b02      	cmp	r3, #2
 800405a:	d103      	bne.n	8004064 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	2200      	movs	r2, #0
 8004062:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	699b      	ldr	r3, [r3, #24]
 800406a:	f003 0301 	and.w	r3, r3, #1
 800406e:	2b01      	cmp	r3, #1
 8004070:	d007      	beq.n	8004082 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	699a      	ldr	r2, [r3, #24]
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	f042 0201 	orr.w	r2, r2, #1
 8004080:	619a      	str	r2, [r3, #24]
  }
}
 8004082:	bf00      	nop
 8004084:	370c      	adds	r7, #12
 8004086:	46bd      	mov	sp, r7
 8004088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408c:	4770      	bx	lr

0800408e <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800408e:	b580      	push	{r7, lr}
 8004090:	b084      	sub	sp, #16
 8004092:	af00      	add	r7, sp, #0
 8004094:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800409a:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d003      	beq.n	80040ac <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a8:	2200      	movs	r2, #0
 80040aa:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d003      	beq.n	80040bc <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b8:	2200      	movs	r2, #0
 80040ba:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80040bc:	68f8      	ldr	r0, [r7, #12]
 80040be:	f7ff ff9b 	bl	8003ff8 <I2C_TreatErrorCallback>
}
 80040c2:	bf00      	nop
 80040c4:	3710      	adds	r7, #16
 80040c6:	46bd      	mov	sp, r7
 80040c8:	bd80      	pop	{r7, pc}

080040ca <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80040ca:	b580      	push	{r7, lr}
 80040cc:	b084      	sub	sp, #16
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	603b      	str	r3, [r7, #0]
 80040d6:	4613      	mov	r3, r2
 80040d8:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80040da:	e022      	b.n	8004122 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040dc:	683b      	ldr	r3, [r7, #0]
 80040de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040e2:	d01e      	beq.n	8004122 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040e4:	f7fe f9ec 	bl	80024c0 <HAL_GetTick>
 80040e8:	4602      	mov	r2, r0
 80040ea:	69bb      	ldr	r3, [r7, #24]
 80040ec:	1ad3      	subs	r3, r2, r3
 80040ee:	683a      	ldr	r2, [r7, #0]
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d302      	bcc.n	80040fa <I2C_WaitOnFlagUntilTimeout+0x30>
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d113      	bne.n	8004122 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040fe:	f043 0220 	orr.w	r2, r3, #32
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	2220      	movs	r2, #32
 800410a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2200      	movs	r2, #0
 8004112:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e00f      	b.n	8004142 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	699a      	ldr	r2, [r3, #24]
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	4013      	ands	r3, r2
 800412c:	68ba      	ldr	r2, [r7, #8]
 800412e:	429a      	cmp	r2, r3
 8004130:	bf0c      	ite	eq
 8004132:	2301      	moveq	r3, #1
 8004134:	2300      	movne	r3, #0
 8004136:	b2db      	uxtb	r3, r3
 8004138:	461a      	mov	r2, r3
 800413a:	79fb      	ldrb	r3, [r7, #7]
 800413c:	429a      	cmp	r2, r3
 800413e:	d0cd      	beq.n	80040dc <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004140:	2300      	movs	r3, #0
}
 8004142:	4618      	mov	r0, r3
 8004144:	3710      	adds	r7, #16
 8004146:	46bd      	mov	sp, r7
 8004148:	bd80      	pop	{r7, pc}

0800414a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800414a:	b580      	push	{r7, lr}
 800414c:	b084      	sub	sp, #16
 800414e:	af00      	add	r7, sp, #0
 8004150:	60f8      	str	r0, [r7, #12]
 8004152:	60b9      	str	r1, [r7, #8]
 8004154:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004156:	e02c      	b.n	80041b2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8004158:	687a      	ldr	r2, [r7, #4]
 800415a:	68b9      	ldr	r1, [r7, #8]
 800415c:	68f8      	ldr	r0, [r7, #12]
 800415e:	f000 f871 	bl	8004244 <I2C_IsErrorOccurred>
 8004162:	4603      	mov	r3, r0
 8004164:	2b00      	cmp	r3, #0
 8004166:	d001      	beq.n	800416c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8004168:	2301      	movs	r3, #1
 800416a:	e02a      	b.n	80041c2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800416c:	68bb      	ldr	r3, [r7, #8]
 800416e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004172:	d01e      	beq.n	80041b2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004174:	f7fe f9a4 	bl	80024c0 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	68ba      	ldr	r2, [r7, #8]
 8004180:	429a      	cmp	r2, r3
 8004182:	d302      	bcc.n	800418a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d113      	bne.n	80041b2 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800418e:	f043 0220 	orr.w	r2, r3, #32
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	2220      	movs	r2, #32
 800419a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	2200      	movs	r2, #0
 80041a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	2200      	movs	r2, #0
 80041aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80041ae:	2301      	movs	r3, #1
 80041b0:	e007      	b.n	80041c2 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	f003 0302 	and.w	r3, r3, #2
 80041bc:	2b02      	cmp	r3, #2
 80041be:	d1cb      	bne.n	8004158 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80041c0:	2300      	movs	r3, #0
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80041ca:	b580      	push	{r7, lr}
 80041cc:	b084      	sub	sp, #16
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	60f8      	str	r0, [r7, #12]
 80041d2:	60b9      	str	r1, [r7, #8]
 80041d4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80041d6:	e028      	b.n	800422a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80041d8:	687a      	ldr	r2, [r7, #4]
 80041da:	68b9      	ldr	r1, [r7, #8]
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 f831 	bl	8004244 <I2C_IsErrorOccurred>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d001      	beq.n	80041ec <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80041e8:	2301      	movs	r3, #1
 80041ea:	e026      	b.n	800423a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ec:	f7fe f968 	bl	80024c0 <HAL_GetTick>
 80041f0:	4602      	mov	r2, r0
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	1ad3      	subs	r3, r2, r3
 80041f6:	68ba      	ldr	r2, [r7, #8]
 80041f8:	429a      	cmp	r2, r3
 80041fa:	d302      	bcc.n	8004202 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80041fc:	68bb      	ldr	r3, [r7, #8]
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d113      	bne.n	800422a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004206:	f043 0220 	orr.w	r2, r3, #32
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2220      	movs	r2, #32
 8004212:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2200      	movs	r2, #0
 800421a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004226:	2301      	movs	r3, #1
 8004228:	e007      	b.n	800423a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	699b      	ldr	r3, [r3, #24]
 8004230:	f003 0320 	and.w	r3, r3, #32
 8004234:	2b20      	cmp	r3, #32
 8004236:	d1cf      	bne.n	80041d8 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004238:	2300      	movs	r3, #0
}
 800423a:	4618      	mov	r0, r3
 800423c:	3710      	adds	r7, #16
 800423e:	46bd      	mov	sp, r7
 8004240:	bd80      	pop	{r7, pc}
	...

08004244 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b08a      	sub	sp, #40	; 0x28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004250:	2300      	movs	r3, #0
 8004252:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	699b      	ldr	r3, [r3, #24]
 800425c:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800425e:	2300      	movs	r3, #0
 8004260:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8004266:	69bb      	ldr	r3, [r7, #24]
 8004268:	f003 0310 	and.w	r3, r3, #16
 800426c:	2b00      	cmp	r3, #0
 800426e:	d068      	beq.n	8004342 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	2210      	movs	r2, #16
 8004276:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004278:	e049      	b.n	800430e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004280:	d045      	beq.n	800430e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8004282:	f7fe f91d 	bl	80024c0 <HAL_GetTick>
 8004286:	4602      	mov	r2, r0
 8004288:	69fb      	ldr	r3, [r7, #28]
 800428a:	1ad3      	subs	r3, r2, r3
 800428c:	68ba      	ldr	r2, [r7, #8]
 800428e:	429a      	cmp	r2, r3
 8004290:	d302      	bcc.n	8004298 <I2C_IsErrorOccurred+0x54>
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d13a      	bne.n	800430e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80042a2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80042aa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	699b      	ldr	r3, [r3, #24]
 80042b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80042b6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80042ba:	d121      	bne.n	8004300 <I2C_IsErrorOccurred+0xbc>
 80042bc:	697b      	ldr	r3, [r7, #20]
 80042be:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80042c2:	d01d      	beq.n	8004300 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 80042c4:	7cfb      	ldrb	r3, [r7, #19]
 80042c6:	2b20      	cmp	r3, #32
 80042c8:	d01a      	beq.n	8004300 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685a      	ldr	r2, [r3, #4]
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80042d8:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80042da:	f7fe f8f1 	bl	80024c0 <HAL_GetTick>
 80042de:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80042e0:	e00e      	b.n	8004300 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80042e2:	f7fe f8ed 	bl	80024c0 <HAL_GetTick>
 80042e6:	4602      	mov	r2, r0
 80042e8:	69fb      	ldr	r3, [r7, #28]
 80042ea:	1ad3      	subs	r3, r2, r3
 80042ec:	2b19      	cmp	r3, #25
 80042ee:	d907      	bls.n	8004300 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 80042f0:	6a3b      	ldr	r3, [r7, #32]
 80042f2:	f043 0320 	orr.w	r3, r3, #32
 80042f6:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 80042fe:	e006      	b.n	800430e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	699b      	ldr	r3, [r3, #24]
 8004306:	f003 0320 	and.w	r3, r3, #32
 800430a:	2b20      	cmp	r3, #32
 800430c:	d1e9      	bne.n	80042e2 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	699b      	ldr	r3, [r3, #24]
 8004314:	f003 0320 	and.w	r3, r3, #32
 8004318:	2b20      	cmp	r3, #32
 800431a:	d003      	beq.n	8004324 <I2C_IsErrorOccurred+0xe0>
 800431c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004320:	2b00      	cmp	r3, #0
 8004322:	d0aa      	beq.n	800427a <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004324:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004328:	2b00      	cmp	r3, #0
 800432a:	d103      	bne.n	8004334 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	2220      	movs	r2, #32
 8004332:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004334:	6a3b      	ldr	r3, [r7, #32]
 8004336:	f043 0304 	orr.w	r3, r3, #4
 800433a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800433c:	2301      	movs	r3, #1
 800433e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	699b      	ldr	r3, [r3, #24]
 8004348:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800434a:	69bb      	ldr	r3, [r7, #24]
 800434c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004350:	2b00      	cmp	r3, #0
 8004352:	d00b      	beq.n	800436c <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8004354:	6a3b      	ldr	r3, [r7, #32]
 8004356:	f043 0301 	orr.w	r3, r3, #1
 800435a:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800435c:	68fb      	ldr	r3, [r7, #12]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004364:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004366:	2301      	movs	r3, #1
 8004368:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800436c:	69bb      	ldr	r3, [r7, #24]
 800436e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004372:	2b00      	cmp	r3, #0
 8004374:	d00b      	beq.n	800438e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8004376:	6a3b      	ldr	r3, [r7, #32]
 8004378:	f043 0308 	orr.w	r3, r3, #8
 800437c:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004386:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800438e:	69bb      	ldr	r3, [r7, #24]
 8004390:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004394:	2b00      	cmp	r3, #0
 8004396:	d00b      	beq.n	80043b0 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8004398:	6a3b      	ldr	r3, [r7, #32]
 800439a:	f043 0302 	orr.w	r3, r3, #2
 800439e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043a8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80043aa:	2301      	movs	r3, #1
 80043ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80043b0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d01c      	beq.n	80043f2 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80043b8:	68f8      	ldr	r0, [r7, #12]
 80043ba:	f7ff fe44 	bl	8004046 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6859      	ldr	r1, [r3, #4]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681a      	ldr	r2, [r3, #0]
 80043c8:	4b0d      	ldr	r3, [pc, #52]	; (8004400 <I2C_IsErrorOccurred+0x1bc>)
 80043ca:	400b      	ands	r3, r1
 80043cc:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80043d2:	6a3b      	ldr	r3, [r7, #32]
 80043d4:	431a      	orrs	r2, r3
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	2220      	movs	r2, #32
 80043de:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	2200      	movs	r2, #0
 80043e6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	2200      	movs	r2, #0
 80043ee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80043f2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80043f6:	4618      	mov	r0, r3
 80043f8:	3728      	adds	r7, #40	; 0x28
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	fe00e800 	.word	0xfe00e800

08004404 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004404:	b480      	push	{r7}
 8004406:	b087      	sub	sp, #28
 8004408:	af00      	add	r7, sp, #0
 800440a:	60f8      	str	r0, [r7, #12]
 800440c:	607b      	str	r3, [r7, #4]
 800440e:	460b      	mov	r3, r1
 8004410:	817b      	strh	r3, [r7, #10]
 8004412:	4613      	mov	r3, r2
 8004414:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004416:	897b      	ldrh	r3, [r7, #10]
 8004418:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800441c:	7a7b      	ldrb	r3, [r7, #9]
 800441e:	041b      	lsls	r3, r3, #16
 8004420:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004424:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800442a:	6a3b      	ldr	r3, [r7, #32]
 800442c:	4313      	orrs	r3, r2
 800442e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004432:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	685a      	ldr	r2, [r3, #4]
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	0d5b      	lsrs	r3, r3, #21
 800443e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8004442:	4b08      	ldr	r3, [pc, #32]	; (8004464 <I2C_TransferConfig+0x60>)
 8004444:	430b      	orrs	r3, r1
 8004446:	43db      	mvns	r3, r3
 8004448:	ea02 0103 	and.w	r1, r2, r3
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	430a      	orrs	r2, r1
 8004454:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8004456:	bf00      	nop
 8004458:	371c      	adds	r7, #28
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	03ff63ff 	.word	0x03ff63ff

08004468 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8004468:	b480      	push	{r7}
 800446a:	b085      	sub	sp, #20
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
 8004470:	460b      	mov	r3, r1
 8004472:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8004474:	2300      	movs	r3, #0
 8004476:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8004478:	887b      	ldrh	r3, [r7, #2]
 800447a:	f003 0301 	and.w	r3, r3, #1
 800447e:	2b00      	cmp	r3, #0
 8004480:	d00f      	beq.n	80044a2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8004488:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004490:	b2db      	uxtb	r3, r3
 8004492:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004496:	2b28      	cmp	r3, #40	; 0x28
 8004498:	d003      	beq.n	80044a2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80044a0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80044a2:	887b      	ldrh	r3, [r7, #2]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00f      	beq.n	80044cc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80044b2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80044ba:	b2db      	uxtb	r3, r3
 80044bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80044c0:	2b28      	cmp	r3, #40	; 0x28
 80044c2:	d003      	beq.n	80044cc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80044ca:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80044cc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	da03      	bge.n	80044dc <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80044da:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80044dc:	887b      	ldrh	r3, [r7, #2]
 80044de:	2b10      	cmp	r3, #16
 80044e0:	d103      	bne.n	80044ea <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80044e8:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80044ea:	887b      	ldrh	r3, [r7, #2]
 80044ec:	2b20      	cmp	r3, #32
 80044ee:	d103      	bne.n	80044f8 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f043 0320 	orr.w	r3, r3, #32
 80044f6:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80044f8:	887b      	ldrh	r3, [r7, #2]
 80044fa:	2b40      	cmp	r3, #64	; 0x40
 80044fc:	d103      	bne.n	8004506 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004504:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	6819      	ldr	r1, [r3, #0]
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	43da      	mvns	r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	400a      	ands	r2, r1
 8004516:	601a      	str	r2, [r3, #0]
}
 8004518:	bf00      	nop
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
 800452c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004534:	b2db      	uxtb	r3, r3
 8004536:	2b20      	cmp	r3, #32
 8004538:	d138      	bne.n	80045ac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004540:	2b01      	cmp	r3, #1
 8004542:	d101      	bne.n	8004548 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8004544:	2302      	movs	r3, #2
 8004546:	e032      	b.n	80045ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2224      	movs	r2, #36	; 0x24
 8004554:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	681a      	ldr	r2, [r3, #0]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	f022 0201 	bic.w	r2, r2, #1
 8004566:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004576:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	6819      	ldr	r1, [r3, #0]
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	683a      	ldr	r2, [r7, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681a      	ldr	r2, [r3, #0]
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f042 0201 	orr.w	r2, r2, #1
 8004596:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	2220      	movs	r2, #32
 800459c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	2200      	movs	r2, #0
 80045a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045a8:	2300      	movs	r3, #0
 80045aa:	e000      	b.n	80045ae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80045ac:	2302      	movs	r3, #2
  }
}
 80045ae:	4618      	mov	r0, r3
 80045b0:	370c      	adds	r7, #12
 80045b2:	46bd      	mov	sp, r7
 80045b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b8:	4770      	bx	lr

080045ba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80045ba:	b480      	push	{r7}
 80045bc:	b085      	sub	sp, #20
 80045be:	af00      	add	r7, sp, #0
 80045c0:	6078      	str	r0, [r7, #4]
 80045c2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b20      	cmp	r3, #32
 80045ce:	d139      	bne.n	8004644 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80045da:	2302      	movs	r3, #2
 80045dc:	e033      	b.n	8004646 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	2224      	movs	r2, #36	; 0x24
 80045ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	681a      	ldr	r2, [r3, #0]
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	f022 0201 	bic.w	r2, r2, #1
 80045fc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800460c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	021b      	lsls	r3, r3, #8
 8004612:	68fa      	ldr	r2, [r7, #12]
 8004614:	4313      	orrs	r3, r2
 8004616:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	681a      	ldr	r2, [r3, #0]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f042 0201 	orr.w	r2, r2, #1
 800462e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2200      	movs	r2, #0
 800463c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	e000      	b.n	8004646 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8004644:	2302      	movs	r3, #2
  }
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004650:	4770      	bx	lr

08004652 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8004652:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004654:	b08f      	sub	sp, #60	; 0x3c
 8004656:	af0a      	add	r7, sp, #40	; 0x28
 8004658:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	2b00      	cmp	r3, #0
 800465e:	d101      	bne.n	8004664 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8004660:	2301      	movs	r3, #1
 8004662:	e116      	b.n	8004892 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8004670:	b2db      	uxtb	r3, r3
 8004672:	2b00      	cmp	r3, #0
 8004674:	d106      	bne.n	8004684 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800467e:	6878      	ldr	r0, [r7, #4]
 8004680:	f7fd fe2a 	bl	80022d8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2203      	movs	r2, #3
 8004688:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004694:	2b00      	cmp	r3, #0
 8004696:	d102      	bne.n	800469e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	4618      	mov	r0, r3
 80046a4:	f004 f896 	bl	80087d4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	603b      	str	r3, [r7, #0]
 80046ae:	687e      	ldr	r6, [r7, #4]
 80046b0:	466d      	mov	r5, sp
 80046b2:	f106 0410 	add.w	r4, r6, #16
 80046b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80046bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80046be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80046c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80046c6:	1d33      	adds	r3, r6, #4
 80046c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80046ca:	6838      	ldr	r0, [r7, #0]
 80046cc:	f004 f82a 	bl	8008724 <USB_CoreInit>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d005      	beq.n	80046e2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2202      	movs	r2, #2
 80046da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80046de:	2301      	movs	r3, #1
 80046e0:	e0d7      	b.n	8004892 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	2100      	movs	r1, #0
 80046e8:	4618      	mov	r0, r3
 80046ea:	f004 f884 	bl	80087f6 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046ee:	2300      	movs	r3, #0
 80046f0:	73fb      	strb	r3, [r7, #15]
 80046f2:	e04a      	b.n	800478a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80046f4:	7bfa      	ldrb	r2, [r7, #15]
 80046f6:	6879      	ldr	r1, [r7, #4]
 80046f8:	4613      	mov	r3, r2
 80046fa:	00db      	lsls	r3, r3, #3
 80046fc:	4413      	add	r3, r2
 80046fe:	009b      	lsls	r3, r3, #2
 8004700:	440b      	add	r3, r1
 8004702:	333d      	adds	r3, #61	; 0x3d
 8004704:	2201      	movs	r2, #1
 8004706:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8004708:	7bfa      	ldrb	r2, [r7, #15]
 800470a:	6879      	ldr	r1, [r7, #4]
 800470c:	4613      	mov	r3, r2
 800470e:	00db      	lsls	r3, r3, #3
 8004710:	4413      	add	r3, r2
 8004712:	009b      	lsls	r3, r3, #2
 8004714:	440b      	add	r3, r1
 8004716:	333c      	adds	r3, #60	; 0x3c
 8004718:	7bfa      	ldrb	r2, [r7, #15]
 800471a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800471c:	7bfa      	ldrb	r2, [r7, #15]
 800471e:	7bfb      	ldrb	r3, [r7, #15]
 8004720:	b298      	uxth	r0, r3
 8004722:	6879      	ldr	r1, [r7, #4]
 8004724:	4613      	mov	r3, r2
 8004726:	00db      	lsls	r3, r3, #3
 8004728:	4413      	add	r3, r2
 800472a:	009b      	lsls	r3, r3, #2
 800472c:	440b      	add	r3, r1
 800472e:	3344      	adds	r3, #68	; 0x44
 8004730:	4602      	mov	r2, r0
 8004732:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004734:	7bfa      	ldrb	r2, [r7, #15]
 8004736:	6879      	ldr	r1, [r7, #4]
 8004738:	4613      	mov	r3, r2
 800473a:	00db      	lsls	r3, r3, #3
 800473c:	4413      	add	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	440b      	add	r3, r1
 8004742:	3340      	adds	r3, #64	; 0x40
 8004744:	2200      	movs	r2, #0
 8004746:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8004748:	7bfa      	ldrb	r2, [r7, #15]
 800474a:	6879      	ldr	r1, [r7, #4]
 800474c:	4613      	mov	r3, r2
 800474e:	00db      	lsls	r3, r3, #3
 8004750:	4413      	add	r3, r2
 8004752:	009b      	lsls	r3, r3, #2
 8004754:	440b      	add	r3, r1
 8004756:	3348      	adds	r3, #72	; 0x48
 8004758:	2200      	movs	r2, #0
 800475a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800475c:	7bfa      	ldrb	r2, [r7, #15]
 800475e:	6879      	ldr	r1, [r7, #4]
 8004760:	4613      	mov	r3, r2
 8004762:	00db      	lsls	r3, r3, #3
 8004764:	4413      	add	r3, r2
 8004766:	009b      	lsls	r3, r3, #2
 8004768:	440b      	add	r3, r1
 800476a:	334c      	adds	r3, #76	; 0x4c
 800476c:	2200      	movs	r2, #0
 800476e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8004770:	7bfa      	ldrb	r2, [r7, #15]
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	4613      	mov	r3, r2
 8004776:	00db      	lsls	r3, r3, #3
 8004778:	4413      	add	r3, r2
 800477a:	009b      	lsls	r3, r3, #2
 800477c:	440b      	add	r3, r1
 800477e:	3354      	adds	r3, #84	; 0x54
 8004780:	2200      	movs	r2, #0
 8004782:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004784:	7bfb      	ldrb	r3, [r7, #15]
 8004786:	3301      	adds	r3, #1
 8004788:	73fb      	strb	r3, [r7, #15]
 800478a:	7bfa      	ldrb	r2, [r7, #15]
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	429a      	cmp	r2, r3
 8004792:	d3af      	bcc.n	80046f4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004794:	2300      	movs	r3, #0
 8004796:	73fb      	strb	r3, [r7, #15]
 8004798:	e044      	b.n	8004824 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800479a:	7bfa      	ldrb	r2, [r7, #15]
 800479c:	6879      	ldr	r1, [r7, #4]
 800479e:	4613      	mov	r3, r2
 80047a0:	00db      	lsls	r3, r3, #3
 80047a2:	4413      	add	r3, r2
 80047a4:	009b      	lsls	r3, r3, #2
 80047a6:	440b      	add	r3, r1
 80047a8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80047ac:	2200      	movs	r2, #0
 80047ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80047b0:	7bfa      	ldrb	r2, [r7, #15]
 80047b2:	6879      	ldr	r1, [r7, #4]
 80047b4:	4613      	mov	r3, r2
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	4413      	add	r3, r2
 80047ba:	009b      	lsls	r3, r3, #2
 80047bc:	440b      	add	r3, r1
 80047be:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80047c2:	7bfa      	ldrb	r2, [r7, #15]
 80047c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80047c6:	7bfa      	ldrb	r2, [r7, #15]
 80047c8:	6879      	ldr	r1, [r7, #4]
 80047ca:	4613      	mov	r3, r2
 80047cc:	00db      	lsls	r3, r3, #3
 80047ce:	4413      	add	r3, r2
 80047d0:	009b      	lsls	r3, r3, #2
 80047d2:	440b      	add	r3, r1
 80047d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80047d8:	2200      	movs	r2, #0
 80047da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80047dc:	7bfa      	ldrb	r2, [r7, #15]
 80047de:	6879      	ldr	r1, [r7, #4]
 80047e0:	4613      	mov	r3, r2
 80047e2:	00db      	lsls	r3, r3, #3
 80047e4:	4413      	add	r3, r2
 80047e6:	009b      	lsls	r3, r3, #2
 80047e8:	440b      	add	r3, r1
 80047ea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80047ee:	2200      	movs	r2, #0
 80047f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80047f2:	7bfa      	ldrb	r2, [r7, #15]
 80047f4:	6879      	ldr	r1, [r7, #4]
 80047f6:	4613      	mov	r3, r2
 80047f8:	00db      	lsls	r3, r3, #3
 80047fa:	4413      	add	r3, r2
 80047fc:	009b      	lsls	r3, r3, #2
 80047fe:	440b      	add	r3, r1
 8004800:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004804:	2200      	movs	r2, #0
 8004806:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8004808:	7bfa      	ldrb	r2, [r7, #15]
 800480a:	6879      	ldr	r1, [r7, #4]
 800480c:	4613      	mov	r3, r2
 800480e:	00db      	lsls	r3, r3, #3
 8004810:	4413      	add	r3, r2
 8004812:	009b      	lsls	r3, r3, #2
 8004814:	440b      	add	r3, r1
 8004816:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800481a:	2200      	movs	r2, #0
 800481c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800481e:	7bfb      	ldrb	r3, [r7, #15]
 8004820:	3301      	adds	r3, #1
 8004822:	73fb      	strb	r3, [r7, #15]
 8004824:	7bfa      	ldrb	r2, [r7, #15]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	685b      	ldr	r3, [r3, #4]
 800482a:	429a      	cmp	r2, r3
 800482c:	d3b5      	bcc.n	800479a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	603b      	str	r3, [r7, #0]
 8004834:	687e      	ldr	r6, [r7, #4]
 8004836:	466d      	mov	r5, sp
 8004838:	f106 0410 	add.w	r4, r6, #16
 800483c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800483e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004840:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004842:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004844:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004848:	e885 0003 	stmia.w	r5, {r0, r1}
 800484c:	1d33      	adds	r3, r6, #4
 800484e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8004850:	6838      	ldr	r0, [r7, #0]
 8004852:	f004 f81d 	bl	8008890 <USB_DevInit>
 8004856:	4603      	mov	r3, r0
 8004858:	2b00      	cmp	r3, #0
 800485a:	d005      	beq.n	8004868 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2202      	movs	r2, #2
 8004860:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004864:	2301      	movs	r3, #1
 8004866:	e014      	b.n	8004892 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	2200      	movs	r2, #0
 800486c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	2201      	movs	r2, #1
 8004874:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487c:	2b01      	cmp	r3, #1
 800487e:	d102      	bne.n	8004886 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8004880:	6878      	ldr	r0, [r7, #4]
 8004882:	f000 f80b 	bl	800489c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	4618      	mov	r0, r3
 800488c:	f004 f9db 	bl	8008c46 <USB_DevDisconnect>

  return HAL_OK;
 8004890:	2300      	movs	r3, #0
}
 8004892:	4618      	mov	r0, r3
 8004894:	3714      	adds	r7, #20
 8004896:	46bd      	mov	sp, r7
 8004898:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800489c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800489c:	b480      	push	{r7}
 800489e:	b085      	sub	sp, #20
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	2201      	movs	r2, #1
 80048ae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	2200      	movs	r2, #0
 80048b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80048ca:	4b05      	ldr	r3, [pc, #20]	; (80048e0 <HAL_PCDEx_ActivateLPM+0x44>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	68fa      	ldr	r2, [r7, #12]
 80048d0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80048d2:	2300      	movs	r3, #0
}
 80048d4:	4618      	mov	r0, r3
 80048d6:	3714      	adds	r7, #20
 80048d8:	46bd      	mov	sp, r7
 80048da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048de:	4770      	bx	lr
 80048e0:	10000003 	.word	0x10000003

080048e4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80048e4:	b480      	push	{r7}
 80048e6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80048e8:	4b05      	ldr	r3, [pc, #20]	; (8004900 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	4a04      	ldr	r2, [pc, #16]	; (8004900 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80048ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048f2:	6013      	str	r3, [r2, #0]
}
 80048f4:	bf00      	nop
 80048f6:	46bd      	mov	sp, r7
 80048f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fc:	4770      	bx	lr
 80048fe:	bf00      	nop
 8004900:	40007000 	.word	0x40007000

08004904 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b086      	sub	sp, #24
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 800490c:	2300      	movs	r3, #0
 800490e:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2b00      	cmp	r3, #0
 8004914:	d101      	bne.n	800491a <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e291      	b.n	8004e3e <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f003 0301 	and.w	r3, r3, #1
 8004922:	2b00      	cmp	r3, #0
 8004924:	f000 8087 	beq.w	8004a36 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004928:	4b96      	ldr	r3, [pc, #600]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f003 030c 	and.w	r3, r3, #12
 8004930:	2b04      	cmp	r3, #4
 8004932:	d00c      	beq.n	800494e <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004934:	4b93      	ldr	r3, [pc, #588]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004936:	689b      	ldr	r3, [r3, #8]
 8004938:	f003 030c 	and.w	r3, r3, #12
 800493c:	2b08      	cmp	r3, #8
 800493e:	d112      	bne.n	8004966 <HAL_RCC_OscConfig+0x62>
 8004940:	4b90      	ldr	r3, [pc, #576]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004948:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800494c:	d10b      	bne.n	8004966 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800494e:	4b8d      	ldr	r3, [pc, #564]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004956:	2b00      	cmp	r3, #0
 8004958:	d06c      	beq.n	8004a34 <HAL_RCC_OscConfig+0x130>
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d168      	bne.n	8004a34 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004962:	2301      	movs	r3, #1
 8004964:	e26b      	b.n	8004e3e <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	685b      	ldr	r3, [r3, #4]
 800496a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800496e:	d106      	bne.n	800497e <HAL_RCC_OscConfig+0x7a>
 8004970:	4b84      	ldr	r3, [pc, #528]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	4a83      	ldr	r2, [pc, #524]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004976:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800497a:	6013      	str	r3, [r2, #0]
 800497c:	e02e      	b.n	80049dc <HAL_RCC_OscConfig+0xd8>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d10c      	bne.n	80049a0 <HAL_RCC_OscConfig+0x9c>
 8004986:	4b7f      	ldr	r3, [pc, #508]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	4a7e      	ldr	r2, [pc, #504]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 800498c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004990:	6013      	str	r3, [r2, #0]
 8004992:	4b7c      	ldr	r3, [pc, #496]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	4a7b      	ldr	r2, [pc, #492]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004998:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800499c:	6013      	str	r3, [r2, #0]
 800499e:	e01d      	b.n	80049dc <HAL_RCC_OscConfig+0xd8>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	685b      	ldr	r3, [r3, #4]
 80049a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80049a8:	d10c      	bne.n	80049c4 <HAL_RCC_OscConfig+0xc0>
 80049aa:	4b76      	ldr	r3, [pc, #472]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a75      	ldr	r2, [pc, #468]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 80049b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80049b4:	6013      	str	r3, [r2, #0]
 80049b6:	4b73      	ldr	r3, [pc, #460]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4a72      	ldr	r2, [pc, #456]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 80049bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049c0:	6013      	str	r3, [r2, #0]
 80049c2:	e00b      	b.n	80049dc <HAL_RCC_OscConfig+0xd8>
 80049c4:	4b6f      	ldr	r3, [pc, #444]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	4a6e      	ldr	r2, [pc, #440]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 80049ca:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	4b6c      	ldr	r3, [pc, #432]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4a6b      	ldr	r2, [pc, #428]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 80049d6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80049da:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	685b      	ldr	r3, [r3, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d013      	beq.n	8004a0c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80049e4:	f7fd fd6c 	bl	80024c0 <HAL_GetTick>
 80049e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ea:	e008      	b.n	80049fe <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049ec:	f7fd fd68 	bl	80024c0 <HAL_GetTick>
 80049f0:	4602      	mov	r2, r0
 80049f2:	693b      	ldr	r3, [r7, #16]
 80049f4:	1ad3      	subs	r3, r2, r3
 80049f6:	2b64      	cmp	r3, #100	; 0x64
 80049f8:	d901      	bls.n	80049fe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049fa:	2303      	movs	r3, #3
 80049fc:	e21f      	b.n	8004e3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049fe:	4b61      	ldr	r3, [pc, #388]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004a00:	681b      	ldr	r3, [r3, #0]
 8004a02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d0f0      	beq.n	80049ec <HAL_RCC_OscConfig+0xe8>
 8004a0a:	e014      	b.n	8004a36 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0c:	f7fd fd58 	bl	80024c0 <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a14:	f7fd fd54 	bl	80024c0 <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b64      	cmp	r3, #100	; 0x64
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e20b      	b.n	8004e3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a26:	4b57      	ldr	r3, [pc, #348]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d1f0      	bne.n	8004a14 <HAL_RCC_OscConfig+0x110>
 8004a32:	e000      	b.n	8004a36 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004a34:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f003 0302 	and.w	r3, r3, #2
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d069      	beq.n	8004b16 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004a42:	4b50      	ldr	r3, [pc, #320]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004a44:	689b      	ldr	r3, [r3, #8]
 8004a46:	f003 030c 	and.w	r3, r3, #12
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d00b      	beq.n	8004a66 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004a4e:	4b4d      	ldr	r3, [pc, #308]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004a50:	689b      	ldr	r3, [r3, #8]
 8004a52:	f003 030c 	and.w	r3, r3, #12
 8004a56:	2b08      	cmp	r3, #8
 8004a58:	d11c      	bne.n	8004a94 <HAL_RCC_OscConfig+0x190>
 8004a5a:	4b4a      	ldr	r3, [pc, #296]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d116      	bne.n	8004a94 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a66:	4b47      	ldr	r3, [pc, #284]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 0302 	and.w	r3, r3, #2
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d005      	beq.n	8004a7e <HAL_RCC_OscConfig+0x17a>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	68db      	ldr	r3, [r3, #12]
 8004a76:	2b01      	cmp	r3, #1
 8004a78:	d001      	beq.n	8004a7e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004a7a:	2301      	movs	r3, #1
 8004a7c:	e1df      	b.n	8004e3e <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a7e:	4b41      	ldr	r3, [pc, #260]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	00db      	lsls	r3, r3, #3
 8004a8c:	493d      	ldr	r1, [pc, #244]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a92:	e040      	b.n	8004b16 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	68db      	ldr	r3, [r3, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d023      	beq.n	8004ae4 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a9c:	4b39      	ldr	r3, [pc, #228]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a38      	ldr	r2, [pc, #224]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004aa2:	f043 0301 	orr.w	r3, r3, #1
 8004aa6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004aa8:	f7fd fd0a 	bl	80024c0 <HAL_GetTick>
 8004aac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aae:	e008      	b.n	8004ac2 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ab0:	f7fd fd06 	bl	80024c0 <HAL_GetTick>
 8004ab4:	4602      	mov	r2, r0
 8004ab6:	693b      	ldr	r3, [r7, #16]
 8004ab8:	1ad3      	subs	r3, r2, r3
 8004aba:	2b02      	cmp	r3, #2
 8004abc:	d901      	bls.n	8004ac2 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004abe:	2303      	movs	r3, #3
 8004ac0:	e1bd      	b.n	8004e3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ac2:	4b30      	ldr	r3, [pc, #192]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	f003 0302 	and.w	r3, r3, #2
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d0f0      	beq.n	8004ab0 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ace:	4b2d      	ldr	r3, [pc, #180]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	691b      	ldr	r3, [r3, #16]
 8004ada:	00db      	lsls	r3, r3, #3
 8004adc:	4929      	ldr	r1, [pc, #164]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	600b      	str	r3, [r1, #0]
 8004ae2:	e018      	b.n	8004b16 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004ae4:	4b27      	ldr	r3, [pc, #156]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	4a26      	ldr	r2, [pc, #152]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004aea:	f023 0301 	bic.w	r3, r3, #1
 8004aee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004af0:	f7fd fce6 	bl	80024c0 <HAL_GetTick>
 8004af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004af6:	e008      	b.n	8004b0a <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004af8:	f7fd fce2 	bl	80024c0 <HAL_GetTick>
 8004afc:	4602      	mov	r2, r0
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	1ad3      	subs	r3, r2, r3
 8004b02:	2b02      	cmp	r3, #2
 8004b04:	d901      	bls.n	8004b0a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004b06:	2303      	movs	r3, #3
 8004b08:	e199      	b.n	8004e3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b0a:	4b1e      	ldr	r3, [pc, #120]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f003 0302 	and.w	r3, r3, #2
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d1f0      	bne.n	8004af8 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	f003 0308 	and.w	r3, r3, #8
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d038      	beq.n	8004b94 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	695b      	ldr	r3, [r3, #20]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d019      	beq.n	8004b5e <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b2a:	4b16      	ldr	r3, [pc, #88]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004b2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b2e:	4a15      	ldr	r2, [pc, #84]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004b30:	f043 0301 	orr.w	r3, r3, #1
 8004b34:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b36:	f7fd fcc3 	bl	80024c0 <HAL_GetTick>
 8004b3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b3c:	e008      	b.n	8004b50 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b3e:	f7fd fcbf 	bl	80024c0 <HAL_GetTick>
 8004b42:	4602      	mov	r2, r0
 8004b44:	693b      	ldr	r3, [r7, #16]
 8004b46:	1ad3      	subs	r3, r2, r3
 8004b48:	2b02      	cmp	r3, #2
 8004b4a:	d901      	bls.n	8004b50 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004b4c:	2303      	movs	r3, #3
 8004b4e:	e176      	b.n	8004e3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004b50:	4b0c      	ldr	r3, [pc, #48]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004b52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b54:	f003 0302 	and.w	r3, r3, #2
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d0f0      	beq.n	8004b3e <HAL_RCC_OscConfig+0x23a>
 8004b5c:	e01a      	b.n	8004b94 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004b5e:	4b09      	ldr	r3, [pc, #36]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004b60:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b62:	4a08      	ldr	r2, [pc, #32]	; (8004b84 <HAL_RCC_OscConfig+0x280>)
 8004b64:	f023 0301 	bic.w	r3, r3, #1
 8004b68:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004b6a:	f7fd fca9 	bl	80024c0 <HAL_GetTick>
 8004b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b70:	e00a      	b.n	8004b88 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004b72:	f7fd fca5 	bl	80024c0 <HAL_GetTick>
 8004b76:	4602      	mov	r2, r0
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	1ad3      	subs	r3, r2, r3
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d903      	bls.n	8004b88 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004b80:	2303      	movs	r3, #3
 8004b82:	e15c      	b.n	8004e3e <HAL_RCC_OscConfig+0x53a>
 8004b84:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b88:	4b91      	ldr	r3, [pc, #580]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004b8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004b8c:	f003 0302 	and.w	r3, r3, #2
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d1ee      	bne.n	8004b72 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f003 0304 	and.w	r3, r3, #4
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	f000 80a4 	beq.w	8004cea <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ba2:	4b8b      	ldr	r3, [pc, #556]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004ba4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004baa:	2b00      	cmp	r3, #0
 8004bac:	d10d      	bne.n	8004bca <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004bae:	4b88      	ldr	r3, [pc, #544]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bb2:	4a87      	ldr	r2, [pc, #540]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004bb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004bb8:	6413      	str	r3, [r2, #64]	; 0x40
 8004bba:	4b85      	ldr	r3, [pc, #532]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004bc2:	60bb      	str	r3, [r7, #8]
 8004bc4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bca:	4b82      	ldr	r3, [pc, #520]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d118      	bne.n	8004c08 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004bd6:	4b7f      	ldr	r3, [pc, #508]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	4a7e      	ldr	r2, [pc, #504]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004bdc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004be0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004be2:	f7fd fc6d 	bl	80024c0 <HAL_GetTick>
 8004be6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004be8:	e008      	b.n	8004bfc <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004bea:	f7fd fc69 	bl	80024c0 <HAL_GetTick>
 8004bee:	4602      	mov	r2, r0
 8004bf0:	693b      	ldr	r3, [r7, #16]
 8004bf2:	1ad3      	subs	r3, r2, r3
 8004bf4:	2b64      	cmp	r3, #100	; 0x64
 8004bf6:	d901      	bls.n	8004bfc <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004bf8:	2303      	movs	r3, #3
 8004bfa:	e120      	b.n	8004e3e <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004bfc:	4b75      	ldr	r3, [pc, #468]	; (8004dd4 <HAL_RCC_OscConfig+0x4d0>)
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d0f0      	beq.n	8004bea <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	2b01      	cmp	r3, #1
 8004c0e:	d106      	bne.n	8004c1e <HAL_RCC_OscConfig+0x31a>
 8004c10:	4b6f      	ldr	r3, [pc, #444]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c14:	4a6e      	ldr	r2, [pc, #440]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004c16:	f043 0301 	orr.w	r3, r3, #1
 8004c1a:	6713      	str	r3, [r2, #112]	; 0x70
 8004c1c:	e02d      	b.n	8004c7a <HAL_RCC_OscConfig+0x376>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	689b      	ldr	r3, [r3, #8]
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d10c      	bne.n	8004c40 <HAL_RCC_OscConfig+0x33c>
 8004c26:	4b6a      	ldr	r3, [pc, #424]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004c28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c2a:	4a69      	ldr	r2, [pc, #420]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004c2c:	f023 0301 	bic.w	r3, r3, #1
 8004c30:	6713      	str	r3, [r2, #112]	; 0x70
 8004c32:	4b67      	ldr	r3, [pc, #412]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c36:	4a66      	ldr	r2, [pc, #408]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004c38:	f023 0304 	bic.w	r3, r3, #4
 8004c3c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c3e:	e01c      	b.n	8004c7a <HAL_RCC_OscConfig+0x376>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	689b      	ldr	r3, [r3, #8]
 8004c44:	2b05      	cmp	r3, #5
 8004c46:	d10c      	bne.n	8004c62 <HAL_RCC_OscConfig+0x35e>
 8004c48:	4b61      	ldr	r3, [pc, #388]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004c4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c4c:	4a60      	ldr	r2, [pc, #384]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004c4e:	f043 0304 	orr.w	r3, r3, #4
 8004c52:	6713      	str	r3, [r2, #112]	; 0x70
 8004c54:	4b5e      	ldr	r3, [pc, #376]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c58:	4a5d      	ldr	r2, [pc, #372]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004c5a:	f043 0301 	orr.w	r3, r3, #1
 8004c5e:	6713      	str	r3, [r2, #112]	; 0x70
 8004c60:	e00b      	b.n	8004c7a <HAL_RCC_OscConfig+0x376>
 8004c62:	4b5b      	ldr	r3, [pc, #364]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004c64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c66:	4a5a      	ldr	r2, [pc, #360]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004c68:	f023 0301 	bic.w	r3, r3, #1
 8004c6c:	6713      	str	r3, [r2, #112]	; 0x70
 8004c6e:	4b58      	ldr	r3, [pc, #352]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004c70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c72:	4a57      	ldr	r2, [pc, #348]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004c74:	f023 0304 	bic.w	r3, r3, #4
 8004c78:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	689b      	ldr	r3, [r3, #8]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d015      	beq.n	8004cae <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c82:	f7fd fc1d 	bl	80024c0 <HAL_GetTick>
 8004c86:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c88:	e00a      	b.n	8004ca0 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c8a:	f7fd fc19 	bl	80024c0 <HAL_GetTick>
 8004c8e:	4602      	mov	r2, r0
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	1ad3      	subs	r3, r2, r3
 8004c94:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d901      	bls.n	8004ca0 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004c9c:	2303      	movs	r3, #3
 8004c9e:	e0ce      	b.n	8004e3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ca0:	4b4b      	ldr	r3, [pc, #300]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004ca2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004ca4:	f003 0302 	and.w	r3, r3, #2
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d0ee      	beq.n	8004c8a <HAL_RCC_OscConfig+0x386>
 8004cac:	e014      	b.n	8004cd8 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cae:	f7fd fc07 	bl	80024c0 <HAL_GetTick>
 8004cb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004cb4:	e00a      	b.n	8004ccc <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cb6:	f7fd fc03 	bl	80024c0 <HAL_GetTick>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	693b      	ldr	r3, [r7, #16]
 8004cbe:	1ad3      	subs	r3, r2, r3
 8004cc0:	f241 3288 	movw	r2, #5000	; 0x1388
 8004cc4:	4293      	cmp	r3, r2
 8004cc6:	d901      	bls.n	8004ccc <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004cc8:	2303      	movs	r3, #3
 8004cca:	e0b8      	b.n	8004e3e <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ccc:	4b40      	ldr	r3, [pc, #256]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004cce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004cd0:	f003 0302 	and.w	r3, r3, #2
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1ee      	bne.n	8004cb6 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004cd8:	7dfb      	ldrb	r3, [r7, #23]
 8004cda:	2b01      	cmp	r3, #1
 8004cdc:	d105      	bne.n	8004cea <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004cde:	4b3c      	ldr	r3, [pc, #240]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ce2:	4a3b      	ldr	r2, [pc, #236]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004ce4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ce8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	699b      	ldr	r3, [r3, #24]
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	f000 80a4 	beq.w	8004e3c <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004cf4:	4b36      	ldr	r3, [pc, #216]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004cf6:	689b      	ldr	r3, [r3, #8]
 8004cf8:	f003 030c 	and.w	r3, r3, #12
 8004cfc:	2b08      	cmp	r3, #8
 8004cfe:	d06b      	beq.n	8004dd8 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	699b      	ldr	r3, [r3, #24]
 8004d04:	2b02      	cmp	r3, #2
 8004d06:	d149      	bne.n	8004d9c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d08:	4b31      	ldr	r3, [pc, #196]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	4a30      	ldr	r2, [pc, #192]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004d0e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d14:	f7fd fbd4 	bl	80024c0 <HAL_GetTick>
 8004d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d1a:	e008      	b.n	8004d2e <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d1c:	f7fd fbd0 	bl	80024c0 <HAL_GetTick>
 8004d20:	4602      	mov	r2, r0
 8004d22:	693b      	ldr	r3, [r7, #16]
 8004d24:	1ad3      	subs	r3, r2, r3
 8004d26:	2b02      	cmp	r3, #2
 8004d28:	d901      	bls.n	8004d2e <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004d2a:	2303      	movs	r3, #3
 8004d2c:	e087      	b.n	8004e3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d2e:	4b28      	ldr	r3, [pc, #160]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d1f0      	bne.n	8004d1c <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	69da      	ldr	r2, [r3, #28]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6a1b      	ldr	r3, [r3, #32]
 8004d42:	431a      	orrs	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d48:	019b      	lsls	r3, r3, #6
 8004d4a:	431a      	orrs	r2, r3
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d50:	085b      	lsrs	r3, r3, #1
 8004d52:	3b01      	subs	r3, #1
 8004d54:	041b      	lsls	r3, r3, #16
 8004d56:	431a      	orrs	r2, r3
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5c:	061b      	lsls	r3, r3, #24
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	4a1b      	ldr	r2, [pc, #108]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004d62:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d66:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004d68:	4b19      	ldr	r3, [pc, #100]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a18      	ldr	r2, [pc, #96]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004d6e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d72:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d74:	f7fd fba4 	bl	80024c0 <HAL_GetTick>
 8004d78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d7a:	e008      	b.n	8004d8e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d7c:	f7fd fba0 	bl	80024c0 <HAL_GetTick>
 8004d80:	4602      	mov	r2, r0
 8004d82:	693b      	ldr	r3, [r7, #16]
 8004d84:	1ad3      	subs	r3, r2, r3
 8004d86:	2b02      	cmp	r3, #2
 8004d88:	d901      	bls.n	8004d8e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004d8a:	2303      	movs	r3, #3
 8004d8c:	e057      	b.n	8004e3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d8e:	4b10      	ldr	r3, [pc, #64]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d0f0      	beq.n	8004d7c <HAL_RCC_OscConfig+0x478>
 8004d9a:	e04f      	b.n	8004e3c <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d9c:	4b0c      	ldr	r3, [pc, #48]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	4a0b      	ldr	r2, [pc, #44]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004da2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004da6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da8:	f7fd fb8a 	bl	80024c0 <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004db0:	f7fd fb86 	bl	80024c0 <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e03d      	b.n	8004e3e <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dc2:	4b03      	ldr	r3, [pc, #12]	; (8004dd0 <HAL_RCC_OscConfig+0x4cc>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1f0      	bne.n	8004db0 <HAL_RCC_OscConfig+0x4ac>
 8004dce:	e035      	b.n	8004e3c <HAL_RCC_OscConfig+0x538>
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004dd8:	4b1b      	ldr	r3, [pc, #108]	; (8004e48 <HAL_RCC_OscConfig+0x544>)
 8004dda:	685b      	ldr	r3, [r3, #4]
 8004ddc:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	699b      	ldr	r3, [r3, #24]
 8004de2:	2b01      	cmp	r3, #1
 8004de4:	d028      	beq.n	8004e38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d121      	bne.n	8004e38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004dfe:	429a      	cmp	r2, r3
 8004e00:	d11a      	bne.n	8004e38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e02:	68fa      	ldr	r2, [r7, #12]
 8004e04:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004e08:	4013      	ands	r3, r2
 8004e0a:	687a      	ldr	r2, [r7, #4]
 8004e0c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004e0e:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004e10:	4293      	cmp	r3, r2
 8004e12:	d111      	bne.n	8004e38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004e1e:	085b      	lsrs	r3, r3, #1
 8004e20:	3b01      	subs	r3, #1
 8004e22:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004e24:	429a      	cmp	r2, r3
 8004e26:	d107      	bne.n	8004e38 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e32:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004e34:	429a      	cmp	r2, r3
 8004e36:	d001      	beq.n	8004e3c <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	e000      	b.n	8004e3e <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004e3c:	2300      	movs	r3, #0
}
 8004e3e:	4618      	mov	r0, r3
 8004e40:	3718      	adds	r7, #24
 8004e42:	46bd      	mov	sp, r7
 8004e44:	bd80      	pop	{r7, pc}
 8004e46:	bf00      	nop
 8004e48:	40023800 	.word	0x40023800

08004e4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b084      	sub	sp, #16
 8004e50:	af00      	add	r7, sp, #0
 8004e52:	6078      	str	r0, [r7, #4]
 8004e54:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004e56:	2300      	movs	r3, #0
 8004e58:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d101      	bne.n	8004e64 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004e60:	2301      	movs	r3, #1
 8004e62:	e0d0      	b.n	8005006 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004e64:	4b6a      	ldr	r3, [pc, #424]	; (8005010 <HAL_RCC_ClockConfig+0x1c4>)
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	683a      	ldr	r2, [r7, #0]
 8004e6e:	429a      	cmp	r2, r3
 8004e70:	d910      	bls.n	8004e94 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004e72:	4b67      	ldr	r3, [pc, #412]	; (8005010 <HAL_RCC_ClockConfig+0x1c4>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f023 020f 	bic.w	r2, r3, #15
 8004e7a:	4965      	ldr	r1, [pc, #404]	; (8005010 <HAL_RCC_ClockConfig+0x1c4>)
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	4313      	orrs	r3, r2
 8004e80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004e82:	4b63      	ldr	r3, [pc, #396]	; (8005010 <HAL_RCC_ClockConfig+0x1c4>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 030f 	and.w	r3, r3, #15
 8004e8a:	683a      	ldr	r2, [r7, #0]
 8004e8c:	429a      	cmp	r2, r3
 8004e8e:	d001      	beq.n	8004e94 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004e90:	2301      	movs	r3, #1
 8004e92:	e0b8      	b.n	8005006 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	f003 0302 	and.w	r3, r3, #2
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d020      	beq.n	8004ee2 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	f003 0304 	and.w	r3, r3, #4
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d005      	beq.n	8004eb8 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004eac:	4b59      	ldr	r3, [pc, #356]	; (8005014 <HAL_RCC_ClockConfig+0x1c8>)
 8004eae:	689b      	ldr	r3, [r3, #8]
 8004eb0:	4a58      	ldr	r2, [pc, #352]	; (8005014 <HAL_RCC_ClockConfig+0x1c8>)
 8004eb2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004eb6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	f003 0308 	and.w	r3, r3, #8
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d005      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004ec4:	4b53      	ldr	r3, [pc, #332]	; (8005014 <HAL_RCC_ClockConfig+0x1c8>)
 8004ec6:	689b      	ldr	r3, [r3, #8]
 8004ec8:	4a52      	ldr	r2, [pc, #328]	; (8005014 <HAL_RCC_ClockConfig+0x1c8>)
 8004eca:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004ece:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004ed0:	4b50      	ldr	r3, [pc, #320]	; (8005014 <HAL_RCC_ClockConfig+0x1c8>)
 8004ed2:	689b      	ldr	r3, [r3, #8]
 8004ed4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689b      	ldr	r3, [r3, #8]
 8004edc:	494d      	ldr	r1, [pc, #308]	; (8005014 <HAL_RCC_ClockConfig+0x1c8>)
 8004ede:	4313      	orrs	r3, r2
 8004ee0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f003 0301 	and.w	r3, r3, #1
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d040      	beq.n	8004f70 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	685b      	ldr	r3, [r3, #4]
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d107      	bne.n	8004f06 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004ef6:	4b47      	ldr	r3, [pc, #284]	; (8005014 <HAL_RCC_ClockConfig+0x1c8>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d115      	bne.n	8004f2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f02:	2301      	movs	r3, #1
 8004f04:	e07f      	b.n	8005006 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	685b      	ldr	r3, [r3, #4]
 8004f0a:	2b02      	cmp	r3, #2
 8004f0c:	d107      	bne.n	8004f1e <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f0e:	4b41      	ldr	r3, [pc, #260]	; (8005014 <HAL_RCC_ClockConfig+0x1c8>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d109      	bne.n	8004f2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e073      	b.n	8005006 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f1e:	4b3d      	ldr	r3, [pc, #244]	; (8005014 <HAL_RCC_ClockConfig+0x1c8>)
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f003 0302 	and.w	r3, r3, #2
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d101      	bne.n	8004f2e <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e06b      	b.n	8005006 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f2e:	4b39      	ldr	r3, [pc, #228]	; (8005014 <HAL_RCC_ClockConfig+0x1c8>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f023 0203 	bic.w	r2, r3, #3
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	685b      	ldr	r3, [r3, #4]
 8004f3a:	4936      	ldr	r1, [pc, #216]	; (8005014 <HAL_RCC_ClockConfig+0x1c8>)
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004f40:	f7fd fabe 	bl	80024c0 <HAL_GetTick>
 8004f44:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f46:	e00a      	b.n	8004f5e <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f48:	f7fd faba 	bl	80024c0 <HAL_GetTick>
 8004f4c:	4602      	mov	r2, r0
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	1ad3      	subs	r3, r2, r3
 8004f52:	f241 3288 	movw	r2, #5000	; 0x1388
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e053      	b.n	8005006 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f5e:	4b2d      	ldr	r3, [pc, #180]	; (8005014 <HAL_RCC_ClockConfig+0x1c8>)
 8004f60:	689b      	ldr	r3, [r3, #8]
 8004f62:	f003 020c 	and.w	r2, r3, #12
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	009b      	lsls	r3, r3, #2
 8004f6c:	429a      	cmp	r2, r3
 8004f6e:	d1eb      	bne.n	8004f48 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004f70:	4b27      	ldr	r3, [pc, #156]	; (8005010 <HAL_RCC_ClockConfig+0x1c4>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f003 030f 	and.w	r3, r3, #15
 8004f78:	683a      	ldr	r2, [r7, #0]
 8004f7a:	429a      	cmp	r2, r3
 8004f7c:	d210      	bcs.n	8004fa0 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004f7e:	4b24      	ldr	r3, [pc, #144]	; (8005010 <HAL_RCC_ClockConfig+0x1c4>)
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f023 020f 	bic.w	r2, r3, #15
 8004f86:	4922      	ldr	r1, [pc, #136]	; (8005010 <HAL_RCC_ClockConfig+0x1c4>)
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	4313      	orrs	r3, r2
 8004f8c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004f8e:	4b20      	ldr	r3, [pc, #128]	; (8005010 <HAL_RCC_ClockConfig+0x1c4>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f003 030f 	and.w	r3, r3, #15
 8004f96:	683a      	ldr	r2, [r7, #0]
 8004f98:	429a      	cmp	r2, r3
 8004f9a:	d001      	beq.n	8004fa0 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004f9c:	2301      	movs	r3, #1
 8004f9e:	e032      	b.n	8005006 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f003 0304 	and.w	r3, r3, #4
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d008      	beq.n	8004fbe <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004fac:	4b19      	ldr	r3, [pc, #100]	; (8005014 <HAL_RCC_ClockConfig+0x1c8>)
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	4916      	ldr	r1, [pc, #88]	; (8005014 <HAL_RCC_ClockConfig+0x1c8>)
 8004fba:	4313      	orrs	r3, r2
 8004fbc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f003 0308 	and.w	r3, r3, #8
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d009      	beq.n	8004fde <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004fca:	4b12      	ldr	r3, [pc, #72]	; (8005014 <HAL_RCC_ClockConfig+0x1c8>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	691b      	ldr	r3, [r3, #16]
 8004fd6:	00db      	lsls	r3, r3, #3
 8004fd8:	490e      	ldr	r1, [pc, #56]	; (8005014 <HAL_RCC_ClockConfig+0x1c8>)
 8004fda:	4313      	orrs	r3, r2
 8004fdc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004fde:	f000 f821 	bl	8005024 <HAL_RCC_GetSysClockFreq>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	4b0b      	ldr	r3, [pc, #44]	; (8005014 <HAL_RCC_ClockConfig+0x1c8>)
 8004fe6:	689b      	ldr	r3, [r3, #8]
 8004fe8:	091b      	lsrs	r3, r3, #4
 8004fea:	f003 030f 	and.w	r3, r3, #15
 8004fee:	490a      	ldr	r1, [pc, #40]	; (8005018 <HAL_RCC_ClockConfig+0x1cc>)
 8004ff0:	5ccb      	ldrb	r3, [r1, r3]
 8004ff2:	fa22 f303 	lsr.w	r3, r2, r3
 8004ff6:	4a09      	ldr	r2, [pc, #36]	; (800501c <HAL_RCC_ClockConfig+0x1d0>)
 8004ff8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004ffa:	4b09      	ldr	r3, [pc, #36]	; (8005020 <HAL_RCC_ClockConfig+0x1d4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	4618      	mov	r0, r3
 8005000:	f7fd fa1a 	bl	8002438 <HAL_InitTick>

  return HAL_OK;
 8005004:	2300      	movs	r3, #0
}
 8005006:	4618      	mov	r0, r3
 8005008:	3710      	adds	r7, #16
 800500a:	46bd      	mov	sp, r7
 800500c:	bd80      	pop	{r7, pc}
 800500e:	bf00      	nop
 8005010:	40023c00 	.word	0x40023c00
 8005014:	40023800 	.word	0x40023800
 8005018:	0800d704 	.word	0x0800d704
 800501c:	20000000 	.word	0x20000000
 8005020:	20000004 	.word	0x20000004

08005024 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005024:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005028:	b094      	sub	sp, #80	; 0x50
 800502a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 800502c:	2300      	movs	r3, #0
 800502e:	647b      	str	r3, [r7, #68]	; 0x44
 8005030:	2300      	movs	r3, #0
 8005032:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005034:	2300      	movs	r3, #0
 8005036:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8005038:	2300      	movs	r3, #0
 800503a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800503c:	4b79      	ldr	r3, [pc, #484]	; (8005224 <HAL_RCC_GetSysClockFreq+0x200>)
 800503e:	689b      	ldr	r3, [r3, #8]
 8005040:	f003 030c 	and.w	r3, r3, #12
 8005044:	2b08      	cmp	r3, #8
 8005046:	d00d      	beq.n	8005064 <HAL_RCC_GetSysClockFreq+0x40>
 8005048:	2b08      	cmp	r3, #8
 800504a:	f200 80e1 	bhi.w	8005210 <HAL_RCC_GetSysClockFreq+0x1ec>
 800504e:	2b00      	cmp	r3, #0
 8005050:	d002      	beq.n	8005058 <HAL_RCC_GetSysClockFreq+0x34>
 8005052:	2b04      	cmp	r3, #4
 8005054:	d003      	beq.n	800505e <HAL_RCC_GetSysClockFreq+0x3a>
 8005056:	e0db      	b.n	8005210 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005058:	4b73      	ldr	r3, [pc, #460]	; (8005228 <HAL_RCC_GetSysClockFreq+0x204>)
 800505a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800505c:	e0db      	b.n	8005216 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800505e:	4b73      	ldr	r3, [pc, #460]	; (800522c <HAL_RCC_GetSysClockFreq+0x208>)
 8005060:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005062:	e0d8      	b.n	8005216 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005064:	4b6f      	ldr	r3, [pc, #444]	; (8005224 <HAL_RCC_GetSysClockFreq+0x200>)
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800506c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800506e:	4b6d      	ldr	r3, [pc, #436]	; (8005224 <HAL_RCC_GetSysClockFreq+0x200>)
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005076:	2b00      	cmp	r3, #0
 8005078:	d063      	beq.n	8005142 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800507a:	4b6a      	ldr	r3, [pc, #424]	; (8005224 <HAL_RCC_GetSysClockFreq+0x200>)
 800507c:	685b      	ldr	r3, [r3, #4]
 800507e:	099b      	lsrs	r3, r3, #6
 8005080:	2200      	movs	r2, #0
 8005082:	63bb      	str	r3, [r7, #56]	; 0x38
 8005084:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005086:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005088:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800508c:	633b      	str	r3, [r7, #48]	; 0x30
 800508e:	2300      	movs	r3, #0
 8005090:	637b      	str	r3, [r7, #52]	; 0x34
 8005092:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005096:	4622      	mov	r2, r4
 8005098:	462b      	mov	r3, r5
 800509a:	f04f 0000 	mov.w	r0, #0
 800509e:	f04f 0100 	mov.w	r1, #0
 80050a2:	0159      	lsls	r1, r3, #5
 80050a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050a8:	0150      	lsls	r0, r2, #5
 80050aa:	4602      	mov	r2, r0
 80050ac:	460b      	mov	r3, r1
 80050ae:	4621      	mov	r1, r4
 80050b0:	1a51      	subs	r1, r2, r1
 80050b2:	6139      	str	r1, [r7, #16]
 80050b4:	4629      	mov	r1, r5
 80050b6:	eb63 0301 	sbc.w	r3, r3, r1
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050c8:	4659      	mov	r1, fp
 80050ca:	018b      	lsls	r3, r1, #6
 80050cc:	4651      	mov	r1, sl
 80050ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80050d2:	4651      	mov	r1, sl
 80050d4:	018a      	lsls	r2, r1, #6
 80050d6:	4651      	mov	r1, sl
 80050d8:	ebb2 0801 	subs.w	r8, r2, r1
 80050dc:	4659      	mov	r1, fp
 80050de:	eb63 0901 	sbc.w	r9, r3, r1
 80050e2:	f04f 0200 	mov.w	r2, #0
 80050e6:	f04f 0300 	mov.w	r3, #0
 80050ea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80050ee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80050f2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80050f6:	4690      	mov	r8, r2
 80050f8:	4699      	mov	r9, r3
 80050fa:	4623      	mov	r3, r4
 80050fc:	eb18 0303 	adds.w	r3, r8, r3
 8005100:	60bb      	str	r3, [r7, #8]
 8005102:	462b      	mov	r3, r5
 8005104:	eb49 0303 	adc.w	r3, r9, r3
 8005108:	60fb      	str	r3, [r7, #12]
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005116:	4629      	mov	r1, r5
 8005118:	024b      	lsls	r3, r1, #9
 800511a:	4621      	mov	r1, r4
 800511c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005120:	4621      	mov	r1, r4
 8005122:	024a      	lsls	r2, r1, #9
 8005124:	4610      	mov	r0, r2
 8005126:	4619      	mov	r1, r3
 8005128:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800512a:	2200      	movs	r2, #0
 800512c:	62bb      	str	r3, [r7, #40]	; 0x28
 800512e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005130:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005134:	f7fb fdd8 	bl	8000ce8 <__aeabi_uldivmod>
 8005138:	4602      	mov	r2, r0
 800513a:	460b      	mov	r3, r1
 800513c:	4613      	mov	r3, r2
 800513e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005140:	e058      	b.n	80051f4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005142:	4b38      	ldr	r3, [pc, #224]	; (8005224 <HAL_RCC_GetSysClockFreq+0x200>)
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	099b      	lsrs	r3, r3, #6
 8005148:	2200      	movs	r2, #0
 800514a:	4618      	mov	r0, r3
 800514c:	4611      	mov	r1, r2
 800514e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005152:	623b      	str	r3, [r7, #32]
 8005154:	2300      	movs	r3, #0
 8005156:	627b      	str	r3, [r7, #36]	; 0x24
 8005158:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800515c:	4642      	mov	r2, r8
 800515e:	464b      	mov	r3, r9
 8005160:	f04f 0000 	mov.w	r0, #0
 8005164:	f04f 0100 	mov.w	r1, #0
 8005168:	0159      	lsls	r1, r3, #5
 800516a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800516e:	0150      	lsls	r0, r2, #5
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	4641      	mov	r1, r8
 8005176:	ebb2 0a01 	subs.w	sl, r2, r1
 800517a:	4649      	mov	r1, r9
 800517c:	eb63 0b01 	sbc.w	fp, r3, r1
 8005180:	f04f 0200 	mov.w	r2, #0
 8005184:	f04f 0300 	mov.w	r3, #0
 8005188:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800518c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005190:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005194:	ebb2 040a 	subs.w	r4, r2, sl
 8005198:	eb63 050b 	sbc.w	r5, r3, fp
 800519c:	f04f 0200 	mov.w	r2, #0
 80051a0:	f04f 0300 	mov.w	r3, #0
 80051a4:	00eb      	lsls	r3, r5, #3
 80051a6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051aa:	00e2      	lsls	r2, r4, #3
 80051ac:	4614      	mov	r4, r2
 80051ae:	461d      	mov	r5, r3
 80051b0:	4643      	mov	r3, r8
 80051b2:	18e3      	adds	r3, r4, r3
 80051b4:	603b      	str	r3, [r7, #0]
 80051b6:	464b      	mov	r3, r9
 80051b8:	eb45 0303 	adc.w	r3, r5, r3
 80051bc:	607b      	str	r3, [r7, #4]
 80051be:	f04f 0200 	mov.w	r2, #0
 80051c2:	f04f 0300 	mov.w	r3, #0
 80051c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80051ca:	4629      	mov	r1, r5
 80051cc:	028b      	lsls	r3, r1, #10
 80051ce:	4621      	mov	r1, r4
 80051d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80051d4:	4621      	mov	r1, r4
 80051d6:	028a      	lsls	r2, r1, #10
 80051d8:	4610      	mov	r0, r2
 80051da:	4619      	mov	r1, r3
 80051dc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051de:	2200      	movs	r2, #0
 80051e0:	61bb      	str	r3, [r7, #24]
 80051e2:	61fa      	str	r2, [r7, #28]
 80051e4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80051e8:	f7fb fd7e 	bl	8000ce8 <__aeabi_uldivmod>
 80051ec:	4602      	mov	r2, r0
 80051ee:	460b      	mov	r3, r1
 80051f0:	4613      	mov	r3, r2
 80051f2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 80051f4:	4b0b      	ldr	r3, [pc, #44]	; (8005224 <HAL_RCC_GetSysClockFreq+0x200>)
 80051f6:	685b      	ldr	r3, [r3, #4]
 80051f8:	0c1b      	lsrs	r3, r3, #16
 80051fa:	f003 0303 	and.w	r3, r3, #3
 80051fe:	3301      	adds	r3, #1
 8005200:	005b      	lsls	r3, r3, #1
 8005202:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005204:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005206:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005208:	fbb2 f3f3 	udiv	r3, r2, r3
 800520c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800520e:	e002      	b.n	8005216 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005210:	4b05      	ldr	r3, [pc, #20]	; (8005228 <HAL_RCC_GetSysClockFreq+0x204>)
 8005212:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005214:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005216:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005218:	4618      	mov	r0, r3
 800521a:	3750      	adds	r7, #80	; 0x50
 800521c:	46bd      	mov	sp, r7
 800521e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005222:	bf00      	nop
 8005224:	40023800 	.word	0x40023800
 8005228:	00f42400 	.word	0x00f42400
 800522c:	007a1200 	.word	0x007a1200

08005230 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005230:	b480      	push	{r7}
 8005232:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005234:	4b03      	ldr	r3, [pc, #12]	; (8005244 <HAL_RCC_GetHCLKFreq+0x14>)
 8005236:	681b      	ldr	r3, [r3, #0]
}
 8005238:	4618      	mov	r0, r3
 800523a:	46bd      	mov	sp, r7
 800523c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005240:	4770      	bx	lr
 8005242:	bf00      	nop
 8005244:	20000000 	.word	0x20000000

08005248 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800524c:	f7ff fff0 	bl	8005230 <HAL_RCC_GetHCLKFreq>
 8005250:	4602      	mov	r2, r0
 8005252:	4b05      	ldr	r3, [pc, #20]	; (8005268 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005254:	689b      	ldr	r3, [r3, #8]
 8005256:	0a9b      	lsrs	r3, r3, #10
 8005258:	f003 0307 	and.w	r3, r3, #7
 800525c:	4903      	ldr	r1, [pc, #12]	; (800526c <HAL_RCC_GetPCLK1Freq+0x24>)
 800525e:	5ccb      	ldrb	r3, [r1, r3]
 8005260:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005264:	4618      	mov	r0, r3
 8005266:	bd80      	pop	{r7, pc}
 8005268:	40023800 	.word	0x40023800
 800526c:	0800d714 	.word	0x0800d714

08005270 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005270:	b580      	push	{r7, lr}
 8005272:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005274:	f7ff ffdc 	bl	8005230 <HAL_RCC_GetHCLKFreq>
 8005278:	4602      	mov	r2, r0
 800527a:	4b05      	ldr	r3, [pc, #20]	; (8005290 <HAL_RCC_GetPCLK2Freq+0x20>)
 800527c:	689b      	ldr	r3, [r3, #8]
 800527e:	0b5b      	lsrs	r3, r3, #13
 8005280:	f003 0307 	and.w	r3, r3, #7
 8005284:	4903      	ldr	r1, [pc, #12]	; (8005294 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005286:	5ccb      	ldrb	r3, [r1, r3]
 8005288:	fa22 f303 	lsr.w	r3, r2, r3
}
 800528c:	4618      	mov	r0, r3
 800528e:	bd80      	pop	{r7, pc}
 8005290:	40023800 	.word	0x40023800
 8005294:	0800d714 	.word	0x0800d714

08005298 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b088      	sub	sp, #32
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80052a0:	2300      	movs	r3, #0
 80052a2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80052a4:	2300      	movs	r3, #0
 80052a6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80052a8:	2300      	movs	r3, #0
 80052aa:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80052ac:	2300      	movs	r3, #0
 80052ae:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80052b0:	2300      	movs	r3, #0
 80052b2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f003 0301 	and.w	r3, r3, #1
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d012      	beq.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80052c0:	4b69      	ldr	r3, [pc, #420]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052c2:	689b      	ldr	r3, [r3, #8]
 80052c4:	4a68      	ldr	r2, [pc, #416]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052c6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80052ca:	6093      	str	r3, [r2, #8]
 80052cc:	4b66      	ldr	r3, [pc, #408]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ce:	689a      	ldr	r2, [r3, #8]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d4:	4964      	ldr	r1, [pc, #400]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052d6:	4313      	orrs	r3, r2
 80052d8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d101      	bne.n	80052e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 80052e2:	2301      	movs	r3, #1
 80052e4:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d017      	beq.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80052f2:	4b5d      	ldr	r3, [pc, #372]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80052f8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005300:	4959      	ldr	r1, [pc, #356]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005302:	4313      	orrs	r3, r2
 8005304:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800530c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005310:	d101      	bne.n	8005316 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005312:	2301      	movs	r3, #1
 8005314:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800531a:	2b00      	cmp	r3, #0
 800531c:	d101      	bne.n	8005322 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800531e:	2301      	movs	r3, #1
 8005320:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800532a:	2b00      	cmp	r3, #0
 800532c:	d017      	beq.n	800535e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800532e:	4b4e      	ldr	r3, [pc, #312]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005330:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005334:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800533c:	494a      	ldr	r1, [pc, #296]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800533e:	4313      	orrs	r3, r2
 8005340:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005348:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800534c:	d101      	bne.n	8005352 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800534e:	2301      	movs	r3, #1
 8005350:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005356:	2b00      	cmp	r3, #0
 8005358:	d101      	bne.n	800535e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800535a:	2301      	movs	r3, #1
 800535c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005366:	2b00      	cmp	r3, #0
 8005368:	d001      	beq.n	800536e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800536a:	2301      	movs	r3, #1
 800536c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f003 0320 	and.w	r3, r3, #32
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 808b 	beq.w	8005492 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800537c:	4b3a      	ldr	r3, [pc, #232]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800537e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005380:	4a39      	ldr	r2, [pc, #228]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005386:	6413      	str	r3, [r2, #64]	; 0x40
 8005388:	4b37      	ldr	r3, [pc, #220]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800538a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800538c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005390:	60bb      	str	r3, [r7, #8]
 8005392:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005394:	4b35      	ldr	r3, [pc, #212]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	4a34      	ldr	r2, [pc, #208]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800539a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800539e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053a0:	f7fd f88e 	bl	80024c0 <HAL_GetTick>
 80053a4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80053a6:	e008      	b.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80053a8:	f7fd f88a 	bl	80024c0 <HAL_GetTick>
 80053ac:	4602      	mov	r2, r0
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	1ad3      	subs	r3, r2, r3
 80053b2:	2b64      	cmp	r3, #100	; 0x64
 80053b4:	d901      	bls.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80053b6:	2303      	movs	r3, #3
 80053b8:	e357      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80053ba:	4b2c      	ldr	r3, [pc, #176]	; (800546c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80053bc:	681b      	ldr	r3, [r3, #0]
 80053be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d0f0      	beq.n	80053a8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80053c6:	4b28      	ldr	r3, [pc, #160]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ce:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80053d0:	693b      	ldr	r3, [r7, #16]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d035      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053de:	693a      	ldr	r2, [r7, #16]
 80053e0:	429a      	cmp	r2, r3
 80053e2:	d02e      	beq.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80053e4:	4b20      	ldr	r3, [pc, #128]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053e8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80053ec:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80053ee:	4b1e      	ldr	r3, [pc, #120]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053f2:	4a1d      	ldr	r2, [pc, #116]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053f8:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 80053fa:	4b1b      	ldr	r3, [pc, #108]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053fe:	4a1a      	ldr	r2, [pc, #104]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005400:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005404:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8005406:	4a18      	ldr	r2, [pc, #96]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005408:	693b      	ldr	r3, [r7, #16]
 800540a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800540c:	4b16      	ldr	r3, [pc, #88]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800540e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005410:	f003 0301 	and.w	r3, r3, #1
 8005414:	2b01      	cmp	r3, #1
 8005416:	d114      	bne.n	8005442 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005418:	f7fd f852 	bl	80024c0 <HAL_GetTick>
 800541c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800541e:	e00a      	b.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005420:	f7fd f84e 	bl	80024c0 <HAL_GetTick>
 8005424:	4602      	mov	r2, r0
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	1ad3      	subs	r3, r2, r3
 800542a:	f241 3288 	movw	r2, #5000	; 0x1388
 800542e:	4293      	cmp	r3, r2
 8005430:	d901      	bls.n	8005436 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e319      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005436:	4b0c      	ldr	r3, [pc, #48]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005438:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800543a:	f003 0302 	and.w	r3, r3, #2
 800543e:	2b00      	cmp	r3, #0
 8005440:	d0ee      	beq.n	8005420 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800544a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800544e:	d111      	bne.n	8005474 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8005450:	4b05      	ldr	r3, [pc, #20]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005452:	689b      	ldr	r3, [r3, #8]
 8005454:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800545c:	4b04      	ldr	r3, [pc, #16]	; (8005470 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800545e:	400b      	ands	r3, r1
 8005460:	4901      	ldr	r1, [pc, #4]	; (8005468 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005462:	4313      	orrs	r3, r2
 8005464:	608b      	str	r3, [r1, #8]
 8005466:	e00b      	b.n	8005480 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005468:	40023800 	.word	0x40023800
 800546c:	40007000 	.word	0x40007000
 8005470:	0ffffcff 	.word	0x0ffffcff
 8005474:	4baa      	ldr	r3, [pc, #680]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	4aa9      	ldr	r2, [pc, #676]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800547a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800547e:	6093      	str	r3, [r2, #8]
 8005480:	4ba7      	ldr	r3, [pc, #668]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005482:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005488:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800548c:	49a4      	ldr	r1, [pc, #656]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800548e:	4313      	orrs	r3, r2
 8005490:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f003 0310 	and.w	r3, r3, #16
 800549a:	2b00      	cmp	r3, #0
 800549c:	d010      	beq.n	80054c0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800549e:	4ba0      	ldr	r3, [pc, #640]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054a4:	4a9e      	ldr	r2, [pc, #632]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054a6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80054aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80054ae:	4b9c      	ldr	r3, [pc, #624]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054b0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054b8:	4999      	ldr	r1, [pc, #612]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ba:	4313      	orrs	r3, r2
 80054bc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d00a      	beq.n	80054e2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80054cc:	4b94      	ldr	r3, [pc, #592]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054d2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80054da:	4991      	ldr	r1, [pc, #580]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054dc:	4313      	orrs	r3, r2
 80054de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d00a      	beq.n	8005504 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80054ee:	4b8c      	ldr	r3, [pc, #560]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054f4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80054fc:	4988      	ldr	r1, [pc, #544]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800550c:	2b00      	cmp	r3, #0
 800550e:	d00a      	beq.n	8005526 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005510:	4b83      	ldr	r3, [pc, #524]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005512:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005516:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800551e:	4980      	ldr	r1, [pc, #512]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005520:	4313      	orrs	r3, r2
 8005522:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d00a      	beq.n	8005548 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005532:	4b7b      	ldr	r3, [pc, #492]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005534:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005538:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005540:	4977      	ldr	r1, [pc, #476]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005542:	4313      	orrs	r3, r2
 8005544:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00a      	beq.n	800556a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005554:	4b72      	ldr	r3, [pc, #456]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005556:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800555a:	f023 0203 	bic.w	r2, r3, #3
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005562:	496f      	ldr	r1, [pc, #444]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005564:	4313      	orrs	r3, r2
 8005566:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005572:	2b00      	cmp	r3, #0
 8005574:	d00a      	beq.n	800558c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005576:	4b6a      	ldr	r3, [pc, #424]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005578:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800557c:	f023 020c 	bic.w	r2, r3, #12
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005584:	4966      	ldr	r1, [pc, #408]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005586:	4313      	orrs	r3, r2
 8005588:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005594:	2b00      	cmp	r3, #0
 8005596:	d00a      	beq.n	80055ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005598:	4b61      	ldr	r3, [pc, #388]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800559a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800559e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80055a6:	495e      	ldr	r1, [pc, #376]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055a8:	4313      	orrs	r3, r2
 80055aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d00a      	beq.n	80055d0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80055ba:	4b59      	ldr	r3, [pc, #356]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055c0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055c8:	4955      	ldr	r1, [pc, #340]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d00a      	beq.n	80055f2 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80055dc:	4b50      	ldr	r3, [pc, #320]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055e2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80055ea:	494d      	ldr	r1, [pc, #308]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055ec:	4313      	orrs	r3, r2
 80055ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80055fa:	2b00      	cmp	r3, #0
 80055fc:	d00a      	beq.n	8005614 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80055fe:	4b48      	ldr	r3, [pc, #288]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005604:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800560c:	4944      	ldr	r1, [pc, #272]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800560e:	4313      	orrs	r3, r2
 8005610:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800561c:	2b00      	cmp	r3, #0
 800561e:	d00a      	beq.n	8005636 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005620:	4b3f      	ldr	r3, [pc, #252]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005626:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800562e:	493c      	ldr	r1, [pc, #240]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005630:	4313      	orrs	r3, r2
 8005632:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800563e:	2b00      	cmp	r3, #0
 8005640:	d00a      	beq.n	8005658 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8005642:	4b37      	ldr	r3, [pc, #220]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005648:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005650:	4933      	ldr	r1, [pc, #204]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005652:	4313      	orrs	r3, r2
 8005654:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005660:	2b00      	cmp	r3, #0
 8005662:	d00a      	beq.n	800567a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005664:	4b2e      	ldr	r3, [pc, #184]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005666:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005672:	492b      	ldr	r1, [pc, #172]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005674:	4313      	orrs	r3, r2
 8005676:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005682:	2b00      	cmp	r3, #0
 8005684:	d011      	beq.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005686:	4b26      	ldr	r3, [pc, #152]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005688:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800568c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005694:	4922      	ldr	r1, [pc, #136]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005696:	4313      	orrs	r3, r2
 8005698:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80056a0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80056a4:	d101      	bne.n	80056aa <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80056a6:	2301      	movs	r3, #1
 80056a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f003 0308 	and.w	r3, r3, #8
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d001      	beq.n	80056ba <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80056b6:	2301      	movs	r3, #1
 80056b8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d00a      	beq.n	80056dc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80056c6:	4b16      	ldr	r3, [pc, #88]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056cc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80056d4:	4912      	ldr	r1, [pc, #72]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056d6:	4313      	orrs	r3, r2
 80056d8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d00b      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80056e8:	4b0d      	ldr	r3, [pc, #52]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056ee:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80056f8:	4909      	ldr	r1, [pc, #36]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005700:	69fb      	ldr	r3, [r7, #28]
 8005702:	2b01      	cmp	r3, #1
 8005704:	d006      	beq.n	8005714 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800570e:	2b00      	cmp	r3, #0
 8005710:	f000 80d9 	beq.w	80058c6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005714:	4b02      	ldr	r3, [pc, #8]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4a01      	ldr	r2, [pc, #4]	; (8005720 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800571a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800571e:	e001      	b.n	8005724 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005720:	40023800 	.word	0x40023800
 8005724:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005726:	f7fc fecb 	bl	80024c0 <HAL_GetTick>
 800572a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800572c:	e008      	b.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800572e:	f7fc fec7 	bl	80024c0 <HAL_GetTick>
 8005732:	4602      	mov	r2, r0
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	1ad3      	subs	r3, r2, r3
 8005738:	2b64      	cmp	r3, #100	; 0x64
 800573a:	d901      	bls.n	8005740 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800573c:	2303      	movs	r3, #3
 800573e:	e194      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005740:	4b6c      	ldr	r3, [pc, #432]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005742:	681b      	ldr	r3, [r3, #0]
 8005744:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005748:	2b00      	cmp	r3, #0
 800574a:	d1f0      	bne.n	800572e <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f003 0301 	and.w	r3, r3, #1
 8005754:	2b00      	cmp	r3, #0
 8005756:	d021      	beq.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800575c:	2b00      	cmp	r3, #0
 800575e:	d11d      	bne.n	800579c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005760:	4b64      	ldr	r3, [pc, #400]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005762:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005766:	0c1b      	lsrs	r3, r3, #16
 8005768:	f003 0303 	and.w	r3, r3, #3
 800576c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800576e:	4b61      	ldr	r3, [pc, #388]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005770:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005774:	0e1b      	lsrs	r3, r3, #24
 8005776:	f003 030f 	and.w	r3, r3, #15
 800577a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	685b      	ldr	r3, [r3, #4]
 8005780:	019a      	lsls	r2, r3, #6
 8005782:	693b      	ldr	r3, [r7, #16]
 8005784:	041b      	lsls	r3, r3, #16
 8005786:	431a      	orrs	r2, r3
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	061b      	lsls	r3, r3, #24
 800578c:	431a      	orrs	r2, r3
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	689b      	ldr	r3, [r3, #8]
 8005792:	071b      	lsls	r3, r3, #28
 8005794:	4957      	ldr	r1, [pc, #348]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005796:	4313      	orrs	r3, r2
 8005798:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d004      	beq.n	80057b2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80057b0:	d00a      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d02e      	beq.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057c2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80057c6:	d129      	bne.n	800581c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80057c8:	4b4a      	ldr	r3, [pc, #296]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057ce:	0c1b      	lsrs	r3, r3, #16
 80057d0:	f003 0303 	and.w	r3, r3, #3
 80057d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80057d6:	4b47      	ldr	r3, [pc, #284]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057dc:	0f1b      	lsrs	r3, r3, #28
 80057de:	f003 0307 	and.w	r3, r3, #7
 80057e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	019a      	lsls	r2, r3, #6
 80057ea:	693b      	ldr	r3, [r7, #16]
 80057ec:	041b      	lsls	r3, r3, #16
 80057ee:	431a      	orrs	r2, r3
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	061b      	lsls	r3, r3, #24
 80057f6:	431a      	orrs	r2, r3
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	071b      	lsls	r3, r3, #28
 80057fc:	493d      	ldr	r1, [pc, #244]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057fe:	4313      	orrs	r3, r2
 8005800:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005804:	4b3b      	ldr	r3, [pc, #236]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005806:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800580a:	f023 021f 	bic.w	r2, r3, #31
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	3b01      	subs	r3, #1
 8005814:	4937      	ldr	r1, [pc, #220]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005816:	4313      	orrs	r3, r2
 8005818:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005824:	2b00      	cmp	r3, #0
 8005826:	d01d      	beq.n	8005864 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8005828:	4b32      	ldr	r3, [pc, #200]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800582a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800582e:	0e1b      	lsrs	r3, r3, #24
 8005830:	f003 030f 	and.w	r3, r3, #15
 8005834:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005836:	4b2f      	ldr	r3, [pc, #188]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005838:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800583c:	0f1b      	lsrs	r3, r3, #28
 800583e:	f003 0307 	and.w	r3, r3, #7
 8005842:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	019a      	lsls	r2, r3, #6
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	691b      	ldr	r3, [r3, #16]
 800584e:	041b      	lsls	r3, r3, #16
 8005850:	431a      	orrs	r2, r3
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	061b      	lsls	r3, r3, #24
 8005856:	431a      	orrs	r2, r3
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	071b      	lsls	r3, r3, #28
 800585c:	4925      	ldr	r1, [pc, #148]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800585e:	4313      	orrs	r3, r2
 8005860:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800586c:	2b00      	cmp	r3, #0
 800586e:	d011      	beq.n	8005894 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	685b      	ldr	r3, [r3, #4]
 8005874:	019a      	lsls	r2, r3, #6
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	041b      	lsls	r3, r3, #16
 800587c:	431a      	orrs	r2, r3
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	68db      	ldr	r3, [r3, #12]
 8005882:	061b      	lsls	r3, r3, #24
 8005884:	431a      	orrs	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	071b      	lsls	r3, r3, #28
 800588c:	4919      	ldr	r1, [pc, #100]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800588e:	4313      	orrs	r3, r2
 8005890:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005894:	4b17      	ldr	r3, [pc, #92]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	4a16      	ldr	r2, [pc, #88]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800589a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800589e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058a0:	f7fc fe0e 	bl	80024c0 <HAL_GetTick>
 80058a4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058a6:	e008      	b.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058a8:	f7fc fe0a 	bl	80024c0 <HAL_GetTick>
 80058ac:	4602      	mov	r2, r0
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	1ad3      	subs	r3, r2, r3
 80058b2:	2b64      	cmp	r3, #100	; 0x64
 80058b4:	d901      	bls.n	80058ba <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058b6:	2303      	movs	r3, #3
 80058b8:	e0d7      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80058ba:	4b0e      	ldr	r3, [pc, #56]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d0f0      	beq.n	80058a8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80058c6:	69bb      	ldr	r3, [r7, #24]
 80058c8:	2b01      	cmp	r3, #1
 80058ca:	f040 80cd 	bne.w	8005a68 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80058ce:	4b09      	ldr	r3, [pc, #36]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a08      	ldr	r2, [pc, #32]	; (80058f4 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058d8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058da:	f7fc fdf1 	bl	80024c0 <HAL_GetTick>
 80058de:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058e0:	e00a      	b.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80058e2:	f7fc fded 	bl	80024c0 <HAL_GetTick>
 80058e6:	4602      	mov	r2, r0
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	1ad3      	subs	r3, r2, r3
 80058ec:	2b64      	cmp	r3, #100	; 0x64
 80058ee:	d903      	bls.n	80058f8 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058f0:	2303      	movs	r3, #3
 80058f2:	e0ba      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 80058f4:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 80058f8:	4b5e      	ldr	r3, [pc, #376]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005900:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005904:	d0ed      	beq.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d003      	beq.n	800591a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005916:	2b00      	cmp	r3, #0
 8005918:	d009      	beq.n	800592e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005922:	2b00      	cmp	r3, #0
 8005924:	d02e      	beq.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	2b00      	cmp	r3, #0
 800592c:	d12a      	bne.n	8005984 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800592e:	4b51      	ldr	r3, [pc, #324]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005934:	0c1b      	lsrs	r3, r3, #16
 8005936:	f003 0303 	and.w	r3, r3, #3
 800593a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800593c:	4b4d      	ldr	r3, [pc, #308]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800593e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005942:	0f1b      	lsrs	r3, r3, #28
 8005944:	f003 0307 	and.w	r3, r3, #7
 8005948:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	695b      	ldr	r3, [r3, #20]
 800594e:	019a      	lsls	r2, r3, #6
 8005950:	693b      	ldr	r3, [r7, #16]
 8005952:	041b      	lsls	r3, r3, #16
 8005954:	431a      	orrs	r2, r3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	699b      	ldr	r3, [r3, #24]
 800595a:	061b      	lsls	r3, r3, #24
 800595c:	431a      	orrs	r2, r3
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	071b      	lsls	r3, r3, #28
 8005962:	4944      	ldr	r1, [pc, #272]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005964:	4313      	orrs	r3, r2
 8005966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800596a:	4b42      	ldr	r3, [pc, #264]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800596c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005970:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005978:	3b01      	subs	r3, #1
 800597a:	021b      	lsls	r3, r3, #8
 800597c:	493d      	ldr	r1, [pc, #244]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800597e:	4313      	orrs	r3, r2
 8005980:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800598c:	2b00      	cmp	r3, #0
 800598e:	d022      	beq.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005994:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005998:	d11d      	bne.n	80059d6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800599a:	4b36      	ldr	r3, [pc, #216]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800599c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059a0:	0e1b      	lsrs	r3, r3, #24
 80059a2:	f003 030f 	and.w	r3, r3, #15
 80059a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80059a8:	4b32      	ldr	r3, [pc, #200]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059ae:	0f1b      	lsrs	r3, r3, #28
 80059b0:	f003 0307 	and.w	r3, r3, #7
 80059b4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	019a      	lsls	r2, r3, #6
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	6a1b      	ldr	r3, [r3, #32]
 80059c0:	041b      	lsls	r3, r3, #16
 80059c2:	431a      	orrs	r2, r3
 80059c4:	693b      	ldr	r3, [r7, #16]
 80059c6:	061b      	lsls	r3, r3, #24
 80059c8:	431a      	orrs	r2, r3
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	071b      	lsls	r3, r3, #28
 80059ce:	4929      	ldr	r1, [pc, #164]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059d0:	4313      	orrs	r3, r2
 80059d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0308 	and.w	r3, r3, #8
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d028      	beq.n	8005a34 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80059e2:	4b24      	ldr	r3, [pc, #144]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e8:	0e1b      	lsrs	r3, r3, #24
 80059ea:	f003 030f 	and.w	r3, r3, #15
 80059ee:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80059f0:	4b20      	ldr	r3, [pc, #128]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059f6:	0c1b      	lsrs	r3, r3, #16
 80059f8:	f003 0303 	and.w	r3, r3, #3
 80059fc:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	695b      	ldr	r3, [r3, #20]
 8005a02:	019a      	lsls	r2, r3, #6
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	041b      	lsls	r3, r3, #16
 8005a08:	431a      	orrs	r2, r3
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	061b      	lsls	r3, r3, #24
 8005a0e:	431a      	orrs	r2, r3
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	69db      	ldr	r3, [r3, #28]
 8005a14:	071b      	lsls	r3, r3, #28
 8005a16:	4917      	ldr	r1, [pc, #92]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a18:	4313      	orrs	r3, r2
 8005a1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005a1e:	4b15      	ldr	r3, [pc, #84]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a20:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005a24:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a2c:	4911      	ldr	r1, [pc, #68]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a2e:	4313      	orrs	r3, r2
 8005a30:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005a34:	4b0f      	ldr	r3, [pc, #60]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	4a0e      	ldr	r2, [pc, #56]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a3e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a40:	f7fc fd3e 	bl	80024c0 <HAL_GetTick>
 8005a44:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a46:	e008      	b.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a48:	f7fc fd3a 	bl	80024c0 <HAL_GetTick>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	697b      	ldr	r3, [r7, #20]
 8005a50:	1ad3      	subs	r3, r2, r3
 8005a52:	2b64      	cmp	r3, #100	; 0x64
 8005a54:	d901      	bls.n	8005a5a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a56:	2303      	movs	r3, #3
 8005a58:	e007      	b.n	8005a6a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005a5a:	4b06      	ldr	r3, [pc, #24]	; (8005a74 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a66:	d1ef      	bne.n	8005a48 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3720      	adds	r7, #32
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	bd80      	pop	{r7, pc}
 8005a72:	bf00      	nop
 8005a74:	40023800 	.word	0x40023800

08005a78 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a78:	b580      	push	{r7, lr}
 8005a7a:	b084      	sub	sp, #16
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d101      	bne.n	8005a8a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a86:	2301      	movs	r3, #1
 8005a88:	e09d      	b.n	8005bc6 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d108      	bne.n	8005aa4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005a9a:	d009      	beq.n	8005ab0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	2200      	movs	r2, #0
 8005aa0:	61da      	str	r2, [r3, #28]
 8005aa2:	e005      	b.n	8005ab0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	2200      	movs	r2, #0
 8005aae:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005abc:	b2db      	uxtb	r3, r3
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d106      	bne.n	8005ad0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005aca:	6878      	ldr	r0, [r7, #4]
 8005acc:	f7fb ffc8 	bl	8001a60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2202      	movs	r2, #2
 8005ad4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005ae6:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	68db      	ldr	r3, [r3, #12]
 8005aec:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005af0:	d902      	bls.n	8005af8 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005af2:	2300      	movs	r3, #0
 8005af4:	60fb      	str	r3, [r7, #12]
 8005af6:	e002      	b.n	8005afe <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005af8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005afc:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68db      	ldr	r3, [r3, #12]
 8005b02:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005b06:	d007      	beq.n	8005b18 <HAL_SPI_Init+0xa0>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	68db      	ldr	r3, [r3, #12]
 8005b0c:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005b10:	d002      	beq.n	8005b18 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2200      	movs	r2, #0
 8005b16:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	685b      	ldr	r3, [r3, #4]
 8005b1c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	689b      	ldr	r3, [r3, #8]
 8005b24:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005b28:	431a      	orrs	r2, r3
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	691b      	ldr	r3, [r3, #16]
 8005b2e:	f003 0302 	and.w	r3, r3, #2
 8005b32:	431a      	orrs	r2, r3
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	695b      	ldr	r3, [r3, #20]
 8005b38:	f003 0301 	and.w	r3, r3, #1
 8005b3c:	431a      	orrs	r2, r3
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	699b      	ldr	r3, [r3, #24]
 8005b42:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b46:	431a      	orrs	r2, r3
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	69db      	ldr	r3, [r3, #28]
 8005b4c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005b50:	431a      	orrs	r2, r3
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6a1b      	ldr	r3, [r3, #32]
 8005b56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b5a:	ea42 0103 	orr.w	r1, r2, r3
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b62:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	699b      	ldr	r3, [r3, #24]
 8005b72:	0c1b      	lsrs	r3, r3, #16
 8005b74:	f003 0204 	and.w	r2, r3, #4
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b7c:	f003 0310 	and.w	r3, r3, #16
 8005b80:	431a      	orrs	r2, r3
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b86:	f003 0308 	and.w	r3, r3, #8
 8005b8a:	431a      	orrs	r2, r3
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	68db      	ldr	r3, [r3, #12]
 8005b90:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005b94:	ea42 0103 	orr.w	r1, r2, r3
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	430a      	orrs	r2, r1
 8005ba4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	69da      	ldr	r2, [r3, #28]
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005bb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	2200      	movs	r2, #0
 8005bba:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005bc4:	2300      	movs	r3, #0
}
 8005bc6:	4618      	mov	r0, r3
 8005bc8:	3710      	adds	r7, #16
 8005bca:	46bd      	mov	sp, r7
 8005bcc:	bd80      	pop	{r7, pc}
	...

08005bd0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005bd0:	b580      	push	{r7, lr}
 8005bd2:	b088      	sub	sp, #32
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	685b      	ldr	r3, [r3, #4]
 8005bde:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	689b      	ldr	r3, [r3, #8]
 8005be6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005be8:	69bb      	ldr	r3, [r7, #24]
 8005bea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d10e      	bne.n	8005c10 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005bf2:	69bb      	ldr	r3, [r7, #24]
 8005bf4:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d009      	beq.n	8005c10 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005bfc:	69fb      	ldr	r3, [r7, #28]
 8005bfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d004      	beq.n	8005c10 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c0a:	6878      	ldr	r0, [r7, #4]
 8005c0c:	4798      	blx	r3
    return;
 8005c0e:	e0ce      	b.n	8005dae <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	f003 0302 	and.w	r3, r3, #2
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d009      	beq.n	8005c2e <HAL_SPI_IRQHandler+0x5e>
 8005c1a:	69fb      	ldr	r3, [r7, #28]
 8005c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d004      	beq.n	8005c2e <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	4798      	blx	r3
    return;
 8005c2c:	e0bf      	b.n	8005dae <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c2e:	69bb      	ldr	r3, [r7, #24]
 8005c30:	f003 0320 	and.w	r3, r3, #32
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10a      	bne.n	8005c4e <HAL_SPI_IRQHandler+0x7e>
 8005c38:	69bb      	ldr	r3, [r7, #24]
 8005c3a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d105      	bne.n	8005c4e <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005c42:	69bb      	ldr	r3, [r7, #24]
 8005c44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	f000 80b0 	beq.w	8005dae <HAL_SPI_IRQHandler+0x1de>
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	f003 0320 	and.w	r3, r3, #32
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	f000 80aa 	beq.w	8005dae <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005c5a:	69bb      	ldr	r3, [r7, #24]
 8005c5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d023      	beq.n	8005cac <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005c6a:	b2db      	uxtb	r3, r3
 8005c6c:	2b03      	cmp	r3, #3
 8005c6e:	d011      	beq.n	8005c94 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c74:	f043 0204 	orr.w	r2, r3, #4
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	68db      	ldr	r3, [r3, #12]
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689b      	ldr	r3, [r3, #8]
 8005c8e:	617b      	str	r3, [r7, #20]
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	e00b      	b.n	8005cac <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005c94:	2300      	movs	r3, #0
 8005c96:	613b      	str	r3, [r7, #16]
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	613b      	str	r3, [r7, #16]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	689b      	ldr	r3, [r3, #8]
 8005ca6:	613b      	str	r3, [r7, #16]
 8005ca8:	693b      	ldr	r3, [r7, #16]
        return;
 8005caa:	e080      	b.n	8005dae <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005cac:	69bb      	ldr	r3, [r7, #24]
 8005cae:	f003 0320 	and.w	r3, r3, #32
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d014      	beq.n	8005ce0 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cba:	f043 0201 	orr.w	r2, r3, #1
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005cc2:	2300      	movs	r3, #0
 8005cc4:	60fb      	str	r3, [r7, #12]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	689b      	ldr	r3, [r3, #8]
 8005ccc:	60fb      	str	r3, [r7, #12]
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	681a      	ldr	r2, [r3, #0]
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005ce0:	69bb      	ldr	r3, [r7, #24]
 8005ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d00c      	beq.n	8005d04 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cee:	f043 0208 	orr.w	r2, r3, #8
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60bb      	str	r3, [r7, #8]
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	689b      	ldr	r3, [r3, #8]
 8005d00:	60bb      	str	r3, [r7, #8]
 8005d02:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d04f      	beq.n	8005dac <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005d1a:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2201      	movs	r2, #1
 8005d20:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005d24:	69fb      	ldr	r3, [r7, #28]
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d104      	bne.n	8005d38 <HAL_SPI_IRQHandler+0x168>
 8005d2e:	69fb      	ldr	r3, [r7, #28]
 8005d30:	f003 0301 	and.w	r3, r3, #1
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d034      	beq.n	8005da2 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	685a      	ldr	r2, [r3, #4]
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f022 0203 	bic.w	r2, r2, #3
 8005d46:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d011      	beq.n	8005d74 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d54:	4a17      	ldr	r2, [pc, #92]	; (8005db4 <HAL_SPI_IRQHandler+0x1e4>)
 8005d56:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	f7fc fd60 	bl	8002822 <HAL_DMA_Abort_IT>
 8005d62:	4603      	mov	r3, r0
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d005      	beq.n	8005d74 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d6c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d016      	beq.n	8005daa <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d80:	4a0c      	ldr	r2, [pc, #48]	; (8005db4 <HAL_SPI_IRQHandler+0x1e4>)
 8005d82:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005d88:	4618      	mov	r0, r3
 8005d8a:	f7fc fd4a 	bl	8002822 <HAL_DMA_Abort_IT>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d00a      	beq.n	8005daa <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d98:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005da0:	e003      	b.n	8005daa <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005da2:	6878      	ldr	r0, [r7, #4]
 8005da4:	f000 f808 	bl	8005db8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005da8:	e000      	b.n	8005dac <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005daa:	bf00      	nop
    return;
 8005dac:	bf00      	nop
  }
}
 8005dae:	3720      	adds	r7, #32
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bd80      	pop	{r7, pc}
 8005db4:	08005dcd 	.word	0x08005dcd

08005db8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005db8:	b480      	push	{r7}
 8005dba:	b083      	sub	sp, #12
 8005dbc:	af00      	add	r7, sp, #0
 8005dbe:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005dc0:	bf00      	nop
 8005dc2:	370c      	adds	r7, #12
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dca:	4770      	bx	lr

08005dcc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005dd8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005dda:	68fb      	ldr	r3, [r7, #12]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	2200      	movs	r2, #0
 8005de6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005de8:	68f8      	ldr	r0, [r7, #12]
 8005dea:	f7ff ffe5 	bl	8005db8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005dee:	bf00      	nop
 8005df0:	3710      	adds	r7, #16
 8005df2:	46bd      	mov	sp, r7
 8005df4:	bd80      	pop	{r7, pc}

08005df6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b082      	sub	sp, #8
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d101      	bne.n	8005e08 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e04:	2301      	movs	r3, #1
 8005e06:	e049      	b.n	8005e9c <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e0e:	b2db      	uxtb	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d106      	bne.n	8005e22 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f7fc f8ff 	bl	8002020 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2202      	movs	r2, #2
 8005e26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	681a      	ldr	r2, [r3, #0]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	3304      	adds	r3, #4
 8005e32:	4619      	mov	r1, r3
 8005e34:	4610      	mov	r0, r2
 8005e36:	f000 fd2f 	bl	8006898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	2201      	movs	r2, #1
 8005e3e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2201      	movs	r2, #1
 8005e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	2201      	movs	r2, #1
 8005e4e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	2201      	movs	r2, #1
 8005e56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2201      	movs	r2, #1
 8005e5e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	2201      	movs	r2, #1
 8005e66:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2201      	movs	r2, #1
 8005e6e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2201      	movs	r2, #1
 8005e76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	2201      	movs	r2, #1
 8005e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2201      	movs	r2, #1
 8005e86:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2201      	movs	r2, #1
 8005e8e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2201      	movs	r2, #1
 8005e96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e9a:	2300      	movs	r3, #0
}
 8005e9c:	4618      	mov	r0, r3
 8005e9e:	3708      	adds	r7, #8
 8005ea0:	46bd      	mov	sp, r7
 8005ea2:	bd80      	pop	{r7, pc}

08005ea4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ea4:	b480      	push	{r7}
 8005ea6:	b085      	sub	sp, #20
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb2:	b2db      	uxtb	r3, r3
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d001      	beq.n	8005ebc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005eb8:	2301      	movs	r3, #1
 8005eba:	e054      	b.n	8005f66 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	2202      	movs	r2, #2
 8005ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	68da      	ldr	r2, [r3, #12]
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f042 0201 	orr.w	r2, r2, #1
 8005ed2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4a26      	ldr	r2, [pc, #152]	; (8005f74 <HAL_TIM_Base_Start_IT+0xd0>)
 8005eda:	4293      	cmp	r3, r2
 8005edc:	d022      	beq.n	8005f24 <HAL_TIM_Base_Start_IT+0x80>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ee6:	d01d      	beq.n	8005f24 <HAL_TIM_Base_Start_IT+0x80>
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	4a22      	ldr	r2, [pc, #136]	; (8005f78 <HAL_TIM_Base_Start_IT+0xd4>)
 8005eee:	4293      	cmp	r3, r2
 8005ef0:	d018      	beq.n	8005f24 <HAL_TIM_Base_Start_IT+0x80>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	4a21      	ldr	r2, [pc, #132]	; (8005f7c <HAL_TIM_Base_Start_IT+0xd8>)
 8005ef8:	4293      	cmp	r3, r2
 8005efa:	d013      	beq.n	8005f24 <HAL_TIM_Base_Start_IT+0x80>
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4a1f      	ldr	r2, [pc, #124]	; (8005f80 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f02:	4293      	cmp	r3, r2
 8005f04:	d00e      	beq.n	8005f24 <HAL_TIM_Base_Start_IT+0x80>
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	4a1e      	ldr	r2, [pc, #120]	; (8005f84 <HAL_TIM_Base_Start_IT+0xe0>)
 8005f0c:	4293      	cmp	r3, r2
 8005f0e:	d009      	beq.n	8005f24 <HAL_TIM_Base_Start_IT+0x80>
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4a1c      	ldr	r2, [pc, #112]	; (8005f88 <HAL_TIM_Base_Start_IT+0xe4>)
 8005f16:	4293      	cmp	r3, r2
 8005f18:	d004      	beq.n	8005f24 <HAL_TIM_Base_Start_IT+0x80>
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	4a1b      	ldr	r2, [pc, #108]	; (8005f8c <HAL_TIM_Base_Start_IT+0xe8>)
 8005f20:	4293      	cmp	r3, r2
 8005f22:	d115      	bne.n	8005f50 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	681b      	ldr	r3, [r3, #0]
 8005f28:	689a      	ldr	r2, [r3, #8]
 8005f2a:	4b19      	ldr	r3, [pc, #100]	; (8005f90 <HAL_TIM_Base_Start_IT+0xec>)
 8005f2c:	4013      	ands	r3, r2
 8005f2e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f30:	68fb      	ldr	r3, [r7, #12]
 8005f32:	2b06      	cmp	r3, #6
 8005f34:	d015      	beq.n	8005f62 <HAL_TIM_Base_Start_IT+0xbe>
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f3c:	d011      	beq.n	8005f62 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	f042 0201 	orr.w	r2, r2, #1
 8005f4c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f4e:	e008      	b.n	8005f62 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	f042 0201 	orr.w	r2, r2, #1
 8005f5e:	601a      	str	r2, [r3, #0]
 8005f60:	e000      	b.n	8005f64 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f62:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f64:	2300      	movs	r3, #0
}
 8005f66:	4618      	mov	r0, r3
 8005f68:	3714      	adds	r7, #20
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr
 8005f72:	bf00      	nop
 8005f74:	40010000 	.word	0x40010000
 8005f78:	40000400 	.word	0x40000400
 8005f7c:	40000800 	.word	0x40000800
 8005f80:	40000c00 	.word	0x40000c00
 8005f84:	40010400 	.word	0x40010400
 8005f88:	40014000 	.word	0x40014000
 8005f8c:	40001800 	.word	0x40001800
 8005f90:	00010007 	.word	0x00010007

08005f94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b082      	sub	sp, #8
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d101      	bne.n	8005fa6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fa2:	2301      	movs	r3, #1
 8005fa4:	e049      	b.n	800603a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fac:	b2db      	uxtb	r3, r3
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d106      	bne.n	8005fc0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	2200      	movs	r2, #0
 8005fb6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fba:	6878      	ldr	r0, [r7, #4]
 8005fbc:	f000 f841 	bl	8006042 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	2202      	movs	r2, #2
 8005fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	3304      	adds	r3, #4
 8005fd0:	4619      	mov	r1, r3
 8005fd2:	4610      	mov	r0, r2
 8005fd4:	f000 fc60 	bl	8006898 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2201      	movs	r2, #1
 8005fdc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	2201      	movs	r2, #1
 8005fec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006038:	2300      	movs	r3, #0
}
 800603a:	4618      	mov	r0, r3
 800603c:	3708      	adds	r7, #8
 800603e:	46bd      	mov	sp, r7
 8006040:	bd80      	pop	{r7, pc}

08006042 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006042:	b480      	push	{r7}
 8006044:	b083      	sub	sp, #12
 8006046:	af00      	add	r7, sp, #0
 8006048:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800604a:	bf00      	nop
 800604c:	370c      	adds	r7, #12
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
	...

08006058 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006058:	b580      	push	{r7, lr}
 800605a:	b084      	sub	sp, #16
 800605c:	af00      	add	r7, sp, #0
 800605e:	6078      	str	r0, [r7, #4]
 8006060:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d109      	bne.n	800607c <HAL_TIM_PWM_Start+0x24>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800606e:	b2db      	uxtb	r3, r3
 8006070:	2b01      	cmp	r3, #1
 8006072:	bf14      	ite	ne
 8006074:	2301      	movne	r3, #1
 8006076:	2300      	moveq	r3, #0
 8006078:	b2db      	uxtb	r3, r3
 800607a:	e03c      	b.n	80060f6 <HAL_TIM_PWM_Start+0x9e>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	2b04      	cmp	r3, #4
 8006080:	d109      	bne.n	8006096 <HAL_TIM_PWM_Start+0x3e>
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006088:	b2db      	uxtb	r3, r3
 800608a:	2b01      	cmp	r3, #1
 800608c:	bf14      	ite	ne
 800608e:	2301      	movne	r3, #1
 8006090:	2300      	moveq	r3, #0
 8006092:	b2db      	uxtb	r3, r3
 8006094:	e02f      	b.n	80060f6 <HAL_TIM_PWM_Start+0x9e>
 8006096:	683b      	ldr	r3, [r7, #0]
 8006098:	2b08      	cmp	r3, #8
 800609a:	d109      	bne.n	80060b0 <HAL_TIM_PWM_Start+0x58>
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060a2:	b2db      	uxtb	r3, r3
 80060a4:	2b01      	cmp	r3, #1
 80060a6:	bf14      	ite	ne
 80060a8:	2301      	movne	r3, #1
 80060aa:	2300      	moveq	r3, #0
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	e022      	b.n	80060f6 <HAL_TIM_PWM_Start+0x9e>
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	2b0c      	cmp	r3, #12
 80060b4:	d109      	bne.n	80060ca <HAL_TIM_PWM_Start+0x72>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060bc:	b2db      	uxtb	r3, r3
 80060be:	2b01      	cmp	r3, #1
 80060c0:	bf14      	ite	ne
 80060c2:	2301      	movne	r3, #1
 80060c4:	2300      	moveq	r3, #0
 80060c6:	b2db      	uxtb	r3, r3
 80060c8:	e015      	b.n	80060f6 <HAL_TIM_PWM_Start+0x9e>
 80060ca:	683b      	ldr	r3, [r7, #0]
 80060cc:	2b10      	cmp	r3, #16
 80060ce:	d109      	bne.n	80060e4 <HAL_TIM_PWM_Start+0x8c>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b01      	cmp	r3, #1
 80060da:	bf14      	ite	ne
 80060dc:	2301      	movne	r3, #1
 80060de:	2300      	moveq	r3, #0
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	e008      	b.n	80060f6 <HAL_TIM_PWM_Start+0x9e>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	bf14      	ite	ne
 80060f0:	2301      	movne	r3, #1
 80060f2:	2300      	moveq	r3, #0
 80060f4:	b2db      	uxtb	r3, r3
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d001      	beq.n	80060fe <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80060fa:	2301      	movs	r3, #1
 80060fc:	e092      	b.n	8006224 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80060fe:	683b      	ldr	r3, [r7, #0]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d104      	bne.n	800610e <HAL_TIM_PWM_Start+0xb6>
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2202      	movs	r2, #2
 8006108:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800610c:	e023      	b.n	8006156 <HAL_TIM_PWM_Start+0xfe>
 800610e:	683b      	ldr	r3, [r7, #0]
 8006110:	2b04      	cmp	r3, #4
 8006112:	d104      	bne.n	800611e <HAL_TIM_PWM_Start+0xc6>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2202      	movs	r2, #2
 8006118:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800611c:	e01b      	b.n	8006156 <HAL_TIM_PWM_Start+0xfe>
 800611e:	683b      	ldr	r3, [r7, #0]
 8006120:	2b08      	cmp	r3, #8
 8006122:	d104      	bne.n	800612e <HAL_TIM_PWM_Start+0xd6>
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2202      	movs	r2, #2
 8006128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800612c:	e013      	b.n	8006156 <HAL_TIM_PWM_Start+0xfe>
 800612e:	683b      	ldr	r3, [r7, #0]
 8006130:	2b0c      	cmp	r3, #12
 8006132:	d104      	bne.n	800613e <HAL_TIM_PWM_Start+0xe6>
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2202      	movs	r2, #2
 8006138:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800613c:	e00b      	b.n	8006156 <HAL_TIM_PWM_Start+0xfe>
 800613e:	683b      	ldr	r3, [r7, #0]
 8006140:	2b10      	cmp	r3, #16
 8006142:	d104      	bne.n	800614e <HAL_TIM_PWM_Start+0xf6>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	2202      	movs	r2, #2
 8006148:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800614c:	e003      	b.n	8006156 <HAL_TIM_PWM_Start+0xfe>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	2202      	movs	r2, #2
 8006152:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	2201      	movs	r2, #1
 800615c:	6839      	ldr	r1, [r7, #0]
 800615e:	4618      	mov	r0, r3
 8006160:	f000 ff32 	bl	8006fc8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4a30      	ldr	r2, [pc, #192]	; (800622c <HAL_TIM_PWM_Start+0x1d4>)
 800616a:	4293      	cmp	r3, r2
 800616c:	d004      	beq.n	8006178 <HAL_TIM_PWM_Start+0x120>
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	4a2f      	ldr	r2, [pc, #188]	; (8006230 <HAL_TIM_PWM_Start+0x1d8>)
 8006174:	4293      	cmp	r3, r2
 8006176:	d101      	bne.n	800617c <HAL_TIM_PWM_Start+0x124>
 8006178:	2301      	movs	r3, #1
 800617a:	e000      	b.n	800617e <HAL_TIM_PWM_Start+0x126>
 800617c:	2300      	movs	r3, #0
 800617e:	2b00      	cmp	r3, #0
 8006180:	d007      	beq.n	8006192 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006190:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a25      	ldr	r2, [pc, #148]	; (800622c <HAL_TIM_PWM_Start+0x1d4>)
 8006198:	4293      	cmp	r3, r2
 800619a:	d022      	beq.n	80061e2 <HAL_TIM_PWM_Start+0x18a>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061a4:	d01d      	beq.n	80061e2 <HAL_TIM_PWM_Start+0x18a>
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a22      	ldr	r2, [pc, #136]	; (8006234 <HAL_TIM_PWM_Start+0x1dc>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	d018      	beq.n	80061e2 <HAL_TIM_PWM_Start+0x18a>
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	4a20      	ldr	r2, [pc, #128]	; (8006238 <HAL_TIM_PWM_Start+0x1e0>)
 80061b6:	4293      	cmp	r3, r2
 80061b8:	d013      	beq.n	80061e2 <HAL_TIM_PWM_Start+0x18a>
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	4a1f      	ldr	r2, [pc, #124]	; (800623c <HAL_TIM_PWM_Start+0x1e4>)
 80061c0:	4293      	cmp	r3, r2
 80061c2:	d00e      	beq.n	80061e2 <HAL_TIM_PWM_Start+0x18a>
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a19      	ldr	r2, [pc, #100]	; (8006230 <HAL_TIM_PWM_Start+0x1d8>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d009      	beq.n	80061e2 <HAL_TIM_PWM_Start+0x18a>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a1b      	ldr	r2, [pc, #108]	; (8006240 <HAL_TIM_PWM_Start+0x1e8>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d004      	beq.n	80061e2 <HAL_TIM_PWM_Start+0x18a>
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	681b      	ldr	r3, [r3, #0]
 80061dc:	4a19      	ldr	r2, [pc, #100]	; (8006244 <HAL_TIM_PWM_Start+0x1ec>)
 80061de:	4293      	cmp	r3, r2
 80061e0:	d115      	bne.n	800620e <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	689a      	ldr	r2, [r3, #8]
 80061e8:	4b17      	ldr	r3, [pc, #92]	; (8006248 <HAL_TIM_PWM_Start+0x1f0>)
 80061ea:	4013      	ands	r3, r2
 80061ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b06      	cmp	r3, #6
 80061f2:	d015      	beq.n	8006220 <HAL_TIM_PWM_Start+0x1c8>
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80061fa:	d011      	beq.n	8006220 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	681b      	ldr	r3, [r3, #0]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	681b      	ldr	r3, [r3, #0]
 8006206:	f042 0201 	orr.w	r2, r2, #1
 800620a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800620c:	e008      	b.n	8006220 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	681a      	ldr	r2, [r3, #0]
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f042 0201 	orr.w	r2, r2, #1
 800621c:	601a      	str	r2, [r3, #0]
 800621e:	e000      	b.n	8006222 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006220:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3710      	adds	r7, #16
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	40010000 	.word	0x40010000
 8006230:	40010400 	.word	0x40010400
 8006234:	40000400 	.word	0x40000400
 8006238:	40000800 	.word	0x40000800
 800623c:	40000c00 	.word	0x40000c00
 8006240:	40014000 	.word	0x40014000
 8006244:	40001800 	.word	0x40001800
 8006248:	00010007 	.word	0x00010007

0800624c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b082      	sub	sp, #8
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	691b      	ldr	r3, [r3, #16]
 800625a:	f003 0302 	and.w	r3, r3, #2
 800625e:	2b02      	cmp	r3, #2
 8006260:	d122      	bne.n	80062a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	68db      	ldr	r3, [r3, #12]
 8006268:	f003 0302 	and.w	r3, r3, #2
 800626c:	2b02      	cmp	r3, #2
 800626e:	d11b      	bne.n	80062a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	f06f 0202 	mvn.w	r2, #2
 8006278:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2201      	movs	r2, #1
 800627e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	f003 0303 	and.w	r3, r3, #3
 800628a:	2b00      	cmp	r3, #0
 800628c:	d003      	beq.n	8006296 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fae4 	bl	800685c <HAL_TIM_IC_CaptureCallback>
 8006294:	e005      	b.n	80062a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	f000 fad6 	bl	8006848 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 fae7 	bl	8006870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	2200      	movs	r2, #0
 80062a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	691b      	ldr	r3, [r3, #16]
 80062ae:	f003 0304 	and.w	r3, r3, #4
 80062b2:	2b04      	cmp	r3, #4
 80062b4:	d122      	bne.n	80062fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	68db      	ldr	r3, [r3, #12]
 80062bc:	f003 0304 	and.w	r3, r3, #4
 80062c0:	2b04      	cmp	r3, #4
 80062c2:	d11b      	bne.n	80062fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	f06f 0204 	mvn.w	r2, #4
 80062cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	2202      	movs	r2, #2
 80062d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	699b      	ldr	r3, [r3, #24]
 80062da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d003      	beq.n	80062ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 faba 	bl	800685c <HAL_TIM_IC_CaptureCallback>
 80062e8:	e005      	b.n	80062f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ea:	6878      	ldr	r0, [r7, #4]
 80062ec:	f000 faac 	bl	8006848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062f0:	6878      	ldr	r0, [r7, #4]
 80062f2:	f000 fabd 	bl	8006870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	2200      	movs	r2, #0
 80062fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	691b      	ldr	r3, [r3, #16]
 8006302:	f003 0308 	and.w	r3, r3, #8
 8006306:	2b08      	cmp	r3, #8
 8006308:	d122      	bne.n	8006350 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	681b      	ldr	r3, [r3, #0]
 800630e:	68db      	ldr	r3, [r3, #12]
 8006310:	f003 0308 	and.w	r3, r3, #8
 8006314:	2b08      	cmp	r3, #8
 8006316:	d11b      	bne.n	8006350 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f06f 0208 	mvn.w	r2, #8
 8006320:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2204      	movs	r2, #4
 8006326:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	69db      	ldr	r3, [r3, #28]
 800632e:	f003 0303 	and.w	r3, r3, #3
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 fa90 	bl	800685c <HAL_TIM_IC_CaptureCallback>
 800633c:	e005      	b.n	800634a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 fa82 	bl	8006848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006344:	6878      	ldr	r0, [r7, #4]
 8006346:	f000 fa93 	bl	8006870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	2200      	movs	r2, #0
 800634e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	691b      	ldr	r3, [r3, #16]
 8006356:	f003 0310 	and.w	r3, r3, #16
 800635a:	2b10      	cmp	r3, #16
 800635c:	d122      	bne.n	80063a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800635e:	687b      	ldr	r3, [r7, #4]
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	f003 0310 	and.w	r3, r3, #16
 8006368:	2b10      	cmp	r3, #16
 800636a:	d11b      	bne.n	80063a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f06f 0210 	mvn.w	r2, #16
 8006374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2208      	movs	r2, #8
 800637a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	69db      	ldr	r3, [r3, #28]
 8006382:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006386:	2b00      	cmp	r3, #0
 8006388:	d003      	beq.n	8006392 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800638a:	6878      	ldr	r0, [r7, #4]
 800638c:	f000 fa66 	bl	800685c <HAL_TIM_IC_CaptureCallback>
 8006390:	e005      	b.n	800639e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006392:	6878      	ldr	r0, [r7, #4]
 8006394:	f000 fa58 	bl	8006848 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006398:	6878      	ldr	r0, [r7, #4]
 800639a:	f000 fa69 	bl	8006870 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	691b      	ldr	r3, [r3, #16]
 80063aa:	f003 0301 	and.w	r3, r3, #1
 80063ae:	2b01      	cmp	r3, #1
 80063b0:	d10e      	bne.n	80063d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	68db      	ldr	r3, [r3, #12]
 80063b8:	f003 0301 	and.w	r3, r3, #1
 80063bc:	2b01      	cmp	r3, #1
 80063be:	d107      	bne.n	80063d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	f06f 0201 	mvn.w	r2, #1
 80063c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80063ca:	6878      	ldr	r0, [r7, #4]
 80063cc:	f7fa fec2 	bl	8001154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063da:	2b80      	cmp	r3, #128	; 0x80
 80063dc:	d10e      	bne.n	80063fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063e8:	2b80      	cmp	r3, #128	; 0x80
 80063ea:	d107      	bne.n	80063fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063f6:	6878      	ldr	r0, [r7, #4]
 80063f8:	f000 fea4 	bl	8007144 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	691b      	ldr	r3, [r3, #16]
 8006402:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006406:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800640a:	d10e      	bne.n	800642a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	68db      	ldr	r3, [r3, #12]
 8006412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006416:	2b80      	cmp	r3, #128	; 0x80
 8006418:	d107      	bne.n	800642a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006422:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006424:	6878      	ldr	r0, [r7, #4]
 8006426:	f000 fe97 	bl	8007158 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	691b      	ldr	r3, [r3, #16]
 8006430:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006434:	2b40      	cmp	r3, #64	; 0x40
 8006436:	d10e      	bne.n	8006456 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006442:	2b40      	cmp	r3, #64	; 0x40
 8006444:	d107      	bne.n	8006456 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800644e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fa17 	bl	8006884 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	f003 0320 	and.w	r3, r3, #32
 8006460:	2b20      	cmp	r3, #32
 8006462:	d10e      	bne.n	8006482 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	68db      	ldr	r3, [r3, #12]
 800646a:	f003 0320 	and.w	r3, r3, #32
 800646e:	2b20      	cmp	r3, #32
 8006470:	d107      	bne.n	8006482 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006472:	687b      	ldr	r3, [r7, #4]
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	f06f 0220 	mvn.w	r2, #32
 800647a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fe57 	bl	8007130 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006482:	bf00      	nop
 8006484:	3708      	adds	r7, #8
 8006486:	46bd      	mov	sp, r7
 8006488:	bd80      	pop	{r7, pc}
	...

0800648c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800648c:	b580      	push	{r7, lr}
 800648e:	b086      	sub	sp, #24
 8006490:	af00      	add	r7, sp, #0
 8006492:	60f8      	str	r0, [r7, #12]
 8006494:	60b9      	str	r1, [r7, #8]
 8006496:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006498:	2300      	movs	r3, #0
 800649a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064a2:	2b01      	cmp	r3, #1
 80064a4:	d101      	bne.n	80064aa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80064a6:	2302      	movs	r3, #2
 80064a8:	e0ff      	b.n	80066aa <HAL_TIM_PWM_ConfigChannel+0x21e>
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2201      	movs	r2, #1
 80064ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2b14      	cmp	r3, #20
 80064b6:	f200 80f0 	bhi.w	800669a <HAL_TIM_PWM_ConfigChannel+0x20e>
 80064ba:	a201      	add	r2, pc, #4	; (adr r2, 80064c0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80064bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80064c0:	08006515 	.word	0x08006515
 80064c4:	0800669b 	.word	0x0800669b
 80064c8:	0800669b 	.word	0x0800669b
 80064cc:	0800669b 	.word	0x0800669b
 80064d0:	08006555 	.word	0x08006555
 80064d4:	0800669b 	.word	0x0800669b
 80064d8:	0800669b 	.word	0x0800669b
 80064dc:	0800669b 	.word	0x0800669b
 80064e0:	08006597 	.word	0x08006597
 80064e4:	0800669b 	.word	0x0800669b
 80064e8:	0800669b 	.word	0x0800669b
 80064ec:	0800669b 	.word	0x0800669b
 80064f0:	080065d7 	.word	0x080065d7
 80064f4:	0800669b 	.word	0x0800669b
 80064f8:	0800669b 	.word	0x0800669b
 80064fc:	0800669b 	.word	0x0800669b
 8006500:	08006619 	.word	0x08006619
 8006504:	0800669b 	.word	0x0800669b
 8006508:	0800669b 	.word	0x0800669b
 800650c:	0800669b 	.word	0x0800669b
 8006510:	08006659 	.word	0x08006659
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006514:	68fb      	ldr	r3, [r7, #12]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	68b9      	ldr	r1, [r7, #8]
 800651a:	4618      	mov	r0, r3
 800651c:	f000 fa5c 	bl	80069d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	699a      	ldr	r2, [r3, #24]
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	f042 0208 	orr.w	r2, r2, #8
 800652e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	699a      	ldr	r2, [r3, #24]
 8006536:	68fb      	ldr	r3, [r7, #12]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	f022 0204 	bic.w	r2, r2, #4
 800653e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	6999      	ldr	r1, [r3, #24]
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	691a      	ldr	r2, [r3, #16]
 800654a:	68fb      	ldr	r3, [r7, #12]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	430a      	orrs	r2, r1
 8006550:	619a      	str	r2, [r3, #24]
      break;
 8006552:	e0a5      	b.n	80066a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006554:	68fb      	ldr	r3, [r7, #12]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	68b9      	ldr	r1, [r7, #8]
 800655a:	4618      	mov	r0, r3
 800655c:	f000 faae 	bl	8006abc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	699a      	ldr	r2, [r3, #24]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800656e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	699a      	ldr	r2, [r3, #24]
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800657e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	681b      	ldr	r3, [r3, #0]
 8006584:	6999      	ldr	r1, [r3, #24]
 8006586:	68bb      	ldr	r3, [r7, #8]
 8006588:	691b      	ldr	r3, [r3, #16]
 800658a:	021a      	lsls	r2, r3, #8
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	430a      	orrs	r2, r1
 8006592:	619a      	str	r2, [r3, #24]
      break;
 8006594:	e084      	b.n	80066a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	68b9      	ldr	r1, [r7, #8]
 800659c:	4618      	mov	r0, r3
 800659e:	f000 fb05 	bl	8006bac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	69da      	ldr	r2, [r3, #28]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	f042 0208 	orr.w	r2, r2, #8
 80065b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	69da      	ldr	r2, [r3, #28]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	f022 0204 	bic.w	r2, r2, #4
 80065c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	681b      	ldr	r3, [r3, #0]
 80065c6:	69d9      	ldr	r1, [r3, #28]
 80065c8:	68bb      	ldr	r3, [r7, #8]
 80065ca:	691a      	ldr	r2, [r3, #16]
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	430a      	orrs	r2, r1
 80065d2:	61da      	str	r2, [r3, #28]
      break;
 80065d4:	e064      	b.n	80066a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	68b9      	ldr	r1, [r7, #8]
 80065dc:	4618      	mov	r0, r3
 80065de:	f000 fb5b 	bl	8006c98 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	69da      	ldr	r2, [r3, #28]
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	69da      	ldr	r2, [r3, #28]
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006600:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	69d9      	ldr	r1, [r3, #28]
 8006608:	68bb      	ldr	r3, [r7, #8]
 800660a:	691b      	ldr	r3, [r3, #16]
 800660c:	021a      	lsls	r2, r3, #8
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	430a      	orrs	r2, r1
 8006614:	61da      	str	r2, [r3, #28]
      break;
 8006616:	e043      	b.n	80066a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	68b9      	ldr	r1, [r7, #8]
 800661e:	4618      	mov	r0, r3
 8006620:	f000 fb92 	bl	8006d48 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006624:	68fb      	ldr	r3, [r7, #12]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	681b      	ldr	r3, [r3, #0]
 800662e:	f042 0208 	orr.w	r2, r2, #8
 8006632:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	f022 0204 	bic.w	r2, r2, #4
 8006642:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800664a:	68bb      	ldr	r3, [r7, #8]
 800664c:	691a      	ldr	r2, [r3, #16]
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	430a      	orrs	r2, r1
 8006654:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006656:	e023      	b.n	80066a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	68b9      	ldr	r1, [r7, #8]
 800665e:	4618      	mov	r0, r3
 8006660:	f000 fbc4 	bl	8006dec <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006672:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006682:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800668a:	68bb      	ldr	r3, [r7, #8]
 800668c:	691b      	ldr	r3, [r3, #16]
 800668e:	021a      	lsls	r2, r3, #8
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	430a      	orrs	r2, r1
 8006696:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8006698:	e002      	b.n	80066a0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800669a:	2301      	movs	r3, #1
 800669c:	75fb      	strb	r3, [r7, #23]
      break;
 800669e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066a8:	7dfb      	ldrb	r3, [r7, #23]
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	3718      	adds	r7, #24
 80066ae:	46bd      	mov	sp, r7
 80066b0:	bd80      	pop	{r7, pc}
 80066b2:	bf00      	nop

080066b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	b084      	sub	sp, #16
 80066b8:	af00      	add	r7, sp, #0
 80066ba:	6078      	str	r0, [r7, #4]
 80066bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066be:	2300      	movs	r3, #0
 80066c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066c8:	2b01      	cmp	r3, #1
 80066ca:	d101      	bne.n	80066d0 <HAL_TIM_ConfigClockSource+0x1c>
 80066cc:	2302      	movs	r3, #2
 80066ce:	e0b4      	b.n	800683a <HAL_TIM_ConfigClockSource+0x186>
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	2201      	movs	r2, #1
 80066d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2202      	movs	r2, #2
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	689b      	ldr	r3, [r3, #8]
 80066e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80066e8:	68ba      	ldr	r2, [r7, #8]
 80066ea:	4b56      	ldr	r3, [pc, #344]	; (8006844 <HAL_TIM_ConfigClockSource+0x190>)
 80066ec:	4013      	ands	r3, r2
 80066ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80066f0:	68bb      	ldr	r3, [r7, #8]
 80066f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80066f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	68ba      	ldr	r2, [r7, #8]
 80066fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006700:	683b      	ldr	r3, [r7, #0]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006708:	d03e      	beq.n	8006788 <HAL_TIM_ConfigClockSource+0xd4>
 800670a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800670e:	f200 8087 	bhi.w	8006820 <HAL_TIM_ConfigClockSource+0x16c>
 8006712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006716:	f000 8086 	beq.w	8006826 <HAL_TIM_ConfigClockSource+0x172>
 800671a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800671e:	d87f      	bhi.n	8006820 <HAL_TIM_ConfigClockSource+0x16c>
 8006720:	2b70      	cmp	r3, #112	; 0x70
 8006722:	d01a      	beq.n	800675a <HAL_TIM_ConfigClockSource+0xa6>
 8006724:	2b70      	cmp	r3, #112	; 0x70
 8006726:	d87b      	bhi.n	8006820 <HAL_TIM_ConfigClockSource+0x16c>
 8006728:	2b60      	cmp	r3, #96	; 0x60
 800672a:	d050      	beq.n	80067ce <HAL_TIM_ConfigClockSource+0x11a>
 800672c:	2b60      	cmp	r3, #96	; 0x60
 800672e:	d877      	bhi.n	8006820 <HAL_TIM_ConfigClockSource+0x16c>
 8006730:	2b50      	cmp	r3, #80	; 0x50
 8006732:	d03c      	beq.n	80067ae <HAL_TIM_ConfigClockSource+0xfa>
 8006734:	2b50      	cmp	r3, #80	; 0x50
 8006736:	d873      	bhi.n	8006820 <HAL_TIM_ConfigClockSource+0x16c>
 8006738:	2b40      	cmp	r3, #64	; 0x40
 800673a:	d058      	beq.n	80067ee <HAL_TIM_ConfigClockSource+0x13a>
 800673c:	2b40      	cmp	r3, #64	; 0x40
 800673e:	d86f      	bhi.n	8006820 <HAL_TIM_ConfigClockSource+0x16c>
 8006740:	2b30      	cmp	r3, #48	; 0x30
 8006742:	d064      	beq.n	800680e <HAL_TIM_ConfigClockSource+0x15a>
 8006744:	2b30      	cmp	r3, #48	; 0x30
 8006746:	d86b      	bhi.n	8006820 <HAL_TIM_ConfigClockSource+0x16c>
 8006748:	2b20      	cmp	r3, #32
 800674a:	d060      	beq.n	800680e <HAL_TIM_ConfigClockSource+0x15a>
 800674c:	2b20      	cmp	r3, #32
 800674e:	d867      	bhi.n	8006820 <HAL_TIM_ConfigClockSource+0x16c>
 8006750:	2b00      	cmp	r3, #0
 8006752:	d05c      	beq.n	800680e <HAL_TIM_ConfigClockSource+0x15a>
 8006754:	2b10      	cmp	r3, #16
 8006756:	d05a      	beq.n	800680e <HAL_TIM_ConfigClockSource+0x15a>
 8006758:	e062      	b.n	8006820 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800676a:	f000 fc0d 	bl	8006f88 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	689b      	ldr	r3, [r3, #8]
 8006774:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006776:	68bb      	ldr	r3, [r7, #8]
 8006778:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800677c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	609a      	str	r2, [r3, #8]
      break;
 8006786:	e04f      	b.n	8006828 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800678c:	683b      	ldr	r3, [r7, #0]
 800678e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8006798:	f000 fbf6 	bl	8006f88 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	689a      	ldr	r2, [r3, #8]
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067aa:	609a      	str	r2, [r3, #8]
      break;
 80067ac:	e03c      	b.n	8006828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067b6:	683b      	ldr	r3, [r7, #0]
 80067b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ba:	461a      	mov	r2, r3
 80067bc:	f000 fb6a 	bl	8006e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	2150      	movs	r1, #80	; 0x50
 80067c6:	4618      	mov	r0, r3
 80067c8:	f000 fbc3 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 80067cc:	e02c      	b.n	8006828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067d2:	683b      	ldr	r3, [r7, #0]
 80067d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067d6:	683b      	ldr	r3, [r7, #0]
 80067d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80067da:	461a      	mov	r2, r3
 80067dc:	f000 fb89 	bl	8006ef2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	2160      	movs	r1, #96	; 0x60
 80067e6:	4618      	mov	r0, r3
 80067e8:	f000 fbb3 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 80067ec:	e01c      	b.n	8006828 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80067f6:	683b      	ldr	r3, [r7, #0]
 80067f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80067fa:	461a      	mov	r2, r3
 80067fc:	f000 fb4a 	bl	8006e94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	2140      	movs	r1, #64	; 0x40
 8006806:	4618      	mov	r0, r3
 8006808:	f000 fba3 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 800680c:	e00c      	b.n	8006828 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681a      	ldr	r2, [r3, #0]
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	4619      	mov	r1, r3
 8006818:	4610      	mov	r0, r2
 800681a:	f000 fb9a 	bl	8006f52 <TIM_ITRx_SetConfig>
      break;
 800681e:	e003      	b.n	8006828 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006820:	2301      	movs	r3, #1
 8006822:	73fb      	strb	r3, [r7, #15]
      break;
 8006824:	e000      	b.n	8006828 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006826:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2201      	movs	r2, #1
 800682c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	2200      	movs	r2, #0
 8006834:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006838:	7bfb      	ldrb	r3, [r7, #15]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3710      	adds	r7, #16
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
 8006842:	bf00      	nop
 8006844:	fffeff88 	.word	0xfffeff88

08006848 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006848:	b480      	push	{r7}
 800684a:	b083      	sub	sp, #12
 800684c:	af00      	add	r7, sp, #0
 800684e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006850:	bf00      	nop
 8006852:	370c      	adds	r7, #12
 8006854:	46bd      	mov	sp, r7
 8006856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800685a:	4770      	bx	lr

0800685c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006864:	bf00      	nop
 8006866:	370c      	adds	r7, #12
 8006868:	46bd      	mov	sp, r7
 800686a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686e:	4770      	bx	lr

08006870 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006870:	b480      	push	{r7}
 8006872:	b083      	sub	sp, #12
 8006874:	af00      	add	r7, sp, #0
 8006876:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006878:	bf00      	nop
 800687a:	370c      	adds	r7, #12
 800687c:	46bd      	mov	sp, r7
 800687e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006882:	4770      	bx	lr

08006884 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006884:	b480      	push	{r7}
 8006886:	b083      	sub	sp, #12
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8006898:	b480      	push	{r7}
 800689a:	b085      	sub	sp, #20
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	4a40      	ldr	r2, [pc, #256]	; (80069ac <TIM_Base_SetConfig+0x114>)
 80068ac:	4293      	cmp	r3, r2
 80068ae:	d013      	beq.n	80068d8 <TIM_Base_SetConfig+0x40>
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068b6:	d00f      	beq.n	80068d8 <TIM_Base_SetConfig+0x40>
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	4a3d      	ldr	r2, [pc, #244]	; (80069b0 <TIM_Base_SetConfig+0x118>)
 80068bc:	4293      	cmp	r3, r2
 80068be:	d00b      	beq.n	80068d8 <TIM_Base_SetConfig+0x40>
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	4a3c      	ldr	r2, [pc, #240]	; (80069b4 <TIM_Base_SetConfig+0x11c>)
 80068c4:	4293      	cmp	r3, r2
 80068c6:	d007      	beq.n	80068d8 <TIM_Base_SetConfig+0x40>
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	4a3b      	ldr	r2, [pc, #236]	; (80069b8 <TIM_Base_SetConfig+0x120>)
 80068cc:	4293      	cmp	r3, r2
 80068ce:	d003      	beq.n	80068d8 <TIM_Base_SetConfig+0x40>
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	4a3a      	ldr	r2, [pc, #232]	; (80069bc <TIM_Base_SetConfig+0x124>)
 80068d4:	4293      	cmp	r3, r2
 80068d6:	d108      	bne.n	80068ea <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	685b      	ldr	r3, [r3, #4]
 80068e4:	68fa      	ldr	r2, [r7, #12]
 80068e6:	4313      	orrs	r3, r2
 80068e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	4a2f      	ldr	r2, [pc, #188]	; (80069ac <TIM_Base_SetConfig+0x114>)
 80068ee:	4293      	cmp	r3, r2
 80068f0:	d02b      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068f8:	d027      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	4a2c      	ldr	r2, [pc, #176]	; (80069b0 <TIM_Base_SetConfig+0x118>)
 80068fe:	4293      	cmp	r3, r2
 8006900:	d023      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	4a2b      	ldr	r2, [pc, #172]	; (80069b4 <TIM_Base_SetConfig+0x11c>)
 8006906:	4293      	cmp	r3, r2
 8006908:	d01f      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	4a2a      	ldr	r2, [pc, #168]	; (80069b8 <TIM_Base_SetConfig+0x120>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d01b      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	4a29      	ldr	r2, [pc, #164]	; (80069bc <TIM_Base_SetConfig+0x124>)
 8006916:	4293      	cmp	r3, r2
 8006918:	d017      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	4a28      	ldr	r2, [pc, #160]	; (80069c0 <TIM_Base_SetConfig+0x128>)
 800691e:	4293      	cmp	r3, r2
 8006920:	d013      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	4a27      	ldr	r2, [pc, #156]	; (80069c4 <TIM_Base_SetConfig+0x12c>)
 8006926:	4293      	cmp	r3, r2
 8006928:	d00f      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	4a26      	ldr	r2, [pc, #152]	; (80069c8 <TIM_Base_SetConfig+0x130>)
 800692e:	4293      	cmp	r3, r2
 8006930:	d00b      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	4a25      	ldr	r2, [pc, #148]	; (80069cc <TIM_Base_SetConfig+0x134>)
 8006936:	4293      	cmp	r3, r2
 8006938:	d007      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	4a24      	ldr	r2, [pc, #144]	; (80069d0 <TIM_Base_SetConfig+0x138>)
 800693e:	4293      	cmp	r3, r2
 8006940:	d003      	beq.n	800694a <TIM_Base_SetConfig+0xb2>
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	4a23      	ldr	r2, [pc, #140]	; (80069d4 <TIM_Base_SetConfig+0x13c>)
 8006946:	4293      	cmp	r3, r2
 8006948:	d108      	bne.n	800695c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006950:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006952:	683b      	ldr	r3, [r7, #0]
 8006954:	68db      	ldr	r3, [r3, #12]
 8006956:	68fa      	ldr	r2, [r7, #12]
 8006958:	4313      	orrs	r3, r2
 800695a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800695c:	68fb      	ldr	r3, [r7, #12]
 800695e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	695b      	ldr	r3, [r3, #20]
 8006966:	4313      	orrs	r3, r2
 8006968:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	68fa      	ldr	r2, [r7, #12]
 800696e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	689a      	ldr	r2, [r3, #8]
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006978:	683b      	ldr	r3, [r7, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	4a0a      	ldr	r2, [pc, #40]	; (80069ac <TIM_Base_SetConfig+0x114>)
 8006984:	4293      	cmp	r3, r2
 8006986:	d003      	beq.n	8006990 <TIM_Base_SetConfig+0xf8>
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	4a0c      	ldr	r2, [pc, #48]	; (80069bc <TIM_Base_SetConfig+0x124>)
 800698c:	4293      	cmp	r3, r2
 800698e:	d103      	bne.n	8006998 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	691a      	ldr	r2, [r3, #16]
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	615a      	str	r2, [r3, #20]
}
 800699e:	bf00      	nop
 80069a0:	3714      	adds	r7, #20
 80069a2:	46bd      	mov	sp, r7
 80069a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a8:	4770      	bx	lr
 80069aa:	bf00      	nop
 80069ac:	40010000 	.word	0x40010000
 80069b0:	40000400 	.word	0x40000400
 80069b4:	40000800 	.word	0x40000800
 80069b8:	40000c00 	.word	0x40000c00
 80069bc:	40010400 	.word	0x40010400
 80069c0:	40014000 	.word	0x40014000
 80069c4:	40014400 	.word	0x40014400
 80069c8:	40014800 	.word	0x40014800
 80069cc:	40001800 	.word	0x40001800
 80069d0:	40001c00 	.word	0x40001c00
 80069d4:	40002000 	.word	0x40002000

080069d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80069d8:	b480      	push	{r7}
 80069da:	b087      	sub	sp, #28
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
 80069e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	6a1b      	ldr	r3, [r3, #32]
 80069e6:	f023 0201 	bic.w	r2, r3, #1
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6a1b      	ldr	r3, [r3, #32]
 80069f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	699b      	ldr	r3, [r3, #24]
 80069fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a00:	68fa      	ldr	r2, [r7, #12]
 8006a02:	4b2b      	ldr	r3, [pc, #172]	; (8006ab0 <TIM_OC1_SetConfig+0xd8>)
 8006a04:	4013      	ands	r3, r2
 8006a06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	f023 0303 	bic.w	r3, r3, #3
 8006a0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a10:	683b      	ldr	r3, [r7, #0]
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	68fa      	ldr	r2, [r7, #12]
 8006a16:	4313      	orrs	r3, r2
 8006a18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a1a:	697b      	ldr	r3, [r7, #20]
 8006a1c:	f023 0302 	bic.w	r3, r3, #2
 8006a20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a22:	683b      	ldr	r3, [r7, #0]
 8006a24:	689b      	ldr	r3, [r3, #8]
 8006a26:	697a      	ldr	r2, [r7, #20]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	4a21      	ldr	r2, [pc, #132]	; (8006ab4 <TIM_OC1_SetConfig+0xdc>)
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d003      	beq.n	8006a3c <TIM_OC1_SetConfig+0x64>
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	4a20      	ldr	r2, [pc, #128]	; (8006ab8 <TIM_OC1_SetConfig+0xe0>)
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	d10c      	bne.n	8006a56 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a3c:	697b      	ldr	r3, [r7, #20]
 8006a3e:	f023 0308 	bic.w	r3, r3, #8
 8006a42:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	697a      	ldr	r2, [r7, #20]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f023 0304 	bic.w	r3, r3, #4
 8006a54:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	4a16      	ldr	r2, [pc, #88]	; (8006ab4 <TIM_OC1_SetConfig+0xdc>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	d003      	beq.n	8006a66 <TIM_OC1_SetConfig+0x8e>
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	4a15      	ldr	r2, [pc, #84]	; (8006ab8 <TIM_OC1_SetConfig+0xe0>)
 8006a62:	4293      	cmp	r3, r2
 8006a64:	d111      	bne.n	8006a8a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a66:	693b      	ldr	r3, [r7, #16]
 8006a68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a6c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a74:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	695b      	ldr	r3, [r3, #20]
 8006a7a:	693a      	ldr	r2, [r7, #16]
 8006a7c:	4313      	orrs	r3, r2
 8006a7e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	699b      	ldr	r3, [r3, #24]
 8006a84:	693a      	ldr	r2, [r7, #16]
 8006a86:	4313      	orrs	r3, r2
 8006a88:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	693a      	ldr	r2, [r7, #16]
 8006a8e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	68fa      	ldr	r2, [r7, #12]
 8006a94:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	685a      	ldr	r2, [r3, #4]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	697a      	ldr	r2, [r7, #20]
 8006aa2:	621a      	str	r2, [r3, #32]
}
 8006aa4:	bf00      	nop
 8006aa6:	371c      	adds	r7, #28
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aae:	4770      	bx	lr
 8006ab0:	fffeff8f 	.word	0xfffeff8f
 8006ab4:	40010000 	.word	0x40010000
 8006ab8:	40010400 	.word	0x40010400

08006abc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
 8006ac4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6a1b      	ldr	r3, [r3, #32]
 8006aca:	f023 0210 	bic.w	r2, r3, #16
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a1b      	ldr	r3, [r3, #32]
 8006ad6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	685b      	ldr	r3, [r3, #4]
 8006adc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	699b      	ldr	r3, [r3, #24]
 8006ae2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	4b2e      	ldr	r3, [pc, #184]	; (8006ba0 <TIM_OC2_SetConfig+0xe4>)
 8006ae8:	4013      	ands	r3, r2
 8006aea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006af2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006af4:	683b      	ldr	r3, [r7, #0]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	021b      	lsls	r3, r3, #8
 8006afa:	68fa      	ldr	r2, [r7, #12]
 8006afc:	4313      	orrs	r3, r2
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b00:	697b      	ldr	r3, [r7, #20]
 8006b02:	f023 0320 	bic.w	r3, r3, #32
 8006b06:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	011b      	lsls	r3, r3, #4
 8006b0e:	697a      	ldr	r2, [r7, #20]
 8006b10:	4313      	orrs	r3, r2
 8006b12:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	4a23      	ldr	r2, [pc, #140]	; (8006ba4 <TIM_OC2_SetConfig+0xe8>)
 8006b18:	4293      	cmp	r3, r2
 8006b1a:	d003      	beq.n	8006b24 <TIM_OC2_SetConfig+0x68>
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	4a22      	ldr	r2, [pc, #136]	; (8006ba8 <TIM_OC2_SetConfig+0xec>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d10d      	bne.n	8006b40 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b2a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b2c:	683b      	ldr	r3, [r7, #0]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	011b      	lsls	r3, r3, #4
 8006b32:	697a      	ldr	r2, [r7, #20]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b3e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	4a18      	ldr	r2, [pc, #96]	; (8006ba4 <TIM_OC2_SetConfig+0xe8>)
 8006b44:	4293      	cmp	r3, r2
 8006b46:	d003      	beq.n	8006b50 <TIM_OC2_SetConfig+0x94>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	4a17      	ldr	r2, [pc, #92]	; (8006ba8 <TIM_OC2_SetConfig+0xec>)
 8006b4c:	4293      	cmp	r3, r2
 8006b4e:	d113      	bne.n	8006b78 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b56:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b5e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	695b      	ldr	r3, [r3, #20]
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	693a      	ldr	r2, [r7, #16]
 8006b68:	4313      	orrs	r3, r2
 8006b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	693a      	ldr	r2, [r7, #16]
 8006b7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	68fa      	ldr	r2, [r7, #12]
 8006b82:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b84:	683b      	ldr	r3, [r7, #0]
 8006b86:	685a      	ldr	r2, [r3, #4]
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	697a      	ldr	r2, [r7, #20]
 8006b90:	621a      	str	r2, [r3, #32]
}
 8006b92:	bf00      	nop
 8006b94:	371c      	adds	r7, #28
 8006b96:	46bd      	mov	sp, r7
 8006b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b9c:	4770      	bx	lr
 8006b9e:	bf00      	nop
 8006ba0:	feff8fff 	.word	0xfeff8fff
 8006ba4:	40010000 	.word	0x40010000
 8006ba8:	40010400 	.word	0x40010400

08006bac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bac:	b480      	push	{r7}
 8006bae:	b087      	sub	sp, #28
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	6a1b      	ldr	r3, [r3, #32]
 8006bc6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	685b      	ldr	r3, [r3, #4]
 8006bcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	69db      	ldr	r3, [r3, #28]
 8006bd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bd4:	68fa      	ldr	r2, [r7, #12]
 8006bd6:	4b2d      	ldr	r3, [pc, #180]	; (8006c8c <TIM_OC3_SetConfig+0xe0>)
 8006bd8:	4013      	ands	r3, r2
 8006bda:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	f023 0303 	bic.w	r3, r3, #3
 8006be2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	68fa      	ldr	r2, [r7, #12]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bee:	697b      	ldr	r3, [r7, #20]
 8006bf0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bf4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bf6:	683b      	ldr	r3, [r7, #0]
 8006bf8:	689b      	ldr	r3, [r3, #8]
 8006bfa:	021b      	lsls	r3, r3, #8
 8006bfc:	697a      	ldr	r2, [r7, #20]
 8006bfe:	4313      	orrs	r3, r2
 8006c00:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	4a22      	ldr	r2, [pc, #136]	; (8006c90 <TIM_OC3_SetConfig+0xe4>)
 8006c06:	4293      	cmp	r3, r2
 8006c08:	d003      	beq.n	8006c12 <TIM_OC3_SetConfig+0x66>
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	4a21      	ldr	r2, [pc, #132]	; (8006c94 <TIM_OC3_SetConfig+0xe8>)
 8006c0e:	4293      	cmp	r3, r2
 8006c10:	d10d      	bne.n	8006c2e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c18:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	021b      	lsls	r3, r3, #8
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	4313      	orrs	r3, r2
 8006c24:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c26:	697b      	ldr	r3, [r7, #20]
 8006c28:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c2c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	4a17      	ldr	r2, [pc, #92]	; (8006c90 <TIM_OC3_SetConfig+0xe4>)
 8006c32:	4293      	cmp	r3, r2
 8006c34:	d003      	beq.n	8006c3e <TIM_OC3_SetConfig+0x92>
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	4a16      	ldr	r2, [pc, #88]	; (8006c94 <TIM_OC3_SetConfig+0xe8>)
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d113      	bne.n	8006c66 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c3e:	693b      	ldr	r3, [r7, #16]
 8006c40:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c44:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c46:	693b      	ldr	r3, [r7, #16]
 8006c48:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	695b      	ldr	r3, [r3, #20]
 8006c52:	011b      	lsls	r3, r3, #4
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	011b      	lsls	r3, r3, #4
 8006c60:	693a      	ldr	r2, [r7, #16]
 8006c62:	4313      	orrs	r3, r2
 8006c64:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	693a      	ldr	r2, [r7, #16]
 8006c6a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c72:	683b      	ldr	r3, [r7, #0]
 8006c74:	685a      	ldr	r2, [r3, #4]
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	697a      	ldr	r2, [r7, #20]
 8006c7e:	621a      	str	r2, [r3, #32]
}
 8006c80:	bf00      	nop
 8006c82:	371c      	adds	r7, #28
 8006c84:	46bd      	mov	sp, r7
 8006c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c8a:	4770      	bx	lr
 8006c8c:	fffeff8f 	.word	0xfffeff8f
 8006c90:	40010000 	.word	0x40010000
 8006c94:	40010400 	.word	0x40010400

08006c98 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006c98:	b480      	push	{r7}
 8006c9a:	b087      	sub	sp, #28
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a1b      	ldr	r3, [r3, #32]
 8006ca6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
 8006cb2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	685b      	ldr	r3, [r3, #4]
 8006cb8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	69db      	ldr	r3, [r3, #28]
 8006cbe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cc0:	68fa      	ldr	r2, [r7, #12]
 8006cc2:	4b1e      	ldr	r3, [pc, #120]	; (8006d3c <TIM_OC4_SetConfig+0xa4>)
 8006cc4:	4013      	ands	r3, r2
 8006cc6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	681b      	ldr	r3, [r3, #0]
 8006cd4:	021b      	lsls	r3, r3, #8
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006cdc:	693b      	ldr	r3, [r7, #16]
 8006cde:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006ce2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	031b      	lsls	r3, r3, #12
 8006cea:	693a      	ldr	r2, [r7, #16]
 8006cec:	4313      	orrs	r3, r2
 8006cee:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a13      	ldr	r2, [pc, #76]	; (8006d40 <TIM_OC4_SetConfig+0xa8>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d003      	beq.n	8006d00 <TIM_OC4_SetConfig+0x68>
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	4a12      	ldr	r2, [pc, #72]	; (8006d44 <TIM_OC4_SetConfig+0xac>)
 8006cfc:	4293      	cmp	r3, r2
 8006cfe:	d109      	bne.n	8006d14 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006d00:	697b      	ldr	r3, [r7, #20]
 8006d02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006d06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	019b      	lsls	r3, r3, #6
 8006d0e:	697a      	ldr	r2, [r7, #20]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	697a      	ldr	r2, [r7, #20]
 8006d18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	68fa      	ldr	r2, [r7, #12]
 8006d1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	685a      	ldr	r2, [r3, #4]
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	693a      	ldr	r2, [r7, #16]
 8006d2c:	621a      	str	r2, [r3, #32]
}
 8006d2e:	bf00      	nop
 8006d30:	371c      	adds	r7, #28
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr
 8006d3a:	bf00      	nop
 8006d3c:	feff8fff 	.word	0xfeff8fff
 8006d40:	40010000 	.word	0x40010000
 8006d44:	40010400 	.word	0x40010400

08006d48 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d48:	b480      	push	{r7}
 8006d4a:	b087      	sub	sp, #28
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
 8006d50:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6a1b      	ldr	r3, [r3, #32]
 8006d56:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	6a1b      	ldr	r3, [r3, #32]
 8006d62:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d70:	68fa      	ldr	r2, [r7, #12]
 8006d72:	4b1b      	ldr	r3, [pc, #108]	; (8006de0 <TIM_OC5_SetConfig+0x98>)
 8006d74:	4013      	ands	r3, r2
 8006d76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d78:	683b      	ldr	r3, [r7, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	68fa      	ldr	r2, [r7, #12]
 8006d7e:	4313      	orrs	r3, r2
 8006d80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d82:	693b      	ldr	r3, [r7, #16]
 8006d84:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006d88:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006d8a:	683b      	ldr	r3, [r7, #0]
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	041b      	lsls	r3, r3, #16
 8006d90:	693a      	ldr	r2, [r7, #16]
 8006d92:	4313      	orrs	r3, r2
 8006d94:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	4a12      	ldr	r2, [pc, #72]	; (8006de4 <TIM_OC5_SetConfig+0x9c>)
 8006d9a:	4293      	cmp	r3, r2
 8006d9c:	d003      	beq.n	8006da6 <TIM_OC5_SetConfig+0x5e>
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	4a11      	ldr	r2, [pc, #68]	; (8006de8 <TIM_OC5_SetConfig+0xa0>)
 8006da2:	4293      	cmp	r3, r2
 8006da4:	d109      	bne.n	8006dba <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006da6:	697b      	ldr	r3, [r7, #20]
 8006da8:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006dac:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006dae:	683b      	ldr	r3, [r7, #0]
 8006db0:	695b      	ldr	r3, [r3, #20]
 8006db2:	021b      	lsls	r3, r3, #8
 8006db4:	697a      	ldr	r2, [r7, #20]
 8006db6:	4313      	orrs	r3, r2
 8006db8:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	697a      	ldr	r2, [r7, #20]
 8006dbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	68fa      	ldr	r2, [r7, #12]
 8006dc4:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006dc6:	683b      	ldr	r3, [r7, #0]
 8006dc8:	685a      	ldr	r2, [r3, #4]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	693a      	ldr	r2, [r7, #16]
 8006dd2:	621a      	str	r2, [r3, #32]
}
 8006dd4:	bf00      	nop
 8006dd6:	371c      	adds	r7, #28
 8006dd8:	46bd      	mov	sp, r7
 8006dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dde:	4770      	bx	lr
 8006de0:	fffeff8f 	.word	0xfffeff8f
 8006de4:	40010000 	.word	0x40010000
 8006de8:	40010400 	.word	0x40010400

08006dec <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006dec:	b480      	push	{r7}
 8006dee:	b087      	sub	sp, #28
 8006df0:	af00      	add	r7, sp, #0
 8006df2:	6078      	str	r0, [r7, #4]
 8006df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	6a1b      	ldr	r3, [r3, #32]
 8006dfa:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6a1b      	ldr	r3, [r3, #32]
 8006e06:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	685b      	ldr	r3, [r3, #4]
 8006e0c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e14:	68fa      	ldr	r2, [r7, #12]
 8006e16:	4b1c      	ldr	r3, [pc, #112]	; (8006e88 <TIM_OC6_SetConfig+0x9c>)
 8006e18:	4013      	ands	r3, r2
 8006e1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e1c:	683b      	ldr	r3, [r7, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	021b      	lsls	r3, r3, #8
 8006e22:	68fa      	ldr	r2, [r7, #12]
 8006e24:	4313      	orrs	r3, r2
 8006e26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e30:	683b      	ldr	r3, [r7, #0]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	051b      	lsls	r3, r3, #20
 8006e36:	693a      	ldr	r2, [r7, #16]
 8006e38:	4313      	orrs	r3, r2
 8006e3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	4a13      	ldr	r2, [pc, #76]	; (8006e8c <TIM_OC6_SetConfig+0xa0>)
 8006e40:	4293      	cmp	r3, r2
 8006e42:	d003      	beq.n	8006e4c <TIM_OC6_SetConfig+0x60>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	4a12      	ldr	r2, [pc, #72]	; (8006e90 <TIM_OC6_SetConfig+0xa4>)
 8006e48:	4293      	cmp	r3, r2
 8006e4a:	d109      	bne.n	8006e60 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006e4c:	697b      	ldr	r3, [r7, #20]
 8006e4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006e52:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	695b      	ldr	r3, [r3, #20]
 8006e58:	029b      	lsls	r3, r3, #10
 8006e5a:	697a      	ldr	r2, [r7, #20]
 8006e5c:	4313      	orrs	r3, r2
 8006e5e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	697a      	ldr	r2, [r7, #20]
 8006e64:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68fa      	ldr	r2, [r7, #12]
 8006e6a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006e6c:	683b      	ldr	r3, [r7, #0]
 8006e6e:	685a      	ldr	r2, [r3, #4]
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	621a      	str	r2, [r3, #32]
}
 8006e7a:	bf00      	nop
 8006e7c:	371c      	adds	r7, #28
 8006e7e:	46bd      	mov	sp, r7
 8006e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e84:	4770      	bx	lr
 8006e86:	bf00      	nop
 8006e88:	feff8fff 	.word	0xfeff8fff
 8006e8c:	40010000 	.word	0x40010000
 8006e90:	40010400 	.word	0x40010400

08006e94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e94:	b480      	push	{r7}
 8006e96:	b087      	sub	sp, #28
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	60f8      	str	r0, [r7, #12]
 8006e9c:	60b9      	str	r1, [r7, #8]
 8006e9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	6a1b      	ldr	r3, [r3, #32]
 8006ea4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6a1b      	ldr	r3, [r3, #32]
 8006eaa:	f023 0201 	bic.w	r2, r3, #1
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	699b      	ldr	r3, [r3, #24]
 8006eb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ebe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	011b      	lsls	r3, r3, #4
 8006ec4:	693a      	ldr	r2, [r7, #16]
 8006ec6:	4313      	orrs	r3, r2
 8006ec8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006eca:	697b      	ldr	r3, [r7, #20]
 8006ecc:	f023 030a 	bic.w	r3, r3, #10
 8006ed0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006ed2:	697a      	ldr	r2, [r7, #20]
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	693a      	ldr	r2, [r7, #16]
 8006ede:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	697a      	ldr	r2, [r7, #20]
 8006ee4:	621a      	str	r2, [r3, #32]
}
 8006ee6:	bf00      	nop
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr

08006ef2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ef2:	b480      	push	{r7}
 8006ef4:	b087      	sub	sp, #28
 8006ef6:	af00      	add	r7, sp, #0
 8006ef8:	60f8      	str	r0, [r7, #12]
 8006efa:	60b9      	str	r1, [r7, #8]
 8006efc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006efe:	68fb      	ldr	r3, [r7, #12]
 8006f00:	6a1b      	ldr	r3, [r3, #32]
 8006f02:	f023 0210 	bic.w	r2, r3, #16
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	699b      	ldr	r3, [r3, #24]
 8006f0e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006f16:	697b      	ldr	r3, [r7, #20]
 8006f18:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f1c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	031b      	lsls	r3, r3, #12
 8006f22:	697a      	ldr	r2, [r7, #20]
 8006f24:	4313      	orrs	r3, r2
 8006f26:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006f28:	693b      	ldr	r3, [r7, #16]
 8006f2a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006f2e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	011b      	lsls	r3, r3, #4
 8006f34:	693a      	ldr	r2, [r7, #16]
 8006f36:	4313      	orrs	r3, r2
 8006f38:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	697a      	ldr	r2, [r7, #20]
 8006f3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	693a      	ldr	r2, [r7, #16]
 8006f44:	621a      	str	r2, [r3, #32]
}
 8006f46:	bf00      	nop
 8006f48:	371c      	adds	r7, #28
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f50:	4770      	bx	lr

08006f52 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006f52:	b480      	push	{r7}
 8006f54:	b085      	sub	sp, #20
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	689b      	ldr	r3, [r3, #8]
 8006f60:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f68:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006f6a:	683a      	ldr	r2, [r7, #0]
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	4313      	orrs	r3, r2
 8006f70:	f043 0307 	orr.w	r3, r3, #7
 8006f74:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	609a      	str	r2, [r3, #8]
}
 8006f7c:	bf00      	nop
 8006f7e:	3714      	adds	r7, #20
 8006f80:	46bd      	mov	sp, r7
 8006f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f86:	4770      	bx	lr

08006f88 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f88:	b480      	push	{r7}
 8006f8a:	b087      	sub	sp, #28
 8006f8c:	af00      	add	r7, sp, #0
 8006f8e:	60f8      	str	r0, [r7, #12]
 8006f90:	60b9      	str	r1, [r7, #8]
 8006f92:	607a      	str	r2, [r7, #4]
 8006f94:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	689b      	ldr	r3, [r3, #8]
 8006f9a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006fa2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	021a      	lsls	r2, r3, #8
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	431a      	orrs	r2, r3
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	4313      	orrs	r3, r2
 8006fb0:	697a      	ldr	r2, [r7, #20]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	609a      	str	r2, [r3, #8]
}
 8006fbc:	bf00      	nop
 8006fbe:	371c      	adds	r7, #28
 8006fc0:	46bd      	mov	sp, r7
 8006fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fc6:	4770      	bx	lr

08006fc8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006fc8:	b480      	push	{r7}
 8006fca:	b087      	sub	sp, #28
 8006fcc:	af00      	add	r7, sp, #0
 8006fce:	60f8      	str	r0, [r7, #12]
 8006fd0:	60b9      	str	r1, [r7, #8]
 8006fd2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006fd4:	68bb      	ldr	r3, [r7, #8]
 8006fd6:	f003 031f 	and.w	r3, r3, #31
 8006fda:	2201      	movs	r2, #1
 8006fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8006fe0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	6a1a      	ldr	r2, [r3, #32]
 8006fe6:	697b      	ldr	r3, [r7, #20]
 8006fe8:	43db      	mvns	r3, r3
 8006fea:	401a      	ands	r2, r3
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	6a1a      	ldr	r2, [r3, #32]
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	f003 031f 	and.w	r3, r3, #31
 8006ffa:	6879      	ldr	r1, [r7, #4]
 8006ffc:	fa01 f303 	lsl.w	r3, r1, r3
 8007000:	431a      	orrs	r2, r3
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	621a      	str	r2, [r3, #32]
}
 8007006:	bf00      	nop
 8007008:	371c      	adds	r7, #28
 800700a:	46bd      	mov	sp, r7
 800700c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007010:	4770      	bx	lr
	...

08007014 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007014:	b480      	push	{r7}
 8007016:	b085      	sub	sp, #20
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
 800701c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007024:	2b01      	cmp	r3, #1
 8007026:	d101      	bne.n	800702c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007028:	2302      	movs	r3, #2
 800702a:	e06d      	b.n	8007108 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2201      	movs	r2, #1
 8007030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2202      	movs	r2, #2
 8007038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	685b      	ldr	r3, [r3, #4]
 8007042:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	4a30      	ldr	r2, [pc, #192]	; (8007114 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007052:	4293      	cmp	r3, r2
 8007054:	d004      	beq.n	8007060 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a2f      	ldr	r2, [pc, #188]	; (8007118 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 800705c:	4293      	cmp	r3, r2
 800705e:	d108      	bne.n	8007072 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007066:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	685b      	ldr	r3, [r3, #4]
 800706c:	68fa      	ldr	r2, [r7, #12]
 800706e:	4313      	orrs	r3, r2
 8007070:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007078:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800707a:	683b      	ldr	r3, [r7, #0]
 800707c:	681b      	ldr	r3, [r3, #0]
 800707e:	68fa      	ldr	r2, [r7, #12]
 8007080:	4313      	orrs	r3, r2
 8007082:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	68fa      	ldr	r2, [r7, #12]
 800708a:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a20      	ldr	r2, [pc, #128]	; (8007114 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d022      	beq.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800709e:	d01d      	beq.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	4a1d      	ldr	r2, [pc, #116]	; (800711c <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80070a6:	4293      	cmp	r3, r2
 80070a8:	d018      	beq.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	4a1c      	ldr	r2, [pc, #112]	; (8007120 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d013      	beq.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	4a1a      	ldr	r2, [pc, #104]	; (8007124 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80070ba:	4293      	cmp	r3, r2
 80070bc:	d00e      	beq.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	4a15      	ldr	r2, [pc, #84]	; (8007118 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80070c4:	4293      	cmp	r3, r2
 80070c6:	d009      	beq.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	4a16      	ldr	r2, [pc, #88]	; (8007128 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80070ce:	4293      	cmp	r3, r2
 80070d0:	d004      	beq.n	80070dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	681b      	ldr	r3, [r3, #0]
 80070d6:	4a15      	ldr	r2, [pc, #84]	; (800712c <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80070d8:	4293      	cmp	r3, r2
 80070da:	d10c      	bne.n	80070f6 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80070dc:	68bb      	ldr	r3, [r7, #8]
 80070de:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070e2:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80070e4:	683b      	ldr	r3, [r7, #0]
 80070e6:	689b      	ldr	r3, [r3, #8]
 80070e8:	68ba      	ldr	r2, [r7, #8]
 80070ea:	4313      	orrs	r3, r2
 80070ec:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	681b      	ldr	r3, [r3, #0]
 80070f2:	68ba      	ldr	r2, [r7, #8]
 80070f4:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	2201      	movs	r2, #1
 80070fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	2200      	movs	r2, #0
 8007102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007106:	2300      	movs	r3, #0
}
 8007108:	4618      	mov	r0, r3
 800710a:	3714      	adds	r7, #20
 800710c:	46bd      	mov	sp, r7
 800710e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007112:	4770      	bx	lr
 8007114:	40010000 	.word	0x40010000
 8007118:	40010400 	.word	0x40010400
 800711c:	40000400 	.word	0x40000400
 8007120:	40000800 	.word	0x40000800
 8007124:	40000c00 	.word	0x40000c00
 8007128:	40014000 	.word	0x40014000
 800712c:	40001800 	.word	0x40001800

08007130 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007130:	b480      	push	{r7}
 8007132:	b083      	sub	sp, #12
 8007134:	af00      	add	r7, sp, #0
 8007136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007138:	bf00      	nop
 800713a:	370c      	adds	r7, #12
 800713c:	46bd      	mov	sp, r7
 800713e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007142:	4770      	bx	lr

08007144 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007144:	b480      	push	{r7}
 8007146:	b083      	sub	sp, #12
 8007148:	af00      	add	r7, sp, #0
 800714a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800714c:	bf00      	nop
 800714e:	370c      	adds	r7, #12
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr

08007158 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007158:	b480      	push	{r7}
 800715a:	b083      	sub	sp, #12
 800715c:	af00      	add	r7, sp, #0
 800715e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007160:	bf00      	nop
 8007162:	370c      	adds	r7, #12
 8007164:	46bd      	mov	sp, r7
 8007166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800716a:	4770      	bx	lr

0800716c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b082      	sub	sp, #8
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d101      	bne.n	800717e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e040      	b.n	8007200 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800717e:	687b      	ldr	r3, [r7, #4]
 8007180:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007182:	2b00      	cmp	r3, #0
 8007184:	d106      	bne.n	8007194 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	2200      	movs	r2, #0
 800718a:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800718e:	6878      	ldr	r0, [r7, #4]
 8007190:	f7fb f80c 	bl	80021ac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2224      	movs	r2, #36	; 0x24
 8007198:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	681a      	ldr	r2, [r3, #0]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	f022 0201 	bic.w	r2, r2, #1
 80071a8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fbe6 	bl	800797c <UART_SetConfig>
 80071b0:	4603      	mov	r3, r0
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d101      	bne.n	80071ba <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e022      	b.n	8007200 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d002      	beq.n	80071c8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 fe3e 	bl	8007e44 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	685a      	ldr	r2, [r3, #4]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071d6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	681b      	ldr	r3, [r3, #0]
 80071dc:	689a      	ldr	r2, [r3, #8]
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071e6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	681a      	ldr	r2, [r3, #0]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f042 0201 	orr.w	r2, r2, #1
 80071f6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80071f8:	6878      	ldr	r0, [r7, #4]
 80071fa:	f000 fec5 	bl	8007f88 <UART_CheckIdleState>
 80071fe:	4603      	mov	r3, r0
}
 8007200:	4618      	mov	r0, r3
 8007202:	3708      	adds	r7, #8
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b08a      	sub	sp, #40	; 0x28
 800720c:	af02      	add	r7, sp, #8
 800720e:	60f8      	str	r0, [r7, #12]
 8007210:	60b9      	str	r1, [r7, #8]
 8007212:	603b      	str	r3, [r7, #0]
 8007214:	4613      	mov	r3, r2
 8007216:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800721c:	2b20      	cmp	r3, #32
 800721e:	d171      	bne.n	8007304 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8007220:	68bb      	ldr	r3, [r7, #8]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d002      	beq.n	800722c <HAL_UART_Transmit+0x24>
 8007226:	88fb      	ldrh	r3, [r7, #6]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d101      	bne.n	8007230 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e06a      	b.n	8007306 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	2200      	movs	r2, #0
 8007234:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	2221      	movs	r2, #33	; 0x21
 800723c:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800723e:	f7fb f93f 	bl	80024c0 <HAL_GetTick>
 8007242:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	88fa      	ldrh	r2, [r7, #6]
 8007248:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	88fa      	ldrh	r2, [r7, #6]
 8007250:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	689b      	ldr	r3, [r3, #8]
 8007258:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800725c:	d108      	bne.n	8007270 <HAL_UART_Transmit+0x68>
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	691b      	ldr	r3, [r3, #16]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d104      	bne.n	8007270 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8007266:	2300      	movs	r3, #0
 8007268:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	61bb      	str	r3, [r7, #24]
 800726e:	e003      	b.n	8007278 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8007270:	68bb      	ldr	r3, [r7, #8]
 8007272:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007274:	2300      	movs	r3, #0
 8007276:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007278:	e02c      	b.n	80072d4 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	9300      	str	r3, [sp, #0]
 800727e:	697b      	ldr	r3, [r7, #20]
 8007280:	2200      	movs	r2, #0
 8007282:	2180      	movs	r1, #128	; 0x80
 8007284:	68f8      	ldr	r0, [r7, #12]
 8007286:	f000 feb6 	bl	8007ff6 <UART_WaitOnFlagUntilTimeout>
 800728a:	4603      	mov	r3, r0
 800728c:	2b00      	cmp	r3, #0
 800728e:	d001      	beq.n	8007294 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e038      	b.n	8007306 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8007294:	69fb      	ldr	r3, [r7, #28]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d10b      	bne.n	80072b2 <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800729a:	69bb      	ldr	r3, [r7, #24]
 800729c:	881b      	ldrh	r3, [r3, #0]
 800729e:	461a      	mov	r2, r3
 80072a0:	68fb      	ldr	r3, [r7, #12]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80072a8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80072aa:	69bb      	ldr	r3, [r7, #24]
 80072ac:	3302      	adds	r3, #2
 80072ae:	61bb      	str	r3, [r7, #24]
 80072b0:	e007      	b.n	80072c2 <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	781a      	ldrb	r2, [r3, #0]
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	3301      	adds	r3, #1
 80072c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072c8:	b29b      	uxth	r3, r3
 80072ca:	3b01      	subs	r3, #1
 80072cc:	b29a      	uxth	r2, r3
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80072da:	b29b      	uxth	r3, r3
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d1cc      	bne.n	800727a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80072e0:	683b      	ldr	r3, [r7, #0]
 80072e2:	9300      	str	r3, [sp, #0]
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	2200      	movs	r2, #0
 80072e8:	2140      	movs	r1, #64	; 0x40
 80072ea:	68f8      	ldr	r0, [r7, #12]
 80072ec:	f000 fe83 	bl	8007ff6 <UART_WaitOnFlagUntilTimeout>
 80072f0:	4603      	mov	r3, r0
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d001      	beq.n	80072fa <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 80072f6:	2303      	movs	r3, #3
 80072f8:	e005      	b.n	8007306 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80072fa:	68fb      	ldr	r3, [r7, #12]
 80072fc:	2220      	movs	r2, #32
 80072fe:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8007300:	2300      	movs	r3, #0
 8007302:	e000      	b.n	8007306 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8007304:	2302      	movs	r3, #2
  }
}
 8007306:	4618      	mov	r0, r3
 8007308:	3720      	adds	r7, #32
 800730a:	46bd      	mov	sp, r7
 800730c:	bd80      	pop	{r7, pc}

0800730e <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800730e:	b580      	push	{r7, lr}
 8007310:	b08a      	sub	sp, #40	; 0x28
 8007312:	af00      	add	r7, sp, #0
 8007314:	60f8      	str	r0, [r7, #12]
 8007316:	60b9      	str	r1, [r7, #8]
 8007318:	4613      	mov	r3, r2
 800731a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007322:	2b20      	cmp	r3, #32
 8007324:	d132      	bne.n	800738c <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007326:	68bb      	ldr	r3, [r7, #8]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d002      	beq.n	8007332 <HAL_UART_Receive_IT+0x24>
 800732c:	88fb      	ldrh	r3, [r7, #6]
 800732e:	2b00      	cmp	r3, #0
 8007330:	d101      	bne.n	8007336 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007332:	2301      	movs	r3, #1
 8007334:	e02b      	b.n	800738e <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	685b      	ldr	r3, [r3, #4]
 8007342:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007346:	2b00      	cmp	r3, #0
 8007348:	d018      	beq.n	800737c <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	e853 3f00 	ldrex	r3, [r3]
 8007356:	613b      	str	r3, [r7, #16]
   return(result);
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800735e:	627b      	str	r3, [r7, #36]	; 0x24
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	461a      	mov	r2, r3
 8007366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007368:	623b      	str	r3, [r7, #32]
 800736a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800736c:	69f9      	ldr	r1, [r7, #28]
 800736e:	6a3a      	ldr	r2, [r7, #32]
 8007370:	e841 2300 	strex	r3, r2, [r1]
 8007374:	61bb      	str	r3, [r7, #24]
   return(result);
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	2b00      	cmp	r3, #0
 800737a:	d1e6      	bne.n	800734a <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800737c:	88fb      	ldrh	r3, [r7, #6]
 800737e:	461a      	mov	r2, r3
 8007380:	68b9      	ldr	r1, [r7, #8]
 8007382:	68f8      	ldr	r0, [r7, #12]
 8007384:	f000 fefe 	bl	8008184 <UART_Start_Receive_IT>
 8007388:	4603      	mov	r3, r0
 800738a:	e000      	b.n	800738e <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800738c:	2302      	movs	r3, #2
  }
}
 800738e:	4618      	mov	r0, r3
 8007390:	3728      	adds	r7, #40	; 0x28
 8007392:	46bd      	mov	sp, r7
 8007394:	bd80      	pop	{r7, pc}
	...

08007398 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007398:	b580      	push	{r7, lr}
 800739a:	b0ba      	sub	sp, #232	; 0xe8
 800739c:	af00      	add	r7, sp, #0
 800739e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	69db      	ldr	r3, [r3, #28]
 80073a6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	689b      	ldr	r3, [r3, #8]
 80073ba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80073be:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80073c2:	f640 030f 	movw	r3, #2063	; 0x80f
 80073c6:	4013      	ands	r3, r2
 80073c8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80073cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d115      	bne.n	8007400 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80073d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073d8:	f003 0320 	and.w	r3, r3, #32
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d00f      	beq.n	8007400 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80073e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073e4:	f003 0320 	and.w	r3, r3, #32
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d009      	beq.n	8007400 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073f0:	2b00      	cmp	r3, #0
 80073f2:	f000 8297 	beq.w	8007924 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	4798      	blx	r3
      }
      return;
 80073fe:	e291      	b.n	8007924 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007400:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007404:	2b00      	cmp	r3, #0
 8007406:	f000 8117 	beq.w	8007638 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800740a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800740e:	f003 0301 	and.w	r3, r3, #1
 8007412:	2b00      	cmp	r3, #0
 8007414:	d106      	bne.n	8007424 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8007416:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800741a:	4b85      	ldr	r3, [pc, #532]	; (8007630 <HAL_UART_IRQHandler+0x298>)
 800741c:	4013      	ands	r3, r2
 800741e:	2b00      	cmp	r3, #0
 8007420:	f000 810a 	beq.w	8007638 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007428:	f003 0301 	and.w	r3, r3, #1
 800742c:	2b00      	cmp	r3, #0
 800742e:	d011      	beq.n	8007454 <HAL_UART_IRQHandler+0xbc>
 8007430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007434:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007438:	2b00      	cmp	r3, #0
 800743a:	d00b      	beq.n	8007454 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2201      	movs	r2, #1
 8007442:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800744a:	f043 0201 	orr.w	r2, r3, #1
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007458:	f003 0302 	and.w	r3, r3, #2
 800745c:	2b00      	cmp	r3, #0
 800745e:	d011      	beq.n	8007484 <HAL_UART_IRQHandler+0xec>
 8007460:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007464:	f003 0301 	and.w	r3, r3, #1
 8007468:	2b00      	cmp	r3, #0
 800746a:	d00b      	beq.n	8007484 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	2202      	movs	r2, #2
 8007472:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800747a:	f043 0204 	orr.w	r2, r3, #4
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007484:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007488:	f003 0304 	and.w	r3, r3, #4
 800748c:	2b00      	cmp	r3, #0
 800748e:	d011      	beq.n	80074b4 <HAL_UART_IRQHandler+0x11c>
 8007490:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007494:	f003 0301 	and.w	r3, r3, #1
 8007498:	2b00      	cmp	r3, #0
 800749a:	d00b      	beq.n	80074b4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	2204      	movs	r2, #4
 80074a2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074aa:	f043 0202 	orr.w	r2, r3, #2
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80074b4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074b8:	f003 0308 	and.w	r3, r3, #8
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d017      	beq.n	80074f0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80074c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80074c4:	f003 0320 	and.w	r3, r3, #32
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d105      	bne.n	80074d8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80074cc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80074d0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d00b      	beq.n	80074f0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	2208      	movs	r2, #8
 80074de:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80074e6:	f043 0208 	orr.w	r2, r3, #8
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80074f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80074f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	d012      	beq.n	8007522 <HAL_UART_IRQHandler+0x18a>
 80074fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007500:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007504:	2b00      	cmp	r3, #0
 8007506:	d00c      	beq.n	8007522 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007508:	687b      	ldr	r3, [r7, #4]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007510:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007518:	f043 0220 	orr.w	r2, r3, #32
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007528:	2b00      	cmp	r3, #0
 800752a:	f000 81fd 	beq.w	8007928 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800752e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007532:	f003 0320 	and.w	r3, r3, #32
 8007536:	2b00      	cmp	r3, #0
 8007538:	d00d      	beq.n	8007556 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800753a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800753e:	f003 0320 	and.w	r3, r3, #32
 8007542:	2b00      	cmp	r3, #0
 8007544:	d007      	beq.n	8007556 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800754a:	2b00      	cmp	r3, #0
 800754c:	d003      	beq.n	8007556 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800755c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	689b      	ldr	r3, [r3, #8]
 8007566:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800756a:	2b40      	cmp	r3, #64	; 0x40
 800756c:	d005      	beq.n	800757a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800756e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007572:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007576:	2b00      	cmp	r3, #0
 8007578:	d04f      	beq.n	800761a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800757a:	6878      	ldr	r0, [r7, #4]
 800757c:	f000 fec8 	bl	8008310 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	689b      	ldr	r3, [r3, #8]
 8007586:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800758a:	2b40      	cmp	r3, #64	; 0x40
 800758c:	d141      	bne.n	8007612 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	3308      	adds	r3, #8
 8007594:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007598:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800759c:	e853 3f00 	ldrex	r3, [r3]
 80075a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80075a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80075a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80075ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	3308      	adds	r3, #8
 80075b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80075ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80075be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80075c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80075ca:	e841 2300 	strex	r3, r2, [r1]
 80075ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80075d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1d9      	bne.n	800758e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075de:	2b00      	cmp	r3, #0
 80075e0:	d013      	beq.n	800760a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075e6:	4a13      	ldr	r2, [pc, #76]	; (8007634 <HAL_UART_IRQHandler+0x29c>)
 80075e8:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075ee:	4618      	mov	r0, r3
 80075f0:	f7fb f917 	bl	8002822 <HAL_DMA_Abort_IT>
 80075f4:	4603      	mov	r3, r0
 80075f6:	2b00      	cmp	r3, #0
 80075f8:	d017      	beq.n	800762a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007600:	687a      	ldr	r2, [r7, #4]
 8007602:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8007604:	4610      	mov	r0, r2
 8007606:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007608:	e00f      	b.n	800762a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800760a:	6878      	ldr	r0, [r7, #4]
 800760c:	f000 f9a0 	bl	8007950 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007610:	e00b      	b.n	800762a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007612:	6878      	ldr	r0, [r7, #4]
 8007614:	f000 f99c 	bl	8007950 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007618:	e007      	b.n	800762a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800761a:	6878      	ldr	r0, [r7, #4]
 800761c:	f000 f998 	bl	8007950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	2200      	movs	r2, #0
 8007624:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007628:	e17e      	b.n	8007928 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800762a:	bf00      	nop
    return;
 800762c:	e17c      	b.n	8007928 <HAL_UART_IRQHandler+0x590>
 800762e:	bf00      	nop
 8007630:	04000120 	.word	0x04000120
 8007634:	080083d9 	.word	0x080083d9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800763c:	2b01      	cmp	r3, #1
 800763e:	f040 814c 	bne.w	80078da <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007646:	f003 0310 	and.w	r3, r3, #16
 800764a:	2b00      	cmp	r3, #0
 800764c:	f000 8145 	beq.w	80078da <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007650:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007654:	f003 0310 	and.w	r3, r3, #16
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 813e 	beq.w	80078da <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	2210      	movs	r2, #16
 8007664:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	689b      	ldr	r3, [r3, #8]
 800766c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007670:	2b40      	cmp	r3, #64	; 0x40
 8007672:	f040 80b6 	bne.w	80077e2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007676:	687b      	ldr	r3, [r7, #4]
 8007678:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800767a:	681b      	ldr	r3, [r3, #0]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007682:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007686:	2b00      	cmp	r3, #0
 8007688:	f000 8150 	beq.w	800792c <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800768c:	687b      	ldr	r3, [r7, #4]
 800768e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8007692:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007696:	429a      	cmp	r2, r3
 8007698:	f080 8148 	bcs.w	800792c <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80076a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076aa:	69db      	ldr	r3, [r3, #28]
 80076ac:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80076b0:	f000 8086 	beq.w	80077c0 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80076b4:	687b      	ldr	r3, [r7, #4]
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80076bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80076c0:	e853 3f00 	ldrex	r3, [r3]
 80076c4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80076c8:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80076cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80076d0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80076d4:	687b      	ldr	r3, [r7, #4]
 80076d6:	681b      	ldr	r3, [r3, #0]
 80076d8:	461a      	mov	r2, r3
 80076da:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80076de:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80076e2:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076e6:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80076ea:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80076ee:	e841 2300 	strex	r3, r2, [r1]
 80076f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80076f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80076fa:	2b00      	cmp	r3, #0
 80076fc:	d1da      	bne.n	80076b4 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	3308      	adds	r3, #8
 8007704:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007706:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007708:	e853 3f00 	ldrex	r3, [r3]
 800770c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800770e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007710:	f023 0301 	bic.w	r3, r3, #1
 8007714:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	3308      	adds	r3, #8
 800771e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007722:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007726:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007728:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800772a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800772e:	e841 2300 	strex	r3, r2, [r1]
 8007732:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007734:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007736:	2b00      	cmp	r3, #0
 8007738:	d1e1      	bne.n	80076fe <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	3308      	adds	r3, #8
 8007740:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007742:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007744:	e853 3f00 	ldrex	r3, [r3]
 8007748:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800774a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800774c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007750:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	3308      	adds	r3, #8
 800775a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800775e:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007760:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007762:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007764:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007766:	e841 2300 	strex	r3, r2, [r1]
 800776a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800776c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1e3      	bne.n	800773a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2220      	movs	r2, #32
 8007776:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	2200      	movs	r2, #0
 800777e:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007786:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007788:	e853 3f00 	ldrex	r3, [r3]
 800778c:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800778e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007790:	f023 0310 	bic.w	r3, r3, #16
 8007794:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	461a      	mov	r2, r3
 800779e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80077a2:	65bb      	str	r3, [r7, #88]	; 0x58
 80077a4:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077a6:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80077a8:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80077aa:	e841 2300 	strex	r3, r2, [r1]
 80077ae:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80077b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d1e4      	bne.n	8007780 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80077ba:	4618      	mov	r0, r3
 80077bc:	f7fa ffc1 	bl	8002742 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	2202      	movs	r2, #2
 80077c4:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077d2:	b29b      	uxth	r3, r3
 80077d4:	1ad3      	subs	r3, r2, r3
 80077d6:	b29b      	uxth	r3, r3
 80077d8:	4619      	mov	r1, r3
 80077da:	6878      	ldr	r0, [r7, #4]
 80077dc:	f000 f8c2 	bl	8007964 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077e0:	e0a4      	b.n	800792c <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077ee:	b29b      	uxth	r3, r3
 80077f0:	1ad3      	subs	r3, r2, r3
 80077f2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f000 8096 	beq.w	8007930 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 8007804:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007808:	2b00      	cmp	r3, #0
 800780a:	f000 8091 	beq.w	8007930 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007816:	e853 3f00 	ldrex	r3, [r3]
 800781a:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800781c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800781e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007822:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	461a      	mov	r2, r3
 800782c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007830:	647b      	str	r3, [r7, #68]	; 0x44
 8007832:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007834:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007836:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007838:	e841 2300 	strex	r3, r2, [r1]
 800783c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800783e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007840:	2b00      	cmp	r3, #0
 8007842:	d1e4      	bne.n	800780e <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	3308      	adds	r3, #8
 800784a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800784e:	e853 3f00 	ldrex	r3, [r3]
 8007852:	623b      	str	r3, [r7, #32]
   return(result);
 8007854:	6a3b      	ldr	r3, [r7, #32]
 8007856:	f023 0301 	bic.w	r3, r3, #1
 800785a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	3308      	adds	r3, #8
 8007864:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007868:	633a      	str	r2, [r7, #48]	; 0x30
 800786a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800786e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007870:	e841 2300 	strex	r3, r2, [r1]
 8007874:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007876:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007878:	2b00      	cmp	r3, #0
 800787a:	d1e3      	bne.n	8007844 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	2220      	movs	r2, #32
 8007880:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2200      	movs	r2, #0
 8007888:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	2200      	movs	r2, #0
 800788e:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	e853 3f00 	ldrex	r3, [r3]
 800789c:	60fb      	str	r3, [r7, #12]
   return(result);
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	f023 0310 	bic.w	r3, r3, #16
 80078a4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	461a      	mov	r2, r3
 80078ae:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80078b2:	61fb      	str	r3, [r7, #28]
 80078b4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078b6:	69b9      	ldr	r1, [r7, #24]
 80078b8:	69fa      	ldr	r2, [r7, #28]
 80078ba:	e841 2300 	strex	r3, r2, [r1]
 80078be:	617b      	str	r3, [r7, #20]
   return(result);
 80078c0:	697b      	ldr	r3, [r7, #20]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d1e4      	bne.n	8007890 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2202      	movs	r2, #2
 80078ca:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80078cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80078d0:	4619      	mov	r1, r3
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 f846 	bl	8007964 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80078d8:	e02a      	b.n	8007930 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80078da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80078de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d00e      	beq.n	8007904 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80078e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80078ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d008      	beq.n	8007904 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d01c      	beq.n	8007934 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80078fe:	6878      	ldr	r0, [r7, #4]
 8007900:	4798      	blx	r3
    }
    return;
 8007902:	e017      	b.n	8007934 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007904:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007908:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800790c:	2b00      	cmp	r3, #0
 800790e:	d012      	beq.n	8007936 <HAL_UART_IRQHandler+0x59e>
 8007910:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007914:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00c      	beq.n	8007936 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800791c:	6878      	ldr	r0, [r7, #4]
 800791e:	f000 fd71 	bl	8008404 <UART_EndTransmit_IT>
    return;
 8007922:	e008      	b.n	8007936 <HAL_UART_IRQHandler+0x59e>
      return;
 8007924:	bf00      	nop
 8007926:	e006      	b.n	8007936 <HAL_UART_IRQHandler+0x59e>
    return;
 8007928:	bf00      	nop
 800792a:	e004      	b.n	8007936 <HAL_UART_IRQHandler+0x59e>
      return;
 800792c:	bf00      	nop
 800792e:	e002      	b.n	8007936 <HAL_UART_IRQHandler+0x59e>
      return;
 8007930:	bf00      	nop
 8007932:	e000      	b.n	8007936 <HAL_UART_IRQHandler+0x59e>
    return;
 8007934:	bf00      	nop
  }

}
 8007936:	37e8      	adds	r7, #232	; 0xe8
 8007938:	46bd      	mov	sp, r7
 800793a:	bd80      	pop	{r7, pc}

0800793c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800793c:	b480      	push	{r7}
 800793e:	b083      	sub	sp, #12
 8007940:	af00      	add	r7, sp, #0
 8007942:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007944:	bf00      	nop
 8007946:	370c      	adds	r7, #12
 8007948:	46bd      	mov	sp, r7
 800794a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800794e:	4770      	bx	lr

08007950 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007950:	b480      	push	{r7}
 8007952:	b083      	sub	sp, #12
 8007954:	af00      	add	r7, sp, #0
 8007956:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007958:	bf00      	nop
 800795a:	370c      	adds	r7, #12
 800795c:	46bd      	mov	sp, r7
 800795e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007962:	4770      	bx	lr

08007964 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007964:	b480      	push	{r7}
 8007966:	b083      	sub	sp, #12
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	460b      	mov	r3, r1
 800796e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007970:	bf00      	nop
 8007972:	370c      	adds	r7, #12
 8007974:	46bd      	mov	sp, r7
 8007976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800797a:	4770      	bx	lr

0800797c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b088      	sub	sp, #32
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007984:	2300      	movs	r3, #0
 8007986:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	689a      	ldr	r2, [r3, #8]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	691b      	ldr	r3, [r3, #16]
 8007990:	431a      	orrs	r2, r3
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	695b      	ldr	r3, [r3, #20]
 8007996:	431a      	orrs	r2, r3
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	69db      	ldr	r3, [r3, #28]
 800799c:	4313      	orrs	r3, r2
 800799e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	681a      	ldr	r2, [r3, #0]
 80079a6:	4ba6      	ldr	r3, [pc, #664]	; (8007c40 <UART_SetConfig+0x2c4>)
 80079a8:	4013      	ands	r3, r2
 80079aa:	687a      	ldr	r2, [r7, #4]
 80079ac:	6812      	ldr	r2, [r2, #0]
 80079ae:	6979      	ldr	r1, [r7, #20]
 80079b0:	430b      	orrs	r3, r1
 80079b2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	681b      	ldr	r3, [r3, #0]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	68da      	ldr	r2, [r3, #12]
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	430a      	orrs	r2, r1
 80079c8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	699b      	ldr	r3, [r3, #24]
 80079ce:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	6a1b      	ldr	r3, [r3, #32]
 80079d4:	697a      	ldr	r2, [r7, #20]
 80079d6:	4313      	orrs	r3, r2
 80079d8:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	689b      	ldr	r3, [r3, #8]
 80079e0:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	697a      	ldr	r2, [r7, #20]
 80079ea:	430a      	orrs	r2, r1
 80079ec:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a94      	ldr	r2, [pc, #592]	; (8007c44 <UART_SetConfig+0x2c8>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d120      	bne.n	8007a3a <UART_SetConfig+0xbe>
 80079f8:	4b93      	ldr	r3, [pc, #588]	; (8007c48 <UART_SetConfig+0x2cc>)
 80079fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079fe:	f003 0303 	and.w	r3, r3, #3
 8007a02:	2b03      	cmp	r3, #3
 8007a04:	d816      	bhi.n	8007a34 <UART_SetConfig+0xb8>
 8007a06:	a201      	add	r2, pc, #4	; (adr r2, 8007a0c <UART_SetConfig+0x90>)
 8007a08:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a0c:	08007a1d 	.word	0x08007a1d
 8007a10:	08007a29 	.word	0x08007a29
 8007a14:	08007a23 	.word	0x08007a23
 8007a18:	08007a2f 	.word	0x08007a2f
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	77fb      	strb	r3, [r7, #31]
 8007a20:	e150      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007a22:	2302      	movs	r3, #2
 8007a24:	77fb      	strb	r3, [r7, #31]
 8007a26:	e14d      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007a28:	2304      	movs	r3, #4
 8007a2a:	77fb      	strb	r3, [r7, #31]
 8007a2c:	e14a      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007a2e:	2308      	movs	r3, #8
 8007a30:	77fb      	strb	r3, [r7, #31]
 8007a32:	e147      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007a34:	2310      	movs	r3, #16
 8007a36:	77fb      	strb	r3, [r7, #31]
 8007a38:	e144      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	4a83      	ldr	r2, [pc, #524]	; (8007c4c <UART_SetConfig+0x2d0>)
 8007a40:	4293      	cmp	r3, r2
 8007a42:	d132      	bne.n	8007aaa <UART_SetConfig+0x12e>
 8007a44:	4b80      	ldr	r3, [pc, #512]	; (8007c48 <UART_SetConfig+0x2cc>)
 8007a46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a4a:	f003 030c 	and.w	r3, r3, #12
 8007a4e:	2b0c      	cmp	r3, #12
 8007a50:	d828      	bhi.n	8007aa4 <UART_SetConfig+0x128>
 8007a52:	a201      	add	r2, pc, #4	; (adr r2, 8007a58 <UART_SetConfig+0xdc>)
 8007a54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a58:	08007a8d 	.word	0x08007a8d
 8007a5c:	08007aa5 	.word	0x08007aa5
 8007a60:	08007aa5 	.word	0x08007aa5
 8007a64:	08007aa5 	.word	0x08007aa5
 8007a68:	08007a99 	.word	0x08007a99
 8007a6c:	08007aa5 	.word	0x08007aa5
 8007a70:	08007aa5 	.word	0x08007aa5
 8007a74:	08007aa5 	.word	0x08007aa5
 8007a78:	08007a93 	.word	0x08007a93
 8007a7c:	08007aa5 	.word	0x08007aa5
 8007a80:	08007aa5 	.word	0x08007aa5
 8007a84:	08007aa5 	.word	0x08007aa5
 8007a88:	08007a9f 	.word	0x08007a9f
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	77fb      	strb	r3, [r7, #31]
 8007a90:	e118      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007a92:	2302      	movs	r3, #2
 8007a94:	77fb      	strb	r3, [r7, #31]
 8007a96:	e115      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007a98:	2304      	movs	r3, #4
 8007a9a:	77fb      	strb	r3, [r7, #31]
 8007a9c:	e112      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007a9e:	2308      	movs	r3, #8
 8007aa0:	77fb      	strb	r3, [r7, #31]
 8007aa2:	e10f      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007aa4:	2310      	movs	r3, #16
 8007aa6:	77fb      	strb	r3, [r7, #31]
 8007aa8:	e10c      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	4a68      	ldr	r2, [pc, #416]	; (8007c50 <UART_SetConfig+0x2d4>)
 8007ab0:	4293      	cmp	r3, r2
 8007ab2:	d120      	bne.n	8007af6 <UART_SetConfig+0x17a>
 8007ab4:	4b64      	ldr	r3, [pc, #400]	; (8007c48 <UART_SetConfig+0x2cc>)
 8007ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aba:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007abe:	2b30      	cmp	r3, #48	; 0x30
 8007ac0:	d013      	beq.n	8007aea <UART_SetConfig+0x16e>
 8007ac2:	2b30      	cmp	r3, #48	; 0x30
 8007ac4:	d814      	bhi.n	8007af0 <UART_SetConfig+0x174>
 8007ac6:	2b20      	cmp	r3, #32
 8007ac8:	d009      	beq.n	8007ade <UART_SetConfig+0x162>
 8007aca:	2b20      	cmp	r3, #32
 8007acc:	d810      	bhi.n	8007af0 <UART_SetConfig+0x174>
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d002      	beq.n	8007ad8 <UART_SetConfig+0x15c>
 8007ad2:	2b10      	cmp	r3, #16
 8007ad4:	d006      	beq.n	8007ae4 <UART_SetConfig+0x168>
 8007ad6:	e00b      	b.n	8007af0 <UART_SetConfig+0x174>
 8007ad8:	2300      	movs	r3, #0
 8007ada:	77fb      	strb	r3, [r7, #31]
 8007adc:	e0f2      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007ade:	2302      	movs	r3, #2
 8007ae0:	77fb      	strb	r3, [r7, #31]
 8007ae2:	e0ef      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007ae4:	2304      	movs	r3, #4
 8007ae6:	77fb      	strb	r3, [r7, #31]
 8007ae8:	e0ec      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007aea:	2308      	movs	r3, #8
 8007aec:	77fb      	strb	r3, [r7, #31]
 8007aee:	e0e9      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007af0:	2310      	movs	r3, #16
 8007af2:	77fb      	strb	r3, [r7, #31]
 8007af4:	e0e6      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	4a56      	ldr	r2, [pc, #344]	; (8007c54 <UART_SetConfig+0x2d8>)
 8007afc:	4293      	cmp	r3, r2
 8007afe:	d120      	bne.n	8007b42 <UART_SetConfig+0x1c6>
 8007b00:	4b51      	ldr	r3, [pc, #324]	; (8007c48 <UART_SetConfig+0x2cc>)
 8007b02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b06:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007b0a:	2bc0      	cmp	r3, #192	; 0xc0
 8007b0c:	d013      	beq.n	8007b36 <UART_SetConfig+0x1ba>
 8007b0e:	2bc0      	cmp	r3, #192	; 0xc0
 8007b10:	d814      	bhi.n	8007b3c <UART_SetConfig+0x1c0>
 8007b12:	2b80      	cmp	r3, #128	; 0x80
 8007b14:	d009      	beq.n	8007b2a <UART_SetConfig+0x1ae>
 8007b16:	2b80      	cmp	r3, #128	; 0x80
 8007b18:	d810      	bhi.n	8007b3c <UART_SetConfig+0x1c0>
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d002      	beq.n	8007b24 <UART_SetConfig+0x1a8>
 8007b1e:	2b40      	cmp	r3, #64	; 0x40
 8007b20:	d006      	beq.n	8007b30 <UART_SetConfig+0x1b4>
 8007b22:	e00b      	b.n	8007b3c <UART_SetConfig+0x1c0>
 8007b24:	2300      	movs	r3, #0
 8007b26:	77fb      	strb	r3, [r7, #31]
 8007b28:	e0cc      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007b2a:	2302      	movs	r3, #2
 8007b2c:	77fb      	strb	r3, [r7, #31]
 8007b2e:	e0c9      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007b30:	2304      	movs	r3, #4
 8007b32:	77fb      	strb	r3, [r7, #31]
 8007b34:	e0c6      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007b36:	2308      	movs	r3, #8
 8007b38:	77fb      	strb	r3, [r7, #31]
 8007b3a:	e0c3      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007b3c:	2310      	movs	r3, #16
 8007b3e:	77fb      	strb	r3, [r7, #31]
 8007b40:	e0c0      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	4a44      	ldr	r2, [pc, #272]	; (8007c58 <UART_SetConfig+0x2dc>)
 8007b48:	4293      	cmp	r3, r2
 8007b4a:	d125      	bne.n	8007b98 <UART_SetConfig+0x21c>
 8007b4c:	4b3e      	ldr	r3, [pc, #248]	; (8007c48 <UART_SetConfig+0x2cc>)
 8007b4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007b56:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b5a:	d017      	beq.n	8007b8c <UART_SetConfig+0x210>
 8007b5c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007b60:	d817      	bhi.n	8007b92 <UART_SetConfig+0x216>
 8007b62:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b66:	d00b      	beq.n	8007b80 <UART_SetConfig+0x204>
 8007b68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007b6c:	d811      	bhi.n	8007b92 <UART_SetConfig+0x216>
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d003      	beq.n	8007b7a <UART_SetConfig+0x1fe>
 8007b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007b76:	d006      	beq.n	8007b86 <UART_SetConfig+0x20a>
 8007b78:	e00b      	b.n	8007b92 <UART_SetConfig+0x216>
 8007b7a:	2300      	movs	r3, #0
 8007b7c:	77fb      	strb	r3, [r7, #31]
 8007b7e:	e0a1      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007b80:	2302      	movs	r3, #2
 8007b82:	77fb      	strb	r3, [r7, #31]
 8007b84:	e09e      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007b86:	2304      	movs	r3, #4
 8007b88:	77fb      	strb	r3, [r7, #31]
 8007b8a:	e09b      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007b8c:	2308      	movs	r3, #8
 8007b8e:	77fb      	strb	r3, [r7, #31]
 8007b90:	e098      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007b92:	2310      	movs	r3, #16
 8007b94:	77fb      	strb	r3, [r7, #31]
 8007b96:	e095      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	4a2f      	ldr	r2, [pc, #188]	; (8007c5c <UART_SetConfig+0x2e0>)
 8007b9e:	4293      	cmp	r3, r2
 8007ba0:	d125      	bne.n	8007bee <UART_SetConfig+0x272>
 8007ba2:	4b29      	ldr	r3, [pc, #164]	; (8007c48 <UART_SetConfig+0x2cc>)
 8007ba4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ba8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007bac:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bb0:	d017      	beq.n	8007be2 <UART_SetConfig+0x266>
 8007bb2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007bb6:	d817      	bhi.n	8007be8 <UART_SetConfig+0x26c>
 8007bb8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bbc:	d00b      	beq.n	8007bd6 <UART_SetConfig+0x25a>
 8007bbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007bc2:	d811      	bhi.n	8007be8 <UART_SetConfig+0x26c>
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d003      	beq.n	8007bd0 <UART_SetConfig+0x254>
 8007bc8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007bcc:	d006      	beq.n	8007bdc <UART_SetConfig+0x260>
 8007bce:	e00b      	b.n	8007be8 <UART_SetConfig+0x26c>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	77fb      	strb	r3, [r7, #31]
 8007bd4:	e076      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007bd6:	2302      	movs	r3, #2
 8007bd8:	77fb      	strb	r3, [r7, #31]
 8007bda:	e073      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007bdc:	2304      	movs	r3, #4
 8007bde:	77fb      	strb	r3, [r7, #31]
 8007be0:	e070      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007be2:	2308      	movs	r3, #8
 8007be4:	77fb      	strb	r3, [r7, #31]
 8007be6:	e06d      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007be8:	2310      	movs	r3, #16
 8007bea:	77fb      	strb	r3, [r7, #31]
 8007bec:	e06a      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4a1b      	ldr	r2, [pc, #108]	; (8007c60 <UART_SetConfig+0x2e4>)
 8007bf4:	4293      	cmp	r3, r2
 8007bf6:	d138      	bne.n	8007c6a <UART_SetConfig+0x2ee>
 8007bf8:	4b13      	ldr	r3, [pc, #76]	; (8007c48 <UART_SetConfig+0x2cc>)
 8007bfa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007bfe:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007c02:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c06:	d017      	beq.n	8007c38 <UART_SetConfig+0x2bc>
 8007c08:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007c0c:	d82a      	bhi.n	8007c64 <UART_SetConfig+0x2e8>
 8007c0e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c12:	d00b      	beq.n	8007c2c <UART_SetConfig+0x2b0>
 8007c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c18:	d824      	bhi.n	8007c64 <UART_SetConfig+0x2e8>
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d003      	beq.n	8007c26 <UART_SetConfig+0x2aa>
 8007c1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c22:	d006      	beq.n	8007c32 <UART_SetConfig+0x2b6>
 8007c24:	e01e      	b.n	8007c64 <UART_SetConfig+0x2e8>
 8007c26:	2300      	movs	r3, #0
 8007c28:	77fb      	strb	r3, [r7, #31]
 8007c2a:	e04b      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007c2c:	2302      	movs	r3, #2
 8007c2e:	77fb      	strb	r3, [r7, #31]
 8007c30:	e048      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007c32:	2304      	movs	r3, #4
 8007c34:	77fb      	strb	r3, [r7, #31]
 8007c36:	e045      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007c38:	2308      	movs	r3, #8
 8007c3a:	77fb      	strb	r3, [r7, #31]
 8007c3c:	e042      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007c3e:	bf00      	nop
 8007c40:	efff69f3 	.word	0xefff69f3
 8007c44:	40011000 	.word	0x40011000
 8007c48:	40023800 	.word	0x40023800
 8007c4c:	40004400 	.word	0x40004400
 8007c50:	40004800 	.word	0x40004800
 8007c54:	40004c00 	.word	0x40004c00
 8007c58:	40005000 	.word	0x40005000
 8007c5c:	40011400 	.word	0x40011400
 8007c60:	40007800 	.word	0x40007800
 8007c64:	2310      	movs	r3, #16
 8007c66:	77fb      	strb	r3, [r7, #31]
 8007c68:	e02c      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	4a72      	ldr	r2, [pc, #456]	; (8007e38 <UART_SetConfig+0x4bc>)
 8007c70:	4293      	cmp	r3, r2
 8007c72:	d125      	bne.n	8007cc0 <UART_SetConfig+0x344>
 8007c74:	4b71      	ldr	r3, [pc, #452]	; (8007e3c <UART_SetConfig+0x4c0>)
 8007c76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007c7a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007c7e:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007c82:	d017      	beq.n	8007cb4 <UART_SetConfig+0x338>
 8007c84:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007c88:	d817      	bhi.n	8007cba <UART_SetConfig+0x33e>
 8007c8a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c8e:	d00b      	beq.n	8007ca8 <UART_SetConfig+0x32c>
 8007c90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007c94:	d811      	bhi.n	8007cba <UART_SetConfig+0x33e>
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d003      	beq.n	8007ca2 <UART_SetConfig+0x326>
 8007c9a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007c9e:	d006      	beq.n	8007cae <UART_SetConfig+0x332>
 8007ca0:	e00b      	b.n	8007cba <UART_SetConfig+0x33e>
 8007ca2:	2300      	movs	r3, #0
 8007ca4:	77fb      	strb	r3, [r7, #31]
 8007ca6:	e00d      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007ca8:	2302      	movs	r3, #2
 8007caa:	77fb      	strb	r3, [r7, #31]
 8007cac:	e00a      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007cae:	2304      	movs	r3, #4
 8007cb0:	77fb      	strb	r3, [r7, #31]
 8007cb2:	e007      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007cb4:	2308      	movs	r3, #8
 8007cb6:	77fb      	strb	r3, [r7, #31]
 8007cb8:	e004      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007cba:	2310      	movs	r3, #16
 8007cbc:	77fb      	strb	r3, [r7, #31]
 8007cbe:	e001      	b.n	8007cc4 <UART_SetConfig+0x348>
 8007cc0:	2310      	movs	r3, #16
 8007cc2:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	69db      	ldr	r3, [r3, #28]
 8007cc8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ccc:	d15b      	bne.n	8007d86 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007cce:	7ffb      	ldrb	r3, [r7, #31]
 8007cd0:	2b08      	cmp	r3, #8
 8007cd2:	d828      	bhi.n	8007d26 <UART_SetConfig+0x3aa>
 8007cd4:	a201      	add	r2, pc, #4	; (adr r2, 8007cdc <UART_SetConfig+0x360>)
 8007cd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cda:	bf00      	nop
 8007cdc:	08007d01 	.word	0x08007d01
 8007ce0:	08007d09 	.word	0x08007d09
 8007ce4:	08007d11 	.word	0x08007d11
 8007ce8:	08007d27 	.word	0x08007d27
 8007cec:	08007d17 	.word	0x08007d17
 8007cf0:	08007d27 	.word	0x08007d27
 8007cf4:	08007d27 	.word	0x08007d27
 8007cf8:	08007d27 	.word	0x08007d27
 8007cfc:	08007d1f 	.word	0x08007d1f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007d00:	f7fd faa2 	bl	8005248 <HAL_RCC_GetPCLK1Freq>
 8007d04:	61b8      	str	r0, [r7, #24]
        break;
 8007d06:	e013      	b.n	8007d30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007d08:	f7fd fab2 	bl	8005270 <HAL_RCC_GetPCLK2Freq>
 8007d0c:	61b8      	str	r0, [r7, #24]
        break;
 8007d0e:	e00f      	b.n	8007d30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007d10:	4b4b      	ldr	r3, [pc, #300]	; (8007e40 <UART_SetConfig+0x4c4>)
 8007d12:	61bb      	str	r3, [r7, #24]
        break;
 8007d14:	e00c      	b.n	8007d30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007d16:	f7fd f985 	bl	8005024 <HAL_RCC_GetSysClockFreq>
 8007d1a:	61b8      	str	r0, [r7, #24]
        break;
 8007d1c:	e008      	b.n	8007d30 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007d1e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007d22:	61bb      	str	r3, [r7, #24]
        break;
 8007d24:	e004      	b.n	8007d30 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007d26:	2300      	movs	r3, #0
 8007d28:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007d2a:	2301      	movs	r3, #1
 8007d2c:	77bb      	strb	r3, [r7, #30]
        break;
 8007d2e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007d30:	69bb      	ldr	r3, [r7, #24]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d074      	beq.n	8007e20 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007d36:	69bb      	ldr	r3, [r7, #24]
 8007d38:	005a      	lsls	r2, r3, #1
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	685b      	ldr	r3, [r3, #4]
 8007d3e:	085b      	lsrs	r3, r3, #1
 8007d40:	441a      	add	r2, r3
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	685b      	ldr	r3, [r3, #4]
 8007d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d4a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d4c:	693b      	ldr	r3, [r7, #16]
 8007d4e:	2b0f      	cmp	r3, #15
 8007d50:	d916      	bls.n	8007d80 <UART_SetConfig+0x404>
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d58:	d212      	bcs.n	8007d80 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007d5a:	693b      	ldr	r3, [r7, #16]
 8007d5c:	b29b      	uxth	r3, r3
 8007d5e:	f023 030f 	bic.w	r3, r3, #15
 8007d62:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007d64:	693b      	ldr	r3, [r7, #16]
 8007d66:	085b      	lsrs	r3, r3, #1
 8007d68:	b29b      	uxth	r3, r3
 8007d6a:	f003 0307 	and.w	r3, r3, #7
 8007d6e:	b29a      	uxth	r2, r3
 8007d70:	89fb      	ldrh	r3, [r7, #14]
 8007d72:	4313      	orrs	r3, r2
 8007d74:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	89fa      	ldrh	r2, [r7, #14]
 8007d7c:	60da      	str	r2, [r3, #12]
 8007d7e:	e04f      	b.n	8007e20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007d80:	2301      	movs	r3, #1
 8007d82:	77bb      	strb	r3, [r7, #30]
 8007d84:	e04c      	b.n	8007e20 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007d86:	7ffb      	ldrb	r3, [r7, #31]
 8007d88:	2b08      	cmp	r3, #8
 8007d8a:	d828      	bhi.n	8007dde <UART_SetConfig+0x462>
 8007d8c:	a201      	add	r2, pc, #4	; (adr r2, 8007d94 <UART_SetConfig+0x418>)
 8007d8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d92:	bf00      	nop
 8007d94:	08007db9 	.word	0x08007db9
 8007d98:	08007dc1 	.word	0x08007dc1
 8007d9c:	08007dc9 	.word	0x08007dc9
 8007da0:	08007ddf 	.word	0x08007ddf
 8007da4:	08007dcf 	.word	0x08007dcf
 8007da8:	08007ddf 	.word	0x08007ddf
 8007dac:	08007ddf 	.word	0x08007ddf
 8007db0:	08007ddf 	.word	0x08007ddf
 8007db4:	08007dd7 	.word	0x08007dd7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007db8:	f7fd fa46 	bl	8005248 <HAL_RCC_GetPCLK1Freq>
 8007dbc:	61b8      	str	r0, [r7, #24]
        break;
 8007dbe:	e013      	b.n	8007de8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007dc0:	f7fd fa56 	bl	8005270 <HAL_RCC_GetPCLK2Freq>
 8007dc4:	61b8      	str	r0, [r7, #24]
        break;
 8007dc6:	e00f      	b.n	8007de8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007dc8:	4b1d      	ldr	r3, [pc, #116]	; (8007e40 <UART_SetConfig+0x4c4>)
 8007dca:	61bb      	str	r3, [r7, #24]
        break;
 8007dcc:	e00c      	b.n	8007de8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007dce:	f7fd f929 	bl	8005024 <HAL_RCC_GetSysClockFreq>
 8007dd2:	61b8      	str	r0, [r7, #24]
        break;
 8007dd4:	e008      	b.n	8007de8 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007dd6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007dda:	61bb      	str	r3, [r7, #24]
        break;
 8007ddc:	e004      	b.n	8007de8 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007dde:	2300      	movs	r3, #0
 8007de0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007de2:	2301      	movs	r3, #1
 8007de4:	77bb      	strb	r3, [r7, #30]
        break;
 8007de6:	bf00      	nop
    }

    if (pclk != 0U)
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d018      	beq.n	8007e20 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007dee:	687b      	ldr	r3, [r7, #4]
 8007df0:	685b      	ldr	r3, [r3, #4]
 8007df2:	085a      	lsrs	r2, r3, #1
 8007df4:	69bb      	ldr	r3, [r7, #24]
 8007df6:	441a      	add	r2, r3
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	685b      	ldr	r3, [r3, #4]
 8007dfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8007e00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007e02:	693b      	ldr	r3, [r7, #16]
 8007e04:	2b0f      	cmp	r3, #15
 8007e06:	d909      	bls.n	8007e1c <UART_SetConfig+0x4a0>
 8007e08:	693b      	ldr	r3, [r7, #16]
 8007e0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007e0e:	d205      	bcs.n	8007e1c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007e10:	693b      	ldr	r3, [r7, #16]
 8007e12:	b29a      	uxth	r2, r3
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	681b      	ldr	r3, [r3, #0]
 8007e18:	60da      	str	r2, [r3, #12]
 8007e1a:	e001      	b.n	8007e20 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2200      	movs	r2, #0
 8007e24:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	2200      	movs	r2, #0
 8007e2a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007e2c:	7fbb      	ldrb	r3, [r7, #30]
}
 8007e2e:	4618      	mov	r0, r3
 8007e30:	3720      	adds	r7, #32
 8007e32:	46bd      	mov	sp, r7
 8007e34:	bd80      	pop	{r7, pc}
 8007e36:	bf00      	nop
 8007e38:	40007c00 	.word	0x40007c00
 8007e3c:	40023800 	.word	0x40023800
 8007e40:	00f42400 	.word	0x00f42400

08007e44 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007e44:	b480      	push	{r7}
 8007e46:	b083      	sub	sp, #12
 8007e48:	af00      	add	r7, sp, #0
 8007e4a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e50:	f003 0301 	and.w	r3, r3, #1
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d00a      	beq.n	8007e6e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	430a      	orrs	r2, r1
 8007e6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e72:	f003 0302 	and.w	r3, r3, #2
 8007e76:	2b00      	cmp	r3, #0
 8007e78:	d00a      	beq.n	8007e90 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	685b      	ldr	r3, [r3, #4]
 8007e80:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	430a      	orrs	r2, r1
 8007e8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e94:	f003 0304 	and.w	r3, r3, #4
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d00a      	beq.n	8007eb2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	685b      	ldr	r3, [r3, #4]
 8007ea2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007ea6:	687b      	ldr	r3, [r7, #4]
 8007ea8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	430a      	orrs	r2, r1
 8007eb0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007eb6:	f003 0308 	and.w	r3, r3, #8
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d00a      	beq.n	8007ed4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	430a      	orrs	r2, r1
 8007ed2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ed8:	f003 0310 	and.w	r3, r3, #16
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d00a      	beq.n	8007ef6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	689b      	ldr	r3, [r3, #8]
 8007ee6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	430a      	orrs	r2, r1
 8007ef4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007efa:	f003 0320 	and.w	r3, r3, #32
 8007efe:	2b00      	cmp	r3, #0
 8007f00:	d00a      	beq.n	8007f18 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	689b      	ldr	r3, [r3, #8]
 8007f08:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	430a      	orrs	r2, r1
 8007f16:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f20:	2b00      	cmp	r3, #0
 8007f22:	d01a      	beq.n	8007f5a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007f24:	687b      	ldr	r3, [r7, #4]
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	685b      	ldr	r3, [r3, #4]
 8007f2a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	681b      	ldr	r3, [r3, #0]
 8007f36:	430a      	orrs	r2, r1
 8007f38:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007f42:	d10a      	bne.n	8007f5a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	685b      	ldr	r3, [r3, #4]
 8007f4a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	430a      	orrs	r2, r1
 8007f58:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007f5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d00a      	beq.n	8007f7c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	685b      	ldr	r3, [r3, #4]
 8007f6c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007f70:	687b      	ldr	r3, [r7, #4]
 8007f72:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	430a      	orrs	r2, r1
 8007f7a:	605a      	str	r2, [r3, #4]
  }
}
 8007f7c:	bf00      	nop
 8007f7e:	370c      	adds	r7, #12
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b086      	sub	sp, #24
 8007f8c:	af02      	add	r7, sp, #8
 8007f8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007f98:	f7fa fa92 	bl	80024c0 <HAL_GetTick>
 8007f9c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	f003 0308 	and.w	r3, r3, #8
 8007fa8:	2b08      	cmp	r3, #8
 8007faa:	d10e      	bne.n	8007fca <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007fac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007fb0:	9300      	str	r3, [sp, #0]
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	2200      	movs	r2, #0
 8007fb6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007fba:	6878      	ldr	r0, [r7, #4]
 8007fbc:	f000 f81b 	bl	8007ff6 <UART_WaitOnFlagUntilTimeout>
 8007fc0:	4603      	mov	r3, r0
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d001      	beq.n	8007fca <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007fc6:	2303      	movs	r3, #3
 8007fc8:	e011      	b.n	8007fee <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	2220      	movs	r2, #32
 8007fce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	2220      	movs	r2, #32
 8007fd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007fd8:	687b      	ldr	r3, [r7, #4]
 8007fda:	2200      	movs	r2, #0
 8007fdc:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	2200      	movs	r2, #0
 8007fe2:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007fec:	2300      	movs	r3, #0
}
 8007fee:	4618      	mov	r0, r3
 8007ff0:	3710      	adds	r7, #16
 8007ff2:	46bd      	mov	sp, r7
 8007ff4:	bd80      	pop	{r7, pc}

08007ff6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007ff6:	b580      	push	{r7, lr}
 8007ff8:	b09c      	sub	sp, #112	; 0x70
 8007ffa:	af00      	add	r7, sp, #0
 8007ffc:	60f8      	str	r0, [r7, #12]
 8007ffe:	60b9      	str	r1, [r7, #8]
 8008000:	603b      	str	r3, [r7, #0]
 8008002:	4613      	mov	r3, r2
 8008004:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008006:	e0a7      	b.n	8008158 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008008:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800800a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800800e:	f000 80a3 	beq.w	8008158 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008012:	f7fa fa55 	bl	80024c0 <HAL_GetTick>
 8008016:	4602      	mov	r2, r0
 8008018:	683b      	ldr	r3, [r7, #0]
 800801a:	1ad3      	subs	r3, r2, r3
 800801c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800801e:	429a      	cmp	r2, r3
 8008020:	d302      	bcc.n	8008028 <UART_WaitOnFlagUntilTimeout+0x32>
 8008022:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008024:	2b00      	cmp	r3, #0
 8008026:	d13f      	bne.n	80080a8 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008028:	68fb      	ldr	r3, [r7, #12]
 800802a:	681b      	ldr	r3, [r3, #0]
 800802c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008030:	e853 3f00 	ldrex	r3, [r3]
 8008034:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008036:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008038:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800803c:	667b      	str	r3, [r7, #100]	; 0x64
 800803e:	68fb      	ldr	r3, [r7, #12]
 8008040:	681b      	ldr	r3, [r3, #0]
 8008042:	461a      	mov	r2, r3
 8008044:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008046:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008048:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800804c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800804e:	e841 2300 	strex	r3, r2, [r1]
 8008052:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008054:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1e6      	bne.n	8008028 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	3308      	adds	r3, #8
 8008060:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008062:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008064:	e853 3f00 	ldrex	r3, [r3]
 8008068:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800806a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800806c:	f023 0301 	bic.w	r3, r3, #1
 8008070:	663b      	str	r3, [r7, #96]	; 0x60
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	3308      	adds	r3, #8
 8008078:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800807a:	64ba      	str	r2, [r7, #72]	; 0x48
 800807c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800807e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008080:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008082:	e841 2300 	strex	r3, r2, [r1]
 8008086:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008088:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800808a:	2b00      	cmp	r3, #0
 800808c:	d1e5      	bne.n	800805a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	2220      	movs	r2, #32
 8008092:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	2220      	movs	r2, #32
 8008098:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	2200      	movs	r2, #0
 80080a0:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 80080a4:	2303      	movs	r3, #3
 80080a6:	e068      	b.n	800817a <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	f003 0304 	and.w	r3, r3, #4
 80080b2:	2b00      	cmp	r3, #0
 80080b4:	d050      	beq.n	8008158 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	69db      	ldr	r3, [r3, #28]
 80080bc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80080c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80080c4:	d148      	bne.n	8008158 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80080ce:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	681b      	ldr	r3, [r3, #0]
 80080d4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80080d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80080d8:	e853 3f00 	ldrex	r3, [r3]
 80080dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80080de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80080e0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80080e4:	66fb      	str	r3, [r7, #108]	; 0x6c
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	461a      	mov	r2, r3
 80080ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80080ee:	637b      	str	r3, [r7, #52]	; 0x34
 80080f0:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080f2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80080f4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80080f6:	e841 2300 	strex	r3, r2, [r1]
 80080fa:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80080fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80080fe:	2b00      	cmp	r3, #0
 8008100:	d1e6      	bne.n	80080d0 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	3308      	adds	r3, #8
 8008108:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800810a:	697b      	ldr	r3, [r7, #20]
 800810c:	e853 3f00 	ldrex	r3, [r3]
 8008110:	613b      	str	r3, [r7, #16]
   return(result);
 8008112:	693b      	ldr	r3, [r7, #16]
 8008114:	f023 0301 	bic.w	r3, r3, #1
 8008118:	66bb      	str	r3, [r7, #104]	; 0x68
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	3308      	adds	r3, #8
 8008120:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008122:	623a      	str	r2, [r7, #32]
 8008124:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008126:	69f9      	ldr	r1, [r7, #28]
 8008128:	6a3a      	ldr	r2, [r7, #32]
 800812a:	e841 2300 	strex	r3, r2, [r1]
 800812e:	61bb      	str	r3, [r7, #24]
   return(result);
 8008130:	69bb      	ldr	r3, [r7, #24]
 8008132:	2b00      	cmp	r3, #0
 8008134:	d1e5      	bne.n	8008102 <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	2220      	movs	r2, #32
 800813a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	2220      	movs	r2, #32
 8008140:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008144:	68fb      	ldr	r3, [r7, #12]
 8008146:	2220      	movs	r2, #32
 8008148:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800814c:	68fb      	ldr	r3, [r7, #12]
 800814e:	2200      	movs	r2, #0
 8008150:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8008154:	2303      	movs	r3, #3
 8008156:	e010      	b.n	800817a <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	69da      	ldr	r2, [r3, #28]
 800815e:	68bb      	ldr	r3, [r7, #8]
 8008160:	4013      	ands	r3, r2
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	429a      	cmp	r2, r3
 8008166:	bf0c      	ite	eq
 8008168:	2301      	moveq	r3, #1
 800816a:	2300      	movne	r3, #0
 800816c:	b2db      	uxtb	r3, r3
 800816e:	461a      	mov	r2, r3
 8008170:	79fb      	ldrb	r3, [r7, #7]
 8008172:	429a      	cmp	r2, r3
 8008174:	f43f af48 	beq.w	8008008 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008178:	2300      	movs	r3, #0
}
 800817a:	4618      	mov	r0, r3
 800817c:	3770      	adds	r7, #112	; 0x70
 800817e:	46bd      	mov	sp, r7
 8008180:	bd80      	pop	{r7, pc}
	...

08008184 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008184:	b480      	push	{r7}
 8008186:	b097      	sub	sp, #92	; 0x5c
 8008188:	af00      	add	r7, sp, #0
 800818a:	60f8      	str	r0, [r7, #12]
 800818c:	60b9      	str	r1, [r7, #8]
 800818e:	4613      	mov	r3, r2
 8008190:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	68ba      	ldr	r2, [r7, #8]
 8008196:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8008198:	68fb      	ldr	r3, [r7, #12]
 800819a:	88fa      	ldrh	r2, [r7, #6]
 800819c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	88fa      	ldrh	r2, [r7, #6]
 80081a4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80081a8:	68fb      	ldr	r3, [r7, #12]
 80081aa:	2200      	movs	r2, #0
 80081ac:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80081ae:	68fb      	ldr	r3, [r7, #12]
 80081b0:	689b      	ldr	r3, [r3, #8]
 80081b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80081b6:	d10e      	bne.n	80081d6 <UART_Start_Receive_IT+0x52>
 80081b8:	68fb      	ldr	r3, [r7, #12]
 80081ba:	691b      	ldr	r3, [r3, #16]
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d105      	bne.n	80081cc <UART_Start_Receive_IT+0x48>
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f240 12ff 	movw	r2, #511	; 0x1ff
 80081c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081ca:	e02d      	b.n	8008228 <UART_Start_Receive_IT+0xa4>
 80081cc:	68fb      	ldr	r3, [r7, #12]
 80081ce:	22ff      	movs	r2, #255	; 0xff
 80081d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081d4:	e028      	b.n	8008228 <UART_Start_Receive_IT+0xa4>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	689b      	ldr	r3, [r3, #8]
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d10d      	bne.n	80081fa <UART_Start_Receive_IT+0x76>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	691b      	ldr	r3, [r3, #16]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	d104      	bne.n	80081f0 <UART_Start_Receive_IT+0x6c>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	22ff      	movs	r2, #255	; 0xff
 80081ea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081ee:	e01b      	b.n	8008228 <UART_Start_Receive_IT+0xa4>
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	227f      	movs	r2, #127	; 0x7f
 80081f4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80081f8:	e016      	b.n	8008228 <UART_Start_Receive_IT+0xa4>
 80081fa:	68fb      	ldr	r3, [r7, #12]
 80081fc:	689b      	ldr	r3, [r3, #8]
 80081fe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008202:	d10d      	bne.n	8008220 <UART_Start_Receive_IT+0x9c>
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	691b      	ldr	r3, [r3, #16]
 8008208:	2b00      	cmp	r3, #0
 800820a:	d104      	bne.n	8008216 <UART_Start_Receive_IT+0x92>
 800820c:	68fb      	ldr	r3, [r7, #12]
 800820e:	227f      	movs	r2, #127	; 0x7f
 8008210:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008214:	e008      	b.n	8008228 <UART_Start_Receive_IT+0xa4>
 8008216:	68fb      	ldr	r3, [r7, #12]
 8008218:	223f      	movs	r2, #63	; 0x3f
 800821a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800821e:	e003      	b.n	8008228 <UART_Start_Receive_IT+0xa4>
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	2200      	movs	r2, #0
 8008224:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008228:	68fb      	ldr	r3, [r7, #12]
 800822a:	2200      	movs	r2, #0
 800822c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	2222      	movs	r2, #34	; 0x22
 8008234:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	3308      	adds	r3, #8
 800823e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008240:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008242:	e853 3f00 	ldrex	r3, [r3]
 8008246:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800824a:	f043 0301 	orr.w	r3, r3, #1
 800824e:	657b      	str	r3, [r7, #84]	; 0x54
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	681b      	ldr	r3, [r3, #0]
 8008254:	3308      	adds	r3, #8
 8008256:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008258:	64ba      	str	r2, [r7, #72]	; 0x48
 800825a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800825c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800825e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008260:	e841 2300 	strex	r3, r2, [r1]
 8008264:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008266:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008268:	2b00      	cmp	r3, #0
 800826a:	d1e5      	bne.n	8008238 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800826c:	68fb      	ldr	r3, [r7, #12]
 800826e:	689b      	ldr	r3, [r3, #8]
 8008270:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008274:	d107      	bne.n	8008286 <UART_Start_Receive_IT+0x102>
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	691b      	ldr	r3, [r3, #16]
 800827a:	2b00      	cmp	r3, #0
 800827c:	d103      	bne.n	8008286 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	4a21      	ldr	r2, [pc, #132]	; (8008308 <UART_Start_Receive_IT+0x184>)
 8008282:	669a      	str	r2, [r3, #104]	; 0x68
 8008284:	e002      	b.n	800828c <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	4a20      	ldr	r2, [pc, #128]	; (800830c <UART_Start_Receive_IT+0x188>)
 800828a:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	691b      	ldr	r3, [r3, #16]
 8008290:	2b00      	cmp	r3, #0
 8008292:	d019      	beq.n	80082c8 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	681b      	ldr	r3, [r3, #0]
 8008298:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800829c:	e853 3f00 	ldrex	r3, [r3]
 80082a0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80082a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80082a4:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80082a8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	461a      	mov	r2, r3
 80082b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80082b2:	637b      	str	r3, [r7, #52]	; 0x34
 80082b4:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082b6:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80082b8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80082ba:	e841 2300 	strex	r3, r2, [r1]
 80082be:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80082c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	d1e6      	bne.n	8008294 <UART_Start_Receive_IT+0x110>
 80082c6:	e018      	b.n	80082fa <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	e853 3f00 	ldrex	r3, [r3]
 80082d4:	613b      	str	r3, [r7, #16]
   return(result);
 80082d6:	693b      	ldr	r3, [r7, #16]
 80082d8:	f043 0320 	orr.w	r3, r3, #32
 80082dc:	653b      	str	r3, [r7, #80]	; 0x50
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	461a      	mov	r2, r3
 80082e4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80082e6:	623b      	str	r3, [r7, #32]
 80082e8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082ea:	69f9      	ldr	r1, [r7, #28]
 80082ec:	6a3a      	ldr	r2, [r7, #32]
 80082ee:	e841 2300 	strex	r3, r2, [r1]
 80082f2:	61bb      	str	r3, [r7, #24]
   return(result);
 80082f4:	69bb      	ldr	r3, [r7, #24]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d1e6      	bne.n	80082c8 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 80082fa:	2300      	movs	r3, #0
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	375c      	adds	r7, #92	; 0x5c
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr
 8008308:	080085bf 	.word	0x080085bf
 800830c:	08008459 	.word	0x08008459

08008310 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008310:	b480      	push	{r7}
 8008312:	b095      	sub	sp, #84	; 0x54
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008320:	e853 3f00 	ldrex	r3, [r3]
 8008324:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008326:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008328:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800832c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	461a      	mov	r2, r3
 8008334:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008336:	643b      	str	r3, [r7, #64]	; 0x40
 8008338:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800833c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800833e:	e841 2300 	strex	r3, r2, [r1]
 8008342:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1e6      	bne.n	8008318 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	681b      	ldr	r3, [r3, #0]
 800834e:	3308      	adds	r3, #8
 8008350:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008352:	6a3b      	ldr	r3, [r7, #32]
 8008354:	e853 3f00 	ldrex	r3, [r3]
 8008358:	61fb      	str	r3, [r7, #28]
   return(result);
 800835a:	69fb      	ldr	r3, [r7, #28]
 800835c:	f023 0301 	bic.w	r3, r3, #1
 8008360:	64bb      	str	r3, [r7, #72]	; 0x48
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	3308      	adds	r3, #8
 8008368:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800836a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800836c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800836e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008370:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008372:	e841 2300 	strex	r3, r2, [r1]
 8008376:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800837a:	2b00      	cmp	r3, #0
 800837c:	d1e5      	bne.n	800834a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008382:	2b01      	cmp	r3, #1
 8008384:	d118      	bne.n	80083b8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	e853 3f00 	ldrex	r3, [r3]
 8008392:	60bb      	str	r3, [r7, #8]
   return(result);
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	f023 0310 	bic.w	r3, r3, #16
 800839a:	647b      	str	r3, [r7, #68]	; 0x44
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	461a      	mov	r2, r3
 80083a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80083a4:	61bb      	str	r3, [r7, #24]
 80083a6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083a8:	6979      	ldr	r1, [r7, #20]
 80083aa:	69ba      	ldr	r2, [r7, #24]
 80083ac:	e841 2300 	strex	r3, r2, [r1]
 80083b0:	613b      	str	r3, [r7, #16]
   return(result);
 80083b2:	693b      	ldr	r3, [r7, #16]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d1e6      	bne.n	8008386 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	2220      	movs	r2, #32
 80083bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	2200      	movs	r2, #0
 80083c4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	2200      	movs	r2, #0
 80083ca:	669a      	str	r2, [r3, #104]	; 0x68
}
 80083cc:	bf00      	nop
 80083ce:	3754      	adds	r7, #84	; 0x54
 80083d0:	46bd      	mov	sp, r7
 80083d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d6:	4770      	bx	lr

080083d8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80083d8:	b580      	push	{r7, lr}
 80083da:	b084      	sub	sp, #16
 80083dc:	af00      	add	r7, sp, #0
 80083de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80083e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	2200      	movs	r2, #0
 80083ea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80083ee:	68fb      	ldr	r3, [r7, #12]
 80083f0:	2200      	movs	r2, #0
 80083f2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80083f6:	68f8      	ldr	r0, [r7, #12]
 80083f8:	f7ff faaa 	bl	8007950 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80083fc:	bf00      	nop
 80083fe:	3710      	adds	r7, #16
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}

08008404 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	b088      	sub	sp, #32
 8008408:	af00      	add	r7, sp, #0
 800840a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	e853 3f00 	ldrex	r3, [r3]
 8008418:	60bb      	str	r3, [r7, #8]
   return(result);
 800841a:	68bb      	ldr	r3, [r7, #8]
 800841c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008420:	61fb      	str	r3, [r7, #28]
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	461a      	mov	r2, r3
 8008428:	69fb      	ldr	r3, [r7, #28]
 800842a:	61bb      	str	r3, [r7, #24]
 800842c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800842e:	6979      	ldr	r1, [r7, #20]
 8008430:	69ba      	ldr	r2, [r7, #24]
 8008432:	e841 2300 	strex	r3, r2, [r1]
 8008436:	613b      	str	r3, [r7, #16]
   return(result);
 8008438:	693b      	ldr	r3, [r7, #16]
 800843a:	2b00      	cmp	r3, #0
 800843c:	d1e6      	bne.n	800840c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2220      	movs	r2, #32
 8008442:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2200      	movs	r2, #0
 8008448:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800844a:	6878      	ldr	r0, [r7, #4]
 800844c:	f7ff fa76 	bl	800793c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008450:	bf00      	nop
 8008452:	3720      	adds	r7, #32
 8008454:	46bd      	mov	sp, r7
 8008456:	bd80      	pop	{r7, pc}

08008458 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008458:	b580      	push	{r7, lr}
 800845a:	b096      	sub	sp, #88	; 0x58
 800845c:	af00      	add	r7, sp, #0
 800845e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008466:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008470:	2b22      	cmp	r3, #34	; 0x22
 8008472:	f040 8098 	bne.w	80085a6 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800847c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008480:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008484:	b2d9      	uxtb	r1, r3
 8008486:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800848a:	b2da      	uxtb	r2, r3
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008490:	400a      	ands	r2, r1
 8008492:	b2d2      	uxtb	r2, r2
 8008494:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800849a:	1c5a      	adds	r2, r3, #1
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80084a6:	b29b      	uxth	r3, r3
 80084a8:	3b01      	subs	r3, #1
 80084aa:	b29a      	uxth	r2, r3
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80084b8:	b29b      	uxth	r3, r3
 80084ba:	2b00      	cmp	r3, #0
 80084bc:	d17b      	bne.n	80085b6 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80084c6:	e853 3f00 	ldrex	r3, [r3]
 80084ca:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80084cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80084ce:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80084d2:	653b      	str	r3, [r7, #80]	; 0x50
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	681b      	ldr	r3, [r3, #0]
 80084d8:	461a      	mov	r2, r3
 80084da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80084dc:	647b      	str	r3, [r7, #68]	; 0x44
 80084de:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084e0:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80084e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80084e4:	e841 2300 	strex	r3, r2, [r1]
 80084e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80084ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1e6      	bne.n	80084be <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	3308      	adds	r3, #8
 80084f6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084fa:	e853 3f00 	ldrex	r3, [r3]
 80084fe:	623b      	str	r3, [r7, #32]
   return(result);
 8008500:	6a3b      	ldr	r3, [r7, #32]
 8008502:	f023 0301 	bic.w	r3, r3, #1
 8008506:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	3308      	adds	r3, #8
 800850e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008510:	633a      	str	r2, [r7, #48]	; 0x30
 8008512:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008514:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008516:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008518:	e841 2300 	strex	r3, r2, [r1]
 800851c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800851e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008520:	2b00      	cmp	r3, #0
 8008522:	d1e5      	bne.n	80084f0 <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	2220      	movs	r2, #32
 8008528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800852c:	687b      	ldr	r3, [r7, #4]
 800852e:	2200      	movs	r2, #0
 8008530:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	2200      	movs	r2, #0
 8008536:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800853c:	2b01      	cmp	r3, #1
 800853e:	d12e      	bne.n	800859e <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2200      	movs	r2, #0
 8008544:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	681b      	ldr	r3, [r3, #0]
 800854a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800854c:	693b      	ldr	r3, [r7, #16]
 800854e:	e853 3f00 	ldrex	r3, [r3]
 8008552:	60fb      	str	r3, [r7, #12]
   return(result);
 8008554:	68fb      	ldr	r3, [r7, #12]
 8008556:	f023 0310 	bic.w	r3, r3, #16
 800855a:	64bb      	str	r3, [r7, #72]	; 0x48
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	461a      	mov	r2, r3
 8008562:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008564:	61fb      	str	r3, [r7, #28]
 8008566:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008568:	69b9      	ldr	r1, [r7, #24]
 800856a:	69fa      	ldr	r2, [r7, #28]
 800856c:	e841 2300 	strex	r3, r2, [r1]
 8008570:	617b      	str	r3, [r7, #20]
   return(result);
 8008572:	697b      	ldr	r3, [r7, #20]
 8008574:	2b00      	cmp	r3, #0
 8008576:	d1e6      	bne.n	8008546 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008578:	687b      	ldr	r3, [r7, #4]
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	69db      	ldr	r3, [r3, #28]
 800857e:	f003 0310 	and.w	r3, r3, #16
 8008582:	2b10      	cmp	r3, #16
 8008584:	d103      	bne.n	800858e <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2210      	movs	r2, #16
 800858c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800858e:	687b      	ldr	r3, [r7, #4]
 8008590:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008594:	4619      	mov	r1, r3
 8008596:	6878      	ldr	r0, [r7, #4]
 8008598:	f7ff f9e4 	bl	8007964 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800859c:	e00b      	b.n	80085b6 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f7f8 fe20 	bl	80011e4 <HAL_UART_RxCpltCallback>
}
 80085a4:	e007      	b.n	80085b6 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	699a      	ldr	r2, [r3, #24]
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	f042 0208 	orr.w	r2, r2, #8
 80085b4:	619a      	str	r2, [r3, #24]
}
 80085b6:	bf00      	nop
 80085b8:	3758      	adds	r7, #88	; 0x58
 80085ba:	46bd      	mov	sp, r7
 80085bc:	bd80      	pop	{r7, pc}

080085be <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80085be:	b580      	push	{r7, lr}
 80085c0:	b096      	sub	sp, #88	; 0x58
 80085c2:	af00      	add	r7, sp, #0
 80085c4:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80085cc:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80085d6:	2b22      	cmp	r3, #34	; 0x22
 80085d8:	f040 8098 	bne.w	800870c <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085e2:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80085ea:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 80085ec:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80085f0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80085f4:	4013      	ands	r3, r2
 80085f6:	b29a      	uxth	r2, r3
 80085f8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80085fa:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008600:	1c9a      	adds	r2, r3, #2
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800860c:	b29b      	uxth	r3, r3
 800860e:	3b01      	subs	r3, #1
 8008610:	b29a      	uxth	r2, r3
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800861e:	b29b      	uxth	r3, r3
 8008620:	2b00      	cmp	r3, #0
 8008622:	d17b      	bne.n	800871c <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008624:	687b      	ldr	r3, [r7, #4]
 8008626:	681b      	ldr	r3, [r3, #0]
 8008628:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800862a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800862c:	e853 3f00 	ldrex	r3, [r3]
 8008630:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008634:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008638:	64fb      	str	r3, [r7, #76]	; 0x4c
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	461a      	mov	r2, r3
 8008640:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008642:	643b      	str	r3, [r7, #64]	; 0x40
 8008644:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008646:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008648:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800864a:	e841 2300 	strex	r3, r2, [r1]
 800864e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008652:	2b00      	cmp	r3, #0
 8008654:	d1e6      	bne.n	8008624 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	3308      	adds	r3, #8
 800865c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800865e:	6a3b      	ldr	r3, [r7, #32]
 8008660:	e853 3f00 	ldrex	r3, [r3]
 8008664:	61fb      	str	r3, [r7, #28]
   return(result);
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	f023 0301 	bic.w	r3, r3, #1
 800866c:	64bb      	str	r3, [r7, #72]	; 0x48
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	3308      	adds	r3, #8
 8008674:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008676:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008678:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800867a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800867c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800867e:	e841 2300 	strex	r3, r2, [r1]
 8008682:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008686:	2b00      	cmp	r3, #0
 8008688:	d1e5      	bne.n	8008656 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	2220      	movs	r2, #32
 800868e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	2200      	movs	r2, #0
 8008696:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086a2:	2b01      	cmp	r3, #1
 80086a4:	d12e      	bne.n	8008704 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	2200      	movs	r2, #0
 80086aa:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b2:	68fb      	ldr	r3, [r7, #12]
 80086b4:	e853 3f00 	ldrex	r3, [r3]
 80086b8:	60bb      	str	r3, [r7, #8]
   return(result);
 80086ba:	68bb      	ldr	r3, [r7, #8]
 80086bc:	f023 0310 	bic.w	r3, r3, #16
 80086c0:	647b      	str	r3, [r7, #68]	; 0x44
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	681b      	ldr	r3, [r3, #0]
 80086c6:	461a      	mov	r2, r3
 80086c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80086ca:	61bb      	str	r3, [r7, #24]
 80086cc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086ce:	6979      	ldr	r1, [r7, #20]
 80086d0:	69ba      	ldr	r2, [r7, #24]
 80086d2:	e841 2300 	strex	r3, r2, [r1]
 80086d6:	613b      	str	r3, [r7, #16]
   return(result);
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	d1e6      	bne.n	80086ac <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	681b      	ldr	r3, [r3, #0]
 80086e2:	69db      	ldr	r3, [r3, #28]
 80086e4:	f003 0310 	and.w	r3, r3, #16
 80086e8:	2b10      	cmp	r3, #16
 80086ea:	d103      	bne.n	80086f4 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	2210      	movs	r2, #16
 80086f2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80086fa:	4619      	mov	r1, r3
 80086fc:	6878      	ldr	r0, [r7, #4]
 80086fe:	f7ff f931 	bl	8007964 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008702:	e00b      	b.n	800871c <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008704:	6878      	ldr	r0, [r7, #4]
 8008706:	f7f8 fd6d 	bl	80011e4 <HAL_UART_RxCpltCallback>
}
 800870a:	e007      	b.n	800871c <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800870c:	687b      	ldr	r3, [r7, #4]
 800870e:	681b      	ldr	r3, [r3, #0]
 8008710:	699a      	ldr	r2, [r3, #24]
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f042 0208 	orr.w	r2, r2, #8
 800871a:	619a      	str	r2, [r3, #24]
}
 800871c:	bf00      	nop
 800871e:	3758      	adds	r7, #88	; 0x58
 8008720:	46bd      	mov	sp, r7
 8008722:	bd80      	pop	{r7, pc}

08008724 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008724:	b084      	sub	sp, #16
 8008726:	b580      	push	{r7, lr}
 8008728:	b084      	sub	sp, #16
 800872a:	af00      	add	r7, sp, #0
 800872c:	6078      	str	r0, [r7, #4]
 800872e:	f107 001c 	add.w	r0, r7, #28
 8008732:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008736:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008738:	2b01      	cmp	r3, #1
 800873a:	d120      	bne.n	800877e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008740:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	68da      	ldr	r2, [r3, #12]
 800874c:	4b20      	ldr	r3, [pc, #128]	; (80087d0 <USB_CoreInit+0xac>)
 800874e:	4013      	ands	r3, r2
 8008750:	687a      	ldr	r2, [r7, #4]
 8008752:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	68db      	ldr	r3, [r3, #12]
 8008758:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8008760:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008762:	2b01      	cmp	r3, #1
 8008764:	d105      	bne.n	8008772 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	68db      	ldr	r3, [r3, #12]
 800876a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008772:	6878      	ldr	r0, [r7, #4]
 8008774:	f000 fa96 	bl	8008ca4 <USB_CoreReset>
 8008778:	4603      	mov	r3, r0
 800877a:	73fb      	strb	r3, [r7, #15]
 800877c:	e010      	b.n	80087a0 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	68db      	ldr	r3, [r3, #12]
 8008782:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f000 fa8a 	bl	8008ca4 <USB_CoreReset>
 8008790:	4603      	mov	r3, r0
 8008792:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008798:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80087a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80087a2:	2b01      	cmp	r3, #1
 80087a4:	d10b      	bne.n	80087be <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	689b      	ldr	r3, [r3, #8]
 80087aa:	f043 0206 	orr.w	r2, r3, #6
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	689b      	ldr	r3, [r3, #8]
 80087b6:	f043 0220 	orr.w	r2, r3, #32
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80087be:	7bfb      	ldrb	r3, [r7, #15]
}
 80087c0:	4618      	mov	r0, r3
 80087c2:	3710      	adds	r7, #16
 80087c4:	46bd      	mov	sp, r7
 80087c6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80087ca:	b004      	add	sp, #16
 80087cc:	4770      	bx	lr
 80087ce:	bf00      	nop
 80087d0:	ffbdffbf 	.word	0xffbdffbf

080087d4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80087d4:	b480      	push	{r7}
 80087d6:	b083      	sub	sp, #12
 80087d8:	af00      	add	r7, sp, #0
 80087da:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	689b      	ldr	r3, [r3, #8]
 80087e0:	f023 0201 	bic.w	r2, r3, #1
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80087e8:	2300      	movs	r3, #0
}
 80087ea:	4618      	mov	r0, r3
 80087ec:	370c      	adds	r7, #12
 80087ee:	46bd      	mov	sp, r7
 80087f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f4:	4770      	bx	lr

080087f6 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	6078      	str	r0, [r7, #4]
 80087fe:	460b      	mov	r3, r1
 8008800:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008802:	2300      	movs	r3, #0
 8008804:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	68db      	ldr	r3, [r3, #12]
 800880a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8008812:	78fb      	ldrb	r3, [r7, #3]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d115      	bne.n	8008844 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8008820:	687b      	ldr	r3, [r7, #4]
 8008822:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008824:	2001      	movs	r0, #1
 8008826:	f7f9 fe57 	bl	80024d8 <HAL_Delay>
      ms++;
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	3301      	adds	r3, #1
 800882e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8008830:	6878      	ldr	r0, [r7, #4]
 8008832:	f000 fa29 	bl	8008c88 <USB_GetMode>
 8008836:	4603      	mov	r3, r0
 8008838:	2b01      	cmp	r3, #1
 800883a:	d01e      	beq.n	800887a <USB_SetCurrentMode+0x84>
 800883c:	68fb      	ldr	r3, [r7, #12]
 800883e:	2b31      	cmp	r3, #49	; 0x31
 8008840:	d9f0      	bls.n	8008824 <USB_SetCurrentMode+0x2e>
 8008842:	e01a      	b.n	800887a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8008844:	78fb      	ldrb	r3, [r7, #3]
 8008846:	2b00      	cmp	r3, #0
 8008848:	d115      	bne.n	8008876 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	68db      	ldr	r3, [r3, #12]
 800884e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8008856:	2001      	movs	r0, #1
 8008858:	f7f9 fe3e 	bl	80024d8 <HAL_Delay>
      ms++;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	3301      	adds	r3, #1
 8008860:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8008862:	6878      	ldr	r0, [r7, #4]
 8008864:	f000 fa10 	bl	8008c88 <USB_GetMode>
 8008868:	4603      	mov	r3, r0
 800886a:	2b00      	cmp	r3, #0
 800886c:	d005      	beq.n	800887a <USB_SetCurrentMode+0x84>
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	2b31      	cmp	r3, #49	; 0x31
 8008872:	d9f0      	bls.n	8008856 <USB_SetCurrentMode+0x60>
 8008874:	e001      	b.n	800887a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008876:	2301      	movs	r3, #1
 8008878:	e005      	b.n	8008886 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	2b32      	cmp	r3, #50	; 0x32
 800887e:	d101      	bne.n	8008884 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008880:	2301      	movs	r3, #1
 8008882:	e000      	b.n	8008886 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008884:	2300      	movs	r3, #0
}
 8008886:	4618      	mov	r0, r3
 8008888:	3710      	adds	r7, #16
 800888a:	46bd      	mov	sp, r7
 800888c:	bd80      	pop	{r7, pc}
	...

08008890 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008890:	b084      	sub	sp, #16
 8008892:	b580      	push	{r7, lr}
 8008894:	b086      	sub	sp, #24
 8008896:	af00      	add	r7, sp, #0
 8008898:	6078      	str	r0, [r7, #4]
 800889a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800889e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80088a2:	2300      	movs	r3, #0
 80088a4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80088a6:	687b      	ldr	r3, [r7, #4]
 80088a8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80088aa:	2300      	movs	r3, #0
 80088ac:	613b      	str	r3, [r7, #16]
 80088ae:	e009      	b.n	80088c4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80088b0:	687a      	ldr	r2, [r7, #4]
 80088b2:	693b      	ldr	r3, [r7, #16]
 80088b4:	3340      	adds	r3, #64	; 0x40
 80088b6:	009b      	lsls	r3, r3, #2
 80088b8:	4413      	add	r3, r2
 80088ba:	2200      	movs	r2, #0
 80088bc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80088be:	693b      	ldr	r3, [r7, #16]
 80088c0:	3301      	adds	r3, #1
 80088c2:	613b      	str	r3, [r7, #16]
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	2b0e      	cmp	r3, #14
 80088c8:	d9f2      	bls.n	80088b0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80088ca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d11c      	bne.n	800890a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80088d6:	685b      	ldr	r3, [r3, #4]
 80088d8:	68fa      	ldr	r2, [r7, #12]
 80088da:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80088de:	f043 0302 	orr.w	r3, r3, #2
 80088e2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	681b      	ldr	r3, [r3, #0]
 8008900:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	601a      	str	r2, [r3, #0]
 8008908:	e005      	b.n	8008916 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800891c:	461a      	mov	r2, r3
 800891e:	2300      	movs	r3, #0
 8008920:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008928:	4619      	mov	r1, r3
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008930:	461a      	mov	r2, r3
 8008932:	680b      	ldr	r3, [r1, #0]
 8008934:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8008936:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008938:	2b01      	cmp	r3, #1
 800893a:	d10c      	bne.n	8008956 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800893c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800893e:	2b00      	cmp	r3, #0
 8008940:	d104      	bne.n	800894c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8008942:	2100      	movs	r1, #0
 8008944:	6878      	ldr	r0, [r7, #4]
 8008946:	f000 f965 	bl	8008c14 <USB_SetDevSpeed>
 800894a:	e008      	b.n	800895e <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800894c:	2101      	movs	r1, #1
 800894e:	6878      	ldr	r0, [r7, #4]
 8008950:	f000 f960 	bl	8008c14 <USB_SetDevSpeed>
 8008954:	e003      	b.n	800895e <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8008956:	2103      	movs	r1, #3
 8008958:	6878      	ldr	r0, [r7, #4]
 800895a:	f000 f95b 	bl	8008c14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800895e:	2110      	movs	r1, #16
 8008960:	6878      	ldr	r0, [r7, #4]
 8008962:	f000 f8f3 	bl	8008b4c <USB_FlushTxFifo>
 8008966:	4603      	mov	r3, r0
 8008968:	2b00      	cmp	r3, #0
 800896a:	d001      	beq.n	8008970 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 800896c:	2301      	movs	r3, #1
 800896e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008970:	6878      	ldr	r0, [r7, #4]
 8008972:	f000 f91f 	bl	8008bb4 <USB_FlushRxFifo>
 8008976:	4603      	mov	r3, r0
 8008978:	2b00      	cmp	r3, #0
 800897a:	d001      	beq.n	8008980 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 800897c:	2301      	movs	r3, #1
 800897e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008986:	461a      	mov	r2, r3
 8008988:	2300      	movs	r3, #0
 800898a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800898c:	68fb      	ldr	r3, [r7, #12]
 800898e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008992:	461a      	mov	r2, r3
 8008994:	2300      	movs	r3, #0
 8008996:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800899e:	461a      	mov	r2, r3
 80089a0:	2300      	movs	r3, #0
 80089a2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80089a4:	2300      	movs	r3, #0
 80089a6:	613b      	str	r3, [r7, #16]
 80089a8:	e043      	b.n	8008a32 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80089aa:	693b      	ldr	r3, [r7, #16]
 80089ac:	015a      	lsls	r2, r3, #5
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	4413      	add	r3, r2
 80089b2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80089bc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80089c0:	d118      	bne.n	80089f4 <USB_DevInit+0x164>
    {
      if (i == 0U)
 80089c2:	693b      	ldr	r3, [r7, #16]
 80089c4:	2b00      	cmp	r3, #0
 80089c6:	d10a      	bne.n	80089de <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80089c8:	693b      	ldr	r3, [r7, #16]
 80089ca:	015a      	lsls	r2, r3, #5
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	4413      	add	r3, r2
 80089d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089d4:	461a      	mov	r2, r3
 80089d6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80089da:	6013      	str	r3, [r2, #0]
 80089dc:	e013      	b.n	8008a06 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80089de:	693b      	ldr	r3, [r7, #16]
 80089e0:	015a      	lsls	r2, r3, #5
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	4413      	add	r3, r2
 80089e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80089ea:	461a      	mov	r2, r3
 80089ec:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80089f0:	6013      	str	r3, [r2, #0]
 80089f2:	e008      	b.n	8008a06 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80089f4:	693b      	ldr	r3, [r7, #16]
 80089f6:	015a      	lsls	r2, r3, #5
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	4413      	add	r3, r2
 80089fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a00:	461a      	mov	r2, r3
 8008a02:	2300      	movs	r3, #0
 8008a04:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008a06:	693b      	ldr	r3, [r7, #16]
 8008a08:	015a      	lsls	r2, r3, #5
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	4413      	add	r3, r2
 8008a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a12:	461a      	mov	r2, r3
 8008a14:	2300      	movs	r3, #0
 8008a16:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008a18:	693b      	ldr	r3, [r7, #16]
 8008a1a:	015a      	lsls	r2, r3, #5
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4413      	add	r3, r2
 8008a20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a24:	461a      	mov	r2, r3
 8008a26:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008a2a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a2c:	693b      	ldr	r3, [r7, #16]
 8008a2e:	3301      	adds	r3, #1
 8008a30:	613b      	str	r3, [r7, #16]
 8008a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a34:	693a      	ldr	r2, [r7, #16]
 8008a36:	429a      	cmp	r2, r3
 8008a38:	d3b7      	bcc.n	80089aa <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	613b      	str	r3, [r7, #16]
 8008a3e:	e043      	b.n	8008ac8 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	015a      	lsls	r2, r3, #5
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	4413      	add	r3, r2
 8008a48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a56:	d118      	bne.n	8008a8a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	d10a      	bne.n	8008a74 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008a5e:	693b      	ldr	r3, [r7, #16]
 8008a60:	015a      	lsls	r2, r3, #5
 8008a62:	68fb      	ldr	r3, [r7, #12]
 8008a64:	4413      	add	r3, r2
 8008a66:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a6a:	461a      	mov	r2, r3
 8008a6c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a70:	6013      	str	r3, [r2, #0]
 8008a72:	e013      	b.n	8008a9c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008a74:	693b      	ldr	r3, [r7, #16]
 8008a76:	015a      	lsls	r2, r3, #5
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	4413      	add	r3, r2
 8008a7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a80:	461a      	mov	r2, r3
 8008a82:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a86:	6013      	str	r3, [r2, #0]
 8008a88:	e008      	b.n	8008a9c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008a8a:	693b      	ldr	r3, [r7, #16]
 8008a8c:	015a      	lsls	r2, r3, #5
 8008a8e:	68fb      	ldr	r3, [r7, #12]
 8008a90:	4413      	add	r3, r2
 8008a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008a96:	461a      	mov	r2, r3
 8008a98:	2300      	movs	r3, #0
 8008a9a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008a9c:	693b      	ldr	r3, [r7, #16]
 8008a9e:	015a      	lsls	r2, r3, #5
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	4413      	add	r3, r2
 8008aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aa8:	461a      	mov	r2, r3
 8008aaa:	2300      	movs	r3, #0
 8008aac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008aae:	693b      	ldr	r3, [r7, #16]
 8008ab0:	015a      	lsls	r2, r3, #5
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	4413      	add	r3, r2
 8008ab6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008aba:	461a      	mov	r2, r3
 8008abc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008ac0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008ac2:	693b      	ldr	r3, [r7, #16]
 8008ac4:	3301      	adds	r3, #1
 8008ac6:	613b      	str	r3, [r7, #16]
 8008ac8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008aca:	693a      	ldr	r2, [r7, #16]
 8008acc:	429a      	cmp	r2, r3
 8008ace:	d3b7      	bcc.n	8008a40 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008ad6:	691b      	ldr	r3, [r3, #16]
 8008ad8:	68fa      	ldr	r2, [r7, #12]
 8008ada:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008ade:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ae2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2200      	movs	r2, #0
 8008ae8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008af0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d105      	bne.n	8008b04 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	f043 0210 	orr.w	r2, r3, #16
 8008b00:	687b      	ldr	r3, [r7, #4]
 8008b02:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008b04:	687b      	ldr	r3, [r7, #4]
 8008b06:	699a      	ldr	r2, [r3, #24]
 8008b08:	4b0e      	ldr	r3, [pc, #56]	; (8008b44 <USB_DevInit+0x2b4>)
 8008b0a:	4313      	orrs	r3, r2
 8008b0c:	687a      	ldr	r2, [r7, #4]
 8008b0e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008b10:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d005      	beq.n	8008b22 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	699b      	ldr	r3, [r3, #24]
 8008b1a:	f043 0208 	orr.w	r2, r3, #8
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008b22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008b24:	2b01      	cmp	r3, #1
 8008b26:	d105      	bne.n	8008b34 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	699a      	ldr	r2, [r3, #24]
 8008b2c:	4b06      	ldr	r3, [pc, #24]	; (8008b48 <USB_DevInit+0x2b8>)
 8008b2e:	4313      	orrs	r3, r2
 8008b30:	687a      	ldr	r2, [r7, #4]
 8008b32:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008b34:	7dfb      	ldrb	r3, [r7, #23]
}
 8008b36:	4618      	mov	r0, r3
 8008b38:	3718      	adds	r7, #24
 8008b3a:	46bd      	mov	sp, r7
 8008b3c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008b40:	b004      	add	sp, #16
 8008b42:	4770      	bx	lr
 8008b44:	803c3800 	.word	0x803c3800
 8008b48:	40000004 	.word	0x40000004

08008b4c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	b085      	sub	sp, #20
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
 8008b54:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008b56:	2300      	movs	r3, #0
 8008b58:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008b5a:	68fb      	ldr	r3, [r7, #12]
 8008b5c:	3301      	adds	r3, #1
 8008b5e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	4a13      	ldr	r2, [pc, #76]	; (8008bb0 <USB_FlushTxFifo+0x64>)
 8008b64:	4293      	cmp	r3, r2
 8008b66:	d901      	bls.n	8008b6c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008b68:	2303      	movs	r3, #3
 8008b6a:	e01b      	b.n	8008ba4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	691b      	ldr	r3, [r3, #16]
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	daf2      	bge.n	8008b5a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008b74:	2300      	movs	r3, #0
 8008b76:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008b78:	683b      	ldr	r3, [r7, #0]
 8008b7a:	019b      	lsls	r3, r3, #6
 8008b7c:	f043 0220 	orr.w	r2, r3, #32
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008b84:	68fb      	ldr	r3, [r7, #12]
 8008b86:	3301      	adds	r3, #1
 8008b88:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	4a08      	ldr	r2, [pc, #32]	; (8008bb0 <USB_FlushTxFifo+0x64>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d901      	bls.n	8008b96 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008b92:	2303      	movs	r3, #3
 8008b94:	e006      	b.n	8008ba4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	691b      	ldr	r3, [r3, #16]
 8008b9a:	f003 0320 	and.w	r3, r3, #32
 8008b9e:	2b20      	cmp	r3, #32
 8008ba0:	d0f0      	beq.n	8008b84 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008ba2:	2300      	movs	r3, #0
}
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	3714      	adds	r7, #20
 8008ba8:	46bd      	mov	sp, r7
 8008baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bae:	4770      	bx	lr
 8008bb0:	00030d40 	.word	0x00030d40

08008bb4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008bb4:	b480      	push	{r7}
 8008bb6:	b085      	sub	sp, #20
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bc0:	68fb      	ldr	r3, [r7, #12]
 8008bc2:	3301      	adds	r3, #1
 8008bc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	4a11      	ldr	r2, [pc, #68]	; (8008c10 <USB_FlushRxFifo+0x5c>)
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	d901      	bls.n	8008bd2 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008bce:	2303      	movs	r3, #3
 8008bd0:	e018      	b.n	8008c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	691b      	ldr	r3, [r3, #16]
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	daf2      	bge.n	8008bc0 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008bda:	2300      	movs	r3, #0
 8008bdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2210      	movs	r2, #16
 8008be2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	3301      	adds	r3, #1
 8008be8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	4a08      	ldr	r2, [pc, #32]	; (8008c10 <USB_FlushRxFifo+0x5c>)
 8008bee:	4293      	cmp	r3, r2
 8008bf0:	d901      	bls.n	8008bf6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008bf2:	2303      	movs	r3, #3
 8008bf4:	e006      	b.n	8008c04 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008bf6:	687b      	ldr	r3, [r7, #4]
 8008bf8:	691b      	ldr	r3, [r3, #16]
 8008bfa:	f003 0310 	and.w	r3, r3, #16
 8008bfe:	2b10      	cmp	r3, #16
 8008c00:	d0f0      	beq.n	8008be4 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008c02:	2300      	movs	r3, #0
}
 8008c04:	4618      	mov	r0, r3
 8008c06:	3714      	adds	r7, #20
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr
 8008c10:	00030d40 	.word	0x00030d40

08008c14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008c14:	b480      	push	{r7}
 8008c16:	b085      	sub	sp, #20
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
 8008c1c:	460b      	mov	r3, r1
 8008c1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c2a:	681a      	ldr	r2, [r3, #0]
 8008c2c:	78fb      	ldrb	r3, [r7, #3]
 8008c2e:	68f9      	ldr	r1, [r7, #12]
 8008c30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008c34:	4313      	orrs	r3, r2
 8008c36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008c38:	2300      	movs	r3, #0
}
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	3714      	adds	r7, #20
 8008c3e:	46bd      	mov	sp, r7
 8008c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c44:	4770      	bx	lr

08008c46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008c46:	b480      	push	{r7}
 8008c48:	b085      	sub	sp, #20
 8008c4a:	af00      	add	r7, sp, #0
 8008c4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008c52:	68fb      	ldr	r3, [r7, #12]
 8008c54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	68fa      	ldr	r2, [r7, #12]
 8008c5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008c60:	f023 0303 	bic.w	r3, r3, #3
 8008c64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008c6c:	685b      	ldr	r3, [r3, #4]
 8008c6e:	68fa      	ldr	r2, [r7, #12]
 8008c70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008c74:	f043 0302 	orr.w	r3, r3, #2
 8008c78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008c7a:	2300      	movs	r3, #0
}
 8008c7c:	4618      	mov	r0, r3
 8008c7e:	3714      	adds	r7, #20
 8008c80:	46bd      	mov	sp, r7
 8008c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c86:	4770      	bx	lr

08008c88 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008c88:	b480      	push	{r7}
 8008c8a:	b083      	sub	sp, #12
 8008c8c:	af00      	add	r7, sp, #0
 8008c8e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	695b      	ldr	r3, [r3, #20]
 8008c94:	f003 0301 	and.w	r3, r3, #1
}
 8008c98:	4618      	mov	r0, r3
 8008c9a:	370c      	adds	r7, #12
 8008c9c:	46bd      	mov	sp, r7
 8008c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca2:	4770      	bx	lr

08008ca4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008cac:	2300      	movs	r3, #0
 8008cae:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	3301      	adds	r3, #1
 8008cb4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	4a13      	ldr	r2, [pc, #76]	; (8008d08 <USB_CoreReset+0x64>)
 8008cba:	4293      	cmp	r3, r2
 8008cbc:	d901      	bls.n	8008cc2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008cbe:	2303      	movs	r3, #3
 8008cc0:	e01b      	b.n	8008cfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	691b      	ldr	r3, [r3, #16]
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	daf2      	bge.n	8008cb0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008cca:	2300      	movs	r3, #0
 8008ccc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	691b      	ldr	r3, [r3, #16]
 8008cd2:	f043 0201 	orr.w	r2, r3, #1
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008cda:	68fb      	ldr	r3, [r7, #12]
 8008cdc:	3301      	adds	r3, #1
 8008cde:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008ce0:	68fb      	ldr	r3, [r7, #12]
 8008ce2:	4a09      	ldr	r2, [pc, #36]	; (8008d08 <USB_CoreReset+0x64>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d901      	bls.n	8008cec <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008ce8:	2303      	movs	r3, #3
 8008cea:	e006      	b.n	8008cfa <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	691b      	ldr	r3, [r3, #16]
 8008cf0:	f003 0301 	and.w	r3, r3, #1
 8008cf4:	2b01      	cmp	r3, #1
 8008cf6:	d0f0      	beq.n	8008cda <USB_CoreReset+0x36>

  return HAL_OK;
 8008cf8:	2300      	movs	r3, #0
}
 8008cfa:	4618      	mov	r0, r3
 8008cfc:	3714      	adds	r7, #20
 8008cfe:	46bd      	mov	sp, r7
 8008d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d04:	4770      	bx	lr
 8008d06:	bf00      	nop
 8008d08:	00030d40 	.word	0x00030d40

08008d0c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008d0c:	b580      	push	{r7, lr}
 8008d0e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008d10:	4904      	ldr	r1, [pc, #16]	; (8008d24 <MX_FATFS_Init+0x18>)
 8008d12:	4805      	ldr	r0, [pc, #20]	; (8008d28 <MX_FATFS_Init+0x1c>)
 8008d14:	f000 f8b0 	bl	8008e78 <FATFS_LinkDriver>
 8008d18:	4603      	mov	r3, r0
 8008d1a:	461a      	mov	r2, r3
 8008d1c:	4b03      	ldr	r3, [pc, #12]	; (8008d2c <MX_FATFS_Init+0x20>)
 8008d1e:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008d20:	bf00      	nop
 8008d22:	bd80      	pop	{r7, pc}
 8008d24:	20000bc4 	.word	0x20000bc4
 8008d28:	2000000c 	.word	0x2000000c
 8008d2c:	20000bc0 	.word	0x20000bc0

08008d30 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008d30:	b480      	push	{r7}
 8008d32:	b083      	sub	sp, #12
 8008d34:	af00      	add	r7, sp, #0
 8008d36:	4603      	mov	r3, r0
 8008d38:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8008d3a:	4b06      	ldr	r3, [pc, #24]	; (8008d54 <USER_initialize+0x24>)
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008d40:	4b04      	ldr	r3, [pc, #16]	; (8008d54 <USER_initialize+0x24>)
 8008d42:	781b      	ldrb	r3, [r3, #0]
 8008d44:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	370c      	adds	r7, #12
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	20000009 	.word	0x20000009

08008d58 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008d58:	b480      	push	{r7}
 8008d5a:	b083      	sub	sp, #12
 8008d5c:	af00      	add	r7, sp, #0
 8008d5e:	4603      	mov	r3, r0
 8008d60:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8008d62:	4b06      	ldr	r3, [pc, #24]	; (8008d7c <USER_status+0x24>)
 8008d64:	2201      	movs	r2, #1
 8008d66:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008d68:	4b04      	ldr	r3, [pc, #16]	; (8008d7c <USER_status+0x24>)
 8008d6a:	781b      	ldrb	r3, [r3, #0]
 8008d6c:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008d6e:	4618      	mov	r0, r3
 8008d70:	370c      	adds	r7, #12
 8008d72:	46bd      	mov	sp, r7
 8008d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d78:	4770      	bx	lr
 8008d7a:	bf00      	nop
 8008d7c:	20000009 	.word	0x20000009

08008d80 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	60b9      	str	r1, [r7, #8]
 8008d88:	607a      	str	r2, [r7, #4]
 8008d8a:	603b      	str	r3, [r7, #0]
 8008d8c:	4603      	mov	r3, r0
 8008d8e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8008d90:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8008d92:	4618      	mov	r0, r3
 8008d94:	3714      	adds	r7, #20
 8008d96:	46bd      	mov	sp, r7
 8008d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9c:	4770      	bx	lr

08008d9e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008d9e:	b480      	push	{r7}
 8008da0:	b085      	sub	sp, #20
 8008da2:	af00      	add	r7, sp, #0
 8008da4:	60b9      	str	r1, [r7, #8]
 8008da6:	607a      	str	r2, [r7, #4]
 8008da8:	603b      	str	r3, [r7, #0]
 8008daa:	4603      	mov	r3, r0
 8008dac:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8008dae:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8008db0:	4618      	mov	r0, r3
 8008db2:	3714      	adds	r7, #20
 8008db4:	46bd      	mov	sp, r7
 8008db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dba:	4770      	bx	lr

08008dbc <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008dbc:	b480      	push	{r7}
 8008dbe:	b085      	sub	sp, #20
 8008dc0:	af00      	add	r7, sp, #0
 8008dc2:	4603      	mov	r3, r0
 8008dc4:	603a      	str	r2, [r7, #0]
 8008dc6:	71fb      	strb	r3, [r7, #7]
 8008dc8:	460b      	mov	r3, r1
 8008dca:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8008dcc:	2301      	movs	r3, #1
 8008dce:	73fb      	strb	r3, [r7, #15]
    return res;
 8008dd0:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8008dd2:	4618      	mov	r0, r3
 8008dd4:	3714      	adds	r7, #20
 8008dd6:	46bd      	mov	sp, r7
 8008dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ddc:	4770      	bx	lr
	...

08008de0 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008de0:	b480      	push	{r7}
 8008de2:	b087      	sub	sp, #28
 8008de4:	af00      	add	r7, sp, #0
 8008de6:	60f8      	str	r0, [r7, #12]
 8008de8:	60b9      	str	r1, [r7, #8]
 8008dea:	4613      	mov	r3, r2
 8008dec:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008dee:	2301      	movs	r3, #1
 8008df0:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008df2:	2300      	movs	r3, #0
 8008df4:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008df6:	4b1f      	ldr	r3, [pc, #124]	; (8008e74 <FATFS_LinkDriverEx+0x94>)
 8008df8:	7a5b      	ldrb	r3, [r3, #9]
 8008dfa:	b2db      	uxtb	r3, r3
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d131      	bne.n	8008e64 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008e00:	4b1c      	ldr	r3, [pc, #112]	; (8008e74 <FATFS_LinkDriverEx+0x94>)
 8008e02:	7a5b      	ldrb	r3, [r3, #9]
 8008e04:	b2db      	uxtb	r3, r3
 8008e06:	461a      	mov	r2, r3
 8008e08:	4b1a      	ldr	r3, [pc, #104]	; (8008e74 <FATFS_LinkDriverEx+0x94>)
 8008e0a:	2100      	movs	r1, #0
 8008e0c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008e0e:	4b19      	ldr	r3, [pc, #100]	; (8008e74 <FATFS_LinkDriverEx+0x94>)
 8008e10:	7a5b      	ldrb	r3, [r3, #9]
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	4a17      	ldr	r2, [pc, #92]	; (8008e74 <FATFS_LinkDriverEx+0x94>)
 8008e16:	009b      	lsls	r3, r3, #2
 8008e18:	4413      	add	r3, r2
 8008e1a:	68fa      	ldr	r2, [r7, #12]
 8008e1c:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008e1e:	4b15      	ldr	r3, [pc, #84]	; (8008e74 <FATFS_LinkDriverEx+0x94>)
 8008e20:	7a5b      	ldrb	r3, [r3, #9]
 8008e22:	b2db      	uxtb	r3, r3
 8008e24:	461a      	mov	r2, r3
 8008e26:	4b13      	ldr	r3, [pc, #76]	; (8008e74 <FATFS_LinkDriverEx+0x94>)
 8008e28:	4413      	add	r3, r2
 8008e2a:	79fa      	ldrb	r2, [r7, #7]
 8008e2c:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008e2e:	4b11      	ldr	r3, [pc, #68]	; (8008e74 <FATFS_LinkDriverEx+0x94>)
 8008e30:	7a5b      	ldrb	r3, [r3, #9]
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	1c5a      	adds	r2, r3, #1
 8008e36:	b2d1      	uxtb	r1, r2
 8008e38:	4a0e      	ldr	r2, [pc, #56]	; (8008e74 <FATFS_LinkDriverEx+0x94>)
 8008e3a:	7251      	strb	r1, [r2, #9]
 8008e3c:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008e3e:	7dbb      	ldrb	r3, [r7, #22]
 8008e40:	3330      	adds	r3, #48	; 0x30
 8008e42:	b2da      	uxtb	r2, r3
 8008e44:	68bb      	ldr	r3, [r7, #8]
 8008e46:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008e48:	68bb      	ldr	r3, [r7, #8]
 8008e4a:	3301      	adds	r3, #1
 8008e4c:	223a      	movs	r2, #58	; 0x3a
 8008e4e:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008e50:	68bb      	ldr	r3, [r7, #8]
 8008e52:	3302      	adds	r3, #2
 8008e54:	222f      	movs	r2, #47	; 0x2f
 8008e56:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008e58:	68bb      	ldr	r3, [r7, #8]
 8008e5a:	3303      	adds	r3, #3
 8008e5c:	2200      	movs	r2, #0
 8008e5e:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008e60:	2300      	movs	r3, #0
 8008e62:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008e64:	7dfb      	ldrb	r3, [r7, #23]
}
 8008e66:	4618      	mov	r0, r3
 8008e68:	371c      	adds	r7, #28
 8008e6a:	46bd      	mov	sp, r7
 8008e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e70:	4770      	bx	lr
 8008e72:	bf00      	nop
 8008e74:	20000bc8 	.word	0x20000bc8

08008e78 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	b082      	sub	sp, #8
 8008e7c:	af00      	add	r7, sp, #0
 8008e7e:	6078      	str	r0, [r7, #4]
 8008e80:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008e82:	2200      	movs	r2, #0
 8008e84:	6839      	ldr	r1, [r7, #0]
 8008e86:	6878      	ldr	r0, [r7, #4]
 8008e88:	f7ff ffaa 	bl	8008de0 <FATFS_LinkDriverEx>
 8008e8c:	4603      	mov	r3, r0
}
 8008e8e:	4618      	mov	r0, r3
 8008e90:	3708      	adds	r7, #8
 8008e92:	46bd      	mov	sp, r7
 8008e94:	bd80      	pop	{r7, pc}

08008e96 <__cvt>:
 8008e96:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008e9a:	ec55 4b10 	vmov	r4, r5, d0
 8008e9e:	2d00      	cmp	r5, #0
 8008ea0:	460e      	mov	r6, r1
 8008ea2:	4619      	mov	r1, r3
 8008ea4:	462b      	mov	r3, r5
 8008ea6:	bfbb      	ittet	lt
 8008ea8:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008eac:	461d      	movlt	r5, r3
 8008eae:	2300      	movge	r3, #0
 8008eb0:	232d      	movlt	r3, #45	; 0x2d
 8008eb2:	700b      	strb	r3, [r1, #0]
 8008eb4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008eb6:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008eba:	4691      	mov	r9, r2
 8008ebc:	f023 0820 	bic.w	r8, r3, #32
 8008ec0:	bfbc      	itt	lt
 8008ec2:	4622      	movlt	r2, r4
 8008ec4:	4614      	movlt	r4, r2
 8008ec6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008eca:	d005      	beq.n	8008ed8 <__cvt+0x42>
 8008ecc:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008ed0:	d100      	bne.n	8008ed4 <__cvt+0x3e>
 8008ed2:	3601      	adds	r6, #1
 8008ed4:	2102      	movs	r1, #2
 8008ed6:	e000      	b.n	8008eda <__cvt+0x44>
 8008ed8:	2103      	movs	r1, #3
 8008eda:	ab03      	add	r3, sp, #12
 8008edc:	9301      	str	r3, [sp, #4]
 8008ede:	ab02      	add	r3, sp, #8
 8008ee0:	9300      	str	r3, [sp, #0]
 8008ee2:	ec45 4b10 	vmov	d0, r4, r5
 8008ee6:	4653      	mov	r3, sl
 8008ee8:	4632      	mov	r2, r6
 8008eea:	f001 f8b5 	bl	800a058 <_dtoa_r>
 8008eee:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008ef2:	4607      	mov	r7, r0
 8008ef4:	d102      	bne.n	8008efc <__cvt+0x66>
 8008ef6:	f019 0f01 	tst.w	r9, #1
 8008efa:	d022      	beq.n	8008f42 <__cvt+0xac>
 8008efc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f00:	eb07 0906 	add.w	r9, r7, r6
 8008f04:	d110      	bne.n	8008f28 <__cvt+0x92>
 8008f06:	783b      	ldrb	r3, [r7, #0]
 8008f08:	2b30      	cmp	r3, #48	; 0x30
 8008f0a:	d10a      	bne.n	8008f22 <__cvt+0x8c>
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	2300      	movs	r3, #0
 8008f10:	4620      	mov	r0, r4
 8008f12:	4629      	mov	r1, r5
 8008f14:	f7f7 fe08 	bl	8000b28 <__aeabi_dcmpeq>
 8008f18:	b918      	cbnz	r0, 8008f22 <__cvt+0x8c>
 8008f1a:	f1c6 0601 	rsb	r6, r6, #1
 8008f1e:	f8ca 6000 	str.w	r6, [sl]
 8008f22:	f8da 3000 	ldr.w	r3, [sl]
 8008f26:	4499      	add	r9, r3
 8008f28:	2200      	movs	r2, #0
 8008f2a:	2300      	movs	r3, #0
 8008f2c:	4620      	mov	r0, r4
 8008f2e:	4629      	mov	r1, r5
 8008f30:	f7f7 fdfa 	bl	8000b28 <__aeabi_dcmpeq>
 8008f34:	b108      	cbz	r0, 8008f3a <__cvt+0xa4>
 8008f36:	f8cd 900c 	str.w	r9, [sp, #12]
 8008f3a:	2230      	movs	r2, #48	; 0x30
 8008f3c:	9b03      	ldr	r3, [sp, #12]
 8008f3e:	454b      	cmp	r3, r9
 8008f40:	d307      	bcc.n	8008f52 <__cvt+0xbc>
 8008f42:	9b03      	ldr	r3, [sp, #12]
 8008f44:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008f46:	1bdb      	subs	r3, r3, r7
 8008f48:	4638      	mov	r0, r7
 8008f4a:	6013      	str	r3, [r2, #0]
 8008f4c:	b004      	add	sp, #16
 8008f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008f52:	1c59      	adds	r1, r3, #1
 8008f54:	9103      	str	r1, [sp, #12]
 8008f56:	701a      	strb	r2, [r3, #0]
 8008f58:	e7f0      	b.n	8008f3c <__cvt+0xa6>

08008f5a <__exponent>:
 8008f5a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f5c:	4603      	mov	r3, r0
 8008f5e:	2900      	cmp	r1, #0
 8008f60:	bfb8      	it	lt
 8008f62:	4249      	neglt	r1, r1
 8008f64:	f803 2b02 	strb.w	r2, [r3], #2
 8008f68:	bfb4      	ite	lt
 8008f6a:	222d      	movlt	r2, #45	; 0x2d
 8008f6c:	222b      	movge	r2, #43	; 0x2b
 8008f6e:	2909      	cmp	r1, #9
 8008f70:	7042      	strb	r2, [r0, #1]
 8008f72:	dd2a      	ble.n	8008fca <__exponent+0x70>
 8008f74:	f10d 0207 	add.w	r2, sp, #7
 8008f78:	4617      	mov	r7, r2
 8008f7a:	260a      	movs	r6, #10
 8008f7c:	4694      	mov	ip, r2
 8008f7e:	fb91 f5f6 	sdiv	r5, r1, r6
 8008f82:	fb06 1415 	mls	r4, r6, r5, r1
 8008f86:	3430      	adds	r4, #48	; 0x30
 8008f88:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8008f8c:	460c      	mov	r4, r1
 8008f8e:	2c63      	cmp	r4, #99	; 0x63
 8008f90:	f102 32ff 	add.w	r2, r2, #4294967295
 8008f94:	4629      	mov	r1, r5
 8008f96:	dcf1      	bgt.n	8008f7c <__exponent+0x22>
 8008f98:	3130      	adds	r1, #48	; 0x30
 8008f9a:	f1ac 0402 	sub.w	r4, ip, #2
 8008f9e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8008fa2:	1c41      	adds	r1, r0, #1
 8008fa4:	4622      	mov	r2, r4
 8008fa6:	42ba      	cmp	r2, r7
 8008fa8:	d30a      	bcc.n	8008fc0 <__exponent+0x66>
 8008faa:	f10d 0209 	add.w	r2, sp, #9
 8008fae:	eba2 020c 	sub.w	r2, r2, ip
 8008fb2:	42bc      	cmp	r4, r7
 8008fb4:	bf88      	it	hi
 8008fb6:	2200      	movhi	r2, #0
 8008fb8:	4413      	add	r3, r2
 8008fba:	1a18      	subs	r0, r3, r0
 8008fbc:	b003      	add	sp, #12
 8008fbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008fc0:	f812 5b01 	ldrb.w	r5, [r2], #1
 8008fc4:	f801 5f01 	strb.w	r5, [r1, #1]!
 8008fc8:	e7ed      	b.n	8008fa6 <__exponent+0x4c>
 8008fca:	2330      	movs	r3, #48	; 0x30
 8008fcc:	3130      	adds	r1, #48	; 0x30
 8008fce:	7083      	strb	r3, [r0, #2]
 8008fd0:	70c1      	strb	r1, [r0, #3]
 8008fd2:	1d03      	adds	r3, r0, #4
 8008fd4:	e7f1      	b.n	8008fba <__exponent+0x60>
	...

08008fd8 <_printf_float>:
 8008fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fdc:	ed2d 8b02 	vpush	{d8}
 8008fe0:	b08d      	sub	sp, #52	; 0x34
 8008fe2:	460c      	mov	r4, r1
 8008fe4:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8008fe8:	4616      	mov	r6, r2
 8008fea:	461f      	mov	r7, r3
 8008fec:	4605      	mov	r5, r0
 8008fee:	f000 ff2b 	bl	8009e48 <_localeconv_r>
 8008ff2:	f8d0 a000 	ldr.w	sl, [r0]
 8008ff6:	4650      	mov	r0, sl
 8008ff8:	f7f7 f96a 	bl	80002d0 <strlen>
 8008ffc:	2300      	movs	r3, #0
 8008ffe:	930a      	str	r3, [sp, #40]	; 0x28
 8009000:	6823      	ldr	r3, [r4, #0]
 8009002:	9305      	str	r3, [sp, #20]
 8009004:	f8d8 3000 	ldr.w	r3, [r8]
 8009008:	f894 b018 	ldrb.w	fp, [r4, #24]
 800900c:	3307      	adds	r3, #7
 800900e:	f023 0307 	bic.w	r3, r3, #7
 8009012:	f103 0208 	add.w	r2, r3, #8
 8009016:	f8c8 2000 	str.w	r2, [r8]
 800901a:	e9d3 8900 	ldrd	r8, r9, [r3]
 800901e:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009022:	9307      	str	r3, [sp, #28]
 8009024:	f8cd 8018 	str.w	r8, [sp, #24]
 8009028:	ee08 0a10 	vmov	s16, r0
 800902c:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009030:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009034:	4b9e      	ldr	r3, [pc, #632]	; (80092b0 <_printf_float+0x2d8>)
 8009036:	f04f 32ff 	mov.w	r2, #4294967295
 800903a:	f7f7 fda7 	bl	8000b8c <__aeabi_dcmpun>
 800903e:	bb88      	cbnz	r0, 80090a4 <_printf_float+0xcc>
 8009040:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009044:	4b9a      	ldr	r3, [pc, #616]	; (80092b0 <_printf_float+0x2d8>)
 8009046:	f04f 32ff 	mov.w	r2, #4294967295
 800904a:	f7f7 fd81 	bl	8000b50 <__aeabi_dcmple>
 800904e:	bb48      	cbnz	r0, 80090a4 <_printf_float+0xcc>
 8009050:	2200      	movs	r2, #0
 8009052:	2300      	movs	r3, #0
 8009054:	4640      	mov	r0, r8
 8009056:	4649      	mov	r1, r9
 8009058:	f7f7 fd70 	bl	8000b3c <__aeabi_dcmplt>
 800905c:	b110      	cbz	r0, 8009064 <_printf_float+0x8c>
 800905e:	232d      	movs	r3, #45	; 0x2d
 8009060:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009064:	4a93      	ldr	r2, [pc, #588]	; (80092b4 <_printf_float+0x2dc>)
 8009066:	4b94      	ldr	r3, [pc, #592]	; (80092b8 <_printf_float+0x2e0>)
 8009068:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800906c:	bf94      	ite	ls
 800906e:	4690      	movls	r8, r2
 8009070:	4698      	movhi	r8, r3
 8009072:	2303      	movs	r3, #3
 8009074:	6123      	str	r3, [r4, #16]
 8009076:	9b05      	ldr	r3, [sp, #20]
 8009078:	f023 0304 	bic.w	r3, r3, #4
 800907c:	6023      	str	r3, [r4, #0]
 800907e:	f04f 0900 	mov.w	r9, #0
 8009082:	9700      	str	r7, [sp, #0]
 8009084:	4633      	mov	r3, r6
 8009086:	aa0b      	add	r2, sp, #44	; 0x2c
 8009088:	4621      	mov	r1, r4
 800908a:	4628      	mov	r0, r5
 800908c:	f000 f9da 	bl	8009444 <_printf_common>
 8009090:	3001      	adds	r0, #1
 8009092:	f040 8090 	bne.w	80091b6 <_printf_float+0x1de>
 8009096:	f04f 30ff 	mov.w	r0, #4294967295
 800909a:	b00d      	add	sp, #52	; 0x34
 800909c:	ecbd 8b02 	vpop	{d8}
 80090a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a4:	4642      	mov	r2, r8
 80090a6:	464b      	mov	r3, r9
 80090a8:	4640      	mov	r0, r8
 80090aa:	4649      	mov	r1, r9
 80090ac:	f7f7 fd6e 	bl	8000b8c <__aeabi_dcmpun>
 80090b0:	b140      	cbz	r0, 80090c4 <_printf_float+0xec>
 80090b2:	464b      	mov	r3, r9
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	bfbc      	itt	lt
 80090b8:	232d      	movlt	r3, #45	; 0x2d
 80090ba:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80090be:	4a7f      	ldr	r2, [pc, #508]	; (80092bc <_printf_float+0x2e4>)
 80090c0:	4b7f      	ldr	r3, [pc, #508]	; (80092c0 <_printf_float+0x2e8>)
 80090c2:	e7d1      	b.n	8009068 <_printf_float+0x90>
 80090c4:	6863      	ldr	r3, [r4, #4]
 80090c6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80090ca:	9206      	str	r2, [sp, #24]
 80090cc:	1c5a      	adds	r2, r3, #1
 80090ce:	d13f      	bne.n	8009150 <_printf_float+0x178>
 80090d0:	2306      	movs	r3, #6
 80090d2:	6063      	str	r3, [r4, #4]
 80090d4:	9b05      	ldr	r3, [sp, #20]
 80090d6:	6861      	ldr	r1, [r4, #4]
 80090d8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80090dc:	2300      	movs	r3, #0
 80090de:	9303      	str	r3, [sp, #12]
 80090e0:	ab0a      	add	r3, sp, #40	; 0x28
 80090e2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80090e6:	ab09      	add	r3, sp, #36	; 0x24
 80090e8:	ec49 8b10 	vmov	d0, r8, r9
 80090ec:	9300      	str	r3, [sp, #0]
 80090ee:	6022      	str	r2, [r4, #0]
 80090f0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80090f4:	4628      	mov	r0, r5
 80090f6:	f7ff fece 	bl	8008e96 <__cvt>
 80090fa:	9b06      	ldr	r3, [sp, #24]
 80090fc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80090fe:	2b47      	cmp	r3, #71	; 0x47
 8009100:	4680      	mov	r8, r0
 8009102:	d108      	bne.n	8009116 <_printf_float+0x13e>
 8009104:	1cc8      	adds	r0, r1, #3
 8009106:	db02      	blt.n	800910e <_printf_float+0x136>
 8009108:	6863      	ldr	r3, [r4, #4]
 800910a:	4299      	cmp	r1, r3
 800910c:	dd41      	ble.n	8009192 <_printf_float+0x1ba>
 800910e:	f1ab 0302 	sub.w	r3, fp, #2
 8009112:	fa5f fb83 	uxtb.w	fp, r3
 8009116:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800911a:	d820      	bhi.n	800915e <_printf_float+0x186>
 800911c:	3901      	subs	r1, #1
 800911e:	465a      	mov	r2, fp
 8009120:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009124:	9109      	str	r1, [sp, #36]	; 0x24
 8009126:	f7ff ff18 	bl	8008f5a <__exponent>
 800912a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800912c:	1813      	adds	r3, r2, r0
 800912e:	2a01      	cmp	r2, #1
 8009130:	4681      	mov	r9, r0
 8009132:	6123      	str	r3, [r4, #16]
 8009134:	dc02      	bgt.n	800913c <_printf_float+0x164>
 8009136:	6822      	ldr	r2, [r4, #0]
 8009138:	07d2      	lsls	r2, r2, #31
 800913a:	d501      	bpl.n	8009140 <_printf_float+0x168>
 800913c:	3301      	adds	r3, #1
 800913e:	6123      	str	r3, [r4, #16]
 8009140:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009144:	2b00      	cmp	r3, #0
 8009146:	d09c      	beq.n	8009082 <_printf_float+0xaa>
 8009148:	232d      	movs	r3, #45	; 0x2d
 800914a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800914e:	e798      	b.n	8009082 <_printf_float+0xaa>
 8009150:	9a06      	ldr	r2, [sp, #24]
 8009152:	2a47      	cmp	r2, #71	; 0x47
 8009154:	d1be      	bne.n	80090d4 <_printf_float+0xfc>
 8009156:	2b00      	cmp	r3, #0
 8009158:	d1bc      	bne.n	80090d4 <_printf_float+0xfc>
 800915a:	2301      	movs	r3, #1
 800915c:	e7b9      	b.n	80090d2 <_printf_float+0xfa>
 800915e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009162:	d118      	bne.n	8009196 <_printf_float+0x1be>
 8009164:	2900      	cmp	r1, #0
 8009166:	6863      	ldr	r3, [r4, #4]
 8009168:	dd0b      	ble.n	8009182 <_printf_float+0x1aa>
 800916a:	6121      	str	r1, [r4, #16]
 800916c:	b913      	cbnz	r3, 8009174 <_printf_float+0x19c>
 800916e:	6822      	ldr	r2, [r4, #0]
 8009170:	07d0      	lsls	r0, r2, #31
 8009172:	d502      	bpl.n	800917a <_printf_float+0x1a2>
 8009174:	3301      	adds	r3, #1
 8009176:	440b      	add	r3, r1
 8009178:	6123      	str	r3, [r4, #16]
 800917a:	65a1      	str	r1, [r4, #88]	; 0x58
 800917c:	f04f 0900 	mov.w	r9, #0
 8009180:	e7de      	b.n	8009140 <_printf_float+0x168>
 8009182:	b913      	cbnz	r3, 800918a <_printf_float+0x1b2>
 8009184:	6822      	ldr	r2, [r4, #0]
 8009186:	07d2      	lsls	r2, r2, #31
 8009188:	d501      	bpl.n	800918e <_printf_float+0x1b6>
 800918a:	3302      	adds	r3, #2
 800918c:	e7f4      	b.n	8009178 <_printf_float+0x1a0>
 800918e:	2301      	movs	r3, #1
 8009190:	e7f2      	b.n	8009178 <_printf_float+0x1a0>
 8009192:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009196:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009198:	4299      	cmp	r1, r3
 800919a:	db05      	blt.n	80091a8 <_printf_float+0x1d0>
 800919c:	6823      	ldr	r3, [r4, #0]
 800919e:	6121      	str	r1, [r4, #16]
 80091a0:	07d8      	lsls	r0, r3, #31
 80091a2:	d5ea      	bpl.n	800917a <_printf_float+0x1a2>
 80091a4:	1c4b      	adds	r3, r1, #1
 80091a6:	e7e7      	b.n	8009178 <_printf_float+0x1a0>
 80091a8:	2900      	cmp	r1, #0
 80091aa:	bfd4      	ite	le
 80091ac:	f1c1 0202 	rsble	r2, r1, #2
 80091b0:	2201      	movgt	r2, #1
 80091b2:	4413      	add	r3, r2
 80091b4:	e7e0      	b.n	8009178 <_printf_float+0x1a0>
 80091b6:	6823      	ldr	r3, [r4, #0]
 80091b8:	055a      	lsls	r2, r3, #21
 80091ba:	d407      	bmi.n	80091cc <_printf_float+0x1f4>
 80091bc:	6923      	ldr	r3, [r4, #16]
 80091be:	4642      	mov	r2, r8
 80091c0:	4631      	mov	r1, r6
 80091c2:	4628      	mov	r0, r5
 80091c4:	47b8      	blx	r7
 80091c6:	3001      	adds	r0, #1
 80091c8:	d12c      	bne.n	8009224 <_printf_float+0x24c>
 80091ca:	e764      	b.n	8009096 <_printf_float+0xbe>
 80091cc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80091d0:	f240 80e0 	bls.w	8009394 <_printf_float+0x3bc>
 80091d4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80091d8:	2200      	movs	r2, #0
 80091da:	2300      	movs	r3, #0
 80091dc:	f7f7 fca4 	bl	8000b28 <__aeabi_dcmpeq>
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d034      	beq.n	800924e <_printf_float+0x276>
 80091e4:	4a37      	ldr	r2, [pc, #220]	; (80092c4 <_printf_float+0x2ec>)
 80091e6:	2301      	movs	r3, #1
 80091e8:	4631      	mov	r1, r6
 80091ea:	4628      	mov	r0, r5
 80091ec:	47b8      	blx	r7
 80091ee:	3001      	adds	r0, #1
 80091f0:	f43f af51 	beq.w	8009096 <_printf_float+0xbe>
 80091f4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80091f8:	429a      	cmp	r2, r3
 80091fa:	db02      	blt.n	8009202 <_printf_float+0x22a>
 80091fc:	6823      	ldr	r3, [r4, #0]
 80091fe:	07d8      	lsls	r0, r3, #31
 8009200:	d510      	bpl.n	8009224 <_printf_float+0x24c>
 8009202:	ee18 3a10 	vmov	r3, s16
 8009206:	4652      	mov	r2, sl
 8009208:	4631      	mov	r1, r6
 800920a:	4628      	mov	r0, r5
 800920c:	47b8      	blx	r7
 800920e:	3001      	adds	r0, #1
 8009210:	f43f af41 	beq.w	8009096 <_printf_float+0xbe>
 8009214:	f04f 0800 	mov.w	r8, #0
 8009218:	f104 091a 	add.w	r9, r4, #26
 800921c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800921e:	3b01      	subs	r3, #1
 8009220:	4543      	cmp	r3, r8
 8009222:	dc09      	bgt.n	8009238 <_printf_float+0x260>
 8009224:	6823      	ldr	r3, [r4, #0]
 8009226:	079b      	lsls	r3, r3, #30
 8009228:	f100 8107 	bmi.w	800943a <_printf_float+0x462>
 800922c:	68e0      	ldr	r0, [r4, #12]
 800922e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009230:	4298      	cmp	r0, r3
 8009232:	bfb8      	it	lt
 8009234:	4618      	movlt	r0, r3
 8009236:	e730      	b.n	800909a <_printf_float+0xc2>
 8009238:	2301      	movs	r3, #1
 800923a:	464a      	mov	r2, r9
 800923c:	4631      	mov	r1, r6
 800923e:	4628      	mov	r0, r5
 8009240:	47b8      	blx	r7
 8009242:	3001      	adds	r0, #1
 8009244:	f43f af27 	beq.w	8009096 <_printf_float+0xbe>
 8009248:	f108 0801 	add.w	r8, r8, #1
 800924c:	e7e6      	b.n	800921c <_printf_float+0x244>
 800924e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009250:	2b00      	cmp	r3, #0
 8009252:	dc39      	bgt.n	80092c8 <_printf_float+0x2f0>
 8009254:	4a1b      	ldr	r2, [pc, #108]	; (80092c4 <_printf_float+0x2ec>)
 8009256:	2301      	movs	r3, #1
 8009258:	4631      	mov	r1, r6
 800925a:	4628      	mov	r0, r5
 800925c:	47b8      	blx	r7
 800925e:	3001      	adds	r0, #1
 8009260:	f43f af19 	beq.w	8009096 <_printf_float+0xbe>
 8009264:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009268:	4313      	orrs	r3, r2
 800926a:	d102      	bne.n	8009272 <_printf_float+0x29a>
 800926c:	6823      	ldr	r3, [r4, #0]
 800926e:	07d9      	lsls	r1, r3, #31
 8009270:	d5d8      	bpl.n	8009224 <_printf_float+0x24c>
 8009272:	ee18 3a10 	vmov	r3, s16
 8009276:	4652      	mov	r2, sl
 8009278:	4631      	mov	r1, r6
 800927a:	4628      	mov	r0, r5
 800927c:	47b8      	blx	r7
 800927e:	3001      	adds	r0, #1
 8009280:	f43f af09 	beq.w	8009096 <_printf_float+0xbe>
 8009284:	f04f 0900 	mov.w	r9, #0
 8009288:	f104 0a1a 	add.w	sl, r4, #26
 800928c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800928e:	425b      	negs	r3, r3
 8009290:	454b      	cmp	r3, r9
 8009292:	dc01      	bgt.n	8009298 <_printf_float+0x2c0>
 8009294:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009296:	e792      	b.n	80091be <_printf_float+0x1e6>
 8009298:	2301      	movs	r3, #1
 800929a:	4652      	mov	r2, sl
 800929c:	4631      	mov	r1, r6
 800929e:	4628      	mov	r0, r5
 80092a0:	47b8      	blx	r7
 80092a2:	3001      	adds	r0, #1
 80092a4:	f43f aef7 	beq.w	8009096 <_printf_float+0xbe>
 80092a8:	f109 0901 	add.w	r9, r9, #1
 80092ac:	e7ee      	b.n	800928c <_printf_float+0x2b4>
 80092ae:	bf00      	nop
 80092b0:	7fefffff 	.word	0x7fefffff
 80092b4:	0800d71c 	.word	0x0800d71c
 80092b8:	0800d720 	.word	0x0800d720
 80092bc:	0800d724 	.word	0x0800d724
 80092c0:	0800d728 	.word	0x0800d728
 80092c4:	0800d72c 	.word	0x0800d72c
 80092c8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80092ca:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092cc:	429a      	cmp	r2, r3
 80092ce:	bfa8      	it	ge
 80092d0:	461a      	movge	r2, r3
 80092d2:	2a00      	cmp	r2, #0
 80092d4:	4691      	mov	r9, r2
 80092d6:	dc37      	bgt.n	8009348 <_printf_float+0x370>
 80092d8:	f04f 0b00 	mov.w	fp, #0
 80092dc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80092e0:	f104 021a 	add.w	r2, r4, #26
 80092e4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80092e6:	9305      	str	r3, [sp, #20]
 80092e8:	eba3 0309 	sub.w	r3, r3, r9
 80092ec:	455b      	cmp	r3, fp
 80092ee:	dc33      	bgt.n	8009358 <_printf_float+0x380>
 80092f0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80092f4:	429a      	cmp	r2, r3
 80092f6:	db3b      	blt.n	8009370 <_printf_float+0x398>
 80092f8:	6823      	ldr	r3, [r4, #0]
 80092fa:	07da      	lsls	r2, r3, #31
 80092fc:	d438      	bmi.n	8009370 <_printf_float+0x398>
 80092fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009302:	eba2 0903 	sub.w	r9, r2, r3
 8009306:	9b05      	ldr	r3, [sp, #20]
 8009308:	1ad2      	subs	r2, r2, r3
 800930a:	4591      	cmp	r9, r2
 800930c:	bfa8      	it	ge
 800930e:	4691      	movge	r9, r2
 8009310:	f1b9 0f00 	cmp.w	r9, #0
 8009314:	dc35      	bgt.n	8009382 <_printf_float+0x3aa>
 8009316:	f04f 0800 	mov.w	r8, #0
 800931a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800931e:	f104 0a1a 	add.w	sl, r4, #26
 8009322:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009326:	1a9b      	subs	r3, r3, r2
 8009328:	eba3 0309 	sub.w	r3, r3, r9
 800932c:	4543      	cmp	r3, r8
 800932e:	f77f af79 	ble.w	8009224 <_printf_float+0x24c>
 8009332:	2301      	movs	r3, #1
 8009334:	4652      	mov	r2, sl
 8009336:	4631      	mov	r1, r6
 8009338:	4628      	mov	r0, r5
 800933a:	47b8      	blx	r7
 800933c:	3001      	adds	r0, #1
 800933e:	f43f aeaa 	beq.w	8009096 <_printf_float+0xbe>
 8009342:	f108 0801 	add.w	r8, r8, #1
 8009346:	e7ec      	b.n	8009322 <_printf_float+0x34a>
 8009348:	4613      	mov	r3, r2
 800934a:	4631      	mov	r1, r6
 800934c:	4642      	mov	r2, r8
 800934e:	4628      	mov	r0, r5
 8009350:	47b8      	blx	r7
 8009352:	3001      	adds	r0, #1
 8009354:	d1c0      	bne.n	80092d8 <_printf_float+0x300>
 8009356:	e69e      	b.n	8009096 <_printf_float+0xbe>
 8009358:	2301      	movs	r3, #1
 800935a:	4631      	mov	r1, r6
 800935c:	4628      	mov	r0, r5
 800935e:	9205      	str	r2, [sp, #20]
 8009360:	47b8      	blx	r7
 8009362:	3001      	adds	r0, #1
 8009364:	f43f ae97 	beq.w	8009096 <_printf_float+0xbe>
 8009368:	9a05      	ldr	r2, [sp, #20]
 800936a:	f10b 0b01 	add.w	fp, fp, #1
 800936e:	e7b9      	b.n	80092e4 <_printf_float+0x30c>
 8009370:	ee18 3a10 	vmov	r3, s16
 8009374:	4652      	mov	r2, sl
 8009376:	4631      	mov	r1, r6
 8009378:	4628      	mov	r0, r5
 800937a:	47b8      	blx	r7
 800937c:	3001      	adds	r0, #1
 800937e:	d1be      	bne.n	80092fe <_printf_float+0x326>
 8009380:	e689      	b.n	8009096 <_printf_float+0xbe>
 8009382:	9a05      	ldr	r2, [sp, #20]
 8009384:	464b      	mov	r3, r9
 8009386:	4442      	add	r2, r8
 8009388:	4631      	mov	r1, r6
 800938a:	4628      	mov	r0, r5
 800938c:	47b8      	blx	r7
 800938e:	3001      	adds	r0, #1
 8009390:	d1c1      	bne.n	8009316 <_printf_float+0x33e>
 8009392:	e680      	b.n	8009096 <_printf_float+0xbe>
 8009394:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009396:	2a01      	cmp	r2, #1
 8009398:	dc01      	bgt.n	800939e <_printf_float+0x3c6>
 800939a:	07db      	lsls	r3, r3, #31
 800939c:	d53a      	bpl.n	8009414 <_printf_float+0x43c>
 800939e:	2301      	movs	r3, #1
 80093a0:	4642      	mov	r2, r8
 80093a2:	4631      	mov	r1, r6
 80093a4:	4628      	mov	r0, r5
 80093a6:	47b8      	blx	r7
 80093a8:	3001      	adds	r0, #1
 80093aa:	f43f ae74 	beq.w	8009096 <_printf_float+0xbe>
 80093ae:	ee18 3a10 	vmov	r3, s16
 80093b2:	4652      	mov	r2, sl
 80093b4:	4631      	mov	r1, r6
 80093b6:	4628      	mov	r0, r5
 80093b8:	47b8      	blx	r7
 80093ba:	3001      	adds	r0, #1
 80093bc:	f43f ae6b 	beq.w	8009096 <_printf_float+0xbe>
 80093c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80093c4:	2200      	movs	r2, #0
 80093c6:	2300      	movs	r3, #0
 80093c8:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80093cc:	f7f7 fbac 	bl	8000b28 <__aeabi_dcmpeq>
 80093d0:	b9d8      	cbnz	r0, 800940a <_printf_float+0x432>
 80093d2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80093d6:	f108 0201 	add.w	r2, r8, #1
 80093da:	4631      	mov	r1, r6
 80093dc:	4628      	mov	r0, r5
 80093de:	47b8      	blx	r7
 80093e0:	3001      	adds	r0, #1
 80093e2:	d10e      	bne.n	8009402 <_printf_float+0x42a>
 80093e4:	e657      	b.n	8009096 <_printf_float+0xbe>
 80093e6:	2301      	movs	r3, #1
 80093e8:	4652      	mov	r2, sl
 80093ea:	4631      	mov	r1, r6
 80093ec:	4628      	mov	r0, r5
 80093ee:	47b8      	blx	r7
 80093f0:	3001      	adds	r0, #1
 80093f2:	f43f ae50 	beq.w	8009096 <_printf_float+0xbe>
 80093f6:	f108 0801 	add.w	r8, r8, #1
 80093fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80093fc:	3b01      	subs	r3, #1
 80093fe:	4543      	cmp	r3, r8
 8009400:	dcf1      	bgt.n	80093e6 <_printf_float+0x40e>
 8009402:	464b      	mov	r3, r9
 8009404:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009408:	e6da      	b.n	80091c0 <_printf_float+0x1e8>
 800940a:	f04f 0800 	mov.w	r8, #0
 800940e:	f104 0a1a 	add.w	sl, r4, #26
 8009412:	e7f2      	b.n	80093fa <_printf_float+0x422>
 8009414:	2301      	movs	r3, #1
 8009416:	4642      	mov	r2, r8
 8009418:	e7df      	b.n	80093da <_printf_float+0x402>
 800941a:	2301      	movs	r3, #1
 800941c:	464a      	mov	r2, r9
 800941e:	4631      	mov	r1, r6
 8009420:	4628      	mov	r0, r5
 8009422:	47b8      	blx	r7
 8009424:	3001      	adds	r0, #1
 8009426:	f43f ae36 	beq.w	8009096 <_printf_float+0xbe>
 800942a:	f108 0801 	add.w	r8, r8, #1
 800942e:	68e3      	ldr	r3, [r4, #12]
 8009430:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009432:	1a5b      	subs	r3, r3, r1
 8009434:	4543      	cmp	r3, r8
 8009436:	dcf0      	bgt.n	800941a <_printf_float+0x442>
 8009438:	e6f8      	b.n	800922c <_printf_float+0x254>
 800943a:	f04f 0800 	mov.w	r8, #0
 800943e:	f104 0919 	add.w	r9, r4, #25
 8009442:	e7f4      	b.n	800942e <_printf_float+0x456>

08009444 <_printf_common>:
 8009444:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009448:	4616      	mov	r6, r2
 800944a:	4699      	mov	r9, r3
 800944c:	688a      	ldr	r2, [r1, #8]
 800944e:	690b      	ldr	r3, [r1, #16]
 8009450:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009454:	4293      	cmp	r3, r2
 8009456:	bfb8      	it	lt
 8009458:	4613      	movlt	r3, r2
 800945a:	6033      	str	r3, [r6, #0]
 800945c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009460:	4607      	mov	r7, r0
 8009462:	460c      	mov	r4, r1
 8009464:	b10a      	cbz	r2, 800946a <_printf_common+0x26>
 8009466:	3301      	adds	r3, #1
 8009468:	6033      	str	r3, [r6, #0]
 800946a:	6823      	ldr	r3, [r4, #0]
 800946c:	0699      	lsls	r1, r3, #26
 800946e:	bf42      	ittt	mi
 8009470:	6833      	ldrmi	r3, [r6, #0]
 8009472:	3302      	addmi	r3, #2
 8009474:	6033      	strmi	r3, [r6, #0]
 8009476:	6825      	ldr	r5, [r4, #0]
 8009478:	f015 0506 	ands.w	r5, r5, #6
 800947c:	d106      	bne.n	800948c <_printf_common+0x48>
 800947e:	f104 0a19 	add.w	sl, r4, #25
 8009482:	68e3      	ldr	r3, [r4, #12]
 8009484:	6832      	ldr	r2, [r6, #0]
 8009486:	1a9b      	subs	r3, r3, r2
 8009488:	42ab      	cmp	r3, r5
 800948a:	dc26      	bgt.n	80094da <_printf_common+0x96>
 800948c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009490:	1e13      	subs	r3, r2, #0
 8009492:	6822      	ldr	r2, [r4, #0]
 8009494:	bf18      	it	ne
 8009496:	2301      	movne	r3, #1
 8009498:	0692      	lsls	r2, r2, #26
 800949a:	d42b      	bmi.n	80094f4 <_printf_common+0xb0>
 800949c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80094a0:	4649      	mov	r1, r9
 80094a2:	4638      	mov	r0, r7
 80094a4:	47c0      	blx	r8
 80094a6:	3001      	adds	r0, #1
 80094a8:	d01e      	beq.n	80094e8 <_printf_common+0xa4>
 80094aa:	6823      	ldr	r3, [r4, #0]
 80094ac:	6922      	ldr	r2, [r4, #16]
 80094ae:	f003 0306 	and.w	r3, r3, #6
 80094b2:	2b04      	cmp	r3, #4
 80094b4:	bf02      	ittt	eq
 80094b6:	68e5      	ldreq	r5, [r4, #12]
 80094b8:	6833      	ldreq	r3, [r6, #0]
 80094ba:	1aed      	subeq	r5, r5, r3
 80094bc:	68a3      	ldr	r3, [r4, #8]
 80094be:	bf0c      	ite	eq
 80094c0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80094c4:	2500      	movne	r5, #0
 80094c6:	4293      	cmp	r3, r2
 80094c8:	bfc4      	itt	gt
 80094ca:	1a9b      	subgt	r3, r3, r2
 80094cc:	18ed      	addgt	r5, r5, r3
 80094ce:	2600      	movs	r6, #0
 80094d0:	341a      	adds	r4, #26
 80094d2:	42b5      	cmp	r5, r6
 80094d4:	d11a      	bne.n	800950c <_printf_common+0xc8>
 80094d6:	2000      	movs	r0, #0
 80094d8:	e008      	b.n	80094ec <_printf_common+0xa8>
 80094da:	2301      	movs	r3, #1
 80094dc:	4652      	mov	r2, sl
 80094de:	4649      	mov	r1, r9
 80094e0:	4638      	mov	r0, r7
 80094e2:	47c0      	blx	r8
 80094e4:	3001      	adds	r0, #1
 80094e6:	d103      	bne.n	80094f0 <_printf_common+0xac>
 80094e8:	f04f 30ff 	mov.w	r0, #4294967295
 80094ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094f0:	3501      	adds	r5, #1
 80094f2:	e7c6      	b.n	8009482 <_printf_common+0x3e>
 80094f4:	18e1      	adds	r1, r4, r3
 80094f6:	1c5a      	adds	r2, r3, #1
 80094f8:	2030      	movs	r0, #48	; 0x30
 80094fa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80094fe:	4422      	add	r2, r4
 8009500:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009504:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009508:	3302      	adds	r3, #2
 800950a:	e7c7      	b.n	800949c <_printf_common+0x58>
 800950c:	2301      	movs	r3, #1
 800950e:	4622      	mov	r2, r4
 8009510:	4649      	mov	r1, r9
 8009512:	4638      	mov	r0, r7
 8009514:	47c0      	blx	r8
 8009516:	3001      	adds	r0, #1
 8009518:	d0e6      	beq.n	80094e8 <_printf_common+0xa4>
 800951a:	3601      	adds	r6, #1
 800951c:	e7d9      	b.n	80094d2 <_printf_common+0x8e>
	...

08009520 <_printf_i>:
 8009520:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009524:	7e0f      	ldrb	r7, [r1, #24]
 8009526:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009528:	2f78      	cmp	r7, #120	; 0x78
 800952a:	4691      	mov	r9, r2
 800952c:	4680      	mov	r8, r0
 800952e:	460c      	mov	r4, r1
 8009530:	469a      	mov	sl, r3
 8009532:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009536:	d807      	bhi.n	8009548 <_printf_i+0x28>
 8009538:	2f62      	cmp	r7, #98	; 0x62
 800953a:	d80a      	bhi.n	8009552 <_printf_i+0x32>
 800953c:	2f00      	cmp	r7, #0
 800953e:	f000 80d4 	beq.w	80096ea <_printf_i+0x1ca>
 8009542:	2f58      	cmp	r7, #88	; 0x58
 8009544:	f000 80c0 	beq.w	80096c8 <_printf_i+0x1a8>
 8009548:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800954c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009550:	e03a      	b.n	80095c8 <_printf_i+0xa8>
 8009552:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009556:	2b15      	cmp	r3, #21
 8009558:	d8f6      	bhi.n	8009548 <_printf_i+0x28>
 800955a:	a101      	add	r1, pc, #4	; (adr r1, 8009560 <_printf_i+0x40>)
 800955c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009560:	080095b9 	.word	0x080095b9
 8009564:	080095cd 	.word	0x080095cd
 8009568:	08009549 	.word	0x08009549
 800956c:	08009549 	.word	0x08009549
 8009570:	08009549 	.word	0x08009549
 8009574:	08009549 	.word	0x08009549
 8009578:	080095cd 	.word	0x080095cd
 800957c:	08009549 	.word	0x08009549
 8009580:	08009549 	.word	0x08009549
 8009584:	08009549 	.word	0x08009549
 8009588:	08009549 	.word	0x08009549
 800958c:	080096d1 	.word	0x080096d1
 8009590:	080095f9 	.word	0x080095f9
 8009594:	0800968b 	.word	0x0800968b
 8009598:	08009549 	.word	0x08009549
 800959c:	08009549 	.word	0x08009549
 80095a0:	080096f3 	.word	0x080096f3
 80095a4:	08009549 	.word	0x08009549
 80095a8:	080095f9 	.word	0x080095f9
 80095ac:	08009549 	.word	0x08009549
 80095b0:	08009549 	.word	0x08009549
 80095b4:	08009693 	.word	0x08009693
 80095b8:	682b      	ldr	r3, [r5, #0]
 80095ba:	1d1a      	adds	r2, r3, #4
 80095bc:	681b      	ldr	r3, [r3, #0]
 80095be:	602a      	str	r2, [r5, #0]
 80095c0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095c4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80095c8:	2301      	movs	r3, #1
 80095ca:	e09f      	b.n	800970c <_printf_i+0x1ec>
 80095cc:	6820      	ldr	r0, [r4, #0]
 80095ce:	682b      	ldr	r3, [r5, #0]
 80095d0:	0607      	lsls	r7, r0, #24
 80095d2:	f103 0104 	add.w	r1, r3, #4
 80095d6:	6029      	str	r1, [r5, #0]
 80095d8:	d501      	bpl.n	80095de <_printf_i+0xbe>
 80095da:	681e      	ldr	r6, [r3, #0]
 80095dc:	e003      	b.n	80095e6 <_printf_i+0xc6>
 80095de:	0646      	lsls	r6, r0, #25
 80095e0:	d5fb      	bpl.n	80095da <_printf_i+0xba>
 80095e2:	f9b3 6000 	ldrsh.w	r6, [r3]
 80095e6:	2e00      	cmp	r6, #0
 80095e8:	da03      	bge.n	80095f2 <_printf_i+0xd2>
 80095ea:	232d      	movs	r3, #45	; 0x2d
 80095ec:	4276      	negs	r6, r6
 80095ee:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80095f2:	485a      	ldr	r0, [pc, #360]	; (800975c <_printf_i+0x23c>)
 80095f4:	230a      	movs	r3, #10
 80095f6:	e012      	b.n	800961e <_printf_i+0xfe>
 80095f8:	682b      	ldr	r3, [r5, #0]
 80095fa:	6820      	ldr	r0, [r4, #0]
 80095fc:	1d19      	adds	r1, r3, #4
 80095fe:	6029      	str	r1, [r5, #0]
 8009600:	0605      	lsls	r5, r0, #24
 8009602:	d501      	bpl.n	8009608 <_printf_i+0xe8>
 8009604:	681e      	ldr	r6, [r3, #0]
 8009606:	e002      	b.n	800960e <_printf_i+0xee>
 8009608:	0641      	lsls	r1, r0, #25
 800960a:	d5fb      	bpl.n	8009604 <_printf_i+0xe4>
 800960c:	881e      	ldrh	r6, [r3, #0]
 800960e:	4853      	ldr	r0, [pc, #332]	; (800975c <_printf_i+0x23c>)
 8009610:	2f6f      	cmp	r7, #111	; 0x6f
 8009612:	bf0c      	ite	eq
 8009614:	2308      	moveq	r3, #8
 8009616:	230a      	movne	r3, #10
 8009618:	2100      	movs	r1, #0
 800961a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800961e:	6865      	ldr	r5, [r4, #4]
 8009620:	60a5      	str	r5, [r4, #8]
 8009622:	2d00      	cmp	r5, #0
 8009624:	bfa2      	ittt	ge
 8009626:	6821      	ldrge	r1, [r4, #0]
 8009628:	f021 0104 	bicge.w	r1, r1, #4
 800962c:	6021      	strge	r1, [r4, #0]
 800962e:	b90e      	cbnz	r6, 8009634 <_printf_i+0x114>
 8009630:	2d00      	cmp	r5, #0
 8009632:	d04b      	beq.n	80096cc <_printf_i+0x1ac>
 8009634:	4615      	mov	r5, r2
 8009636:	fbb6 f1f3 	udiv	r1, r6, r3
 800963a:	fb03 6711 	mls	r7, r3, r1, r6
 800963e:	5dc7      	ldrb	r7, [r0, r7]
 8009640:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009644:	4637      	mov	r7, r6
 8009646:	42bb      	cmp	r3, r7
 8009648:	460e      	mov	r6, r1
 800964a:	d9f4      	bls.n	8009636 <_printf_i+0x116>
 800964c:	2b08      	cmp	r3, #8
 800964e:	d10b      	bne.n	8009668 <_printf_i+0x148>
 8009650:	6823      	ldr	r3, [r4, #0]
 8009652:	07de      	lsls	r6, r3, #31
 8009654:	d508      	bpl.n	8009668 <_printf_i+0x148>
 8009656:	6923      	ldr	r3, [r4, #16]
 8009658:	6861      	ldr	r1, [r4, #4]
 800965a:	4299      	cmp	r1, r3
 800965c:	bfde      	ittt	le
 800965e:	2330      	movle	r3, #48	; 0x30
 8009660:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009664:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009668:	1b52      	subs	r2, r2, r5
 800966a:	6122      	str	r2, [r4, #16]
 800966c:	f8cd a000 	str.w	sl, [sp]
 8009670:	464b      	mov	r3, r9
 8009672:	aa03      	add	r2, sp, #12
 8009674:	4621      	mov	r1, r4
 8009676:	4640      	mov	r0, r8
 8009678:	f7ff fee4 	bl	8009444 <_printf_common>
 800967c:	3001      	adds	r0, #1
 800967e:	d14a      	bne.n	8009716 <_printf_i+0x1f6>
 8009680:	f04f 30ff 	mov.w	r0, #4294967295
 8009684:	b004      	add	sp, #16
 8009686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800968a:	6823      	ldr	r3, [r4, #0]
 800968c:	f043 0320 	orr.w	r3, r3, #32
 8009690:	6023      	str	r3, [r4, #0]
 8009692:	4833      	ldr	r0, [pc, #204]	; (8009760 <_printf_i+0x240>)
 8009694:	2778      	movs	r7, #120	; 0x78
 8009696:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800969a:	6823      	ldr	r3, [r4, #0]
 800969c:	6829      	ldr	r1, [r5, #0]
 800969e:	061f      	lsls	r7, r3, #24
 80096a0:	f851 6b04 	ldr.w	r6, [r1], #4
 80096a4:	d402      	bmi.n	80096ac <_printf_i+0x18c>
 80096a6:	065f      	lsls	r7, r3, #25
 80096a8:	bf48      	it	mi
 80096aa:	b2b6      	uxthmi	r6, r6
 80096ac:	07df      	lsls	r7, r3, #31
 80096ae:	bf48      	it	mi
 80096b0:	f043 0320 	orrmi.w	r3, r3, #32
 80096b4:	6029      	str	r1, [r5, #0]
 80096b6:	bf48      	it	mi
 80096b8:	6023      	strmi	r3, [r4, #0]
 80096ba:	b91e      	cbnz	r6, 80096c4 <_printf_i+0x1a4>
 80096bc:	6823      	ldr	r3, [r4, #0]
 80096be:	f023 0320 	bic.w	r3, r3, #32
 80096c2:	6023      	str	r3, [r4, #0]
 80096c4:	2310      	movs	r3, #16
 80096c6:	e7a7      	b.n	8009618 <_printf_i+0xf8>
 80096c8:	4824      	ldr	r0, [pc, #144]	; (800975c <_printf_i+0x23c>)
 80096ca:	e7e4      	b.n	8009696 <_printf_i+0x176>
 80096cc:	4615      	mov	r5, r2
 80096ce:	e7bd      	b.n	800964c <_printf_i+0x12c>
 80096d0:	682b      	ldr	r3, [r5, #0]
 80096d2:	6826      	ldr	r6, [r4, #0]
 80096d4:	6961      	ldr	r1, [r4, #20]
 80096d6:	1d18      	adds	r0, r3, #4
 80096d8:	6028      	str	r0, [r5, #0]
 80096da:	0635      	lsls	r5, r6, #24
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	d501      	bpl.n	80096e4 <_printf_i+0x1c4>
 80096e0:	6019      	str	r1, [r3, #0]
 80096e2:	e002      	b.n	80096ea <_printf_i+0x1ca>
 80096e4:	0670      	lsls	r0, r6, #25
 80096e6:	d5fb      	bpl.n	80096e0 <_printf_i+0x1c0>
 80096e8:	8019      	strh	r1, [r3, #0]
 80096ea:	2300      	movs	r3, #0
 80096ec:	6123      	str	r3, [r4, #16]
 80096ee:	4615      	mov	r5, r2
 80096f0:	e7bc      	b.n	800966c <_printf_i+0x14c>
 80096f2:	682b      	ldr	r3, [r5, #0]
 80096f4:	1d1a      	adds	r2, r3, #4
 80096f6:	602a      	str	r2, [r5, #0]
 80096f8:	681d      	ldr	r5, [r3, #0]
 80096fa:	6862      	ldr	r2, [r4, #4]
 80096fc:	2100      	movs	r1, #0
 80096fe:	4628      	mov	r0, r5
 8009700:	f7f6 fd96 	bl	8000230 <memchr>
 8009704:	b108      	cbz	r0, 800970a <_printf_i+0x1ea>
 8009706:	1b40      	subs	r0, r0, r5
 8009708:	6060      	str	r0, [r4, #4]
 800970a:	6863      	ldr	r3, [r4, #4]
 800970c:	6123      	str	r3, [r4, #16]
 800970e:	2300      	movs	r3, #0
 8009710:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009714:	e7aa      	b.n	800966c <_printf_i+0x14c>
 8009716:	6923      	ldr	r3, [r4, #16]
 8009718:	462a      	mov	r2, r5
 800971a:	4649      	mov	r1, r9
 800971c:	4640      	mov	r0, r8
 800971e:	47d0      	blx	sl
 8009720:	3001      	adds	r0, #1
 8009722:	d0ad      	beq.n	8009680 <_printf_i+0x160>
 8009724:	6823      	ldr	r3, [r4, #0]
 8009726:	079b      	lsls	r3, r3, #30
 8009728:	d413      	bmi.n	8009752 <_printf_i+0x232>
 800972a:	68e0      	ldr	r0, [r4, #12]
 800972c:	9b03      	ldr	r3, [sp, #12]
 800972e:	4298      	cmp	r0, r3
 8009730:	bfb8      	it	lt
 8009732:	4618      	movlt	r0, r3
 8009734:	e7a6      	b.n	8009684 <_printf_i+0x164>
 8009736:	2301      	movs	r3, #1
 8009738:	4632      	mov	r2, r6
 800973a:	4649      	mov	r1, r9
 800973c:	4640      	mov	r0, r8
 800973e:	47d0      	blx	sl
 8009740:	3001      	adds	r0, #1
 8009742:	d09d      	beq.n	8009680 <_printf_i+0x160>
 8009744:	3501      	adds	r5, #1
 8009746:	68e3      	ldr	r3, [r4, #12]
 8009748:	9903      	ldr	r1, [sp, #12]
 800974a:	1a5b      	subs	r3, r3, r1
 800974c:	42ab      	cmp	r3, r5
 800974e:	dcf2      	bgt.n	8009736 <_printf_i+0x216>
 8009750:	e7eb      	b.n	800972a <_printf_i+0x20a>
 8009752:	2500      	movs	r5, #0
 8009754:	f104 0619 	add.w	r6, r4, #25
 8009758:	e7f5      	b.n	8009746 <_printf_i+0x226>
 800975a:	bf00      	nop
 800975c:	0800d72e 	.word	0x0800d72e
 8009760:	0800d73f 	.word	0x0800d73f

08009764 <_scanf_float>:
 8009764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009768:	b087      	sub	sp, #28
 800976a:	4617      	mov	r7, r2
 800976c:	9303      	str	r3, [sp, #12]
 800976e:	688b      	ldr	r3, [r1, #8]
 8009770:	1e5a      	subs	r2, r3, #1
 8009772:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009776:	bf83      	ittte	hi
 8009778:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800977c:	195b      	addhi	r3, r3, r5
 800977e:	9302      	strhi	r3, [sp, #8]
 8009780:	2300      	movls	r3, #0
 8009782:	bf86      	itte	hi
 8009784:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009788:	608b      	strhi	r3, [r1, #8]
 800978a:	9302      	strls	r3, [sp, #8]
 800978c:	680b      	ldr	r3, [r1, #0]
 800978e:	468b      	mov	fp, r1
 8009790:	2500      	movs	r5, #0
 8009792:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009796:	f84b 3b1c 	str.w	r3, [fp], #28
 800979a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800979e:	4680      	mov	r8, r0
 80097a0:	460c      	mov	r4, r1
 80097a2:	465e      	mov	r6, fp
 80097a4:	46aa      	mov	sl, r5
 80097a6:	46a9      	mov	r9, r5
 80097a8:	9501      	str	r5, [sp, #4]
 80097aa:	68a2      	ldr	r2, [r4, #8]
 80097ac:	b152      	cbz	r2, 80097c4 <_scanf_float+0x60>
 80097ae:	683b      	ldr	r3, [r7, #0]
 80097b0:	781b      	ldrb	r3, [r3, #0]
 80097b2:	2b4e      	cmp	r3, #78	; 0x4e
 80097b4:	d864      	bhi.n	8009880 <_scanf_float+0x11c>
 80097b6:	2b40      	cmp	r3, #64	; 0x40
 80097b8:	d83c      	bhi.n	8009834 <_scanf_float+0xd0>
 80097ba:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80097be:	b2c8      	uxtb	r0, r1
 80097c0:	280e      	cmp	r0, #14
 80097c2:	d93a      	bls.n	800983a <_scanf_float+0xd6>
 80097c4:	f1b9 0f00 	cmp.w	r9, #0
 80097c8:	d003      	beq.n	80097d2 <_scanf_float+0x6e>
 80097ca:	6823      	ldr	r3, [r4, #0]
 80097cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80097d0:	6023      	str	r3, [r4, #0]
 80097d2:	f10a 3aff 	add.w	sl, sl, #4294967295
 80097d6:	f1ba 0f01 	cmp.w	sl, #1
 80097da:	f200 8113 	bhi.w	8009a04 <_scanf_float+0x2a0>
 80097de:	455e      	cmp	r6, fp
 80097e0:	f200 8105 	bhi.w	80099ee <_scanf_float+0x28a>
 80097e4:	2501      	movs	r5, #1
 80097e6:	4628      	mov	r0, r5
 80097e8:	b007      	add	sp, #28
 80097ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80097ee:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 80097f2:	2a0d      	cmp	r2, #13
 80097f4:	d8e6      	bhi.n	80097c4 <_scanf_float+0x60>
 80097f6:	a101      	add	r1, pc, #4	; (adr r1, 80097fc <_scanf_float+0x98>)
 80097f8:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80097fc:	0800993b 	.word	0x0800993b
 8009800:	080097c5 	.word	0x080097c5
 8009804:	080097c5 	.word	0x080097c5
 8009808:	080097c5 	.word	0x080097c5
 800980c:	0800999b 	.word	0x0800999b
 8009810:	08009973 	.word	0x08009973
 8009814:	080097c5 	.word	0x080097c5
 8009818:	080097c5 	.word	0x080097c5
 800981c:	08009949 	.word	0x08009949
 8009820:	080097c5 	.word	0x080097c5
 8009824:	080097c5 	.word	0x080097c5
 8009828:	080097c5 	.word	0x080097c5
 800982c:	080097c5 	.word	0x080097c5
 8009830:	08009901 	.word	0x08009901
 8009834:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8009838:	e7db      	b.n	80097f2 <_scanf_float+0x8e>
 800983a:	290e      	cmp	r1, #14
 800983c:	d8c2      	bhi.n	80097c4 <_scanf_float+0x60>
 800983e:	a001      	add	r0, pc, #4	; (adr r0, 8009844 <_scanf_float+0xe0>)
 8009840:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8009844:	080098f3 	.word	0x080098f3
 8009848:	080097c5 	.word	0x080097c5
 800984c:	080098f3 	.word	0x080098f3
 8009850:	08009987 	.word	0x08009987
 8009854:	080097c5 	.word	0x080097c5
 8009858:	080098a1 	.word	0x080098a1
 800985c:	080098dd 	.word	0x080098dd
 8009860:	080098dd 	.word	0x080098dd
 8009864:	080098dd 	.word	0x080098dd
 8009868:	080098dd 	.word	0x080098dd
 800986c:	080098dd 	.word	0x080098dd
 8009870:	080098dd 	.word	0x080098dd
 8009874:	080098dd 	.word	0x080098dd
 8009878:	080098dd 	.word	0x080098dd
 800987c:	080098dd 	.word	0x080098dd
 8009880:	2b6e      	cmp	r3, #110	; 0x6e
 8009882:	d809      	bhi.n	8009898 <_scanf_float+0x134>
 8009884:	2b60      	cmp	r3, #96	; 0x60
 8009886:	d8b2      	bhi.n	80097ee <_scanf_float+0x8a>
 8009888:	2b54      	cmp	r3, #84	; 0x54
 800988a:	d077      	beq.n	800997c <_scanf_float+0x218>
 800988c:	2b59      	cmp	r3, #89	; 0x59
 800988e:	d199      	bne.n	80097c4 <_scanf_float+0x60>
 8009890:	2d07      	cmp	r5, #7
 8009892:	d197      	bne.n	80097c4 <_scanf_float+0x60>
 8009894:	2508      	movs	r5, #8
 8009896:	e029      	b.n	80098ec <_scanf_float+0x188>
 8009898:	2b74      	cmp	r3, #116	; 0x74
 800989a:	d06f      	beq.n	800997c <_scanf_float+0x218>
 800989c:	2b79      	cmp	r3, #121	; 0x79
 800989e:	e7f6      	b.n	800988e <_scanf_float+0x12a>
 80098a0:	6821      	ldr	r1, [r4, #0]
 80098a2:	05c8      	lsls	r0, r1, #23
 80098a4:	d51a      	bpl.n	80098dc <_scanf_float+0x178>
 80098a6:	9b02      	ldr	r3, [sp, #8]
 80098a8:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80098ac:	6021      	str	r1, [r4, #0]
 80098ae:	f109 0901 	add.w	r9, r9, #1
 80098b2:	b11b      	cbz	r3, 80098bc <_scanf_float+0x158>
 80098b4:	3b01      	subs	r3, #1
 80098b6:	3201      	adds	r2, #1
 80098b8:	9302      	str	r3, [sp, #8]
 80098ba:	60a2      	str	r2, [r4, #8]
 80098bc:	68a3      	ldr	r3, [r4, #8]
 80098be:	3b01      	subs	r3, #1
 80098c0:	60a3      	str	r3, [r4, #8]
 80098c2:	6923      	ldr	r3, [r4, #16]
 80098c4:	3301      	adds	r3, #1
 80098c6:	6123      	str	r3, [r4, #16]
 80098c8:	687b      	ldr	r3, [r7, #4]
 80098ca:	3b01      	subs	r3, #1
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	607b      	str	r3, [r7, #4]
 80098d0:	f340 8084 	ble.w	80099dc <_scanf_float+0x278>
 80098d4:	683b      	ldr	r3, [r7, #0]
 80098d6:	3301      	adds	r3, #1
 80098d8:	603b      	str	r3, [r7, #0]
 80098da:	e766      	b.n	80097aa <_scanf_float+0x46>
 80098dc:	eb1a 0f05 	cmn.w	sl, r5
 80098e0:	f47f af70 	bne.w	80097c4 <_scanf_float+0x60>
 80098e4:	6822      	ldr	r2, [r4, #0]
 80098e6:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80098ea:	6022      	str	r2, [r4, #0]
 80098ec:	f806 3b01 	strb.w	r3, [r6], #1
 80098f0:	e7e4      	b.n	80098bc <_scanf_float+0x158>
 80098f2:	6822      	ldr	r2, [r4, #0]
 80098f4:	0610      	lsls	r0, r2, #24
 80098f6:	f57f af65 	bpl.w	80097c4 <_scanf_float+0x60>
 80098fa:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80098fe:	e7f4      	b.n	80098ea <_scanf_float+0x186>
 8009900:	f1ba 0f00 	cmp.w	sl, #0
 8009904:	d10e      	bne.n	8009924 <_scanf_float+0x1c0>
 8009906:	f1b9 0f00 	cmp.w	r9, #0
 800990a:	d10e      	bne.n	800992a <_scanf_float+0x1c6>
 800990c:	6822      	ldr	r2, [r4, #0]
 800990e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009912:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8009916:	d108      	bne.n	800992a <_scanf_float+0x1c6>
 8009918:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800991c:	6022      	str	r2, [r4, #0]
 800991e:	f04f 0a01 	mov.w	sl, #1
 8009922:	e7e3      	b.n	80098ec <_scanf_float+0x188>
 8009924:	f1ba 0f02 	cmp.w	sl, #2
 8009928:	d055      	beq.n	80099d6 <_scanf_float+0x272>
 800992a:	2d01      	cmp	r5, #1
 800992c:	d002      	beq.n	8009934 <_scanf_float+0x1d0>
 800992e:	2d04      	cmp	r5, #4
 8009930:	f47f af48 	bne.w	80097c4 <_scanf_float+0x60>
 8009934:	3501      	adds	r5, #1
 8009936:	b2ed      	uxtb	r5, r5
 8009938:	e7d8      	b.n	80098ec <_scanf_float+0x188>
 800993a:	f1ba 0f01 	cmp.w	sl, #1
 800993e:	f47f af41 	bne.w	80097c4 <_scanf_float+0x60>
 8009942:	f04f 0a02 	mov.w	sl, #2
 8009946:	e7d1      	b.n	80098ec <_scanf_float+0x188>
 8009948:	b97d      	cbnz	r5, 800996a <_scanf_float+0x206>
 800994a:	f1b9 0f00 	cmp.w	r9, #0
 800994e:	f47f af3c 	bne.w	80097ca <_scanf_float+0x66>
 8009952:	6822      	ldr	r2, [r4, #0]
 8009954:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8009958:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800995c:	f47f af39 	bne.w	80097d2 <_scanf_float+0x6e>
 8009960:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009964:	6022      	str	r2, [r4, #0]
 8009966:	2501      	movs	r5, #1
 8009968:	e7c0      	b.n	80098ec <_scanf_float+0x188>
 800996a:	2d03      	cmp	r5, #3
 800996c:	d0e2      	beq.n	8009934 <_scanf_float+0x1d0>
 800996e:	2d05      	cmp	r5, #5
 8009970:	e7de      	b.n	8009930 <_scanf_float+0x1cc>
 8009972:	2d02      	cmp	r5, #2
 8009974:	f47f af26 	bne.w	80097c4 <_scanf_float+0x60>
 8009978:	2503      	movs	r5, #3
 800997a:	e7b7      	b.n	80098ec <_scanf_float+0x188>
 800997c:	2d06      	cmp	r5, #6
 800997e:	f47f af21 	bne.w	80097c4 <_scanf_float+0x60>
 8009982:	2507      	movs	r5, #7
 8009984:	e7b2      	b.n	80098ec <_scanf_float+0x188>
 8009986:	6822      	ldr	r2, [r4, #0]
 8009988:	0591      	lsls	r1, r2, #22
 800998a:	f57f af1b 	bpl.w	80097c4 <_scanf_float+0x60>
 800998e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009992:	6022      	str	r2, [r4, #0]
 8009994:	f8cd 9004 	str.w	r9, [sp, #4]
 8009998:	e7a8      	b.n	80098ec <_scanf_float+0x188>
 800999a:	6822      	ldr	r2, [r4, #0]
 800999c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80099a0:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80099a4:	d006      	beq.n	80099b4 <_scanf_float+0x250>
 80099a6:	0550      	lsls	r0, r2, #21
 80099a8:	f57f af0c 	bpl.w	80097c4 <_scanf_float+0x60>
 80099ac:	f1b9 0f00 	cmp.w	r9, #0
 80099b0:	f43f af0f 	beq.w	80097d2 <_scanf_float+0x6e>
 80099b4:	0591      	lsls	r1, r2, #22
 80099b6:	bf58      	it	pl
 80099b8:	9901      	ldrpl	r1, [sp, #4]
 80099ba:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80099be:	bf58      	it	pl
 80099c0:	eba9 0101 	subpl.w	r1, r9, r1
 80099c4:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80099c8:	bf58      	it	pl
 80099ca:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80099ce:	6022      	str	r2, [r4, #0]
 80099d0:	f04f 0900 	mov.w	r9, #0
 80099d4:	e78a      	b.n	80098ec <_scanf_float+0x188>
 80099d6:	f04f 0a03 	mov.w	sl, #3
 80099da:	e787      	b.n	80098ec <_scanf_float+0x188>
 80099dc:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80099e0:	4639      	mov	r1, r7
 80099e2:	4640      	mov	r0, r8
 80099e4:	4798      	blx	r3
 80099e6:	2800      	cmp	r0, #0
 80099e8:	f43f aedf 	beq.w	80097aa <_scanf_float+0x46>
 80099ec:	e6ea      	b.n	80097c4 <_scanf_float+0x60>
 80099ee:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80099f2:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80099f6:	463a      	mov	r2, r7
 80099f8:	4640      	mov	r0, r8
 80099fa:	4798      	blx	r3
 80099fc:	6923      	ldr	r3, [r4, #16]
 80099fe:	3b01      	subs	r3, #1
 8009a00:	6123      	str	r3, [r4, #16]
 8009a02:	e6ec      	b.n	80097de <_scanf_float+0x7a>
 8009a04:	1e6b      	subs	r3, r5, #1
 8009a06:	2b06      	cmp	r3, #6
 8009a08:	d825      	bhi.n	8009a56 <_scanf_float+0x2f2>
 8009a0a:	2d02      	cmp	r5, #2
 8009a0c:	d836      	bhi.n	8009a7c <_scanf_float+0x318>
 8009a0e:	455e      	cmp	r6, fp
 8009a10:	f67f aee8 	bls.w	80097e4 <_scanf_float+0x80>
 8009a14:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a18:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a1c:	463a      	mov	r2, r7
 8009a1e:	4640      	mov	r0, r8
 8009a20:	4798      	blx	r3
 8009a22:	6923      	ldr	r3, [r4, #16]
 8009a24:	3b01      	subs	r3, #1
 8009a26:	6123      	str	r3, [r4, #16]
 8009a28:	e7f1      	b.n	8009a0e <_scanf_float+0x2aa>
 8009a2a:	9802      	ldr	r0, [sp, #8]
 8009a2c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a30:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009a34:	9002      	str	r0, [sp, #8]
 8009a36:	463a      	mov	r2, r7
 8009a38:	4640      	mov	r0, r8
 8009a3a:	4798      	blx	r3
 8009a3c:	6923      	ldr	r3, [r4, #16]
 8009a3e:	3b01      	subs	r3, #1
 8009a40:	6123      	str	r3, [r4, #16]
 8009a42:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009a46:	fa5f fa8a 	uxtb.w	sl, sl
 8009a4a:	f1ba 0f02 	cmp.w	sl, #2
 8009a4e:	d1ec      	bne.n	8009a2a <_scanf_float+0x2c6>
 8009a50:	3d03      	subs	r5, #3
 8009a52:	b2ed      	uxtb	r5, r5
 8009a54:	1b76      	subs	r6, r6, r5
 8009a56:	6823      	ldr	r3, [r4, #0]
 8009a58:	05da      	lsls	r2, r3, #23
 8009a5a:	d52f      	bpl.n	8009abc <_scanf_float+0x358>
 8009a5c:	055b      	lsls	r3, r3, #21
 8009a5e:	d510      	bpl.n	8009a82 <_scanf_float+0x31e>
 8009a60:	455e      	cmp	r6, fp
 8009a62:	f67f aebf 	bls.w	80097e4 <_scanf_float+0x80>
 8009a66:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a6a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a6e:	463a      	mov	r2, r7
 8009a70:	4640      	mov	r0, r8
 8009a72:	4798      	blx	r3
 8009a74:	6923      	ldr	r3, [r4, #16]
 8009a76:	3b01      	subs	r3, #1
 8009a78:	6123      	str	r3, [r4, #16]
 8009a7a:	e7f1      	b.n	8009a60 <_scanf_float+0x2fc>
 8009a7c:	46aa      	mov	sl, r5
 8009a7e:	9602      	str	r6, [sp, #8]
 8009a80:	e7df      	b.n	8009a42 <_scanf_float+0x2de>
 8009a82:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009a86:	6923      	ldr	r3, [r4, #16]
 8009a88:	2965      	cmp	r1, #101	; 0x65
 8009a8a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a8e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009a92:	6123      	str	r3, [r4, #16]
 8009a94:	d00c      	beq.n	8009ab0 <_scanf_float+0x34c>
 8009a96:	2945      	cmp	r1, #69	; 0x45
 8009a98:	d00a      	beq.n	8009ab0 <_scanf_float+0x34c>
 8009a9a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a9e:	463a      	mov	r2, r7
 8009aa0:	4640      	mov	r0, r8
 8009aa2:	4798      	blx	r3
 8009aa4:	6923      	ldr	r3, [r4, #16]
 8009aa6:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009aaa:	3b01      	subs	r3, #1
 8009aac:	1eb5      	subs	r5, r6, #2
 8009aae:	6123      	str	r3, [r4, #16]
 8009ab0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ab4:	463a      	mov	r2, r7
 8009ab6:	4640      	mov	r0, r8
 8009ab8:	4798      	blx	r3
 8009aba:	462e      	mov	r6, r5
 8009abc:	6825      	ldr	r5, [r4, #0]
 8009abe:	f015 0510 	ands.w	r5, r5, #16
 8009ac2:	d158      	bne.n	8009b76 <_scanf_float+0x412>
 8009ac4:	7035      	strb	r5, [r6, #0]
 8009ac6:	6823      	ldr	r3, [r4, #0]
 8009ac8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009acc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009ad0:	d11c      	bne.n	8009b0c <_scanf_float+0x3a8>
 8009ad2:	9b01      	ldr	r3, [sp, #4]
 8009ad4:	454b      	cmp	r3, r9
 8009ad6:	eba3 0209 	sub.w	r2, r3, r9
 8009ada:	d124      	bne.n	8009b26 <_scanf_float+0x3c2>
 8009adc:	2200      	movs	r2, #0
 8009ade:	4659      	mov	r1, fp
 8009ae0:	4640      	mov	r0, r8
 8009ae2:	f002 fc65 	bl	800c3b0 <_strtod_r>
 8009ae6:	9b03      	ldr	r3, [sp, #12]
 8009ae8:	6821      	ldr	r1, [r4, #0]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f011 0f02 	tst.w	r1, #2
 8009af0:	ec57 6b10 	vmov	r6, r7, d0
 8009af4:	f103 0204 	add.w	r2, r3, #4
 8009af8:	d020      	beq.n	8009b3c <_scanf_float+0x3d8>
 8009afa:	9903      	ldr	r1, [sp, #12]
 8009afc:	600a      	str	r2, [r1, #0]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	e9c3 6700 	strd	r6, r7, [r3]
 8009b04:	68e3      	ldr	r3, [r4, #12]
 8009b06:	3301      	adds	r3, #1
 8009b08:	60e3      	str	r3, [r4, #12]
 8009b0a:	e66c      	b.n	80097e6 <_scanf_float+0x82>
 8009b0c:	9b04      	ldr	r3, [sp, #16]
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d0e4      	beq.n	8009adc <_scanf_float+0x378>
 8009b12:	9905      	ldr	r1, [sp, #20]
 8009b14:	230a      	movs	r3, #10
 8009b16:	462a      	mov	r2, r5
 8009b18:	3101      	adds	r1, #1
 8009b1a:	4640      	mov	r0, r8
 8009b1c:	f002 fcd0 	bl	800c4c0 <_strtol_r>
 8009b20:	9b04      	ldr	r3, [sp, #16]
 8009b22:	9e05      	ldr	r6, [sp, #20]
 8009b24:	1ac2      	subs	r2, r0, r3
 8009b26:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009b2a:	429e      	cmp	r6, r3
 8009b2c:	bf28      	it	cs
 8009b2e:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009b32:	4912      	ldr	r1, [pc, #72]	; (8009b7c <_scanf_float+0x418>)
 8009b34:	4630      	mov	r0, r6
 8009b36:	f000 f91b 	bl	8009d70 <siprintf>
 8009b3a:	e7cf      	b.n	8009adc <_scanf_float+0x378>
 8009b3c:	f011 0f04 	tst.w	r1, #4
 8009b40:	9903      	ldr	r1, [sp, #12]
 8009b42:	600a      	str	r2, [r1, #0]
 8009b44:	d1db      	bne.n	8009afe <_scanf_float+0x39a>
 8009b46:	f8d3 8000 	ldr.w	r8, [r3]
 8009b4a:	ee10 2a10 	vmov	r2, s0
 8009b4e:	ee10 0a10 	vmov	r0, s0
 8009b52:	463b      	mov	r3, r7
 8009b54:	4639      	mov	r1, r7
 8009b56:	f7f7 f819 	bl	8000b8c <__aeabi_dcmpun>
 8009b5a:	b128      	cbz	r0, 8009b68 <_scanf_float+0x404>
 8009b5c:	4808      	ldr	r0, [pc, #32]	; (8009b80 <_scanf_float+0x41c>)
 8009b5e:	f000 f9eb 	bl	8009f38 <nanf>
 8009b62:	ed88 0a00 	vstr	s0, [r8]
 8009b66:	e7cd      	b.n	8009b04 <_scanf_float+0x3a0>
 8009b68:	4630      	mov	r0, r6
 8009b6a:	4639      	mov	r1, r7
 8009b6c:	f7f7 f86c 	bl	8000c48 <__aeabi_d2f>
 8009b70:	f8c8 0000 	str.w	r0, [r8]
 8009b74:	e7c6      	b.n	8009b04 <_scanf_float+0x3a0>
 8009b76:	2500      	movs	r5, #0
 8009b78:	e635      	b.n	80097e6 <_scanf_float+0x82>
 8009b7a:	bf00      	nop
 8009b7c:	0800d750 	.word	0x0800d750
 8009b80:	0800dae5 	.word	0x0800dae5

08009b84 <std>:
 8009b84:	2300      	movs	r3, #0
 8009b86:	b510      	push	{r4, lr}
 8009b88:	4604      	mov	r4, r0
 8009b8a:	e9c0 3300 	strd	r3, r3, [r0]
 8009b8e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009b92:	6083      	str	r3, [r0, #8]
 8009b94:	8181      	strh	r1, [r0, #12]
 8009b96:	6643      	str	r3, [r0, #100]	; 0x64
 8009b98:	81c2      	strh	r2, [r0, #14]
 8009b9a:	6183      	str	r3, [r0, #24]
 8009b9c:	4619      	mov	r1, r3
 8009b9e:	2208      	movs	r2, #8
 8009ba0:	305c      	adds	r0, #92	; 0x5c
 8009ba2:	f000 f948 	bl	8009e36 <memset>
 8009ba6:	4b0d      	ldr	r3, [pc, #52]	; (8009bdc <std+0x58>)
 8009ba8:	6263      	str	r3, [r4, #36]	; 0x24
 8009baa:	4b0d      	ldr	r3, [pc, #52]	; (8009be0 <std+0x5c>)
 8009bac:	62a3      	str	r3, [r4, #40]	; 0x28
 8009bae:	4b0d      	ldr	r3, [pc, #52]	; (8009be4 <std+0x60>)
 8009bb0:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009bb2:	4b0d      	ldr	r3, [pc, #52]	; (8009be8 <std+0x64>)
 8009bb4:	6323      	str	r3, [r4, #48]	; 0x30
 8009bb6:	4b0d      	ldr	r3, [pc, #52]	; (8009bec <std+0x68>)
 8009bb8:	6224      	str	r4, [r4, #32]
 8009bba:	429c      	cmp	r4, r3
 8009bbc:	d006      	beq.n	8009bcc <std+0x48>
 8009bbe:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009bc2:	4294      	cmp	r4, r2
 8009bc4:	d002      	beq.n	8009bcc <std+0x48>
 8009bc6:	33d0      	adds	r3, #208	; 0xd0
 8009bc8:	429c      	cmp	r4, r3
 8009bca:	d105      	bne.n	8009bd8 <std+0x54>
 8009bcc:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009bd0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009bd4:	f000 b9ac 	b.w	8009f30 <__retarget_lock_init_recursive>
 8009bd8:	bd10      	pop	{r4, pc}
 8009bda:	bf00      	nop
 8009bdc:	08009db1 	.word	0x08009db1
 8009be0:	08009dd3 	.word	0x08009dd3
 8009be4:	08009e0b 	.word	0x08009e0b
 8009be8:	08009e2f 	.word	0x08009e2f
 8009bec:	20000bd4 	.word	0x20000bd4

08009bf0 <stdio_exit_handler>:
 8009bf0:	4a02      	ldr	r2, [pc, #8]	; (8009bfc <stdio_exit_handler+0xc>)
 8009bf2:	4903      	ldr	r1, [pc, #12]	; (8009c00 <stdio_exit_handler+0x10>)
 8009bf4:	4803      	ldr	r0, [pc, #12]	; (8009c04 <stdio_exit_handler+0x14>)
 8009bf6:	f000 b869 	b.w	8009ccc <_fwalk_sglue>
 8009bfa:	bf00      	nop
 8009bfc:	20000020 	.word	0x20000020
 8009c00:	0800c881 	.word	0x0800c881
 8009c04:	2000002c 	.word	0x2000002c

08009c08 <cleanup_stdio>:
 8009c08:	6841      	ldr	r1, [r0, #4]
 8009c0a:	4b0c      	ldr	r3, [pc, #48]	; (8009c3c <cleanup_stdio+0x34>)
 8009c0c:	4299      	cmp	r1, r3
 8009c0e:	b510      	push	{r4, lr}
 8009c10:	4604      	mov	r4, r0
 8009c12:	d001      	beq.n	8009c18 <cleanup_stdio+0x10>
 8009c14:	f002 fe34 	bl	800c880 <_fflush_r>
 8009c18:	68a1      	ldr	r1, [r4, #8]
 8009c1a:	4b09      	ldr	r3, [pc, #36]	; (8009c40 <cleanup_stdio+0x38>)
 8009c1c:	4299      	cmp	r1, r3
 8009c1e:	d002      	beq.n	8009c26 <cleanup_stdio+0x1e>
 8009c20:	4620      	mov	r0, r4
 8009c22:	f002 fe2d 	bl	800c880 <_fflush_r>
 8009c26:	68e1      	ldr	r1, [r4, #12]
 8009c28:	4b06      	ldr	r3, [pc, #24]	; (8009c44 <cleanup_stdio+0x3c>)
 8009c2a:	4299      	cmp	r1, r3
 8009c2c:	d004      	beq.n	8009c38 <cleanup_stdio+0x30>
 8009c2e:	4620      	mov	r0, r4
 8009c30:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c34:	f002 be24 	b.w	800c880 <_fflush_r>
 8009c38:	bd10      	pop	{r4, pc}
 8009c3a:	bf00      	nop
 8009c3c:	20000bd4 	.word	0x20000bd4
 8009c40:	20000c3c 	.word	0x20000c3c
 8009c44:	20000ca4 	.word	0x20000ca4

08009c48 <global_stdio_init.part.0>:
 8009c48:	b510      	push	{r4, lr}
 8009c4a:	4b0b      	ldr	r3, [pc, #44]	; (8009c78 <global_stdio_init.part.0+0x30>)
 8009c4c:	4c0b      	ldr	r4, [pc, #44]	; (8009c7c <global_stdio_init.part.0+0x34>)
 8009c4e:	4a0c      	ldr	r2, [pc, #48]	; (8009c80 <global_stdio_init.part.0+0x38>)
 8009c50:	601a      	str	r2, [r3, #0]
 8009c52:	4620      	mov	r0, r4
 8009c54:	2200      	movs	r2, #0
 8009c56:	2104      	movs	r1, #4
 8009c58:	f7ff ff94 	bl	8009b84 <std>
 8009c5c:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009c60:	2201      	movs	r2, #1
 8009c62:	2109      	movs	r1, #9
 8009c64:	f7ff ff8e 	bl	8009b84 <std>
 8009c68:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009c6c:	2202      	movs	r2, #2
 8009c6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c72:	2112      	movs	r1, #18
 8009c74:	f7ff bf86 	b.w	8009b84 <std>
 8009c78:	20000d0c 	.word	0x20000d0c
 8009c7c:	20000bd4 	.word	0x20000bd4
 8009c80:	08009bf1 	.word	0x08009bf1

08009c84 <__sfp_lock_acquire>:
 8009c84:	4801      	ldr	r0, [pc, #4]	; (8009c8c <__sfp_lock_acquire+0x8>)
 8009c86:	f000 b954 	b.w	8009f32 <__retarget_lock_acquire_recursive>
 8009c8a:	bf00      	nop
 8009c8c:	20000d15 	.word	0x20000d15

08009c90 <__sfp_lock_release>:
 8009c90:	4801      	ldr	r0, [pc, #4]	; (8009c98 <__sfp_lock_release+0x8>)
 8009c92:	f000 b94f 	b.w	8009f34 <__retarget_lock_release_recursive>
 8009c96:	bf00      	nop
 8009c98:	20000d15 	.word	0x20000d15

08009c9c <__sinit>:
 8009c9c:	b510      	push	{r4, lr}
 8009c9e:	4604      	mov	r4, r0
 8009ca0:	f7ff fff0 	bl	8009c84 <__sfp_lock_acquire>
 8009ca4:	6a23      	ldr	r3, [r4, #32]
 8009ca6:	b11b      	cbz	r3, 8009cb0 <__sinit+0x14>
 8009ca8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cac:	f7ff bff0 	b.w	8009c90 <__sfp_lock_release>
 8009cb0:	4b04      	ldr	r3, [pc, #16]	; (8009cc4 <__sinit+0x28>)
 8009cb2:	6223      	str	r3, [r4, #32]
 8009cb4:	4b04      	ldr	r3, [pc, #16]	; (8009cc8 <__sinit+0x2c>)
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	2b00      	cmp	r3, #0
 8009cba:	d1f5      	bne.n	8009ca8 <__sinit+0xc>
 8009cbc:	f7ff ffc4 	bl	8009c48 <global_stdio_init.part.0>
 8009cc0:	e7f2      	b.n	8009ca8 <__sinit+0xc>
 8009cc2:	bf00      	nop
 8009cc4:	08009c09 	.word	0x08009c09
 8009cc8:	20000d0c 	.word	0x20000d0c

08009ccc <_fwalk_sglue>:
 8009ccc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cd0:	4607      	mov	r7, r0
 8009cd2:	4688      	mov	r8, r1
 8009cd4:	4614      	mov	r4, r2
 8009cd6:	2600      	movs	r6, #0
 8009cd8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009cdc:	f1b9 0901 	subs.w	r9, r9, #1
 8009ce0:	d505      	bpl.n	8009cee <_fwalk_sglue+0x22>
 8009ce2:	6824      	ldr	r4, [r4, #0]
 8009ce4:	2c00      	cmp	r4, #0
 8009ce6:	d1f7      	bne.n	8009cd8 <_fwalk_sglue+0xc>
 8009ce8:	4630      	mov	r0, r6
 8009cea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cee:	89ab      	ldrh	r3, [r5, #12]
 8009cf0:	2b01      	cmp	r3, #1
 8009cf2:	d907      	bls.n	8009d04 <_fwalk_sglue+0x38>
 8009cf4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009cf8:	3301      	adds	r3, #1
 8009cfa:	d003      	beq.n	8009d04 <_fwalk_sglue+0x38>
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	4638      	mov	r0, r7
 8009d00:	47c0      	blx	r8
 8009d02:	4306      	orrs	r6, r0
 8009d04:	3568      	adds	r5, #104	; 0x68
 8009d06:	e7e9      	b.n	8009cdc <_fwalk_sglue+0x10>

08009d08 <sniprintf>:
 8009d08:	b40c      	push	{r2, r3}
 8009d0a:	b530      	push	{r4, r5, lr}
 8009d0c:	4b17      	ldr	r3, [pc, #92]	; (8009d6c <sniprintf+0x64>)
 8009d0e:	1e0c      	subs	r4, r1, #0
 8009d10:	681d      	ldr	r5, [r3, #0]
 8009d12:	b09d      	sub	sp, #116	; 0x74
 8009d14:	da08      	bge.n	8009d28 <sniprintf+0x20>
 8009d16:	238b      	movs	r3, #139	; 0x8b
 8009d18:	602b      	str	r3, [r5, #0]
 8009d1a:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1e:	b01d      	add	sp, #116	; 0x74
 8009d20:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009d24:	b002      	add	sp, #8
 8009d26:	4770      	bx	lr
 8009d28:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009d2c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009d30:	bf14      	ite	ne
 8009d32:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009d36:	4623      	moveq	r3, r4
 8009d38:	9304      	str	r3, [sp, #16]
 8009d3a:	9307      	str	r3, [sp, #28]
 8009d3c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009d40:	9002      	str	r0, [sp, #8]
 8009d42:	9006      	str	r0, [sp, #24]
 8009d44:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009d48:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009d4a:	ab21      	add	r3, sp, #132	; 0x84
 8009d4c:	a902      	add	r1, sp, #8
 8009d4e:	4628      	mov	r0, r5
 8009d50:	9301      	str	r3, [sp, #4]
 8009d52:	f002 fc11 	bl	800c578 <_svfiprintf_r>
 8009d56:	1c43      	adds	r3, r0, #1
 8009d58:	bfbc      	itt	lt
 8009d5a:	238b      	movlt	r3, #139	; 0x8b
 8009d5c:	602b      	strlt	r3, [r5, #0]
 8009d5e:	2c00      	cmp	r4, #0
 8009d60:	d0dd      	beq.n	8009d1e <sniprintf+0x16>
 8009d62:	9b02      	ldr	r3, [sp, #8]
 8009d64:	2200      	movs	r2, #0
 8009d66:	701a      	strb	r2, [r3, #0]
 8009d68:	e7d9      	b.n	8009d1e <sniprintf+0x16>
 8009d6a:	bf00      	nop
 8009d6c:	20000078 	.word	0x20000078

08009d70 <siprintf>:
 8009d70:	b40e      	push	{r1, r2, r3}
 8009d72:	b500      	push	{lr}
 8009d74:	b09c      	sub	sp, #112	; 0x70
 8009d76:	ab1d      	add	r3, sp, #116	; 0x74
 8009d78:	9002      	str	r0, [sp, #8]
 8009d7a:	9006      	str	r0, [sp, #24]
 8009d7c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009d80:	4809      	ldr	r0, [pc, #36]	; (8009da8 <siprintf+0x38>)
 8009d82:	9107      	str	r1, [sp, #28]
 8009d84:	9104      	str	r1, [sp, #16]
 8009d86:	4909      	ldr	r1, [pc, #36]	; (8009dac <siprintf+0x3c>)
 8009d88:	f853 2b04 	ldr.w	r2, [r3], #4
 8009d8c:	9105      	str	r1, [sp, #20]
 8009d8e:	6800      	ldr	r0, [r0, #0]
 8009d90:	9301      	str	r3, [sp, #4]
 8009d92:	a902      	add	r1, sp, #8
 8009d94:	f002 fbf0 	bl	800c578 <_svfiprintf_r>
 8009d98:	9b02      	ldr	r3, [sp, #8]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	701a      	strb	r2, [r3, #0]
 8009d9e:	b01c      	add	sp, #112	; 0x70
 8009da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8009da4:	b003      	add	sp, #12
 8009da6:	4770      	bx	lr
 8009da8:	20000078 	.word	0x20000078
 8009dac:	ffff0208 	.word	0xffff0208

08009db0 <__sread>:
 8009db0:	b510      	push	{r4, lr}
 8009db2:	460c      	mov	r4, r1
 8009db4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009db8:	f000 f86c 	bl	8009e94 <_read_r>
 8009dbc:	2800      	cmp	r0, #0
 8009dbe:	bfab      	itete	ge
 8009dc0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009dc2:	89a3      	ldrhlt	r3, [r4, #12]
 8009dc4:	181b      	addge	r3, r3, r0
 8009dc6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009dca:	bfac      	ite	ge
 8009dcc:	6563      	strge	r3, [r4, #84]	; 0x54
 8009dce:	81a3      	strhlt	r3, [r4, #12]
 8009dd0:	bd10      	pop	{r4, pc}

08009dd2 <__swrite>:
 8009dd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009dd6:	461f      	mov	r7, r3
 8009dd8:	898b      	ldrh	r3, [r1, #12]
 8009dda:	05db      	lsls	r3, r3, #23
 8009ddc:	4605      	mov	r5, r0
 8009dde:	460c      	mov	r4, r1
 8009de0:	4616      	mov	r6, r2
 8009de2:	d505      	bpl.n	8009df0 <__swrite+0x1e>
 8009de4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009de8:	2302      	movs	r3, #2
 8009dea:	2200      	movs	r2, #0
 8009dec:	f000 f840 	bl	8009e70 <_lseek_r>
 8009df0:	89a3      	ldrh	r3, [r4, #12]
 8009df2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009df6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009dfa:	81a3      	strh	r3, [r4, #12]
 8009dfc:	4632      	mov	r2, r6
 8009dfe:	463b      	mov	r3, r7
 8009e00:	4628      	mov	r0, r5
 8009e02:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e06:	f000 b857 	b.w	8009eb8 <_write_r>

08009e0a <__sseek>:
 8009e0a:	b510      	push	{r4, lr}
 8009e0c:	460c      	mov	r4, r1
 8009e0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e12:	f000 f82d 	bl	8009e70 <_lseek_r>
 8009e16:	1c43      	adds	r3, r0, #1
 8009e18:	89a3      	ldrh	r3, [r4, #12]
 8009e1a:	bf15      	itete	ne
 8009e1c:	6560      	strne	r0, [r4, #84]	; 0x54
 8009e1e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009e22:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009e26:	81a3      	strheq	r3, [r4, #12]
 8009e28:	bf18      	it	ne
 8009e2a:	81a3      	strhne	r3, [r4, #12]
 8009e2c:	bd10      	pop	{r4, pc}

08009e2e <__sclose>:
 8009e2e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e32:	f000 b80d 	b.w	8009e50 <_close_r>

08009e36 <memset>:
 8009e36:	4402      	add	r2, r0
 8009e38:	4603      	mov	r3, r0
 8009e3a:	4293      	cmp	r3, r2
 8009e3c:	d100      	bne.n	8009e40 <memset+0xa>
 8009e3e:	4770      	bx	lr
 8009e40:	f803 1b01 	strb.w	r1, [r3], #1
 8009e44:	e7f9      	b.n	8009e3a <memset+0x4>
	...

08009e48 <_localeconv_r>:
 8009e48:	4800      	ldr	r0, [pc, #0]	; (8009e4c <_localeconv_r+0x4>)
 8009e4a:	4770      	bx	lr
 8009e4c:	2000016c 	.word	0x2000016c

08009e50 <_close_r>:
 8009e50:	b538      	push	{r3, r4, r5, lr}
 8009e52:	4d06      	ldr	r5, [pc, #24]	; (8009e6c <_close_r+0x1c>)
 8009e54:	2300      	movs	r3, #0
 8009e56:	4604      	mov	r4, r0
 8009e58:	4608      	mov	r0, r1
 8009e5a:	602b      	str	r3, [r5, #0]
 8009e5c:	f7f7 ff61 	bl	8001d22 <_close>
 8009e60:	1c43      	adds	r3, r0, #1
 8009e62:	d102      	bne.n	8009e6a <_close_r+0x1a>
 8009e64:	682b      	ldr	r3, [r5, #0]
 8009e66:	b103      	cbz	r3, 8009e6a <_close_r+0x1a>
 8009e68:	6023      	str	r3, [r4, #0]
 8009e6a:	bd38      	pop	{r3, r4, r5, pc}
 8009e6c:	20000d10 	.word	0x20000d10

08009e70 <_lseek_r>:
 8009e70:	b538      	push	{r3, r4, r5, lr}
 8009e72:	4d07      	ldr	r5, [pc, #28]	; (8009e90 <_lseek_r+0x20>)
 8009e74:	4604      	mov	r4, r0
 8009e76:	4608      	mov	r0, r1
 8009e78:	4611      	mov	r1, r2
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	602a      	str	r2, [r5, #0]
 8009e7e:	461a      	mov	r2, r3
 8009e80:	f7f7 ff76 	bl	8001d70 <_lseek>
 8009e84:	1c43      	adds	r3, r0, #1
 8009e86:	d102      	bne.n	8009e8e <_lseek_r+0x1e>
 8009e88:	682b      	ldr	r3, [r5, #0]
 8009e8a:	b103      	cbz	r3, 8009e8e <_lseek_r+0x1e>
 8009e8c:	6023      	str	r3, [r4, #0]
 8009e8e:	bd38      	pop	{r3, r4, r5, pc}
 8009e90:	20000d10 	.word	0x20000d10

08009e94 <_read_r>:
 8009e94:	b538      	push	{r3, r4, r5, lr}
 8009e96:	4d07      	ldr	r5, [pc, #28]	; (8009eb4 <_read_r+0x20>)
 8009e98:	4604      	mov	r4, r0
 8009e9a:	4608      	mov	r0, r1
 8009e9c:	4611      	mov	r1, r2
 8009e9e:	2200      	movs	r2, #0
 8009ea0:	602a      	str	r2, [r5, #0]
 8009ea2:	461a      	mov	r2, r3
 8009ea4:	f7f7 ff04 	bl	8001cb0 <_read>
 8009ea8:	1c43      	adds	r3, r0, #1
 8009eaa:	d102      	bne.n	8009eb2 <_read_r+0x1e>
 8009eac:	682b      	ldr	r3, [r5, #0]
 8009eae:	b103      	cbz	r3, 8009eb2 <_read_r+0x1e>
 8009eb0:	6023      	str	r3, [r4, #0]
 8009eb2:	bd38      	pop	{r3, r4, r5, pc}
 8009eb4:	20000d10 	.word	0x20000d10

08009eb8 <_write_r>:
 8009eb8:	b538      	push	{r3, r4, r5, lr}
 8009eba:	4d07      	ldr	r5, [pc, #28]	; (8009ed8 <_write_r+0x20>)
 8009ebc:	4604      	mov	r4, r0
 8009ebe:	4608      	mov	r0, r1
 8009ec0:	4611      	mov	r1, r2
 8009ec2:	2200      	movs	r2, #0
 8009ec4:	602a      	str	r2, [r5, #0]
 8009ec6:	461a      	mov	r2, r3
 8009ec8:	f7f7 ff0f 	bl	8001cea <_write>
 8009ecc:	1c43      	adds	r3, r0, #1
 8009ece:	d102      	bne.n	8009ed6 <_write_r+0x1e>
 8009ed0:	682b      	ldr	r3, [r5, #0]
 8009ed2:	b103      	cbz	r3, 8009ed6 <_write_r+0x1e>
 8009ed4:	6023      	str	r3, [r4, #0]
 8009ed6:	bd38      	pop	{r3, r4, r5, pc}
 8009ed8:	20000d10 	.word	0x20000d10

08009edc <__errno>:
 8009edc:	4b01      	ldr	r3, [pc, #4]	; (8009ee4 <__errno+0x8>)
 8009ede:	6818      	ldr	r0, [r3, #0]
 8009ee0:	4770      	bx	lr
 8009ee2:	bf00      	nop
 8009ee4:	20000078 	.word	0x20000078

08009ee8 <__libc_init_array>:
 8009ee8:	b570      	push	{r4, r5, r6, lr}
 8009eea:	4d0d      	ldr	r5, [pc, #52]	; (8009f20 <__libc_init_array+0x38>)
 8009eec:	4c0d      	ldr	r4, [pc, #52]	; (8009f24 <__libc_init_array+0x3c>)
 8009eee:	1b64      	subs	r4, r4, r5
 8009ef0:	10a4      	asrs	r4, r4, #2
 8009ef2:	2600      	movs	r6, #0
 8009ef4:	42a6      	cmp	r6, r4
 8009ef6:	d109      	bne.n	8009f0c <__libc_init_array+0x24>
 8009ef8:	4d0b      	ldr	r5, [pc, #44]	; (8009f28 <__libc_init_array+0x40>)
 8009efa:	4c0c      	ldr	r4, [pc, #48]	; (8009f2c <__libc_init_array+0x44>)
 8009efc:	f003 fbd8 	bl	800d6b0 <_init>
 8009f00:	1b64      	subs	r4, r4, r5
 8009f02:	10a4      	asrs	r4, r4, #2
 8009f04:	2600      	movs	r6, #0
 8009f06:	42a6      	cmp	r6, r4
 8009f08:	d105      	bne.n	8009f16 <__libc_init_array+0x2e>
 8009f0a:	bd70      	pop	{r4, r5, r6, pc}
 8009f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f10:	4798      	blx	r3
 8009f12:	3601      	adds	r6, #1
 8009f14:	e7ee      	b.n	8009ef4 <__libc_init_array+0xc>
 8009f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f1a:	4798      	blx	r3
 8009f1c:	3601      	adds	r6, #1
 8009f1e:	e7f2      	b.n	8009f06 <__libc_init_array+0x1e>
 8009f20:	0800db50 	.word	0x0800db50
 8009f24:	0800db50 	.word	0x0800db50
 8009f28:	0800db50 	.word	0x0800db50
 8009f2c:	0800db54 	.word	0x0800db54

08009f30 <__retarget_lock_init_recursive>:
 8009f30:	4770      	bx	lr

08009f32 <__retarget_lock_acquire_recursive>:
 8009f32:	4770      	bx	lr

08009f34 <__retarget_lock_release_recursive>:
 8009f34:	4770      	bx	lr
	...

08009f38 <nanf>:
 8009f38:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009f40 <nanf+0x8>
 8009f3c:	4770      	bx	lr
 8009f3e:	bf00      	nop
 8009f40:	7fc00000 	.word	0x7fc00000

08009f44 <quorem>:
 8009f44:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009f48:	6903      	ldr	r3, [r0, #16]
 8009f4a:	690c      	ldr	r4, [r1, #16]
 8009f4c:	42a3      	cmp	r3, r4
 8009f4e:	4607      	mov	r7, r0
 8009f50:	db7e      	blt.n	800a050 <quorem+0x10c>
 8009f52:	3c01      	subs	r4, #1
 8009f54:	f101 0814 	add.w	r8, r1, #20
 8009f58:	f100 0514 	add.w	r5, r0, #20
 8009f5c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009f60:	9301      	str	r3, [sp, #4]
 8009f62:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009f66:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009f6a:	3301      	adds	r3, #1
 8009f6c:	429a      	cmp	r2, r3
 8009f6e:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009f72:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009f76:	fbb2 f6f3 	udiv	r6, r2, r3
 8009f7a:	d331      	bcc.n	8009fe0 <quorem+0x9c>
 8009f7c:	f04f 0e00 	mov.w	lr, #0
 8009f80:	4640      	mov	r0, r8
 8009f82:	46ac      	mov	ip, r5
 8009f84:	46f2      	mov	sl, lr
 8009f86:	f850 2b04 	ldr.w	r2, [r0], #4
 8009f8a:	b293      	uxth	r3, r2
 8009f8c:	fb06 e303 	mla	r3, r6, r3, lr
 8009f90:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009f94:	0c1a      	lsrs	r2, r3, #16
 8009f96:	b29b      	uxth	r3, r3
 8009f98:	ebaa 0303 	sub.w	r3, sl, r3
 8009f9c:	f8dc a000 	ldr.w	sl, [ip]
 8009fa0:	fa13 f38a 	uxtah	r3, r3, sl
 8009fa4:	fb06 220e 	mla	r2, r6, lr, r2
 8009fa8:	9300      	str	r3, [sp, #0]
 8009faa:	9b00      	ldr	r3, [sp, #0]
 8009fac:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8009fb0:	b292      	uxth	r2, r2
 8009fb2:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009fb6:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009fba:	f8bd 3000 	ldrh.w	r3, [sp]
 8009fbe:	4581      	cmp	r9, r0
 8009fc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009fc4:	f84c 3b04 	str.w	r3, [ip], #4
 8009fc8:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009fcc:	d2db      	bcs.n	8009f86 <quorem+0x42>
 8009fce:	f855 300b 	ldr.w	r3, [r5, fp]
 8009fd2:	b92b      	cbnz	r3, 8009fe0 <quorem+0x9c>
 8009fd4:	9b01      	ldr	r3, [sp, #4]
 8009fd6:	3b04      	subs	r3, #4
 8009fd8:	429d      	cmp	r5, r3
 8009fda:	461a      	mov	r2, r3
 8009fdc:	d32c      	bcc.n	800a038 <quorem+0xf4>
 8009fde:	613c      	str	r4, [r7, #16]
 8009fe0:	4638      	mov	r0, r7
 8009fe2:	f001 f9f1 	bl	800b3c8 <__mcmp>
 8009fe6:	2800      	cmp	r0, #0
 8009fe8:	db22      	blt.n	800a030 <quorem+0xec>
 8009fea:	3601      	adds	r6, #1
 8009fec:	4629      	mov	r1, r5
 8009fee:	2000      	movs	r0, #0
 8009ff0:	f858 2b04 	ldr.w	r2, [r8], #4
 8009ff4:	f8d1 c000 	ldr.w	ip, [r1]
 8009ff8:	b293      	uxth	r3, r2
 8009ffa:	1ac3      	subs	r3, r0, r3
 8009ffc:	0c12      	lsrs	r2, r2, #16
 8009ffe:	fa13 f38c 	uxtah	r3, r3, ip
 800a002:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a006:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a00a:	b29b      	uxth	r3, r3
 800a00c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a010:	45c1      	cmp	r9, r8
 800a012:	f841 3b04 	str.w	r3, [r1], #4
 800a016:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a01a:	d2e9      	bcs.n	8009ff0 <quorem+0xac>
 800a01c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a020:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a024:	b922      	cbnz	r2, 800a030 <quorem+0xec>
 800a026:	3b04      	subs	r3, #4
 800a028:	429d      	cmp	r5, r3
 800a02a:	461a      	mov	r2, r3
 800a02c:	d30a      	bcc.n	800a044 <quorem+0x100>
 800a02e:	613c      	str	r4, [r7, #16]
 800a030:	4630      	mov	r0, r6
 800a032:	b003      	add	sp, #12
 800a034:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a038:	6812      	ldr	r2, [r2, #0]
 800a03a:	3b04      	subs	r3, #4
 800a03c:	2a00      	cmp	r2, #0
 800a03e:	d1ce      	bne.n	8009fde <quorem+0x9a>
 800a040:	3c01      	subs	r4, #1
 800a042:	e7c9      	b.n	8009fd8 <quorem+0x94>
 800a044:	6812      	ldr	r2, [r2, #0]
 800a046:	3b04      	subs	r3, #4
 800a048:	2a00      	cmp	r2, #0
 800a04a:	d1f0      	bne.n	800a02e <quorem+0xea>
 800a04c:	3c01      	subs	r4, #1
 800a04e:	e7eb      	b.n	800a028 <quorem+0xe4>
 800a050:	2000      	movs	r0, #0
 800a052:	e7ee      	b.n	800a032 <quorem+0xee>
 800a054:	0000      	movs	r0, r0
	...

0800a058 <_dtoa_r>:
 800a058:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a05c:	ed2d 8b04 	vpush	{d8-d9}
 800a060:	69c5      	ldr	r5, [r0, #28]
 800a062:	b093      	sub	sp, #76	; 0x4c
 800a064:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a068:	ec57 6b10 	vmov	r6, r7, d0
 800a06c:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a070:	9107      	str	r1, [sp, #28]
 800a072:	4604      	mov	r4, r0
 800a074:	920a      	str	r2, [sp, #40]	; 0x28
 800a076:	930d      	str	r3, [sp, #52]	; 0x34
 800a078:	b975      	cbnz	r5, 800a098 <_dtoa_r+0x40>
 800a07a:	2010      	movs	r0, #16
 800a07c:	f000 fe2a 	bl	800acd4 <malloc>
 800a080:	4602      	mov	r2, r0
 800a082:	61e0      	str	r0, [r4, #28]
 800a084:	b920      	cbnz	r0, 800a090 <_dtoa_r+0x38>
 800a086:	4bae      	ldr	r3, [pc, #696]	; (800a340 <_dtoa_r+0x2e8>)
 800a088:	21ef      	movs	r1, #239	; 0xef
 800a08a:	48ae      	ldr	r0, [pc, #696]	; (800a344 <_dtoa_r+0x2ec>)
 800a08c:	f002 fc74 	bl	800c978 <__assert_func>
 800a090:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a094:	6005      	str	r5, [r0, #0]
 800a096:	60c5      	str	r5, [r0, #12]
 800a098:	69e3      	ldr	r3, [r4, #28]
 800a09a:	6819      	ldr	r1, [r3, #0]
 800a09c:	b151      	cbz	r1, 800a0b4 <_dtoa_r+0x5c>
 800a09e:	685a      	ldr	r2, [r3, #4]
 800a0a0:	604a      	str	r2, [r1, #4]
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	4093      	lsls	r3, r2
 800a0a6:	608b      	str	r3, [r1, #8]
 800a0a8:	4620      	mov	r0, r4
 800a0aa:	f000 ff07 	bl	800aebc <_Bfree>
 800a0ae:	69e3      	ldr	r3, [r4, #28]
 800a0b0:	2200      	movs	r2, #0
 800a0b2:	601a      	str	r2, [r3, #0]
 800a0b4:	1e3b      	subs	r3, r7, #0
 800a0b6:	bfbb      	ittet	lt
 800a0b8:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a0bc:	9303      	strlt	r3, [sp, #12]
 800a0be:	2300      	movge	r3, #0
 800a0c0:	2201      	movlt	r2, #1
 800a0c2:	bfac      	ite	ge
 800a0c4:	f8c8 3000 	strge.w	r3, [r8]
 800a0c8:	f8c8 2000 	strlt.w	r2, [r8]
 800a0cc:	4b9e      	ldr	r3, [pc, #632]	; (800a348 <_dtoa_r+0x2f0>)
 800a0ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a0d2:	ea33 0308 	bics.w	r3, r3, r8
 800a0d6:	d11b      	bne.n	800a110 <_dtoa_r+0xb8>
 800a0d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a0da:	f242 730f 	movw	r3, #9999	; 0x270f
 800a0de:	6013      	str	r3, [r2, #0]
 800a0e0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a0e4:	4333      	orrs	r3, r6
 800a0e6:	f000 8593 	beq.w	800ac10 <_dtoa_r+0xbb8>
 800a0ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a0ec:	b963      	cbnz	r3, 800a108 <_dtoa_r+0xb0>
 800a0ee:	4b97      	ldr	r3, [pc, #604]	; (800a34c <_dtoa_r+0x2f4>)
 800a0f0:	e027      	b.n	800a142 <_dtoa_r+0xea>
 800a0f2:	4b97      	ldr	r3, [pc, #604]	; (800a350 <_dtoa_r+0x2f8>)
 800a0f4:	9300      	str	r3, [sp, #0]
 800a0f6:	3308      	adds	r3, #8
 800a0f8:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a0fa:	6013      	str	r3, [r2, #0]
 800a0fc:	9800      	ldr	r0, [sp, #0]
 800a0fe:	b013      	add	sp, #76	; 0x4c
 800a100:	ecbd 8b04 	vpop	{d8-d9}
 800a104:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a108:	4b90      	ldr	r3, [pc, #576]	; (800a34c <_dtoa_r+0x2f4>)
 800a10a:	9300      	str	r3, [sp, #0]
 800a10c:	3303      	adds	r3, #3
 800a10e:	e7f3      	b.n	800a0f8 <_dtoa_r+0xa0>
 800a110:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a114:	2200      	movs	r2, #0
 800a116:	ec51 0b17 	vmov	r0, r1, d7
 800a11a:	eeb0 8a47 	vmov.f32	s16, s14
 800a11e:	eef0 8a67 	vmov.f32	s17, s15
 800a122:	2300      	movs	r3, #0
 800a124:	f7f6 fd00 	bl	8000b28 <__aeabi_dcmpeq>
 800a128:	4681      	mov	r9, r0
 800a12a:	b160      	cbz	r0, 800a146 <_dtoa_r+0xee>
 800a12c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a12e:	2301      	movs	r3, #1
 800a130:	6013      	str	r3, [r2, #0]
 800a132:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a134:	2b00      	cmp	r3, #0
 800a136:	f000 8568 	beq.w	800ac0a <_dtoa_r+0xbb2>
 800a13a:	4b86      	ldr	r3, [pc, #536]	; (800a354 <_dtoa_r+0x2fc>)
 800a13c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a13e:	6013      	str	r3, [r2, #0]
 800a140:	3b01      	subs	r3, #1
 800a142:	9300      	str	r3, [sp, #0]
 800a144:	e7da      	b.n	800a0fc <_dtoa_r+0xa4>
 800a146:	aa10      	add	r2, sp, #64	; 0x40
 800a148:	a911      	add	r1, sp, #68	; 0x44
 800a14a:	4620      	mov	r0, r4
 800a14c:	eeb0 0a48 	vmov.f32	s0, s16
 800a150:	eef0 0a68 	vmov.f32	s1, s17
 800a154:	f001 fa4e 	bl	800b5f4 <__d2b>
 800a158:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a15c:	4682      	mov	sl, r0
 800a15e:	2d00      	cmp	r5, #0
 800a160:	d07f      	beq.n	800a262 <_dtoa_r+0x20a>
 800a162:	ee18 3a90 	vmov	r3, s17
 800a166:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a16a:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a16e:	ec51 0b18 	vmov	r0, r1, d8
 800a172:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a176:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a17a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a17e:	4619      	mov	r1, r3
 800a180:	2200      	movs	r2, #0
 800a182:	4b75      	ldr	r3, [pc, #468]	; (800a358 <_dtoa_r+0x300>)
 800a184:	f7f6 f8b0 	bl	80002e8 <__aeabi_dsub>
 800a188:	a367      	add	r3, pc, #412	; (adr r3, 800a328 <_dtoa_r+0x2d0>)
 800a18a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a18e:	f7f6 fa63 	bl	8000658 <__aeabi_dmul>
 800a192:	a367      	add	r3, pc, #412	; (adr r3, 800a330 <_dtoa_r+0x2d8>)
 800a194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a198:	f7f6 f8a8 	bl	80002ec <__adddf3>
 800a19c:	4606      	mov	r6, r0
 800a19e:	4628      	mov	r0, r5
 800a1a0:	460f      	mov	r7, r1
 800a1a2:	f7f6 f9ef 	bl	8000584 <__aeabi_i2d>
 800a1a6:	a364      	add	r3, pc, #400	; (adr r3, 800a338 <_dtoa_r+0x2e0>)
 800a1a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1ac:	f7f6 fa54 	bl	8000658 <__aeabi_dmul>
 800a1b0:	4602      	mov	r2, r0
 800a1b2:	460b      	mov	r3, r1
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	4639      	mov	r1, r7
 800a1b8:	f7f6 f898 	bl	80002ec <__adddf3>
 800a1bc:	4606      	mov	r6, r0
 800a1be:	460f      	mov	r7, r1
 800a1c0:	f7f6 fcfa 	bl	8000bb8 <__aeabi_d2iz>
 800a1c4:	2200      	movs	r2, #0
 800a1c6:	4683      	mov	fp, r0
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	4630      	mov	r0, r6
 800a1cc:	4639      	mov	r1, r7
 800a1ce:	f7f6 fcb5 	bl	8000b3c <__aeabi_dcmplt>
 800a1d2:	b148      	cbz	r0, 800a1e8 <_dtoa_r+0x190>
 800a1d4:	4658      	mov	r0, fp
 800a1d6:	f7f6 f9d5 	bl	8000584 <__aeabi_i2d>
 800a1da:	4632      	mov	r2, r6
 800a1dc:	463b      	mov	r3, r7
 800a1de:	f7f6 fca3 	bl	8000b28 <__aeabi_dcmpeq>
 800a1e2:	b908      	cbnz	r0, 800a1e8 <_dtoa_r+0x190>
 800a1e4:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a1e8:	f1bb 0f16 	cmp.w	fp, #22
 800a1ec:	d857      	bhi.n	800a29e <_dtoa_r+0x246>
 800a1ee:	4b5b      	ldr	r3, [pc, #364]	; (800a35c <_dtoa_r+0x304>)
 800a1f0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1f8:	ec51 0b18 	vmov	r0, r1, d8
 800a1fc:	f7f6 fc9e 	bl	8000b3c <__aeabi_dcmplt>
 800a200:	2800      	cmp	r0, #0
 800a202:	d04e      	beq.n	800a2a2 <_dtoa_r+0x24a>
 800a204:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a208:	2300      	movs	r3, #0
 800a20a:	930c      	str	r3, [sp, #48]	; 0x30
 800a20c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a20e:	1b5b      	subs	r3, r3, r5
 800a210:	1e5a      	subs	r2, r3, #1
 800a212:	bf45      	ittet	mi
 800a214:	f1c3 0301 	rsbmi	r3, r3, #1
 800a218:	9305      	strmi	r3, [sp, #20]
 800a21a:	2300      	movpl	r3, #0
 800a21c:	2300      	movmi	r3, #0
 800a21e:	9206      	str	r2, [sp, #24]
 800a220:	bf54      	ite	pl
 800a222:	9305      	strpl	r3, [sp, #20]
 800a224:	9306      	strmi	r3, [sp, #24]
 800a226:	f1bb 0f00 	cmp.w	fp, #0
 800a22a:	db3c      	blt.n	800a2a6 <_dtoa_r+0x24e>
 800a22c:	9b06      	ldr	r3, [sp, #24]
 800a22e:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a232:	445b      	add	r3, fp
 800a234:	9306      	str	r3, [sp, #24]
 800a236:	2300      	movs	r3, #0
 800a238:	9308      	str	r3, [sp, #32]
 800a23a:	9b07      	ldr	r3, [sp, #28]
 800a23c:	2b09      	cmp	r3, #9
 800a23e:	d868      	bhi.n	800a312 <_dtoa_r+0x2ba>
 800a240:	2b05      	cmp	r3, #5
 800a242:	bfc4      	itt	gt
 800a244:	3b04      	subgt	r3, #4
 800a246:	9307      	strgt	r3, [sp, #28]
 800a248:	9b07      	ldr	r3, [sp, #28]
 800a24a:	f1a3 0302 	sub.w	r3, r3, #2
 800a24e:	bfcc      	ite	gt
 800a250:	2500      	movgt	r5, #0
 800a252:	2501      	movle	r5, #1
 800a254:	2b03      	cmp	r3, #3
 800a256:	f200 8085 	bhi.w	800a364 <_dtoa_r+0x30c>
 800a25a:	e8df f003 	tbb	[pc, r3]
 800a25e:	3b2e      	.short	0x3b2e
 800a260:	5839      	.short	0x5839
 800a262:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a266:	441d      	add	r5, r3
 800a268:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a26c:	2b20      	cmp	r3, #32
 800a26e:	bfc1      	itttt	gt
 800a270:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a274:	fa08 f803 	lslgt.w	r8, r8, r3
 800a278:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a27c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a280:	bfd6      	itet	le
 800a282:	f1c3 0320 	rsble	r3, r3, #32
 800a286:	ea48 0003 	orrgt.w	r0, r8, r3
 800a28a:	fa06 f003 	lslle.w	r0, r6, r3
 800a28e:	f7f6 f969 	bl	8000564 <__aeabi_ui2d>
 800a292:	2201      	movs	r2, #1
 800a294:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a298:	3d01      	subs	r5, #1
 800a29a:	920e      	str	r2, [sp, #56]	; 0x38
 800a29c:	e76f      	b.n	800a17e <_dtoa_r+0x126>
 800a29e:	2301      	movs	r3, #1
 800a2a0:	e7b3      	b.n	800a20a <_dtoa_r+0x1b2>
 800a2a2:	900c      	str	r0, [sp, #48]	; 0x30
 800a2a4:	e7b2      	b.n	800a20c <_dtoa_r+0x1b4>
 800a2a6:	9b05      	ldr	r3, [sp, #20]
 800a2a8:	eba3 030b 	sub.w	r3, r3, fp
 800a2ac:	9305      	str	r3, [sp, #20]
 800a2ae:	f1cb 0300 	rsb	r3, fp, #0
 800a2b2:	9308      	str	r3, [sp, #32]
 800a2b4:	2300      	movs	r3, #0
 800a2b6:	930b      	str	r3, [sp, #44]	; 0x2c
 800a2b8:	e7bf      	b.n	800a23a <_dtoa_r+0x1e2>
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	9309      	str	r3, [sp, #36]	; 0x24
 800a2be:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2c0:	2b00      	cmp	r3, #0
 800a2c2:	dc52      	bgt.n	800a36a <_dtoa_r+0x312>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	9301      	str	r3, [sp, #4]
 800a2c8:	9304      	str	r3, [sp, #16]
 800a2ca:	461a      	mov	r2, r3
 800a2cc:	920a      	str	r2, [sp, #40]	; 0x28
 800a2ce:	e00b      	b.n	800a2e8 <_dtoa_r+0x290>
 800a2d0:	2301      	movs	r3, #1
 800a2d2:	e7f3      	b.n	800a2bc <_dtoa_r+0x264>
 800a2d4:	2300      	movs	r3, #0
 800a2d6:	9309      	str	r3, [sp, #36]	; 0x24
 800a2d8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2da:	445b      	add	r3, fp
 800a2dc:	9301      	str	r3, [sp, #4]
 800a2de:	3301      	adds	r3, #1
 800a2e0:	2b01      	cmp	r3, #1
 800a2e2:	9304      	str	r3, [sp, #16]
 800a2e4:	bfb8      	it	lt
 800a2e6:	2301      	movlt	r3, #1
 800a2e8:	69e0      	ldr	r0, [r4, #28]
 800a2ea:	2100      	movs	r1, #0
 800a2ec:	2204      	movs	r2, #4
 800a2ee:	f102 0614 	add.w	r6, r2, #20
 800a2f2:	429e      	cmp	r6, r3
 800a2f4:	d93d      	bls.n	800a372 <_dtoa_r+0x31a>
 800a2f6:	6041      	str	r1, [r0, #4]
 800a2f8:	4620      	mov	r0, r4
 800a2fa:	f000 fd9f 	bl	800ae3c <_Balloc>
 800a2fe:	9000      	str	r0, [sp, #0]
 800a300:	2800      	cmp	r0, #0
 800a302:	d139      	bne.n	800a378 <_dtoa_r+0x320>
 800a304:	4b16      	ldr	r3, [pc, #88]	; (800a360 <_dtoa_r+0x308>)
 800a306:	4602      	mov	r2, r0
 800a308:	f240 11af 	movw	r1, #431	; 0x1af
 800a30c:	e6bd      	b.n	800a08a <_dtoa_r+0x32>
 800a30e:	2301      	movs	r3, #1
 800a310:	e7e1      	b.n	800a2d6 <_dtoa_r+0x27e>
 800a312:	2501      	movs	r5, #1
 800a314:	2300      	movs	r3, #0
 800a316:	9307      	str	r3, [sp, #28]
 800a318:	9509      	str	r5, [sp, #36]	; 0x24
 800a31a:	f04f 33ff 	mov.w	r3, #4294967295
 800a31e:	9301      	str	r3, [sp, #4]
 800a320:	9304      	str	r3, [sp, #16]
 800a322:	2200      	movs	r2, #0
 800a324:	2312      	movs	r3, #18
 800a326:	e7d1      	b.n	800a2cc <_dtoa_r+0x274>
 800a328:	636f4361 	.word	0x636f4361
 800a32c:	3fd287a7 	.word	0x3fd287a7
 800a330:	8b60c8b3 	.word	0x8b60c8b3
 800a334:	3fc68a28 	.word	0x3fc68a28
 800a338:	509f79fb 	.word	0x509f79fb
 800a33c:	3fd34413 	.word	0x3fd34413
 800a340:	0800d762 	.word	0x0800d762
 800a344:	0800d779 	.word	0x0800d779
 800a348:	7ff00000 	.word	0x7ff00000
 800a34c:	0800d75e 	.word	0x0800d75e
 800a350:	0800d755 	.word	0x0800d755
 800a354:	0800d72d 	.word	0x0800d72d
 800a358:	3ff80000 	.word	0x3ff80000
 800a35c:	0800d868 	.word	0x0800d868
 800a360:	0800d7d1 	.word	0x0800d7d1
 800a364:	2301      	movs	r3, #1
 800a366:	9309      	str	r3, [sp, #36]	; 0x24
 800a368:	e7d7      	b.n	800a31a <_dtoa_r+0x2c2>
 800a36a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a36c:	9301      	str	r3, [sp, #4]
 800a36e:	9304      	str	r3, [sp, #16]
 800a370:	e7ba      	b.n	800a2e8 <_dtoa_r+0x290>
 800a372:	3101      	adds	r1, #1
 800a374:	0052      	lsls	r2, r2, #1
 800a376:	e7ba      	b.n	800a2ee <_dtoa_r+0x296>
 800a378:	69e3      	ldr	r3, [r4, #28]
 800a37a:	9a00      	ldr	r2, [sp, #0]
 800a37c:	601a      	str	r2, [r3, #0]
 800a37e:	9b04      	ldr	r3, [sp, #16]
 800a380:	2b0e      	cmp	r3, #14
 800a382:	f200 80a8 	bhi.w	800a4d6 <_dtoa_r+0x47e>
 800a386:	2d00      	cmp	r5, #0
 800a388:	f000 80a5 	beq.w	800a4d6 <_dtoa_r+0x47e>
 800a38c:	f1bb 0f00 	cmp.w	fp, #0
 800a390:	dd38      	ble.n	800a404 <_dtoa_r+0x3ac>
 800a392:	4bc0      	ldr	r3, [pc, #768]	; (800a694 <_dtoa_r+0x63c>)
 800a394:	f00b 020f 	and.w	r2, fp, #15
 800a398:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a39c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a3a0:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a3a4:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a3a8:	d019      	beq.n	800a3de <_dtoa_r+0x386>
 800a3aa:	4bbb      	ldr	r3, [pc, #748]	; (800a698 <_dtoa_r+0x640>)
 800a3ac:	ec51 0b18 	vmov	r0, r1, d8
 800a3b0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a3b4:	f7f6 fa7a 	bl	80008ac <__aeabi_ddiv>
 800a3b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3bc:	f008 080f 	and.w	r8, r8, #15
 800a3c0:	2503      	movs	r5, #3
 800a3c2:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a698 <_dtoa_r+0x640>
 800a3c6:	f1b8 0f00 	cmp.w	r8, #0
 800a3ca:	d10a      	bne.n	800a3e2 <_dtoa_r+0x38a>
 800a3cc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a3d0:	4632      	mov	r2, r6
 800a3d2:	463b      	mov	r3, r7
 800a3d4:	f7f6 fa6a 	bl	80008ac <__aeabi_ddiv>
 800a3d8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a3dc:	e02b      	b.n	800a436 <_dtoa_r+0x3de>
 800a3de:	2502      	movs	r5, #2
 800a3e0:	e7ef      	b.n	800a3c2 <_dtoa_r+0x36a>
 800a3e2:	f018 0f01 	tst.w	r8, #1
 800a3e6:	d008      	beq.n	800a3fa <_dtoa_r+0x3a2>
 800a3e8:	4630      	mov	r0, r6
 800a3ea:	4639      	mov	r1, r7
 800a3ec:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a3f0:	f7f6 f932 	bl	8000658 <__aeabi_dmul>
 800a3f4:	3501      	adds	r5, #1
 800a3f6:	4606      	mov	r6, r0
 800a3f8:	460f      	mov	r7, r1
 800a3fa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a3fe:	f109 0908 	add.w	r9, r9, #8
 800a402:	e7e0      	b.n	800a3c6 <_dtoa_r+0x36e>
 800a404:	f000 809f 	beq.w	800a546 <_dtoa_r+0x4ee>
 800a408:	f1cb 0600 	rsb	r6, fp, #0
 800a40c:	4ba1      	ldr	r3, [pc, #644]	; (800a694 <_dtoa_r+0x63c>)
 800a40e:	4fa2      	ldr	r7, [pc, #648]	; (800a698 <_dtoa_r+0x640>)
 800a410:	f006 020f 	and.w	r2, r6, #15
 800a414:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a41c:	ec51 0b18 	vmov	r0, r1, d8
 800a420:	f7f6 f91a 	bl	8000658 <__aeabi_dmul>
 800a424:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a428:	1136      	asrs	r6, r6, #4
 800a42a:	2300      	movs	r3, #0
 800a42c:	2502      	movs	r5, #2
 800a42e:	2e00      	cmp	r6, #0
 800a430:	d17e      	bne.n	800a530 <_dtoa_r+0x4d8>
 800a432:	2b00      	cmp	r3, #0
 800a434:	d1d0      	bne.n	800a3d8 <_dtoa_r+0x380>
 800a436:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a438:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a43c:	2b00      	cmp	r3, #0
 800a43e:	f000 8084 	beq.w	800a54a <_dtoa_r+0x4f2>
 800a442:	4b96      	ldr	r3, [pc, #600]	; (800a69c <_dtoa_r+0x644>)
 800a444:	2200      	movs	r2, #0
 800a446:	4640      	mov	r0, r8
 800a448:	4649      	mov	r1, r9
 800a44a:	f7f6 fb77 	bl	8000b3c <__aeabi_dcmplt>
 800a44e:	2800      	cmp	r0, #0
 800a450:	d07b      	beq.n	800a54a <_dtoa_r+0x4f2>
 800a452:	9b04      	ldr	r3, [sp, #16]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d078      	beq.n	800a54a <_dtoa_r+0x4f2>
 800a458:	9b01      	ldr	r3, [sp, #4]
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	dd39      	ble.n	800a4d2 <_dtoa_r+0x47a>
 800a45e:	4b90      	ldr	r3, [pc, #576]	; (800a6a0 <_dtoa_r+0x648>)
 800a460:	2200      	movs	r2, #0
 800a462:	4640      	mov	r0, r8
 800a464:	4649      	mov	r1, r9
 800a466:	f7f6 f8f7 	bl	8000658 <__aeabi_dmul>
 800a46a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a46e:	9e01      	ldr	r6, [sp, #4]
 800a470:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a474:	3501      	adds	r5, #1
 800a476:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a47a:	4628      	mov	r0, r5
 800a47c:	f7f6 f882 	bl	8000584 <__aeabi_i2d>
 800a480:	4642      	mov	r2, r8
 800a482:	464b      	mov	r3, r9
 800a484:	f7f6 f8e8 	bl	8000658 <__aeabi_dmul>
 800a488:	4b86      	ldr	r3, [pc, #536]	; (800a6a4 <_dtoa_r+0x64c>)
 800a48a:	2200      	movs	r2, #0
 800a48c:	f7f5 ff2e 	bl	80002ec <__adddf3>
 800a490:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a494:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a498:	9303      	str	r3, [sp, #12]
 800a49a:	2e00      	cmp	r6, #0
 800a49c:	d158      	bne.n	800a550 <_dtoa_r+0x4f8>
 800a49e:	4b82      	ldr	r3, [pc, #520]	; (800a6a8 <_dtoa_r+0x650>)
 800a4a0:	2200      	movs	r2, #0
 800a4a2:	4640      	mov	r0, r8
 800a4a4:	4649      	mov	r1, r9
 800a4a6:	f7f5 ff1f 	bl	80002e8 <__aeabi_dsub>
 800a4aa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a4ae:	4680      	mov	r8, r0
 800a4b0:	4689      	mov	r9, r1
 800a4b2:	f7f6 fb61 	bl	8000b78 <__aeabi_dcmpgt>
 800a4b6:	2800      	cmp	r0, #0
 800a4b8:	f040 8296 	bne.w	800a9e8 <_dtoa_r+0x990>
 800a4bc:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a4c0:	4640      	mov	r0, r8
 800a4c2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a4c6:	4649      	mov	r1, r9
 800a4c8:	f7f6 fb38 	bl	8000b3c <__aeabi_dcmplt>
 800a4cc:	2800      	cmp	r0, #0
 800a4ce:	f040 8289 	bne.w	800a9e4 <_dtoa_r+0x98c>
 800a4d2:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a4d6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a4d8:	2b00      	cmp	r3, #0
 800a4da:	f2c0 814e 	blt.w	800a77a <_dtoa_r+0x722>
 800a4de:	f1bb 0f0e 	cmp.w	fp, #14
 800a4e2:	f300 814a 	bgt.w	800a77a <_dtoa_r+0x722>
 800a4e6:	4b6b      	ldr	r3, [pc, #428]	; (800a694 <_dtoa_r+0x63c>)
 800a4e8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a4ec:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a4f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	f280 80dc 	bge.w	800a6b0 <_dtoa_r+0x658>
 800a4f8:	9b04      	ldr	r3, [sp, #16]
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	f300 80d8 	bgt.w	800a6b0 <_dtoa_r+0x658>
 800a500:	f040 826f 	bne.w	800a9e2 <_dtoa_r+0x98a>
 800a504:	4b68      	ldr	r3, [pc, #416]	; (800a6a8 <_dtoa_r+0x650>)
 800a506:	2200      	movs	r2, #0
 800a508:	4640      	mov	r0, r8
 800a50a:	4649      	mov	r1, r9
 800a50c:	f7f6 f8a4 	bl	8000658 <__aeabi_dmul>
 800a510:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a514:	f7f6 fb26 	bl	8000b64 <__aeabi_dcmpge>
 800a518:	9e04      	ldr	r6, [sp, #16]
 800a51a:	4637      	mov	r7, r6
 800a51c:	2800      	cmp	r0, #0
 800a51e:	f040 8245 	bne.w	800a9ac <_dtoa_r+0x954>
 800a522:	9d00      	ldr	r5, [sp, #0]
 800a524:	2331      	movs	r3, #49	; 0x31
 800a526:	f805 3b01 	strb.w	r3, [r5], #1
 800a52a:	f10b 0b01 	add.w	fp, fp, #1
 800a52e:	e241      	b.n	800a9b4 <_dtoa_r+0x95c>
 800a530:	07f2      	lsls	r2, r6, #31
 800a532:	d505      	bpl.n	800a540 <_dtoa_r+0x4e8>
 800a534:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a538:	f7f6 f88e 	bl	8000658 <__aeabi_dmul>
 800a53c:	3501      	adds	r5, #1
 800a53e:	2301      	movs	r3, #1
 800a540:	1076      	asrs	r6, r6, #1
 800a542:	3708      	adds	r7, #8
 800a544:	e773      	b.n	800a42e <_dtoa_r+0x3d6>
 800a546:	2502      	movs	r5, #2
 800a548:	e775      	b.n	800a436 <_dtoa_r+0x3de>
 800a54a:	9e04      	ldr	r6, [sp, #16]
 800a54c:	465f      	mov	r7, fp
 800a54e:	e792      	b.n	800a476 <_dtoa_r+0x41e>
 800a550:	9900      	ldr	r1, [sp, #0]
 800a552:	4b50      	ldr	r3, [pc, #320]	; (800a694 <_dtoa_r+0x63c>)
 800a554:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a558:	4431      	add	r1, r6
 800a55a:	9102      	str	r1, [sp, #8]
 800a55c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a55e:	eeb0 9a47 	vmov.f32	s18, s14
 800a562:	eef0 9a67 	vmov.f32	s19, s15
 800a566:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a56a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a56e:	2900      	cmp	r1, #0
 800a570:	d044      	beq.n	800a5fc <_dtoa_r+0x5a4>
 800a572:	494e      	ldr	r1, [pc, #312]	; (800a6ac <_dtoa_r+0x654>)
 800a574:	2000      	movs	r0, #0
 800a576:	f7f6 f999 	bl	80008ac <__aeabi_ddiv>
 800a57a:	ec53 2b19 	vmov	r2, r3, d9
 800a57e:	f7f5 feb3 	bl	80002e8 <__aeabi_dsub>
 800a582:	9d00      	ldr	r5, [sp, #0]
 800a584:	ec41 0b19 	vmov	d9, r0, r1
 800a588:	4649      	mov	r1, r9
 800a58a:	4640      	mov	r0, r8
 800a58c:	f7f6 fb14 	bl	8000bb8 <__aeabi_d2iz>
 800a590:	4606      	mov	r6, r0
 800a592:	f7f5 fff7 	bl	8000584 <__aeabi_i2d>
 800a596:	4602      	mov	r2, r0
 800a598:	460b      	mov	r3, r1
 800a59a:	4640      	mov	r0, r8
 800a59c:	4649      	mov	r1, r9
 800a59e:	f7f5 fea3 	bl	80002e8 <__aeabi_dsub>
 800a5a2:	3630      	adds	r6, #48	; 0x30
 800a5a4:	f805 6b01 	strb.w	r6, [r5], #1
 800a5a8:	ec53 2b19 	vmov	r2, r3, d9
 800a5ac:	4680      	mov	r8, r0
 800a5ae:	4689      	mov	r9, r1
 800a5b0:	f7f6 fac4 	bl	8000b3c <__aeabi_dcmplt>
 800a5b4:	2800      	cmp	r0, #0
 800a5b6:	d164      	bne.n	800a682 <_dtoa_r+0x62a>
 800a5b8:	4642      	mov	r2, r8
 800a5ba:	464b      	mov	r3, r9
 800a5bc:	4937      	ldr	r1, [pc, #220]	; (800a69c <_dtoa_r+0x644>)
 800a5be:	2000      	movs	r0, #0
 800a5c0:	f7f5 fe92 	bl	80002e8 <__aeabi_dsub>
 800a5c4:	ec53 2b19 	vmov	r2, r3, d9
 800a5c8:	f7f6 fab8 	bl	8000b3c <__aeabi_dcmplt>
 800a5cc:	2800      	cmp	r0, #0
 800a5ce:	f040 80b6 	bne.w	800a73e <_dtoa_r+0x6e6>
 800a5d2:	9b02      	ldr	r3, [sp, #8]
 800a5d4:	429d      	cmp	r5, r3
 800a5d6:	f43f af7c 	beq.w	800a4d2 <_dtoa_r+0x47a>
 800a5da:	4b31      	ldr	r3, [pc, #196]	; (800a6a0 <_dtoa_r+0x648>)
 800a5dc:	ec51 0b19 	vmov	r0, r1, d9
 800a5e0:	2200      	movs	r2, #0
 800a5e2:	f7f6 f839 	bl	8000658 <__aeabi_dmul>
 800a5e6:	4b2e      	ldr	r3, [pc, #184]	; (800a6a0 <_dtoa_r+0x648>)
 800a5e8:	ec41 0b19 	vmov	d9, r0, r1
 800a5ec:	2200      	movs	r2, #0
 800a5ee:	4640      	mov	r0, r8
 800a5f0:	4649      	mov	r1, r9
 800a5f2:	f7f6 f831 	bl	8000658 <__aeabi_dmul>
 800a5f6:	4680      	mov	r8, r0
 800a5f8:	4689      	mov	r9, r1
 800a5fa:	e7c5      	b.n	800a588 <_dtoa_r+0x530>
 800a5fc:	ec51 0b17 	vmov	r0, r1, d7
 800a600:	f7f6 f82a 	bl	8000658 <__aeabi_dmul>
 800a604:	9b02      	ldr	r3, [sp, #8]
 800a606:	9d00      	ldr	r5, [sp, #0]
 800a608:	930f      	str	r3, [sp, #60]	; 0x3c
 800a60a:	ec41 0b19 	vmov	d9, r0, r1
 800a60e:	4649      	mov	r1, r9
 800a610:	4640      	mov	r0, r8
 800a612:	f7f6 fad1 	bl	8000bb8 <__aeabi_d2iz>
 800a616:	4606      	mov	r6, r0
 800a618:	f7f5 ffb4 	bl	8000584 <__aeabi_i2d>
 800a61c:	3630      	adds	r6, #48	; 0x30
 800a61e:	4602      	mov	r2, r0
 800a620:	460b      	mov	r3, r1
 800a622:	4640      	mov	r0, r8
 800a624:	4649      	mov	r1, r9
 800a626:	f7f5 fe5f 	bl	80002e8 <__aeabi_dsub>
 800a62a:	f805 6b01 	strb.w	r6, [r5], #1
 800a62e:	9b02      	ldr	r3, [sp, #8]
 800a630:	429d      	cmp	r5, r3
 800a632:	4680      	mov	r8, r0
 800a634:	4689      	mov	r9, r1
 800a636:	f04f 0200 	mov.w	r2, #0
 800a63a:	d124      	bne.n	800a686 <_dtoa_r+0x62e>
 800a63c:	4b1b      	ldr	r3, [pc, #108]	; (800a6ac <_dtoa_r+0x654>)
 800a63e:	ec51 0b19 	vmov	r0, r1, d9
 800a642:	f7f5 fe53 	bl	80002ec <__adddf3>
 800a646:	4602      	mov	r2, r0
 800a648:	460b      	mov	r3, r1
 800a64a:	4640      	mov	r0, r8
 800a64c:	4649      	mov	r1, r9
 800a64e:	f7f6 fa93 	bl	8000b78 <__aeabi_dcmpgt>
 800a652:	2800      	cmp	r0, #0
 800a654:	d173      	bne.n	800a73e <_dtoa_r+0x6e6>
 800a656:	ec53 2b19 	vmov	r2, r3, d9
 800a65a:	4914      	ldr	r1, [pc, #80]	; (800a6ac <_dtoa_r+0x654>)
 800a65c:	2000      	movs	r0, #0
 800a65e:	f7f5 fe43 	bl	80002e8 <__aeabi_dsub>
 800a662:	4602      	mov	r2, r0
 800a664:	460b      	mov	r3, r1
 800a666:	4640      	mov	r0, r8
 800a668:	4649      	mov	r1, r9
 800a66a:	f7f6 fa67 	bl	8000b3c <__aeabi_dcmplt>
 800a66e:	2800      	cmp	r0, #0
 800a670:	f43f af2f 	beq.w	800a4d2 <_dtoa_r+0x47a>
 800a674:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a676:	1e6b      	subs	r3, r5, #1
 800a678:	930f      	str	r3, [sp, #60]	; 0x3c
 800a67a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a67e:	2b30      	cmp	r3, #48	; 0x30
 800a680:	d0f8      	beq.n	800a674 <_dtoa_r+0x61c>
 800a682:	46bb      	mov	fp, r7
 800a684:	e04a      	b.n	800a71c <_dtoa_r+0x6c4>
 800a686:	4b06      	ldr	r3, [pc, #24]	; (800a6a0 <_dtoa_r+0x648>)
 800a688:	f7f5 ffe6 	bl	8000658 <__aeabi_dmul>
 800a68c:	4680      	mov	r8, r0
 800a68e:	4689      	mov	r9, r1
 800a690:	e7bd      	b.n	800a60e <_dtoa_r+0x5b6>
 800a692:	bf00      	nop
 800a694:	0800d868 	.word	0x0800d868
 800a698:	0800d840 	.word	0x0800d840
 800a69c:	3ff00000 	.word	0x3ff00000
 800a6a0:	40240000 	.word	0x40240000
 800a6a4:	401c0000 	.word	0x401c0000
 800a6a8:	40140000 	.word	0x40140000
 800a6ac:	3fe00000 	.word	0x3fe00000
 800a6b0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a6b4:	9d00      	ldr	r5, [sp, #0]
 800a6b6:	4642      	mov	r2, r8
 800a6b8:	464b      	mov	r3, r9
 800a6ba:	4630      	mov	r0, r6
 800a6bc:	4639      	mov	r1, r7
 800a6be:	f7f6 f8f5 	bl	80008ac <__aeabi_ddiv>
 800a6c2:	f7f6 fa79 	bl	8000bb8 <__aeabi_d2iz>
 800a6c6:	9001      	str	r0, [sp, #4]
 800a6c8:	f7f5 ff5c 	bl	8000584 <__aeabi_i2d>
 800a6cc:	4642      	mov	r2, r8
 800a6ce:	464b      	mov	r3, r9
 800a6d0:	f7f5 ffc2 	bl	8000658 <__aeabi_dmul>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	460b      	mov	r3, r1
 800a6d8:	4630      	mov	r0, r6
 800a6da:	4639      	mov	r1, r7
 800a6dc:	f7f5 fe04 	bl	80002e8 <__aeabi_dsub>
 800a6e0:	9e01      	ldr	r6, [sp, #4]
 800a6e2:	9f04      	ldr	r7, [sp, #16]
 800a6e4:	3630      	adds	r6, #48	; 0x30
 800a6e6:	f805 6b01 	strb.w	r6, [r5], #1
 800a6ea:	9e00      	ldr	r6, [sp, #0]
 800a6ec:	1bae      	subs	r6, r5, r6
 800a6ee:	42b7      	cmp	r7, r6
 800a6f0:	4602      	mov	r2, r0
 800a6f2:	460b      	mov	r3, r1
 800a6f4:	d134      	bne.n	800a760 <_dtoa_r+0x708>
 800a6f6:	f7f5 fdf9 	bl	80002ec <__adddf3>
 800a6fa:	4642      	mov	r2, r8
 800a6fc:	464b      	mov	r3, r9
 800a6fe:	4606      	mov	r6, r0
 800a700:	460f      	mov	r7, r1
 800a702:	f7f6 fa39 	bl	8000b78 <__aeabi_dcmpgt>
 800a706:	b9c8      	cbnz	r0, 800a73c <_dtoa_r+0x6e4>
 800a708:	4642      	mov	r2, r8
 800a70a:	464b      	mov	r3, r9
 800a70c:	4630      	mov	r0, r6
 800a70e:	4639      	mov	r1, r7
 800a710:	f7f6 fa0a 	bl	8000b28 <__aeabi_dcmpeq>
 800a714:	b110      	cbz	r0, 800a71c <_dtoa_r+0x6c4>
 800a716:	9b01      	ldr	r3, [sp, #4]
 800a718:	07db      	lsls	r3, r3, #31
 800a71a:	d40f      	bmi.n	800a73c <_dtoa_r+0x6e4>
 800a71c:	4651      	mov	r1, sl
 800a71e:	4620      	mov	r0, r4
 800a720:	f000 fbcc 	bl	800aebc <_Bfree>
 800a724:	2300      	movs	r3, #0
 800a726:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a728:	702b      	strb	r3, [r5, #0]
 800a72a:	f10b 0301 	add.w	r3, fp, #1
 800a72e:	6013      	str	r3, [r2, #0]
 800a730:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a732:	2b00      	cmp	r3, #0
 800a734:	f43f ace2 	beq.w	800a0fc <_dtoa_r+0xa4>
 800a738:	601d      	str	r5, [r3, #0]
 800a73a:	e4df      	b.n	800a0fc <_dtoa_r+0xa4>
 800a73c:	465f      	mov	r7, fp
 800a73e:	462b      	mov	r3, r5
 800a740:	461d      	mov	r5, r3
 800a742:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a746:	2a39      	cmp	r2, #57	; 0x39
 800a748:	d106      	bne.n	800a758 <_dtoa_r+0x700>
 800a74a:	9a00      	ldr	r2, [sp, #0]
 800a74c:	429a      	cmp	r2, r3
 800a74e:	d1f7      	bne.n	800a740 <_dtoa_r+0x6e8>
 800a750:	9900      	ldr	r1, [sp, #0]
 800a752:	2230      	movs	r2, #48	; 0x30
 800a754:	3701      	adds	r7, #1
 800a756:	700a      	strb	r2, [r1, #0]
 800a758:	781a      	ldrb	r2, [r3, #0]
 800a75a:	3201      	adds	r2, #1
 800a75c:	701a      	strb	r2, [r3, #0]
 800a75e:	e790      	b.n	800a682 <_dtoa_r+0x62a>
 800a760:	4ba3      	ldr	r3, [pc, #652]	; (800a9f0 <_dtoa_r+0x998>)
 800a762:	2200      	movs	r2, #0
 800a764:	f7f5 ff78 	bl	8000658 <__aeabi_dmul>
 800a768:	2200      	movs	r2, #0
 800a76a:	2300      	movs	r3, #0
 800a76c:	4606      	mov	r6, r0
 800a76e:	460f      	mov	r7, r1
 800a770:	f7f6 f9da 	bl	8000b28 <__aeabi_dcmpeq>
 800a774:	2800      	cmp	r0, #0
 800a776:	d09e      	beq.n	800a6b6 <_dtoa_r+0x65e>
 800a778:	e7d0      	b.n	800a71c <_dtoa_r+0x6c4>
 800a77a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a77c:	2a00      	cmp	r2, #0
 800a77e:	f000 80ca 	beq.w	800a916 <_dtoa_r+0x8be>
 800a782:	9a07      	ldr	r2, [sp, #28]
 800a784:	2a01      	cmp	r2, #1
 800a786:	f300 80ad 	bgt.w	800a8e4 <_dtoa_r+0x88c>
 800a78a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a78c:	2a00      	cmp	r2, #0
 800a78e:	f000 80a5 	beq.w	800a8dc <_dtoa_r+0x884>
 800a792:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a796:	9e08      	ldr	r6, [sp, #32]
 800a798:	9d05      	ldr	r5, [sp, #20]
 800a79a:	9a05      	ldr	r2, [sp, #20]
 800a79c:	441a      	add	r2, r3
 800a79e:	9205      	str	r2, [sp, #20]
 800a7a0:	9a06      	ldr	r2, [sp, #24]
 800a7a2:	2101      	movs	r1, #1
 800a7a4:	441a      	add	r2, r3
 800a7a6:	4620      	mov	r0, r4
 800a7a8:	9206      	str	r2, [sp, #24]
 800a7aa:	f000 fc87 	bl	800b0bc <__i2b>
 800a7ae:	4607      	mov	r7, r0
 800a7b0:	b165      	cbz	r5, 800a7cc <_dtoa_r+0x774>
 800a7b2:	9b06      	ldr	r3, [sp, #24]
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	dd09      	ble.n	800a7cc <_dtoa_r+0x774>
 800a7b8:	42ab      	cmp	r3, r5
 800a7ba:	9a05      	ldr	r2, [sp, #20]
 800a7bc:	bfa8      	it	ge
 800a7be:	462b      	movge	r3, r5
 800a7c0:	1ad2      	subs	r2, r2, r3
 800a7c2:	9205      	str	r2, [sp, #20]
 800a7c4:	9a06      	ldr	r2, [sp, #24]
 800a7c6:	1aed      	subs	r5, r5, r3
 800a7c8:	1ad3      	subs	r3, r2, r3
 800a7ca:	9306      	str	r3, [sp, #24]
 800a7cc:	9b08      	ldr	r3, [sp, #32]
 800a7ce:	b1f3      	cbz	r3, 800a80e <_dtoa_r+0x7b6>
 800a7d0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a7d2:	2b00      	cmp	r3, #0
 800a7d4:	f000 80a3 	beq.w	800a91e <_dtoa_r+0x8c6>
 800a7d8:	2e00      	cmp	r6, #0
 800a7da:	dd10      	ble.n	800a7fe <_dtoa_r+0x7a6>
 800a7dc:	4639      	mov	r1, r7
 800a7de:	4632      	mov	r2, r6
 800a7e0:	4620      	mov	r0, r4
 800a7e2:	f000 fd2b 	bl	800b23c <__pow5mult>
 800a7e6:	4652      	mov	r2, sl
 800a7e8:	4601      	mov	r1, r0
 800a7ea:	4607      	mov	r7, r0
 800a7ec:	4620      	mov	r0, r4
 800a7ee:	f000 fc7b 	bl	800b0e8 <__multiply>
 800a7f2:	4651      	mov	r1, sl
 800a7f4:	4680      	mov	r8, r0
 800a7f6:	4620      	mov	r0, r4
 800a7f8:	f000 fb60 	bl	800aebc <_Bfree>
 800a7fc:	46c2      	mov	sl, r8
 800a7fe:	9b08      	ldr	r3, [sp, #32]
 800a800:	1b9a      	subs	r2, r3, r6
 800a802:	d004      	beq.n	800a80e <_dtoa_r+0x7b6>
 800a804:	4651      	mov	r1, sl
 800a806:	4620      	mov	r0, r4
 800a808:	f000 fd18 	bl	800b23c <__pow5mult>
 800a80c:	4682      	mov	sl, r0
 800a80e:	2101      	movs	r1, #1
 800a810:	4620      	mov	r0, r4
 800a812:	f000 fc53 	bl	800b0bc <__i2b>
 800a816:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a818:	2b00      	cmp	r3, #0
 800a81a:	4606      	mov	r6, r0
 800a81c:	f340 8081 	ble.w	800a922 <_dtoa_r+0x8ca>
 800a820:	461a      	mov	r2, r3
 800a822:	4601      	mov	r1, r0
 800a824:	4620      	mov	r0, r4
 800a826:	f000 fd09 	bl	800b23c <__pow5mult>
 800a82a:	9b07      	ldr	r3, [sp, #28]
 800a82c:	2b01      	cmp	r3, #1
 800a82e:	4606      	mov	r6, r0
 800a830:	dd7a      	ble.n	800a928 <_dtoa_r+0x8d0>
 800a832:	f04f 0800 	mov.w	r8, #0
 800a836:	6933      	ldr	r3, [r6, #16]
 800a838:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a83c:	6918      	ldr	r0, [r3, #16]
 800a83e:	f000 fbef 	bl	800b020 <__hi0bits>
 800a842:	f1c0 0020 	rsb	r0, r0, #32
 800a846:	9b06      	ldr	r3, [sp, #24]
 800a848:	4418      	add	r0, r3
 800a84a:	f010 001f 	ands.w	r0, r0, #31
 800a84e:	f000 8094 	beq.w	800a97a <_dtoa_r+0x922>
 800a852:	f1c0 0320 	rsb	r3, r0, #32
 800a856:	2b04      	cmp	r3, #4
 800a858:	f340 8085 	ble.w	800a966 <_dtoa_r+0x90e>
 800a85c:	9b05      	ldr	r3, [sp, #20]
 800a85e:	f1c0 001c 	rsb	r0, r0, #28
 800a862:	4403      	add	r3, r0
 800a864:	9305      	str	r3, [sp, #20]
 800a866:	9b06      	ldr	r3, [sp, #24]
 800a868:	4403      	add	r3, r0
 800a86a:	4405      	add	r5, r0
 800a86c:	9306      	str	r3, [sp, #24]
 800a86e:	9b05      	ldr	r3, [sp, #20]
 800a870:	2b00      	cmp	r3, #0
 800a872:	dd05      	ble.n	800a880 <_dtoa_r+0x828>
 800a874:	4651      	mov	r1, sl
 800a876:	461a      	mov	r2, r3
 800a878:	4620      	mov	r0, r4
 800a87a:	f000 fd39 	bl	800b2f0 <__lshift>
 800a87e:	4682      	mov	sl, r0
 800a880:	9b06      	ldr	r3, [sp, #24]
 800a882:	2b00      	cmp	r3, #0
 800a884:	dd05      	ble.n	800a892 <_dtoa_r+0x83a>
 800a886:	4631      	mov	r1, r6
 800a888:	461a      	mov	r2, r3
 800a88a:	4620      	mov	r0, r4
 800a88c:	f000 fd30 	bl	800b2f0 <__lshift>
 800a890:	4606      	mov	r6, r0
 800a892:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a894:	2b00      	cmp	r3, #0
 800a896:	d072      	beq.n	800a97e <_dtoa_r+0x926>
 800a898:	4631      	mov	r1, r6
 800a89a:	4650      	mov	r0, sl
 800a89c:	f000 fd94 	bl	800b3c8 <__mcmp>
 800a8a0:	2800      	cmp	r0, #0
 800a8a2:	da6c      	bge.n	800a97e <_dtoa_r+0x926>
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	4651      	mov	r1, sl
 800a8a8:	220a      	movs	r2, #10
 800a8aa:	4620      	mov	r0, r4
 800a8ac:	f000 fb28 	bl	800af00 <__multadd>
 800a8b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a8b2:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a8b6:	4682      	mov	sl, r0
 800a8b8:	2b00      	cmp	r3, #0
 800a8ba:	f000 81b0 	beq.w	800ac1e <_dtoa_r+0xbc6>
 800a8be:	2300      	movs	r3, #0
 800a8c0:	4639      	mov	r1, r7
 800a8c2:	220a      	movs	r2, #10
 800a8c4:	4620      	mov	r0, r4
 800a8c6:	f000 fb1b 	bl	800af00 <__multadd>
 800a8ca:	9b01      	ldr	r3, [sp, #4]
 800a8cc:	2b00      	cmp	r3, #0
 800a8ce:	4607      	mov	r7, r0
 800a8d0:	f300 8096 	bgt.w	800aa00 <_dtoa_r+0x9a8>
 800a8d4:	9b07      	ldr	r3, [sp, #28]
 800a8d6:	2b02      	cmp	r3, #2
 800a8d8:	dc59      	bgt.n	800a98e <_dtoa_r+0x936>
 800a8da:	e091      	b.n	800aa00 <_dtoa_r+0x9a8>
 800a8dc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a8de:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a8e2:	e758      	b.n	800a796 <_dtoa_r+0x73e>
 800a8e4:	9b04      	ldr	r3, [sp, #16]
 800a8e6:	1e5e      	subs	r6, r3, #1
 800a8e8:	9b08      	ldr	r3, [sp, #32]
 800a8ea:	42b3      	cmp	r3, r6
 800a8ec:	bfbf      	itttt	lt
 800a8ee:	9b08      	ldrlt	r3, [sp, #32]
 800a8f0:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a8f2:	9608      	strlt	r6, [sp, #32]
 800a8f4:	1af3      	sublt	r3, r6, r3
 800a8f6:	bfb4      	ite	lt
 800a8f8:	18d2      	addlt	r2, r2, r3
 800a8fa:	1b9e      	subge	r6, r3, r6
 800a8fc:	9b04      	ldr	r3, [sp, #16]
 800a8fe:	bfbc      	itt	lt
 800a900:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a902:	2600      	movlt	r6, #0
 800a904:	2b00      	cmp	r3, #0
 800a906:	bfb7      	itett	lt
 800a908:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a90c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a910:	1a9d      	sublt	r5, r3, r2
 800a912:	2300      	movlt	r3, #0
 800a914:	e741      	b.n	800a79a <_dtoa_r+0x742>
 800a916:	9e08      	ldr	r6, [sp, #32]
 800a918:	9d05      	ldr	r5, [sp, #20]
 800a91a:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a91c:	e748      	b.n	800a7b0 <_dtoa_r+0x758>
 800a91e:	9a08      	ldr	r2, [sp, #32]
 800a920:	e770      	b.n	800a804 <_dtoa_r+0x7ac>
 800a922:	9b07      	ldr	r3, [sp, #28]
 800a924:	2b01      	cmp	r3, #1
 800a926:	dc19      	bgt.n	800a95c <_dtoa_r+0x904>
 800a928:	9b02      	ldr	r3, [sp, #8]
 800a92a:	b9bb      	cbnz	r3, 800a95c <_dtoa_r+0x904>
 800a92c:	9b03      	ldr	r3, [sp, #12]
 800a92e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a932:	b99b      	cbnz	r3, 800a95c <_dtoa_r+0x904>
 800a934:	9b03      	ldr	r3, [sp, #12]
 800a936:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a93a:	0d1b      	lsrs	r3, r3, #20
 800a93c:	051b      	lsls	r3, r3, #20
 800a93e:	b183      	cbz	r3, 800a962 <_dtoa_r+0x90a>
 800a940:	9b05      	ldr	r3, [sp, #20]
 800a942:	3301      	adds	r3, #1
 800a944:	9305      	str	r3, [sp, #20]
 800a946:	9b06      	ldr	r3, [sp, #24]
 800a948:	3301      	adds	r3, #1
 800a94a:	9306      	str	r3, [sp, #24]
 800a94c:	f04f 0801 	mov.w	r8, #1
 800a950:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a952:	2b00      	cmp	r3, #0
 800a954:	f47f af6f 	bne.w	800a836 <_dtoa_r+0x7de>
 800a958:	2001      	movs	r0, #1
 800a95a:	e774      	b.n	800a846 <_dtoa_r+0x7ee>
 800a95c:	f04f 0800 	mov.w	r8, #0
 800a960:	e7f6      	b.n	800a950 <_dtoa_r+0x8f8>
 800a962:	4698      	mov	r8, r3
 800a964:	e7f4      	b.n	800a950 <_dtoa_r+0x8f8>
 800a966:	d082      	beq.n	800a86e <_dtoa_r+0x816>
 800a968:	9a05      	ldr	r2, [sp, #20]
 800a96a:	331c      	adds	r3, #28
 800a96c:	441a      	add	r2, r3
 800a96e:	9205      	str	r2, [sp, #20]
 800a970:	9a06      	ldr	r2, [sp, #24]
 800a972:	441a      	add	r2, r3
 800a974:	441d      	add	r5, r3
 800a976:	9206      	str	r2, [sp, #24]
 800a978:	e779      	b.n	800a86e <_dtoa_r+0x816>
 800a97a:	4603      	mov	r3, r0
 800a97c:	e7f4      	b.n	800a968 <_dtoa_r+0x910>
 800a97e:	9b04      	ldr	r3, [sp, #16]
 800a980:	2b00      	cmp	r3, #0
 800a982:	dc37      	bgt.n	800a9f4 <_dtoa_r+0x99c>
 800a984:	9b07      	ldr	r3, [sp, #28]
 800a986:	2b02      	cmp	r3, #2
 800a988:	dd34      	ble.n	800a9f4 <_dtoa_r+0x99c>
 800a98a:	9b04      	ldr	r3, [sp, #16]
 800a98c:	9301      	str	r3, [sp, #4]
 800a98e:	9b01      	ldr	r3, [sp, #4]
 800a990:	b963      	cbnz	r3, 800a9ac <_dtoa_r+0x954>
 800a992:	4631      	mov	r1, r6
 800a994:	2205      	movs	r2, #5
 800a996:	4620      	mov	r0, r4
 800a998:	f000 fab2 	bl	800af00 <__multadd>
 800a99c:	4601      	mov	r1, r0
 800a99e:	4606      	mov	r6, r0
 800a9a0:	4650      	mov	r0, sl
 800a9a2:	f000 fd11 	bl	800b3c8 <__mcmp>
 800a9a6:	2800      	cmp	r0, #0
 800a9a8:	f73f adbb 	bgt.w	800a522 <_dtoa_r+0x4ca>
 800a9ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9ae:	9d00      	ldr	r5, [sp, #0]
 800a9b0:	ea6f 0b03 	mvn.w	fp, r3
 800a9b4:	f04f 0800 	mov.w	r8, #0
 800a9b8:	4631      	mov	r1, r6
 800a9ba:	4620      	mov	r0, r4
 800a9bc:	f000 fa7e 	bl	800aebc <_Bfree>
 800a9c0:	2f00      	cmp	r7, #0
 800a9c2:	f43f aeab 	beq.w	800a71c <_dtoa_r+0x6c4>
 800a9c6:	f1b8 0f00 	cmp.w	r8, #0
 800a9ca:	d005      	beq.n	800a9d8 <_dtoa_r+0x980>
 800a9cc:	45b8      	cmp	r8, r7
 800a9ce:	d003      	beq.n	800a9d8 <_dtoa_r+0x980>
 800a9d0:	4641      	mov	r1, r8
 800a9d2:	4620      	mov	r0, r4
 800a9d4:	f000 fa72 	bl	800aebc <_Bfree>
 800a9d8:	4639      	mov	r1, r7
 800a9da:	4620      	mov	r0, r4
 800a9dc:	f000 fa6e 	bl	800aebc <_Bfree>
 800a9e0:	e69c      	b.n	800a71c <_dtoa_r+0x6c4>
 800a9e2:	2600      	movs	r6, #0
 800a9e4:	4637      	mov	r7, r6
 800a9e6:	e7e1      	b.n	800a9ac <_dtoa_r+0x954>
 800a9e8:	46bb      	mov	fp, r7
 800a9ea:	4637      	mov	r7, r6
 800a9ec:	e599      	b.n	800a522 <_dtoa_r+0x4ca>
 800a9ee:	bf00      	nop
 800a9f0:	40240000 	.word	0x40240000
 800a9f4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a9f6:	2b00      	cmp	r3, #0
 800a9f8:	f000 80c8 	beq.w	800ab8c <_dtoa_r+0xb34>
 800a9fc:	9b04      	ldr	r3, [sp, #16]
 800a9fe:	9301      	str	r3, [sp, #4]
 800aa00:	2d00      	cmp	r5, #0
 800aa02:	dd05      	ble.n	800aa10 <_dtoa_r+0x9b8>
 800aa04:	4639      	mov	r1, r7
 800aa06:	462a      	mov	r2, r5
 800aa08:	4620      	mov	r0, r4
 800aa0a:	f000 fc71 	bl	800b2f0 <__lshift>
 800aa0e:	4607      	mov	r7, r0
 800aa10:	f1b8 0f00 	cmp.w	r8, #0
 800aa14:	d05b      	beq.n	800aace <_dtoa_r+0xa76>
 800aa16:	6879      	ldr	r1, [r7, #4]
 800aa18:	4620      	mov	r0, r4
 800aa1a:	f000 fa0f 	bl	800ae3c <_Balloc>
 800aa1e:	4605      	mov	r5, r0
 800aa20:	b928      	cbnz	r0, 800aa2e <_dtoa_r+0x9d6>
 800aa22:	4b83      	ldr	r3, [pc, #524]	; (800ac30 <_dtoa_r+0xbd8>)
 800aa24:	4602      	mov	r2, r0
 800aa26:	f240 21ef 	movw	r1, #751	; 0x2ef
 800aa2a:	f7ff bb2e 	b.w	800a08a <_dtoa_r+0x32>
 800aa2e:	693a      	ldr	r2, [r7, #16]
 800aa30:	3202      	adds	r2, #2
 800aa32:	0092      	lsls	r2, r2, #2
 800aa34:	f107 010c 	add.w	r1, r7, #12
 800aa38:	300c      	adds	r0, #12
 800aa3a:	f001 ff85 	bl	800c948 <memcpy>
 800aa3e:	2201      	movs	r2, #1
 800aa40:	4629      	mov	r1, r5
 800aa42:	4620      	mov	r0, r4
 800aa44:	f000 fc54 	bl	800b2f0 <__lshift>
 800aa48:	9b00      	ldr	r3, [sp, #0]
 800aa4a:	3301      	adds	r3, #1
 800aa4c:	9304      	str	r3, [sp, #16]
 800aa4e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aa52:	4413      	add	r3, r2
 800aa54:	9308      	str	r3, [sp, #32]
 800aa56:	9b02      	ldr	r3, [sp, #8]
 800aa58:	f003 0301 	and.w	r3, r3, #1
 800aa5c:	46b8      	mov	r8, r7
 800aa5e:	9306      	str	r3, [sp, #24]
 800aa60:	4607      	mov	r7, r0
 800aa62:	9b04      	ldr	r3, [sp, #16]
 800aa64:	4631      	mov	r1, r6
 800aa66:	3b01      	subs	r3, #1
 800aa68:	4650      	mov	r0, sl
 800aa6a:	9301      	str	r3, [sp, #4]
 800aa6c:	f7ff fa6a 	bl	8009f44 <quorem>
 800aa70:	4641      	mov	r1, r8
 800aa72:	9002      	str	r0, [sp, #8]
 800aa74:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800aa78:	4650      	mov	r0, sl
 800aa7a:	f000 fca5 	bl	800b3c8 <__mcmp>
 800aa7e:	463a      	mov	r2, r7
 800aa80:	9005      	str	r0, [sp, #20]
 800aa82:	4631      	mov	r1, r6
 800aa84:	4620      	mov	r0, r4
 800aa86:	f000 fcbb 	bl	800b400 <__mdiff>
 800aa8a:	68c2      	ldr	r2, [r0, #12]
 800aa8c:	4605      	mov	r5, r0
 800aa8e:	bb02      	cbnz	r2, 800aad2 <_dtoa_r+0xa7a>
 800aa90:	4601      	mov	r1, r0
 800aa92:	4650      	mov	r0, sl
 800aa94:	f000 fc98 	bl	800b3c8 <__mcmp>
 800aa98:	4602      	mov	r2, r0
 800aa9a:	4629      	mov	r1, r5
 800aa9c:	4620      	mov	r0, r4
 800aa9e:	9209      	str	r2, [sp, #36]	; 0x24
 800aaa0:	f000 fa0c 	bl	800aebc <_Bfree>
 800aaa4:	9b07      	ldr	r3, [sp, #28]
 800aaa6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800aaa8:	9d04      	ldr	r5, [sp, #16]
 800aaaa:	ea43 0102 	orr.w	r1, r3, r2
 800aaae:	9b06      	ldr	r3, [sp, #24]
 800aab0:	4319      	orrs	r1, r3
 800aab2:	d110      	bne.n	800aad6 <_dtoa_r+0xa7e>
 800aab4:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800aab8:	d029      	beq.n	800ab0e <_dtoa_r+0xab6>
 800aaba:	9b05      	ldr	r3, [sp, #20]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	dd02      	ble.n	800aac6 <_dtoa_r+0xa6e>
 800aac0:	9b02      	ldr	r3, [sp, #8]
 800aac2:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800aac6:	9b01      	ldr	r3, [sp, #4]
 800aac8:	f883 9000 	strb.w	r9, [r3]
 800aacc:	e774      	b.n	800a9b8 <_dtoa_r+0x960>
 800aace:	4638      	mov	r0, r7
 800aad0:	e7ba      	b.n	800aa48 <_dtoa_r+0x9f0>
 800aad2:	2201      	movs	r2, #1
 800aad4:	e7e1      	b.n	800aa9a <_dtoa_r+0xa42>
 800aad6:	9b05      	ldr	r3, [sp, #20]
 800aad8:	2b00      	cmp	r3, #0
 800aada:	db04      	blt.n	800aae6 <_dtoa_r+0xa8e>
 800aadc:	9907      	ldr	r1, [sp, #28]
 800aade:	430b      	orrs	r3, r1
 800aae0:	9906      	ldr	r1, [sp, #24]
 800aae2:	430b      	orrs	r3, r1
 800aae4:	d120      	bne.n	800ab28 <_dtoa_r+0xad0>
 800aae6:	2a00      	cmp	r2, #0
 800aae8:	dded      	ble.n	800aac6 <_dtoa_r+0xa6e>
 800aaea:	4651      	mov	r1, sl
 800aaec:	2201      	movs	r2, #1
 800aaee:	4620      	mov	r0, r4
 800aaf0:	f000 fbfe 	bl	800b2f0 <__lshift>
 800aaf4:	4631      	mov	r1, r6
 800aaf6:	4682      	mov	sl, r0
 800aaf8:	f000 fc66 	bl	800b3c8 <__mcmp>
 800aafc:	2800      	cmp	r0, #0
 800aafe:	dc03      	bgt.n	800ab08 <_dtoa_r+0xab0>
 800ab00:	d1e1      	bne.n	800aac6 <_dtoa_r+0xa6e>
 800ab02:	f019 0f01 	tst.w	r9, #1
 800ab06:	d0de      	beq.n	800aac6 <_dtoa_r+0xa6e>
 800ab08:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ab0c:	d1d8      	bne.n	800aac0 <_dtoa_r+0xa68>
 800ab0e:	9a01      	ldr	r2, [sp, #4]
 800ab10:	2339      	movs	r3, #57	; 0x39
 800ab12:	7013      	strb	r3, [r2, #0]
 800ab14:	462b      	mov	r3, r5
 800ab16:	461d      	mov	r5, r3
 800ab18:	3b01      	subs	r3, #1
 800ab1a:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ab1e:	2a39      	cmp	r2, #57	; 0x39
 800ab20:	d06c      	beq.n	800abfc <_dtoa_r+0xba4>
 800ab22:	3201      	adds	r2, #1
 800ab24:	701a      	strb	r2, [r3, #0]
 800ab26:	e747      	b.n	800a9b8 <_dtoa_r+0x960>
 800ab28:	2a00      	cmp	r2, #0
 800ab2a:	dd07      	ble.n	800ab3c <_dtoa_r+0xae4>
 800ab2c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ab30:	d0ed      	beq.n	800ab0e <_dtoa_r+0xab6>
 800ab32:	9a01      	ldr	r2, [sp, #4]
 800ab34:	f109 0301 	add.w	r3, r9, #1
 800ab38:	7013      	strb	r3, [r2, #0]
 800ab3a:	e73d      	b.n	800a9b8 <_dtoa_r+0x960>
 800ab3c:	9b04      	ldr	r3, [sp, #16]
 800ab3e:	9a08      	ldr	r2, [sp, #32]
 800ab40:	f803 9c01 	strb.w	r9, [r3, #-1]
 800ab44:	4293      	cmp	r3, r2
 800ab46:	d043      	beq.n	800abd0 <_dtoa_r+0xb78>
 800ab48:	4651      	mov	r1, sl
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	220a      	movs	r2, #10
 800ab4e:	4620      	mov	r0, r4
 800ab50:	f000 f9d6 	bl	800af00 <__multadd>
 800ab54:	45b8      	cmp	r8, r7
 800ab56:	4682      	mov	sl, r0
 800ab58:	f04f 0300 	mov.w	r3, #0
 800ab5c:	f04f 020a 	mov.w	r2, #10
 800ab60:	4641      	mov	r1, r8
 800ab62:	4620      	mov	r0, r4
 800ab64:	d107      	bne.n	800ab76 <_dtoa_r+0xb1e>
 800ab66:	f000 f9cb 	bl	800af00 <__multadd>
 800ab6a:	4680      	mov	r8, r0
 800ab6c:	4607      	mov	r7, r0
 800ab6e:	9b04      	ldr	r3, [sp, #16]
 800ab70:	3301      	adds	r3, #1
 800ab72:	9304      	str	r3, [sp, #16]
 800ab74:	e775      	b.n	800aa62 <_dtoa_r+0xa0a>
 800ab76:	f000 f9c3 	bl	800af00 <__multadd>
 800ab7a:	4639      	mov	r1, r7
 800ab7c:	4680      	mov	r8, r0
 800ab7e:	2300      	movs	r3, #0
 800ab80:	220a      	movs	r2, #10
 800ab82:	4620      	mov	r0, r4
 800ab84:	f000 f9bc 	bl	800af00 <__multadd>
 800ab88:	4607      	mov	r7, r0
 800ab8a:	e7f0      	b.n	800ab6e <_dtoa_r+0xb16>
 800ab8c:	9b04      	ldr	r3, [sp, #16]
 800ab8e:	9301      	str	r3, [sp, #4]
 800ab90:	9d00      	ldr	r5, [sp, #0]
 800ab92:	4631      	mov	r1, r6
 800ab94:	4650      	mov	r0, sl
 800ab96:	f7ff f9d5 	bl	8009f44 <quorem>
 800ab9a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ab9e:	9b00      	ldr	r3, [sp, #0]
 800aba0:	f805 9b01 	strb.w	r9, [r5], #1
 800aba4:	1aea      	subs	r2, r5, r3
 800aba6:	9b01      	ldr	r3, [sp, #4]
 800aba8:	4293      	cmp	r3, r2
 800abaa:	dd07      	ble.n	800abbc <_dtoa_r+0xb64>
 800abac:	4651      	mov	r1, sl
 800abae:	2300      	movs	r3, #0
 800abb0:	220a      	movs	r2, #10
 800abb2:	4620      	mov	r0, r4
 800abb4:	f000 f9a4 	bl	800af00 <__multadd>
 800abb8:	4682      	mov	sl, r0
 800abba:	e7ea      	b.n	800ab92 <_dtoa_r+0xb3a>
 800abbc:	9b01      	ldr	r3, [sp, #4]
 800abbe:	2b00      	cmp	r3, #0
 800abc0:	bfc8      	it	gt
 800abc2:	461d      	movgt	r5, r3
 800abc4:	9b00      	ldr	r3, [sp, #0]
 800abc6:	bfd8      	it	le
 800abc8:	2501      	movle	r5, #1
 800abca:	441d      	add	r5, r3
 800abcc:	f04f 0800 	mov.w	r8, #0
 800abd0:	4651      	mov	r1, sl
 800abd2:	2201      	movs	r2, #1
 800abd4:	4620      	mov	r0, r4
 800abd6:	f000 fb8b 	bl	800b2f0 <__lshift>
 800abda:	4631      	mov	r1, r6
 800abdc:	4682      	mov	sl, r0
 800abde:	f000 fbf3 	bl	800b3c8 <__mcmp>
 800abe2:	2800      	cmp	r0, #0
 800abe4:	dc96      	bgt.n	800ab14 <_dtoa_r+0xabc>
 800abe6:	d102      	bne.n	800abee <_dtoa_r+0xb96>
 800abe8:	f019 0f01 	tst.w	r9, #1
 800abec:	d192      	bne.n	800ab14 <_dtoa_r+0xabc>
 800abee:	462b      	mov	r3, r5
 800abf0:	461d      	mov	r5, r3
 800abf2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800abf6:	2a30      	cmp	r2, #48	; 0x30
 800abf8:	d0fa      	beq.n	800abf0 <_dtoa_r+0xb98>
 800abfa:	e6dd      	b.n	800a9b8 <_dtoa_r+0x960>
 800abfc:	9a00      	ldr	r2, [sp, #0]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d189      	bne.n	800ab16 <_dtoa_r+0xabe>
 800ac02:	f10b 0b01 	add.w	fp, fp, #1
 800ac06:	2331      	movs	r3, #49	; 0x31
 800ac08:	e796      	b.n	800ab38 <_dtoa_r+0xae0>
 800ac0a:	4b0a      	ldr	r3, [pc, #40]	; (800ac34 <_dtoa_r+0xbdc>)
 800ac0c:	f7ff ba99 	b.w	800a142 <_dtoa_r+0xea>
 800ac10:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	f47f aa6d 	bne.w	800a0f2 <_dtoa_r+0x9a>
 800ac18:	4b07      	ldr	r3, [pc, #28]	; (800ac38 <_dtoa_r+0xbe0>)
 800ac1a:	f7ff ba92 	b.w	800a142 <_dtoa_r+0xea>
 800ac1e:	9b01      	ldr	r3, [sp, #4]
 800ac20:	2b00      	cmp	r3, #0
 800ac22:	dcb5      	bgt.n	800ab90 <_dtoa_r+0xb38>
 800ac24:	9b07      	ldr	r3, [sp, #28]
 800ac26:	2b02      	cmp	r3, #2
 800ac28:	f73f aeb1 	bgt.w	800a98e <_dtoa_r+0x936>
 800ac2c:	e7b0      	b.n	800ab90 <_dtoa_r+0xb38>
 800ac2e:	bf00      	nop
 800ac30:	0800d7d1 	.word	0x0800d7d1
 800ac34:	0800d72c 	.word	0x0800d72c
 800ac38:	0800d755 	.word	0x0800d755

0800ac3c <_free_r>:
 800ac3c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ac3e:	2900      	cmp	r1, #0
 800ac40:	d044      	beq.n	800accc <_free_r+0x90>
 800ac42:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac46:	9001      	str	r0, [sp, #4]
 800ac48:	2b00      	cmp	r3, #0
 800ac4a:	f1a1 0404 	sub.w	r4, r1, #4
 800ac4e:	bfb8      	it	lt
 800ac50:	18e4      	addlt	r4, r4, r3
 800ac52:	f000 f8e7 	bl	800ae24 <__malloc_lock>
 800ac56:	4a1e      	ldr	r2, [pc, #120]	; (800acd0 <_free_r+0x94>)
 800ac58:	9801      	ldr	r0, [sp, #4]
 800ac5a:	6813      	ldr	r3, [r2, #0]
 800ac5c:	b933      	cbnz	r3, 800ac6c <_free_r+0x30>
 800ac5e:	6063      	str	r3, [r4, #4]
 800ac60:	6014      	str	r4, [r2, #0]
 800ac62:	b003      	add	sp, #12
 800ac64:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ac68:	f000 b8e2 	b.w	800ae30 <__malloc_unlock>
 800ac6c:	42a3      	cmp	r3, r4
 800ac6e:	d908      	bls.n	800ac82 <_free_r+0x46>
 800ac70:	6825      	ldr	r5, [r4, #0]
 800ac72:	1961      	adds	r1, r4, r5
 800ac74:	428b      	cmp	r3, r1
 800ac76:	bf01      	itttt	eq
 800ac78:	6819      	ldreq	r1, [r3, #0]
 800ac7a:	685b      	ldreq	r3, [r3, #4]
 800ac7c:	1949      	addeq	r1, r1, r5
 800ac7e:	6021      	streq	r1, [r4, #0]
 800ac80:	e7ed      	b.n	800ac5e <_free_r+0x22>
 800ac82:	461a      	mov	r2, r3
 800ac84:	685b      	ldr	r3, [r3, #4]
 800ac86:	b10b      	cbz	r3, 800ac8c <_free_r+0x50>
 800ac88:	42a3      	cmp	r3, r4
 800ac8a:	d9fa      	bls.n	800ac82 <_free_r+0x46>
 800ac8c:	6811      	ldr	r1, [r2, #0]
 800ac8e:	1855      	adds	r5, r2, r1
 800ac90:	42a5      	cmp	r5, r4
 800ac92:	d10b      	bne.n	800acac <_free_r+0x70>
 800ac94:	6824      	ldr	r4, [r4, #0]
 800ac96:	4421      	add	r1, r4
 800ac98:	1854      	adds	r4, r2, r1
 800ac9a:	42a3      	cmp	r3, r4
 800ac9c:	6011      	str	r1, [r2, #0]
 800ac9e:	d1e0      	bne.n	800ac62 <_free_r+0x26>
 800aca0:	681c      	ldr	r4, [r3, #0]
 800aca2:	685b      	ldr	r3, [r3, #4]
 800aca4:	6053      	str	r3, [r2, #4]
 800aca6:	440c      	add	r4, r1
 800aca8:	6014      	str	r4, [r2, #0]
 800acaa:	e7da      	b.n	800ac62 <_free_r+0x26>
 800acac:	d902      	bls.n	800acb4 <_free_r+0x78>
 800acae:	230c      	movs	r3, #12
 800acb0:	6003      	str	r3, [r0, #0]
 800acb2:	e7d6      	b.n	800ac62 <_free_r+0x26>
 800acb4:	6825      	ldr	r5, [r4, #0]
 800acb6:	1961      	adds	r1, r4, r5
 800acb8:	428b      	cmp	r3, r1
 800acba:	bf04      	itt	eq
 800acbc:	6819      	ldreq	r1, [r3, #0]
 800acbe:	685b      	ldreq	r3, [r3, #4]
 800acc0:	6063      	str	r3, [r4, #4]
 800acc2:	bf04      	itt	eq
 800acc4:	1949      	addeq	r1, r1, r5
 800acc6:	6021      	streq	r1, [r4, #0]
 800acc8:	6054      	str	r4, [r2, #4]
 800acca:	e7ca      	b.n	800ac62 <_free_r+0x26>
 800accc:	b003      	add	sp, #12
 800acce:	bd30      	pop	{r4, r5, pc}
 800acd0:	20000d18 	.word	0x20000d18

0800acd4 <malloc>:
 800acd4:	4b02      	ldr	r3, [pc, #8]	; (800ace0 <malloc+0xc>)
 800acd6:	4601      	mov	r1, r0
 800acd8:	6818      	ldr	r0, [r3, #0]
 800acda:	f000 b823 	b.w	800ad24 <_malloc_r>
 800acde:	bf00      	nop
 800ace0:	20000078 	.word	0x20000078

0800ace4 <sbrk_aligned>:
 800ace4:	b570      	push	{r4, r5, r6, lr}
 800ace6:	4e0e      	ldr	r6, [pc, #56]	; (800ad20 <sbrk_aligned+0x3c>)
 800ace8:	460c      	mov	r4, r1
 800acea:	6831      	ldr	r1, [r6, #0]
 800acec:	4605      	mov	r5, r0
 800acee:	b911      	cbnz	r1, 800acf6 <sbrk_aligned+0x12>
 800acf0:	f001 fe1a 	bl	800c928 <_sbrk_r>
 800acf4:	6030      	str	r0, [r6, #0]
 800acf6:	4621      	mov	r1, r4
 800acf8:	4628      	mov	r0, r5
 800acfa:	f001 fe15 	bl	800c928 <_sbrk_r>
 800acfe:	1c43      	adds	r3, r0, #1
 800ad00:	d00a      	beq.n	800ad18 <sbrk_aligned+0x34>
 800ad02:	1cc4      	adds	r4, r0, #3
 800ad04:	f024 0403 	bic.w	r4, r4, #3
 800ad08:	42a0      	cmp	r0, r4
 800ad0a:	d007      	beq.n	800ad1c <sbrk_aligned+0x38>
 800ad0c:	1a21      	subs	r1, r4, r0
 800ad0e:	4628      	mov	r0, r5
 800ad10:	f001 fe0a 	bl	800c928 <_sbrk_r>
 800ad14:	3001      	adds	r0, #1
 800ad16:	d101      	bne.n	800ad1c <sbrk_aligned+0x38>
 800ad18:	f04f 34ff 	mov.w	r4, #4294967295
 800ad1c:	4620      	mov	r0, r4
 800ad1e:	bd70      	pop	{r4, r5, r6, pc}
 800ad20:	20000d1c 	.word	0x20000d1c

0800ad24 <_malloc_r>:
 800ad24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ad28:	1ccd      	adds	r5, r1, #3
 800ad2a:	f025 0503 	bic.w	r5, r5, #3
 800ad2e:	3508      	adds	r5, #8
 800ad30:	2d0c      	cmp	r5, #12
 800ad32:	bf38      	it	cc
 800ad34:	250c      	movcc	r5, #12
 800ad36:	2d00      	cmp	r5, #0
 800ad38:	4607      	mov	r7, r0
 800ad3a:	db01      	blt.n	800ad40 <_malloc_r+0x1c>
 800ad3c:	42a9      	cmp	r1, r5
 800ad3e:	d905      	bls.n	800ad4c <_malloc_r+0x28>
 800ad40:	230c      	movs	r3, #12
 800ad42:	603b      	str	r3, [r7, #0]
 800ad44:	2600      	movs	r6, #0
 800ad46:	4630      	mov	r0, r6
 800ad48:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ad4c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ae20 <_malloc_r+0xfc>
 800ad50:	f000 f868 	bl	800ae24 <__malloc_lock>
 800ad54:	f8d8 3000 	ldr.w	r3, [r8]
 800ad58:	461c      	mov	r4, r3
 800ad5a:	bb5c      	cbnz	r4, 800adb4 <_malloc_r+0x90>
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	4638      	mov	r0, r7
 800ad60:	f7ff ffc0 	bl	800ace4 <sbrk_aligned>
 800ad64:	1c43      	adds	r3, r0, #1
 800ad66:	4604      	mov	r4, r0
 800ad68:	d155      	bne.n	800ae16 <_malloc_r+0xf2>
 800ad6a:	f8d8 4000 	ldr.w	r4, [r8]
 800ad6e:	4626      	mov	r6, r4
 800ad70:	2e00      	cmp	r6, #0
 800ad72:	d145      	bne.n	800ae00 <_malloc_r+0xdc>
 800ad74:	2c00      	cmp	r4, #0
 800ad76:	d048      	beq.n	800ae0a <_malloc_r+0xe6>
 800ad78:	6823      	ldr	r3, [r4, #0]
 800ad7a:	4631      	mov	r1, r6
 800ad7c:	4638      	mov	r0, r7
 800ad7e:	eb04 0903 	add.w	r9, r4, r3
 800ad82:	f001 fdd1 	bl	800c928 <_sbrk_r>
 800ad86:	4581      	cmp	r9, r0
 800ad88:	d13f      	bne.n	800ae0a <_malloc_r+0xe6>
 800ad8a:	6821      	ldr	r1, [r4, #0]
 800ad8c:	1a6d      	subs	r5, r5, r1
 800ad8e:	4629      	mov	r1, r5
 800ad90:	4638      	mov	r0, r7
 800ad92:	f7ff ffa7 	bl	800ace4 <sbrk_aligned>
 800ad96:	3001      	adds	r0, #1
 800ad98:	d037      	beq.n	800ae0a <_malloc_r+0xe6>
 800ad9a:	6823      	ldr	r3, [r4, #0]
 800ad9c:	442b      	add	r3, r5
 800ad9e:	6023      	str	r3, [r4, #0]
 800ada0:	f8d8 3000 	ldr.w	r3, [r8]
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d038      	beq.n	800ae1a <_malloc_r+0xf6>
 800ada8:	685a      	ldr	r2, [r3, #4]
 800adaa:	42a2      	cmp	r2, r4
 800adac:	d12b      	bne.n	800ae06 <_malloc_r+0xe2>
 800adae:	2200      	movs	r2, #0
 800adb0:	605a      	str	r2, [r3, #4]
 800adb2:	e00f      	b.n	800add4 <_malloc_r+0xb0>
 800adb4:	6822      	ldr	r2, [r4, #0]
 800adb6:	1b52      	subs	r2, r2, r5
 800adb8:	d41f      	bmi.n	800adfa <_malloc_r+0xd6>
 800adba:	2a0b      	cmp	r2, #11
 800adbc:	d917      	bls.n	800adee <_malloc_r+0xca>
 800adbe:	1961      	adds	r1, r4, r5
 800adc0:	42a3      	cmp	r3, r4
 800adc2:	6025      	str	r5, [r4, #0]
 800adc4:	bf18      	it	ne
 800adc6:	6059      	strne	r1, [r3, #4]
 800adc8:	6863      	ldr	r3, [r4, #4]
 800adca:	bf08      	it	eq
 800adcc:	f8c8 1000 	streq.w	r1, [r8]
 800add0:	5162      	str	r2, [r4, r5]
 800add2:	604b      	str	r3, [r1, #4]
 800add4:	4638      	mov	r0, r7
 800add6:	f104 060b 	add.w	r6, r4, #11
 800adda:	f000 f829 	bl	800ae30 <__malloc_unlock>
 800adde:	f026 0607 	bic.w	r6, r6, #7
 800ade2:	1d23      	adds	r3, r4, #4
 800ade4:	1af2      	subs	r2, r6, r3
 800ade6:	d0ae      	beq.n	800ad46 <_malloc_r+0x22>
 800ade8:	1b9b      	subs	r3, r3, r6
 800adea:	50a3      	str	r3, [r4, r2]
 800adec:	e7ab      	b.n	800ad46 <_malloc_r+0x22>
 800adee:	42a3      	cmp	r3, r4
 800adf0:	6862      	ldr	r2, [r4, #4]
 800adf2:	d1dd      	bne.n	800adb0 <_malloc_r+0x8c>
 800adf4:	f8c8 2000 	str.w	r2, [r8]
 800adf8:	e7ec      	b.n	800add4 <_malloc_r+0xb0>
 800adfa:	4623      	mov	r3, r4
 800adfc:	6864      	ldr	r4, [r4, #4]
 800adfe:	e7ac      	b.n	800ad5a <_malloc_r+0x36>
 800ae00:	4634      	mov	r4, r6
 800ae02:	6876      	ldr	r6, [r6, #4]
 800ae04:	e7b4      	b.n	800ad70 <_malloc_r+0x4c>
 800ae06:	4613      	mov	r3, r2
 800ae08:	e7cc      	b.n	800ada4 <_malloc_r+0x80>
 800ae0a:	230c      	movs	r3, #12
 800ae0c:	603b      	str	r3, [r7, #0]
 800ae0e:	4638      	mov	r0, r7
 800ae10:	f000 f80e 	bl	800ae30 <__malloc_unlock>
 800ae14:	e797      	b.n	800ad46 <_malloc_r+0x22>
 800ae16:	6025      	str	r5, [r4, #0]
 800ae18:	e7dc      	b.n	800add4 <_malloc_r+0xb0>
 800ae1a:	605b      	str	r3, [r3, #4]
 800ae1c:	deff      	udf	#255	; 0xff
 800ae1e:	bf00      	nop
 800ae20:	20000d18 	.word	0x20000d18

0800ae24 <__malloc_lock>:
 800ae24:	4801      	ldr	r0, [pc, #4]	; (800ae2c <__malloc_lock+0x8>)
 800ae26:	f7ff b884 	b.w	8009f32 <__retarget_lock_acquire_recursive>
 800ae2a:	bf00      	nop
 800ae2c:	20000d14 	.word	0x20000d14

0800ae30 <__malloc_unlock>:
 800ae30:	4801      	ldr	r0, [pc, #4]	; (800ae38 <__malloc_unlock+0x8>)
 800ae32:	f7ff b87f 	b.w	8009f34 <__retarget_lock_release_recursive>
 800ae36:	bf00      	nop
 800ae38:	20000d14 	.word	0x20000d14

0800ae3c <_Balloc>:
 800ae3c:	b570      	push	{r4, r5, r6, lr}
 800ae3e:	69c6      	ldr	r6, [r0, #28]
 800ae40:	4604      	mov	r4, r0
 800ae42:	460d      	mov	r5, r1
 800ae44:	b976      	cbnz	r6, 800ae64 <_Balloc+0x28>
 800ae46:	2010      	movs	r0, #16
 800ae48:	f7ff ff44 	bl	800acd4 <malloc>
 800ae4c:	4602      	mov	r2, r0
 800ae4e:	61e0      	str	r0, [r4, #28]
 800ae50:	b920      	cbnz	r0, 800ae5c <_Balloc+0x20>
 800ae52:	4b18      	ldr	r3, [pc, #96]	; (800aeb4 <_Balloc+0x78>)
 800ae54:	4818      	ldr	r0, [pc, #96]	; (800aeb8 <_Balloc+0x7c>)
 800ae56:	216b      	movs	r1, #107	; 0x6b
 800ae58:	f001 fd8e 	bl	800c978 <__assert_func>
 800ae5c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ae60:	6006      	str	r6, [r0, #0]
 800ae62:	60c6      	str	r6, [r0, #12]
 800ae64:	69e6      	ldr	r6, [r4, #28]
 800ae66:	68f3      	ldr	r3, [r6, #12]
 800ae68:	b183      	cbz	r3, 800ae8c <_Balloc+0x50>
 800ae6a:	69e3      	ldr	r3, [r4, #28]
 800ae6c:	68db      	ldr	r3, [r3, #12]
 800ae6e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800ae72:	b9b8      	cbnz	r0, 800aea4 <_Balloc+0x68>
 800ae74:	2101      	movs	r1, #1
 800ae76:	fa01 f605 	lsl.w	r6, r1, r5
 800ae7a:	1d72      	adds	r2, r6, #5
 800ae7c:	0092      	lsls	r2, r2, #2
 800ae7e:	4620      	mov	r0, r4
 800ae80:	f001 fd98 	bl	800c9b4 <_calloc_r>
 800ae84:	b160      	cbz	r0, 800aea0 <_Balloc+0x64>
 800ae86:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800ae8a:	e00e      	b.n	800aeaa <_Balloc+0x6e>
 800ae8c:	2221      	movs	r2, #33	; 0x21
 800ae8e:	2104      	movs	r1, #4
 800ae90:	4620      	mov	r0, r4
 800ae92:	f001 fd8f 	bl	800c9b4 <_calloc_r>
 800ae96:	69e3      	ldr	r3, [r4, #28]
 800ae98:	60f0      	str	r0, [r6, #12]
 800ae9a:	68db      	ldr	r3, [r3, #12]
 800ae9c:	2b00      	cmp	r3, #0
 800ae9e:	d1e4      	bne.n	800ae6a <_Balloc+0x2e>
 800aea0:	2000      	movs	r0, #0
 800aea2:	bd70      	pop	{r4, r5, r6, pc}
 800aea4:	6802      	ldr	r2, [r0, #0]
 800aea6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aeaa:	2300      	movs	r3, #0
 800aeac:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aeb0:	e7f7      	b.n	800aea2 <_Balloc+0x66>
 800aeb2:	bf00      	nop
 800aeb4:	0800d762 	.word	0x0800d762
 800aeb8:	0800d7e2 	.word	0x0800d7e2

0800aebc <_Bfree>:
 800aebc:	b570      	push	{r4, r5, r6, lr}
 800aebe:	69c6      	ldr	r6, [r0, #28]
 800aec0:	4605      	mov	r5, r0
 800aec2:	460c      	mov	r4, r1
 800aec4:	b976      	cbnz	r6, 800aee4 <_Bfree+0x28>
 800aec6:	2010      	movs	r0, #16
 800aec8:	f7ff ff04 	bl	800acd4 <malloc>
 800aecc:	4602      	mov	r2, r0
 800aece:	61e8      	str	r0, [r5, #28]
 800aed0:	b920      	cbnz	r0, 800aedc <_Bfree+0x20>
 800aed2:	4b09      	ldr	r3, [pc, #36]	; (800aef8 <_Bfree+0x3c>)
 800aed4:	4809      	ldr	r0, [pc, #36]	; (800aefc <_Bfree+0x40>)
 800aed6:	218f      	movs	r1, #143	; 0x8f
 800aed8:	f001 fd4e 	bl	800c978 <__assert_func>
 800aedc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aee0:	6006      	str	r6, [r0, #0]
 800aee2:	60c6      	str	r6, [r0, #12]
 800aee4:	b13c      	cbz	r4, 800aef6 <_Bfree+0x3a>
 800aee6:	69eb      	ldr	r3, [r5, #28]
 800aee8:	6862      	ldr	r2, [r4, #4]
 800aeea:	68db      	ldr	r3, [r3, #12]
 800aeec:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aef0:	6021      	str	r1, [r4, #0]
 800aef2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aef6:	bd70      	pop	{r4, r5, r6, pc}
 800aef8:	0800d762 	.word	0x0800d762
 800aefc:	0800d7e2 	.word	0x0800d7e2

0800af00 <__multadd>:
 800af00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af04:	690d      	ldr	r5, [r1, #16]
 800af06:	4607      	mov	r7, r0
 800af08:	460c      	mov	r4, r1
 800af0a:	461e      	mov	r6, r3
 800af0c:	f101 0c14 	add.w	ip, r1, #20
 800af10:	2000      	movs	r0, #0
 800af12:	f8dc 3000 	ldr.w	r3, [ip]
 800af16:	b299      	uxth	r1, r3
 800af18:	fb02 6101 	mla	r1, r2, r1, r6
 800af1c:	0c1e      	lsrs	r6, r3, #16
 800af1e:	0c0b      	lsrs	r3, r1, #16
 800af20:	fb02 3306 	mla	r3, r2, r6, r3
 800af24:	b289      	uxth	r1, r1
 800af26:	3001      	adds	r0, #1
 800af28:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800af2c:	4285      	cmp	r5, r0
 800af2e:	f84c 1b04 	str.w	r1, [ip], #4
 800af32:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800af36:	dcec      	bgt.n	800af12 <__multadd+0x12>
 800af38:	b30e      	cbz	r6, 800af7e <__multadd+0x7e>
 800af3a:	68a3      	ldr	r3, [r4, #8]
 800af3c:	42ab      	cmp	r3, r5
 800af3e:	dc19      	bgt.n	800af74 <__multadd+0x74>
 800af40:	6861      	ldr	r1, [r4, #4]
 800af42:	4638      	mov	r0, r7
 800af44:	3101      	adds	r1, #1
 800af46:	f7ff ff79 	bl	800ae3c <_Balloc>
 800af4a:	4680      	mov	r8, r0
 800af4c:	b928      	cbnz	r0, 800af5a <__multadd+0x5a>
 800af4e:	4602      	mov	r2, r0
 800af50:	4b0c      	ldr	r3, [pc, #48]	; (800af84 <__multadd+0x84>)
 800af52:	480d      	ldr	r0, [pc, #52]	; (800af88 <__multadd+0x88>)
 800af54:	21ba      	movs	r1, #186	; 0xba
 800af56:	f001 fd0f 	bl	800c978 <__assert_func>
 800af5a:	6922      	ldr	r2, [r4, #16]
 800af5c:	3202      	adds	r2, #2
 800af5e:	f104 010c 	add.w	r1, r4, #12
 800af62:	0092      	lsls	r2, r2, #2
 800af64:	300c      	adds	r0, #12
 800af66:	f001 fcef 	bl	800c948 <memcpy>
 800af6a:	4621      	mov	r1, r4
 800af6c:	4638      	mov	r0, r7
 800af6e:	f7ff ffa5 	bl	800aebc <_Bfree>
 800af72:	4644      	mov	r4, r8
 800af74:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800af78:	3501      	adds	r5, #1
 800af7a:	615e      	str	r6, [r3, #20]
 800af7c:	6125      	str	r5, [r4, #16]
 800af7e:	4620      	mov	r0, r4
 800af80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af84:	0800d7d1 	.word	0x0800d7d1
 800af88:	0800d7e2 	.word	0x0800d7e2

0800af8c <__s2b>:
 800af8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800af90:	460c      	mov	r4, r1
 800af92:	4615      	mov	r5, r2
 800af94:	461f      	mov	r7, r3
 800af96:	2209      	movs	r2, #9
 800af98:	3308      	adds	r3, #8
 800af9a:	4606      	mov	r6, r0
 800af9c:	fb93 f3f2 	sdiv	r3, r3, r2
 800afa0:	2100      	movs	r1, #0
 800afa2:	2201      	movs	r2, #1
 800afa4:	429a      	cmp	r2, r3
 800afa6:	db09      	blt.n	800afbc <__s2b+0x30>
 800afa8:	4630      	mov	r0, r6
 800afaa:	f7ff ff47 	bl	800ae3c <_Balloc>
 800afae:	b940      	cbnz	r0, 800afc2 <__s2b+0x36>
 800afb0:	4602      	mov	r2, r0
 800afb2:	4b19      	ldr	r3, [pc, #100]	; (800b018 <__s2b+0x8c>)
 800afb4:	4819      	ldr	r0, [pc, #100]	; (800b01c <__s2b+0x90>)
 800afb6:	21d3      	movs	r1, #211	; 0xd3
 800afb8:	f001 fcde 	bl	800c978 <__assert_func>
 800afbc:	0052      	lsls	r2, r2, #1
 800afbe:	3101      	adds	r1, #1
 800afc0:	e7f0      	b.n	800afa4 <__s2b+0x18>
 800afc2:	9b08      	ldr	r3, [sp, #32]
 800afc4:	6143      	str	r3, [r0, #20]
 800afc6:	2d09      	cmp	r5, #9
 800afc8:	f04f 0301 	mov.w	r3, #1
 800afcc:	6103      	str	r3, [r0, #16]
 800afce:	dd16      	ble.n	800affe <__s2b+0x72>
 800afd0:	f104 0909 	add.w	r9, r4, #9
 800afd4:	46c8      	mov	r8, r9
 800afd6:	442c      	add	r4, r5
 800afd8:	f818 3b01 	ldrb.w	r3, [r8], #1
 800afdc:	4601      	mov	r1, r0
 800afde:	3b30      	subs	r3, #48	; 0x30
 800afe0:	220a      	movs	r2, #10
 800afe2:	4630      	mov	r0, r6
 800afe4:	f7ff ff8c 	bl	800af00 <__multadd>
 800afe8:	45a0      	cmp	r8, r4
 800afea:	d1f5      	bne.n	800afd8 <__s2b+0x4c>
 800afec:	f1a5 0408 	sub.w	r4, r5, #8
 800aff0:	444c      	add	r4, r9
 800aff2:	1b2d      	subs	r5, r5, r4
 800aff4:	1963      	adds	r3, r4, r5
 800aff6:	42bb      	cmp	r3, r7
 800aff8:	db04      	blt.n	800b004 <__s2b+0x78>
 800affa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800affe:	340a      	adds	r4, #10
 800b000:	2509      	movs	r5, #9
 800b002:	e7f6      	b.n	800aff2 <__s2b+0x66>
 800b004:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b008:	4601      	mov	r1, r0
 800b00a:	3b30      	subs	r3, #48	; 0x30
 800b00c:	220a      	movs	r2, #10
 800b00e:	4630      	mov	r0, r6
 800b010:	f7ff ff76 	bl	800af00 <__multadd>
 800b014:	e7ee      	b.n	800aff4 <__s2b+0x68>
 800b016:	bf00      	nop
 800b018:	0800d7d1 	.word	0x0800d7d1
 800b01c:	0800d7e2 	.word	0x0800d7e2

0800b020 <__hi0bits>:
 800b020:	0c03      	lsrs	r3, r0, #16
 800b022:	041b      	lsls	r3, r3, #16
 800b024:	b9d3      	cbnz	r3, 800b05c <__hi0bits+0x3c>
 800b026:	0400      	lsls	r0, r0, #16
 800b028:	2310      	movs	r3, #16
 800b02a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b02e:	bf04      	itt	eq
 800b030:	0200      	lsleq	r0, r0, #8
 800b032:	3308      	addeq	r3, #8
 800b034:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b038:	bf04      	itt	eq
 800b03a:	0100      	lsleq	r0, r0, #4
 800b03c:	3304      	addeq	r3, #4
 800b03e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b042:	bf04      	itt	eq
 800b044:	0080      	lsleq	r0, r0, #2
 800b046:	3302      	addeq	r3, #2
 800b048:	2800      	cmp	r0, #0
 800b04a:	db05      	blt.n	800b058 <__hi0bits+0x38>
 800b04c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b050:	f103 0301 	add.w	r3, r3, #1
 800b054:	bf08      	it	eq
 800b056:	2320      	moveq	r3, #32
 800b058:	4618      	mov	r0, r3
 800b05a:	4770      	bx	lr
 800b05c:	2300      	movs	r3, #0
 800b05e:	e7e4      	b.n	800b02a <__hi0bits+0xa>

0800b060 <__lo0bits>:
 800b060:	6803      	ldr	r3, [r0, #0]
 800b062:	f013 0207 	ands.w	r2, r3, #7
 800b066:	d00c      	beq.n	800b082 <__lo0bits+0x22>
 800b068:	07d9      	lsls	r1, r3, #31
 800b06a:	d422      	bmi.n	800b0b2 <__lo0bits+0x52>
 800b06c:	079a      	lsls	r2, r3, #30
 800b06e:	bf49      	itett	mi
 800b070:	085b      	lsrmi	r3, r3, #1
 800b072:	089b      	lsrpl	r3, r3, #2
 800b074:	6003      	strmi	r3, [r0, #0]
 800b076:	2201      	movmi	r2, #1
 800b078:	bf5c      	itt	pl
 800b07a:	6003      	strpl	r3, [r0, #0]
 800b07c:	2202      	movpl	r2, #2
 800b07e:	4610      	mov	r0, r2
 800b080:	4770      	bx	lr
 800b082:	b299      	uxth	r1, r3
 800b084:	b909      	cbnz	r1, 800b08a <__lo0bits+0x2a>
 800b086:	0c1b      	lsrs	r3, r3, #16
 800b088:	2210      	movs	r2, #16
 800b08a:	b2d9      	uxtb	r1, r3
 800b08c:	b909      	cbnz	r1, 800b092 <__lo0bits+0x32>
 800b08e:	3208      	adds	r2, #8
 800b090:	0a1b      	lsrs	r3, r3, #8
 800b092:	0719      	lsls	r1, r3, #28
 800b094:	bf04      	itt	eq
 800b096:	091b      	lsreq	r3, r3, #4
 800b098:	3204      	addeq	r2, #4
 800b09a:	0799      	lsls	r1, r3, #30
 800b09c:	bf04      	itt	eq
 800b09e:	089b      	lsreq	r3, r3, #2
 800b0a0:	3202      	addeq	r2, #2
 800b0a2:	07d9      	lsls	r1, r3, #31
 800b0a4:	d403      	bmi.n	800b0ae <__lo0bits+0x4e>
 800b0a6:	085b      	lsrs	r3, r3, #1
 800b0a8:	f102 0201 	add.w	r2, r2, #1
 800b0ac:	d003      	beq.n	800b0b6 <__lo0bits+0x56>
 800b0ae:	6003      	str	r3, [r0, #0]
 800b0b0:	e7e5      	b.n	800b07e <__lo0bits+0x1e>
 800b0b2:	2200      	movs	r2, #0
 800b0b4:	e7e3      	b.n	800b07e <__lo0bits+0x1e>
 800b0b6:	2220      	movs	r2, #32
 800b0b8:	e7e1      	b.n	800b07e <__lo0bits+0x1e>
	...

0800b0bc <__i2b>:
 800b0bc:	b510      	push	{r4, lr}
 800b0be:	460c      	mov	r4, r1
 800b0c0:	2101      	movs	r1, #1
 800b0c2:	f7ff febb 	bl	800ae3c <_Balloc>
 800b0c6:	4602      	mov	r2, r0
 800b0c8:	b928      	cbnz	r0, 800b0d6 <__i2b+0x1a>
 800b0ca:	4b05      	ldr	r3, [pc, #20]	; (800b0e0 <__i2b+0x24>)
 800b0cc:	4805      	ldr	r0, [pc, #20]	; (800b0e4 <__i2b+0x28>)
 800b0ce:	f240 1145 	movw	r1, #325	; 0x145
 800b0d2:	f001 fc51 	bl	800c978 <__assert_func>
 800b0d6:	2301      	movs	r3, #1
 800b0d8:	6144      	str	r4, [r0, #20]
 800b0da:	6103      	str	r3, [r0, #16]
 800b0dc:	bd10      	pop	{r4, pc}
 800b0de:	bf00      	nop
 800b0e0:	0800d7d1 	.word	0x0800d7d1
 800b0e4:	0800d7e2 	.word	0x0800d7e2

0800b0e8 <__multiply>:
 800b0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b0ec:	4691      	mov	r9, r2
 800b0ee:	690a      	ldr	r2, [r1, #16]
 800b0f0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b0f4:	429a      	cmp	r2, r3
 800b0f6:	bfb8      	it	lt
 800b0f8:	460b      	movlt	r3, r1
 800b0fa:	460c      	mov	r4, r1
 800b0fc:	bfbc      	itt	lt
 800b0fe:	464c      	movlt	r4, r9
 800b100:	4699      	movlt	r9, r3
 800b102:	6927      	ldr	r7, [r4, #16]
 800b104:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b108:	68a3      	ldr	r3, [r4, #8]
 800b10a:	6861      	ldr	r1, [r4, #4]
 800b10c:	eb07 060a 	add.w	r6, r7, sl
 800b110:	42b3      	cmp	r3, r6
 800b112:	b085      	sub	sp, #20
 800b114:	bfb8      	it	lt
 800b116:	3101      	addlt	r1, #1
 800b118:	f7ff fe90 	bl	800ae3c <_Balloc>
 800b11c:	b930      	cbnz	r0, 800b12c <__multiply+0x44>
 800b11e:	4602      	mov	r2, r0
 800b120:	4b44      	ldr	r3, [pc, #272]	; (800b234 <__multiply+0x14c>)
 800b122:	4845      	ldr	r0, [pc, #276]	; (800b238 <__multiply+0x150>)
 800b124:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b128:	f001 fc26 	bl	800c978 <__assert_func>
 800b12c:	f100 0514 	add.w	r5, r0, #20
 800b130:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b134:	462b      	mov	r3, r5
 800b136:	2200      	movs	r2, #0
 800b138:	4543      	cmp	r3, r8
 800b13a:	d321      	bcc.n	800b180 <__multiply+0x98>
 800b13c:	f104 0314 	add.w	r3, r4, #20
 800b140:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b144:	f109 0314 	add.w	r3, r9, #20
 800b148:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b14c:	9202      	str	r2, [sp, #8]
 800b14e:	1b3a      	subs	r2, r7, r4
 800b150:	3a15      	subs	r2, #21
 800b152:	f022 0203 	bic.w	r2, r2, #3
 800b156:	3204      	adds	r2, #4
 800b158:	f104 0115 	add.w	r1, r4, #21
 800b15c:	428f      	cmp	r7, r1
 800b15e:	bf38      	it	cc
 800b160:	2204      	movcc	r2, #4
 800b162:	9201      	str	r2, [sp, #4]
 800b164:	9a02      	ldr	r2, [sp, #8]
 800b166:	9303      	str	r3, [sp, #12]
 800b168:	429a      	cmp	r2, r3
 800b16a:	d80c      	bhi.n	800b186 <__multiply+0x9e>
 800b16c:	2e00      	cmp	r6, #0
 800b16e:	dd03      	ble.n	800b178 <__multiply+0x90>
 800b170:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b174:	2b00      	cmp	r3, #0
 800b176:	d05b      	beq.n	800b230 <__multiply+0x148>
 800b178:	6106      	str	r6, [r0, #16]
 800b17a:	b005      	add	sp, #20
 800b17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b180:	f843 2b04 	str.w	r2, [r3], #4
 800b184:	e7d8      	b.n	800b138 <__multiply+0x50>
 800b186:	f8b3 a000 	ldrh.w	sl, [r3]
 800b18a:	f1ba 0f00 	cmp.w	sl, #0
 800b18e:	d024      	beq.n	800b1da <__multiply+0xf2>
 800b190:	f104 0e14 	add.w	lr, r4, #20
 800b194:	46a9      	mov	r9, r5
 800b196:	f04f 0c00 	mov.w	ip, #0
 800b19a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b19e:	f8d9 1000 	ldr.w	r1, [r9]
 800b1a2:	fa1f fb82 	uxth.w	fp, r2
 800b1a6:	b289      	uxth	r1, r1
 800b1a8:	fb0a 110b 	mla	r1, sl, fp, r1
 800b1ac:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b1b0:	f8d9 2000 	ldr.w	r2, [r9]
 800b1b4:	4461      	add	r1, ip
 800b1b6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b1ba:	fb0a c20b 	mla	r2, sl, fp, ip
 800b1be:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b1c2:	b289      	uxth	r1, r1
 800b1c4:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b1c8:	4577      	cmp	r7, lr
 800b1ca:	f849 1b04 	str.w	r1, [r9], #4
 800b1ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b1d2:	d8e2      	bhi.n	800b19a <__multiply+0xb2>
 800b1d4:	9a01      	ldr	r2, [sp, #4]
 800b1d6:	f845 c002 	str.w	ip, [r5, r2]
 800b1da:	9a03      	ldr	r2, [sp, #12]
 800b1dc:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b1e0:	3304      	adds	r3, #4
 800b1e2:	f1b9 0f00 	cmp.w	r9, #0
 800b1e6:	d021      	beq.n	800b22c <__multiply+0x144>
 800b1e8:	6829      	ldr	r1, [r5, #0]
 800b1ea:	f104 0c14 	add.w	ip, r4, #20
 800b1ee:	46ae      	mov	lr, r5
 800b1f0:	f04f 0a00 	mov.w	sl, #0
 800b1f4:	f8bc b000 	ldrh.w	fp, [ip]
 800b1f8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b1fc:	fb09 220b 	mla	r2, r9, fp, r2
 800b200:	4452      	add	r2, sl
 800b202:	b289      	uxth	r1, r1
 800b204:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b208:	f84e 1b04 	str.w	r1, [lr], #4
 800b20c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b210:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b214:	f8be 1000 	ldrh.w	r1, [lr]
 800b218:	fb09 110a 	mla	r1, r9, sl, r1
 800b21c:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b220:	4567      	cmp	r7, ip
 800b222:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b226:	d8e5      	bhi.n	800b1f4 <__multiply+0x10c>
 800b228:	9a01      	ldr	r2, [sp, #4]
 800b22a:	50a9      	str	r1, [r5, r2]
 800b22c:	3504      	adds	r5, #4
 800b22e:	e799      	b.n	800b164 <__multiply+0x7c>
 800b230:	3e01      	subs	r6, #1
 800b232:	e79b      	b.n	800b16c <__multiply+0x84>
 800b234:	0800d7d1 	.word	0x0800d7d1
 800b238:	0800d7e2 	.word	0x0800d7e2

0800b23c <__pow5mult>:
 800b23c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b240:	4615      	mov	r5, r2
 800b242:	f012 0203 	ands.w	r2, r2, #3
 800b246:	4606      	mov	r6, r0
 800b248:	460f      	mov	r7, r1
 800b24a:	d007      	beq.n	800b25c <__pow5mult+0x20>
 800b24c:	4c25      	ldr	r4, [pc, #148]	; (800b2e4 <__pow5mult+0xa8>)
 800b24e:	3a01      	subs	r2, #1
 800b250:	2300      	movs	r3, #0
 800b252:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b256:	f7ff fe53 	bl	800af00 <__multadd>
 800b25a:	4607      	mov	r7, r0
 800b25c:	10ad      	asrs	r5, r5, #2
 800b25e:	d03d      	beq.n	800b2dc <__pow5mult+0xa0>
 800b260:	69f4      	ldr	r4, [r6, #28]
 800b262:	b97c      	cbnz	r4, 800b284 <__pow5mult+0x48>
 800b264:	2010      	movs	r0, #16
 800b266:	f7ff fd35 	bl	800acd4 <malloc>
 800b26a:	4602      	mov	r2, r0
 800b26c:	61f0      	str	r0, [r6, #28]
 800b26e:	b928      	cbnz	r0, 800b27c <__pow5mult+0x40>
 800b270:	4b1d      	ldr	r3, [pc, #116]	; (800b2e8 <__pow5mult+0xac>)
 800b272:	481e      	ldr	r0, [pc, #120]	; (800b2ec <__pow5mult+0xb0>)
 800b274:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b278:	f001 fb7e 	bl	800c978 <__assert_func>
 800b27c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b280:	6004      	str	r4, [r0, #0]
 800b282:	60c4      	str	r4, [r0, #12]
 800b284:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b288:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b28c:	b94c      	cbnz	r4, 800b2a2 <__pow5mult+0x66>
 800b28e:	f240 2171 	movw	r1, #625	; 0x271
 800b292:	4630      	mov	r0, r6
 800b294:	f7ff ff12 	bl	800b0bc <__i2b>
 800b298:	2300      	movs	r3, #0
 800b29a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b29e:	4604      	mov	r4, r0
 800b2a0:	6003      	str	r3, [r0, #0]
 800b2a2:	f04f 0900 	mov.w	r9, #0
 800b2a6:	07eb      	lsls	r3, r5, #31
 800b2a8:	d50a      	bpl.n	800b2c0 <__pow5mult+0x84>
 800b2aa:	4639      	mov	r1, r7
 800b2ac:	4622      	mov	r2, r4
 800b2ae:	4630      	mov	r0, r6
 800b2b0:	f7ff ff1a 	bl	800b0e8 <__multiply>
 800b2b4:	4639      	mov	r1, r7
 800b2b6:	4680      	mov	r8, r0
 800b2b8:	4630      	mov	r0, r6
 800b2ba:	f7ff fdff 	bl	800aebc <_Bfree>
 800b2be:	4647      	mov	r7, r8
 800b2c0:	106d      	asrs	r5, r5, #1
 800b2c2:	d00b      	beq.n	800b2dc <__pow5mult+0xa0>
 800b2c4:	6820      	ldr	r0, [r4, #0]
 800b2c6:	b938      	cbnz	r0, 800b2d8 <__pow5mult+0x9c>
 800b2c8:	4622      	mov	r2, r4
 800b2ca:	4621      	mov	r1, r4
 800b2cc:	4630      	mov	r0, r6
 800b2ce:	f7ff ff0b 	bl	800b0e8 <__multiply>
 800b2d2:	6020      	str	r0, [r4, #0]
 800b2d4:	f8c0 9000 	str.w	r9, [r0]
 800b2d8:	4604      	mov	r4, r0
 800b2da:	e7e4      	b.n	800b2a6 <__pow5mult+0x6a>
 800b2dc:	4638      	mov	r0, r7
 800b2de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b2e2:	bf00      	nop
 800b2e4:	0800d930 	.word	0x0800d930
 800b2e8:	0800d762 	.word	0x0800d762
 800b2ec:	0800d7e2 	.word	0x0800d7e2

0800b2f0 <__lshift>:
 800b2f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b2f4:	460c      	mov	r4, r1
 800b2f6:	6849      	ldr	r1, [r1, #4]
 800b2f8:	6923      	ldr	r3, [r4, #16]
 800b2fa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b2fe:	68a3      	ldr	r3, [r4, #8]
 800b300:	4607      	mov	r7, r0
 800b302:	4691      	mov	r9, r2
 800b304:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b308:	f108 0601 	add.w	r6, r8, #1
 800b30c:	42b3      	cmp	r3, r6
 800b30e:	db0b      	blt.n	800b328 <__lshift+0x38>
 800b310:	4638      	mov	r0, r7
 800b312:	f7ff fd93 	bl	800ae3c <_Balloc>
 800b316:	4605      	mov	r5, r0
 800b318:	b948      	cbnz	r0, 800b32e <__lshift+0x3e>
 800b31a:	4602      	mov	r2, r0
 800b31c:	4b28      	ldr	r3, [pc, #160]	; (800b3c0 <__lshift+0xd0>)
 800b31e:	4829      	ldr	r0, [pc, #164]	; (800b3c4 <__lshift+0xd4>)
 800b320:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b324:	f001 fb28 	bl	800c978 <__assert_func>
 800b328:	3101      	adds	r1, #1
 800b32a:	005b      	lsls	r3, r3, #1
 800b32c:	e7ee      	b.n	800b30c <__lshift+0x1c>
 800b32e:	2300      	movs	r3, #0
 800b330:	f100 0114 	add.w	r1, r0, #20
 800b334:	f100 0210 	add.w	r2, r0, #16
 800b338:	4618      	mov	r0, r3
 800b33a:	4553      	cmp	r3, sl
 800b33c:	db33      	blt.n	800b3a6 <__lshift+0xb6>
 800b33e:	6920      	ldr	r0, [r4, #16]
 800b340:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b344:	f104 0314 	add.w	r3, r4, #20
 800b348:	f019 091f 	ands.w	r9, r9, #31
 800b34c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b350:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b354:	d02b      	beq.n	800b3ae <__lshift+0xbe>
 800b356:	f1c9 0e20 	rsb	lr, r9, #32
 800b35a:	468a      	mov	sl, r1
 800b35c:	2200      	movs	r2, #0
 800b35e:	6818      	ldr	r0, [r3, #0]
 800b360:	fa00 f009 	lsl.w	r0, r0, r9
 800b364:	4310      	orrs	r0, r2
 800b366:	f84a 0b04 	str.w	r0, [sl], #4
 800b36a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b36e:	459c      	cmp	ip, r3
 800b370:	fa22 f20e 	lsr.w	r2, r2, lr
 800b374:	d8f3      	bhi.n	800b35e <__lshift+0x6e>
 800b376:	ebac 0304 	sub.w	r3, ip, r4
 800b37a:	3b15      	subs	r3, #21
 800b37c:	f023 0303 	bic.w	r3, r3, #3
 800b380:	3304      	adds	r3, #4
 800b382:	f104 0015 	add.w	r0, r4, #21
 800b386:	4584      	cmp	ip, r0
 800b388:	bf38      	it	cc
 800b38a:	2304      	movcc	r3, #4
 800b38c:	50ca      	str	r2, [r1, r3]
 800b38e:	b10a      	cbz	r2, 800b394 <__lshift+0xa4>
 800b390:	f108 0602 	add.w	r6, r8, #2
 800b394:	3e01      	subs	r6, #1
 800b396:	4638      	mov	r0, r7
 800b398:	612e      	str	r6, [r5, #16]
 800b39a:	4621      	mov	r1, r4
 800b39c:	f7ff fd8e 	bl	800aebc <_Bfree>
 800b3a0:	4628      	mov	r0, r5
 800b3a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b3a6:	f842 0f04 	str.w	r0, [r2, #4]!
 800b3aa:	3301      	adds	r3, #1
 800b3ac:	e7c5      	b.n	800b33a <__lshift+0x4a>
 800b3ae:	3904      	subs	r1, #4
 800b3b0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3b4:	f841 2f04 	str.w	r2, [r1, #4]!
 800b3b8:	459c      	cmp	ip, r3
 800b3ba:	d8f9      	bhi.n	800b3b0 <__lshift+0xc0>
 800b3bc:	e7ea      	b.n	800b394 <__lshift+0xa4>
 800b3be:	bf00      	nop
 800b3c0:	0800d7d1 	.word	0x0800d7d1
 800b3c4:	0800d7e2 	.word	0x0800d7e2

0800b3c8 <__mcmp>:
 800b3c8:	b530      	push	{r4, r5, lr}
 800b3ca:	6902      	ldr	r2, [r0, #16]
 800b3cc:	690c      	ldr	r4, [r1, #16]
 800b3ce:	1b12      	subs	r2, r2, r4
 800b3d0:	d10e      	bne.n	800b3f0 <__mcmp+0x28>
 800b3d2:	f100 0314 	add.w	r3, r0, #20
 800b3d6:	3114      	adds	r1, #20
 800b3d8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b3dc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b3e0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b3e4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b3e8:	42a5      	cmp	r5, r4
 800b3ea:	d003      	beq.n	800b3f4 <__mcmp+0x2c>
 800b3ec:	d305      	bcc.n	800b3fa <__mcmp+0x32>
 800b3ee:	2201      	movs	r2, #1
 800b3f0:	4610      	mov	r0, r2
 800b3f2:	bd30      	pop	{r4, r5, pc}
 800b3f4:	4283      	cmp	r3, r0
 800b3f6:	d3f3      	bcc.n	800b3e0 <__mcmp+0x18>
 800b3f8:	e7fa      	b.n	800b3f0 <__mcmp+0x28>
 800b3fa:	f04f 32ff 	mov.w	r2, #4294967295
 800b3fe:	e7f7      	b.n	800b3f0 <__mcmp+0x28>

0800b400 <__mdiff>:
 800b400:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b404:	460c      	mov	r4, r1
 800b406:	4606      	mov	r6, r0
 800b408:	4611      	mov	r1, r2
 800b40a:	4620      	mov	r0, r4
 800b40c:	4690      	mov	r8, r2
 800b40e:	f7ff ffdb 	bl	800b3c8 <__mcmp>
 800b412:	1e05      	subs	r5, r0, #0
 800b414:	d110      	bne.n	800b438 <__mdiff+0x38>
 800b416:	4629      	mov	r1, r5
 800b418:	4630      	mov	r0, r6
 800b41a:	f7ff fd0f 	bl	800ae3c <_Balloc>
 800b41e:	b930      	cbnz	r0, 800b42e <__mdiff+0x2e>
 800b420:	4b3a      	ldr	r3, [pc, #232]	; (800b50c <__mdiff+0x10c>)
 800b422:	4602      	mov	r2, r0
 800b424:	f240 2137 	movw	r1, #567	; 0x237
 800b428:	4839      	ldr	r0, [pc, #228]	; (800b510 <__mdiff+0x110>)
 800b42a:	f001 faa5 	bl	800c978 <__assert_func>
 800b42e:	2301      	movs	r3, #1
 800b430:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b434:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b438:	bfa4      	itt	ge
 800b43a:	4643      	movge	r3, r8
 800b43c:	46a0      	movge	r8, r4
 800b43e:	4630      	mov	r0, r6
 800b440:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b444:	bfa6      	itte	ge
 800b446:	461c      	movge	r4, r3
 800b448:	2500      	movge	r5, #0
 800b44a:	2501      	movlt	r5, #1
 800b44c:	f7ff fcf6 	bl	800ae3c <_Balloc>
 800b450:	b920      	cbnz	r0, 800b45c <__mdiff+0x5c>
 800b452:	4b2e      	ldr	r3, [pc, #184]	; (800b50c <__mdiff+0x10c>)
 800b454:	4602      	mov	r2, r0
 800b456:	f240 2145 	movw	r1, #581	; 0x245
 800b45a:	e7e5      	b.n	800b428 <__mdiff+0x28>
 800b45c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b460:	6926      	ldr	r6, [r4, #16]
 800b462:	60c5      	str	r5, [r0, #12]
 800b464:	f104 0914 	add.w	r9, r4, #20
 800b468:	f108 0514 	add.w	r5, r8, #20
 800b46c:	f100 0e14 	add.w	lr, r0, #20
 800b470:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b474:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b478:	f108 0210 	add.w	r2, r8, #16
 800b47c:	46f2      	mov	sl, lr
 800b47e:	2100      	movs	r1, #0
 800b480:	f859 3b04 	ldr.w	r3, [r9], #4
 800b484:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b488:	fa11 f88b 	uxtah	r8, r1, fp
 800b48c:	b299      	uxth	r1, r3
 800b48e:	0c1b      	lsrs	r3, r3, #16
 800b490:	eba8 0801 	sub.w	r8, r8, r1
 800b494:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b498:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b49c:	fa1f f888 	uxth.w	r8, r8
 800b4a0:	1419      	asrs	r1, r3, #16
 800b4a2:	454e      	cmp	r6, r9
 800b4a4:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b4a8:	f84a 3b04 	str.w	r3, [sl], #4
 800b4ac:	d8e8      	bhi.n	800b480 <__mdiff+0x80>
 800b4ae:	1b33      	subs	r3, r6, r4
 800b4b0:	3b15      	subs	r3, #21
 800b4b2:	f023 0303 	bic.w	r3, r3, #3
 800b4b6:	3304      	adds	r3, #4
 800b4b8:	3415      	adds	r4, #21
 800b4ba:	42a6      	cmp	r6, r4
 800b4bc:	bf38      	it	cc
 800b4be:	2304      	movcc	r3, #4
 800b4c0:	441d      	add	r5, r3
 800b4c2:	4473      	add	r3, lr
 800b4c4:	469e      	mov	lr, r3
 800b4c6:	462e      	mov	r6, r5
 800b4c8:	4566      	cmp	r6, ip
 800b4ca:	d30e      	bcc.n	800b4ea <__mdiff+0xea>
 800b4cc:	f10c 0203 	add.w	r2, ip, #3
 800b4d0:	1b52      	subs	r2, r2, r5
 800b4d2:	f022 0203 	bic.w	r2, r2, #3
 800b4d6:	3d03      	subs	r5, #3
 800b4d8:	45ac      	cmp	ip, r5
 800b4da:	bf38      	it	cc
 800b4dc:	2200      	movcc	r2, #0
 800b4de:	4413      	add	r3, r2
 800b4e0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b4e4:	b17a      	cbz	r2, 800b506 <__mdiff+0x106>
 800b4e6:	6107      	str	r7, [r0, #16]
 800b4e8:	e7a4      	b.n	800b434 <__mdiff+0x34>
 800b4ea:	f856 8b04 	ldr.w	r8, [r6], #4
 800b4ee:	fa11 f288 	uxtah	r2, r1, r8
 800b4f2:	1414      	asrs	r4, r2, #16
 800b4f4:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b4f8:	b292      	uxth	r2, r2
 800b4fa:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b4fe:	f84e 2b04 	str.w	r2, [lr], #4
 800b502:	1421      	asrs	r1, r4, #16
 800b504:	e7e0      	b.n	800b4c8 <__mdiff+0xc8>
 800b506:	3f01      	subs	r7, #1
 800b508:	e7ea      	b.n	800b4e0 <__mdiff+0xe0>
 800b50a:	bf00      	nop
 800b50c:	0800d7d1 	.word	0x0800d7d1
 800b510:	0800d7e2 	.word	0x0800d7e2

0800b514 <__ulp>:
 800b514:	b082      	sub	sp, #8
 800b516:	ed8d 0b00 	vstr	d0, [sp]
 800b51a:	9a01      	ldr	r2, [sp, #4]
 800b51c:	4b0f      	ldr	r3, [pc, #60]	; (800b55c <__ulp+0x48>)
 800b51e:	4013      	ands	r3, r2
 800b520:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b524:	2b00      	cmp	r3, #0
 800b526:	dc08      	bgt.n	800b53a <__ulp+0x26>
 800b528:	425b      	negs	r3, r3
 800b52a:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b52e:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b532:	da04      	bge.n	800b53e <__ulp+0x2a>
 800b534:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b538:	4113      	asrs	r3, r2
 800b53a:	2200      	movs	r2, #0
 800b53c:	e008      	b.n	800b550 <__ulp+0x3c>
 800b53e:	f1a2 0314 	sub.w	r3, r2, #20
 800b542:	2b1e      	cmp	r3, #30
 800b544:	bfda      	itte	le
 800b546:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b54a:	40da      	lsrle	r2, r3
 800b54c:	2201      	movgt	r2, #1
 800b54e:	2300      	movs	r3, #0
 800b550:	4619      	mov	r1, r3
 800b552:	4610      	mov	r0, r2
 800b554:	ec41 0b10 	vmov	d0, r0, r1
 800b558:	b002      	add	sp, #8
 800b55a:	4770      	bx	lr
 800b55c:	7ff00000 	.word	0x7ff00000

0800b560 <__b2d>:
 800b560:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b564:	6906      	ldr	r6, [r0, #16]
 800b566:	f100 0814 	add.w	r8, r0, #20
 800b56a:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b56e:	1f37      	subs	r7, r6, #4
 800b570:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b574:	4610      	mov	r0, r2
 800b576:	f7ff fd53 	bl	800b020 <__hi0bits>
 800b57a:	f1c0 0320 	rsb	r3, r0, #32
 800b57e:	280a      	cmp	r0, #10
 800b580:	600b      	str	r3, [r1, #0]
 800b582:	491b      	ldr	r1, [pc, #108]	; (800b5f0 <__b2d+0x90>)
 800b584:	dc15      	bgt.n	800b5b2 <__b2d+0x52>
 800b586:	f1c0 0c0b 	rsb	ip, r0, #11
 800b58a:	fa22 f30c 	lsr.w	r3, r2, ip
 800b58e:	45b8      	cmp	r8, r7
 800b590:	ea43 0501 	orr.w	r5, r3, r1
 800b594:	bf34      	ite	cc
 800b596:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b59a:	2300      	movcs	r3, #0
 800b59c:	3015      	adds	r0, #21
 800b59e:	fa02 f000 	lsl.w	r0, r2, r0
 800b5a2:	fa23 f30c 	lsr.w	r3, r3, ip
 800b5a6:	4303      	orrs	r3, r0
 800b5a8:	461c      	mov	r4, r3
 800b5aa:	ec45 4b10 	vmov	d0, r4, r5
 800b5ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b5b2:	45b8      	cmp	r8, r7
 800b5b4:	bf3a      	itte	cc
 800b5b6:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b5ba:	f1a6 0708 	subcc.w	r7, r6, #8
 800b5be:	2300      	movcs	r3, #0
 800b5c0:	380b      	subs	r0, #11
 800b5c2:	d012      	beq.n	800b5ea <__b2d+0x8a>
 800b5c4:	f1c0 0120 	rsb	r1, r0, #32
 800b5c8:	fa23 f401 	lsr.w	r4, r3, r1
 800b5cc:	4082      	lsls	r2, r0
 800b5ce:	4322      	orrs	r2, r4
 800b5d0:	4547      	cmp	r7, r8
 800b5d2:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b5d6:	bf8c      	ite	hi
 800b5d8:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b5dc:	2200      	movls	r2, #0
 800b5de:	4083      	lsls	r3, r0
 800b5e0:	40ca      	lsrs	r2, r1
 800b5e2:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b5e6:	4313      	orrs	r3, r2
 800b5e8:	e7de      	b.n	800b5a8 <__b2d+0x48>
 800b5ea:	ea42 0501 	orr.w	r5, r2, r1
 800b5ee:	e7db      	b.n	800b5a8 <__b2d+0x48>
 800b5f0:	3ff00000 	.word	0x3ff00000

0800b5f4 <__d2b>:
 800b5f4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b5f8:	460f      	mov	r7, r1
 800b5fa:	2101      	movs	r1, #1
 800b5fc:	ec59 8b10 	vmov	r8, r9, d0
 800b600:	4616      	mov	r6, r2
 800b602:	f7ff fc1b 	bl	800ae3c <_Balloc>
 800b606:	4604      	mov	r4, r0
 800b608:	b930      	cbnz	r0, 800b618 <__d2b+0x24>
 800b60a:	4602      	mov	r2, r0
 800b60c:	4b24      	ldr	r3, [pc, #144]	; (800b6a0 <__d2b+0xac>)
 800b60e:	4825      	ldr	r0, [pc, #148]	; (800b6a4 <__d2b+0xb0>)
 800b610:	f240 310f 	movw	r1, #783	; 0x30f
 800b614:	f001 f9b0 	bl	800c978 <__assert_func>
 800b618:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b61c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b620:	bb2d      	cbnz	r5, 800b66e <__d2b+0x7a>
 800b622:	9301      	str	r3, [sp, #4]
 800b624:	f1b8 0300 	subs.w	r3, r8, #0
 800b628:	d026      	beq.n	800b678 <__d2b+0x84>
 800b62a:	4668      	mov	r0, sp
 800b62c:	9300      	str	r3, [sp, #0]
 800b62e:	f7ff fd17 	bl	800b060 <__lo0bits>
 800b632:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b636:	b1e8      	cbz	r0, 800b674 <__d2b+0x80>
 800b638:	f1c0 0320 	rsb	r3, r0, #32
 800b63c:	fa02 f303 	lsl.w	r3, r2, r3
 800b640:	430b      	orrs	r3, r1
 800b642:	40c2      	lsrs	r2, r0
 800b644:	6163      	str	r3, [r4, #20]
 800b646:	9201      	str	r2, [sp, #4]
 800b648:	9b01      	ldr	r3, [sp, #4]
 800b64a:	61a3      	str	r3, [r4, #24]
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	bf14      	ite	ne
 800b650:	2202      	movne	r2, #2
 800b652:	2201      	moveq	r2, #1
 800b654:	6122      	str	r2, [r4, #16]
 800b656:	b1bd      	cbz	r5, 800b688 <__d2b+0x94>
 800b658:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b65c:	4405      	add	r5, r0
 800b65e:	603d      	str	r5, [r7, #0]
 800b660:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b664:	6030      	str	r0, [r6, #0]
 800b666:	4620      	mov	r0, r4
 800b668:	b003      	add	sp, #12
 800b66a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b66e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b672:	e7d6      	b.n	800b622 <__d2b+0x2e>
 800b674:	6161      	str	r1, [r4, #20]
 800b676:	e7e7      	b.n	800b648 <__d2b+0x54>
 800b678:	a801      	add	r0, sp, #4
 800b67a:	f7ff fcf1 	bl	800b060 <__lo0bits>
 800b67e:	9b01      	ldr	r3, [sp, #4]
 800b680:	6163      	str	r3, [r4, #20]
 800b682:	3020      	adds	r0, #32
 800b684:	2201      	movs	r2, #1
 800b686:	e7e5      	b.n	800b654 <__d2b+0x60>
 800b688:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b68c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b690:	6038      	str	r0, [r7, #0]
 800b692:	6918      	ldr	r0, [r3, #16]
 800b694:	f7ff fcc4 	bl	800b020 <__hi0bits>
 800b698:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b69c:	e7e2      	b.n	800b664 <__d2b+0x70>
 800b69e:	bf00      	nop
 800b6a0:	0800d7d1 	.word	0x0800d7d1
 800b6a4:	0800d7e2 	.word	0x0800d7e2

0800b6a8 <__ratio>:
 800b6a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b6ac:	4688      	mov	r8, r1
 800b6ae:	4669      	mov	r1, sp
 800b6b0:	4681      	mov	r9, r0
 800b6b2:	f7ff ff55 	bl	800b560 <__b2d>
 800b6b6:	a901      	add	r1, sp, #4
 800b6b8:	4640      	mov	r0, r8
 800b6ba:	ec55 4b10 	vmov	r4, r5, d0
 800b6be:	f7ff ff4f 	bl	800b560 <__b2d>
 800b6c2:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b6c6:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b6ca:	eba3 0c02 	sub.w	ip, r3, r2
 800b6ce:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b6d2:	1a9b      	subs	r3, r3, r2
 800b6d4:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b6d8:	ec51 0b10 	vmov	r0, r1, d0
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	bfd6      	itet	le
 800b6e0:	460a      	movle	r2, r1
 800b6e2:	462a      	movgt	r2, r5
 800b6e4:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b6e8:	468b      	mov	fp, r1
 800b6ea:	462f      	mov	r7, r5
 800b6ec:	bfd4      	ite	le
 800b6ee:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b6f2:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	ee10 2a10 	vmov	r2, s0
 800b6fc:	465b      	mov	r3, fp
 800b6fe:	4639      	mov	r1, r7
 800b700:	f7f5 f8d4 	bl	80008ac <__aeabi_ddiv>
 800b704:	ec41 0b10 	vmov	d0, r0, r1
 800b708:	b003      	add	sp, #12
 800b70a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b70e <__copybits>:
 800b70e:	3901      	subs	r1, #1
 800b710:	b570      	push	{r4, r5, r6, lr}
 800b712:	1149      	asrs	r1, r1, #5
 800b714:	6914      	ldr	r4, [r2, #16]
 800b716:	3101      	adds	r1, #1
 800b718:	f102 0314 	add.w	r3, r2, #20
 800b71c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b720:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b724:	1f05      	subs	r5, r0, #4
 800b726:	42a3      	cmp	r3, r4
 800b728:	d30c      	bcc.n	800b744 <__copybits+0x36>
 800b72a:	1aa3      	subs	r3, r4, r2
 800b72c:	3b11      	subs	r3, #17
 800b72e:	f023 0303 	bic.w	r3, r3, #3
 800b732:	3211      	adds	r2, #17
 800b734:	42a2      	cmp	r2, r4
 800b736:	bf88      	it	hi
 800b738:	2300      	movhi	r3, #0
 800b73a:	4418      	add	r0, r3
 800b73c:	2300      	movs	r3, #0
 800b73e:	4288      	cmp	r0, r1
 800b740:	d305      	bcc.n	800b74e <__copybits+0x40>
 800b742:	bd70      	pop	{r4, r5, r6, pc}
 800b744:	f853 6b04 	ldr.w	r6, [r3], #4
 800b748:	f845 6f04 	str.w	r6, [r5, #4]!
 800b74c:	e7eb      	b.n	800b726 <__copybits+0x18>
 800b74e:	f840 3b04 	str.w	r3, [r0], #4
 800b752:	e7f4      	b.n	800b73e <__copybits+0x30>

0800b754 <__any_on>:
 800b754:	f100 0214 	add.w	r2, r0, #20
 800b758:	6900      	ldr	r0, [r0, #16]
 800b75a:	114b      	asrs	r3, r1, #5
 800b75c:	4298      	cmp	r0, r3
 800b75e:	b510      	push	{r4, lr}
 800b760:	db11      	blt.n	800b786 <__any_on+0x32>
 800b762:	dd0a      	ble.n	800b77a <__any_on+0x26>
 800b764:	f011 011f 	ands.w	r1, r1, #31
 800b768:	d007      	beq.n	800b77a <__any_on+0x26>
 800b76a:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b76e:	fa24 f001 	lsr.w	r0, r4, r1
 800b772:	fa00 f101 	lsl.w	r1, r0, r1
 800b776:	428c      	cmp	r4, r1
 800b778:	d10b      	bne.n	800b792 <__any_on+0x3e>
 800b77a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b77e:	4293      	cmp	r3, r2
 800b780:	d803      	bhi.n	800b78a <__any_on+0x36>
 800b782:	2000      	movs	r0, #0
 800b784:	bd10      	pop	{r4, pc}
 800b786:	4603      	mov	r3, r0
 800b788:	e7f7      	b.n	800b77a <__any_on+0x26>
 800b78a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b78e:	2900      	cmp	r1, #0
 800b790:	d0f5      	beq.n	800b77e <__any_on+0x2a>
 800b792:	2001      	movs	r0, #1
 800b794:	e7f6      	b.n	800b784 <__any_on+0x30>

0800b796 <sulp>:
 800b796:	b570      	push	{r4, r5, r6, lr}
 800b798:	4604      	mov	r4, r0
 800b79a:	460d      	mov	r5, r1
 800b79c:	ec45 4b10 	vmov	d0, r4, r5
 800b7a0:	4616      	mov	r6, r2
 800b7a2:	f7ff feb7 	bl	800b514 <__ulp>
 800b7a6:	ec51 0b10 	vmov	r0, r1, d0
 800b7aa:	b17e      	cbz	r6, 800b7cc <sulp+0x36>
 800b7ac:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b7b0:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b7b4:	2b00      	cmp	r3, #0
 800b7b6:	dd09      	ble.n	800b7cc <sulp+0x36>
 800b7b8:	051b      	lsls	r3, r3, #20
 800b7ba:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b7be:	2400      	movs	r4, #0
 800b7c0:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b7c4:	4622      	mov	r2, r4
 800b7c6:	462b      	mov	r3, r5
 800b7c8:	f7f4 ff46 	bl	8000658 <__aeabi_dmul>
 800b7cc:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b7d0 <_strtod_l>:
 800b7d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b7d4:	ed2d 8b02 	vpush	{d8}
 800b7d8:	b09b      	sub	sp, #108	; 0x6c
 800b7da:	4604      	mov	r4, r0
 800b7dc:	9213      	str	r2, [sp, #76]	; 0x4c
 800b7de:	2200      	movs	r2, #0
 800b7e0:	9216      	str	r2, [sp, #88]	; 0x58
 800b7e2:	460d      	mov	r5, r1
 800b7e4:	f04f 0800 	mov.w	r8, #0
 800b7e8:	f04f 0900 	mov.w	r9, #0
 800b7ec:	460a      	mov	r2, r1
 800b7ee:	9215      	str	r2, [sp, #84]	; 0x54
 800b7f0:	7811      	ldrb	r1, [r2, #0]
 800b7f2:	292b      	cmp	r1, #43	; 0x2b
 800b7f4:	d04c      	beq.n	800b890 <_strtod_l+0xc0>
 800b7f6:	d83a      	bhi.n	800b86e <_strtod_l+0x9e>
 800b7f8:	290d      	cmp	r1, #13
 800b7fa:	d834      	bhi.n	800b866 <_strtod_l+0x96>
 800b7fc:	2908      	cmp	r1, #8
 800b7fe:	d834      	bhi.n	800b86a <_strtod_l+0x9a>
 800b800:	2900      	cmp	r1, #0
 800b802:	d03d      	beq.n	800b880 <_strtod_l+0xb0>
 800b804:	2200      	movs	r2, #0
 800b806:	920a      	str	r2, [sp, #40]	; 0x28
 800b808:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b80a:	7832      	ldrb	r2, [r6, #0]
 800b80c:	2a30      	cmp	r2, #48	; 0x30
 800b80e:	f040 80b4 	bne.w	800b97a <_strtod_l+0x1aa>
 800b812:	7872      	ldrb	r2, [r6, #1]
 800b814:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b818:	2a58      	cmp	r2, #88	; 0x58
 800b81a:	d170      	bne.n	800b8fe <_strtod_l+0x12e>
 800b81c:	9302      	str	r3, [sp, #8]
 800b81e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b820:	9301      	str	r3, [sp, #4]
 800b822:	ab16      	add	r3, sp, #88	; 0x58
 800b824:	9300      	str	r3, [sp, #0]
 800b826:	4a8e      	ldr	r2, [pc, #568]	; (800ba60 <_strtod_l+0x290>)
 800b828:	ab17      	add	r3, sp, #92	; 0x5c
 800b82a:	a915      	add	r1, sp, #84	; 0x54
 800b82c:	4620      	mov	r0, r4
 800b82e:	f001 f93f 	bl	800cab0 <__gethex>
 800b832:	f010 070f 	ands.w	r7, r0, #15
 800b836:	4605      	mov	r5, r0
 800b838:	d005      	beq.n	800b846 <_strtod_l+0x76>
 800b83a:	2f06      	cmp	r7, #6
 800b83c:	d12a      	bne.n	800b894 <_strtod_l+0xc4>
 800b83e:	3601      	adds	r6, #1
 800b840:	2300      	movs	r3, #0
 800b842:	9615      	str	r6, [sp, #84]	; 0x54
 800b844:	930a      	str	r3, [sp, #40]	; 0x28
 800b846:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b848:	2b00      	cmp	r3, #0
 800b84a:	f040 857f 	bne.w	800c34c <_strtod_l+0xb7c>
 800b84e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b850:	b1db      	cbz	r3, 800b88a <_strtod_l+0xba>
 800b852:	4642      	mov	r2, r8
 800b854:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b858:	ec43 2b10 	vmov	d0, r2, r3
 800b85c:	b01b      	add	sp, #108	; 0x6c
 800b85e:	ecbd 8b02 	vpop	{d8}
 800b862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b866:	2920      	cmp	r1, #32
 800b868:	d1cc      	bne.n	800b804 <_strtod_l+0x34>
 800b86a:	3201      	adds	r2, #1
 800b86c:	e7bf      	b.n	800b7ee <_strtod_l+0x1e>
 800b86e:	292d      	cmp	r1, #45	; 0x2d
 800b870:	d1c8      	bne.n	800b804 <_strtod_l+0x34>
 800b872:	2101      	movs	r1, #1
 800b874:	910a      	str	r1, [sp, #40]	; 0x28
 800b876:	1c51      	adds	r1, r2, #1
 800b878:	9115      	str	r1, [sp, #84]	; 0x54
 800b87a:	7852      	ldrb	r2, [r2, #1]
 800b87c:	2a00      	cmp	r2, #0
 800b87e:	d1c3      	bne.n	800b808 <_strtod_l+0x38>
 800b880:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b882:	9515      	str	r5, [sp, #84]	; 0x54
 800b884:	2b00      	cmp	r3, #0
 800b886:	f040 855f 	bne.w	800c348 <_strtod_l+0xb78>
 800b88a:	4642      	mov	r2, r8
 800b88c:	464b      	mov	r3, r9
 800b88e:	e7e3      	b.n	800b858 <_strtod_l+0x88>
 800b890:	2100      	movs	r1, #0
 800b892:	e7ef      	b.n	800b874 <_strtod_l+0xa4>
 800b894:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b896:	b13a      	cbz	r2, 800b8a8 <_strtod_l+0xd8>
 800b898:	2135      	movs	r1, #53	; 0x35
 800b89a:	a818      	add	r0, sp, #96	; 0x60
 800b89c:	f7ff ff37 	bl	800b70e <__copybits>
 800b8a0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b8a2:	4620      	mov	r0, r4
 800b8a4:	f7ff fb0a 	bl	800aebc <_Bfree>
 800b8a8:	3f01      	subs	r7, #1
 800b8aa:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b8ac:	2f04      	cmp	r7, #4
 800b8ae:	d806      	bhi.n	800b8be <_strtod_l+0xee>
 800b8b0:	e8df f007 	tbb	[pc, r7]
 800b8b4:	201d0314 	.word	0x201d0314
 800b8b8:	14          	.byte	0x14
 800b8b9:	00          	.byte	0x00
 800b8ba:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b8be:	05e9      	lsls	r1, r5, #23
 800b8c0:	bf48      	it	mi
 800b8c2:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b8c6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b8ca:	0d1b      	lsrs	r3, r3, #20
 800b8cc:	051b      	lsls	r3, r3, #20
 800b8ce:	2b00      	cmp	r3, #0
 800b8d0:	d1b9      	bne.n	800b846 <_strtod_l+0x76>
 800b8d2:	f7fe fb03 	bl	8009edc <__errno>
 800b8d6:	2322      	movs	r3, #34	; 0x22
 800b8d8:	6003      	str	r3, [r0, #0]
 800b8da:	e7b4      	b.n	800b846 <_strtod_l+0x76>
 800b8dc:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b8e0:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b8e4:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b8e8:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b8ec:	e7e7      	b.n	800b8be <_strtod_l+0xee>
 800b8ee:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800ba68 <_strtod_l+0x298>
 800b8f2:	e7e4      	b.n	800b8be <_strtod_l+0xee>
 800b8f4:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b8f8:	f04f 38ff 	mov.w	r8, #4294967295
 800b8fc:	e7df      	b.n	800b8be <_strtod_l+0xee>
 800b8fe:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b900:	1c5a      	adds	r2, r3, #1
 800b902:	9215      	str	r2, [sp, #84]	; 0x54
 800b904:	785b      	ldrb	r3, [r3, #1]
 800b906:	2b30      	cmp	r3, #48	; 0x30
 800b908:	d0f9      	beq.n	800b8fe <_strtod_l+0x12e>
 800b90a:	2b00      	cmp	r3, #0
 800b90c:	d09b      	beq.n	800b846 <_strtod_l+0x76>
 800b90e:	2301      	movs	r3, #1
 800b910:	f04f 0a00 	mov.w	sl, #0
 800b914:	9304      	str	r3, [sp, #16]
 800b916:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b918:	930b      	str	r3, [sp, #44]	; 0x2c
 800b91a:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b91e:	46d3      	mov	fp, sl
 800b920:	220a      	movs	r2, #10
 800b922:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b924:	7806      	ldrb	r6, [r0, #0]
 800b926:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b92a:	b2d9      	uxtb	r1, r3
 800b92c:	2909      	cmp	r1, #9
 800b92e:	d926      	bls.n	800b97e <_strtod_l+0x1ae>
 800b930:	494c      	ldr	r1, [pc, #304]	; (800ba64 <_strtod_l+0x294>)
 800b932:	2201      	movs	r2, #1
 800b934:	f000 ffe6 	bl	800c904 <strncmp>
 800b938:	2800      	cmp	r0, #0
 800b93a:	d030      	beq.n	800b99e <_strtod_l+0x1ce>
 800b93c:	2000      	movs	r0, #0
 800b93e:	4632      	mov	r2, r6
 800b940:	9005      	str	r0, [sp, #20]
 800b942:	465e      	mov	r6, fp
 800b944:	4603      	mov	r3, r0
 800b946:	2a65      	cmp	r2, #101	; 0x65
 800b948:	d001      	beq.n	800b94e <_strtod_l+0x17e>
 800b94a:	2a45      	cmp	r2, #69	; 0x45
 800b94c:	d113      	bne.n	800b976 <_strtod_l+0x1a6>
 800b94e:	b91e      	cbnz	r6, 800b958 <_strtod_l+0x188>
 800b950:	9a04      	ldr	r2, [sp, #16]
 800b952:	4302      	orrs	r2, r0
 800b954:	d094      	beq.n	800b880 <_strtod_l+0xb0>
 800b956:	2600      	movs	r6, #0
 800b958:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b95a:	1c6a      	adds	r2, r5, #1
 800b95c:	9215      	str	r2, [sp, #84]	; 0x54
 800b95e:	786a      	ldrb	r2, [r5, #1]
 800b960:	2a2b      	cmp	r2, #43	; 0x2b
 800b962:	d074      	beq.n	800ba4e <_strtod_l+0x27e>
 800b964:	2a2d      	cmp	r2, #45	; 0x2d
 800b966:	d078      	beq.n	800ba5a <_strtod_l+0x28a>
 800b968:	f04f 0c00 	mov.w	ip, #0
 800b96c:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800b970:	2909      	cmp	r1, #9
 800b972:	d97f      	bls.n	800ba74 <_strtod_l+0x2a4>
 800b974:	9515      	str	r5, [sp, #84]	; 0x54
 800b976:	2700      	movs	r7, #0
 800b978:	e09e      	b.n	800bab8 <_strtod_l+0x2e8>
 800b97a:	2300      	movs	r3, #0
 800b97c:	e7c8      	b.n	800b910 <_strtod_l+0x140>
 800b97e:	f1bb 0f08 	cmp.w	fp, #8
 800b982:	bfd8      	it	le
 800b984:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800b986:	f100 0001 	add.w	r0, r0, #1
 800b98a:	bfda      	itte	le
 800b98c:	fb02 3301 	mlale	r3, r2, r1, r3
 800b990:	9309      	strle	r3, [sp, #36]	; 0x24
 800b992:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800b996:	f10b 0b01 	add.w	fp, fp, #1
 800b99a:	9015      	str	r0, [sp, #84]	; 0x54
 800b99c:	e7c1      	b.n	800b922 <_strtod_l+0x152>
 800b99e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9a0:	1c5a      	adds	r2, r3, #1
 800b9a2:	9215      	str	r2, [sp, #84]	; 0x54
 800b9a4:	785a      	ldrb	r2, [r3, #1]
 800b9a6:	f1bb 0f00 	cmp.w	fp, #0
 800b9aa:	d037      	beq.n	800ba1c <_strtod_l+0x24c>
 800b9ac:	9005      	str	r0, [sp, #20]
 800b9ae:	465e      	mov	r6, fp
 800b9b0:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800b9b4:	2b09      	cmp	r3, #9
 800b9b6:	d912      	bls.n	800b9de <_strtod_l+0x20e>
 800b9b8:	2301      	movs	r3, #1
 800b9ba:	e7c4      	b.n	800b946 <_strtod_l+0x176>
 800b9bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9be:	1c5a      	adds	r2, r3, #1
 800b9c0:	9215      	str	r2, [sp, #84]	; 0x54
 800b9c2:	785a      	ldrb	r2, [r3, #1]
 800b9c4:	3001      	adds	r0, #1
 800b9c6:	2a30      	cmp	r2, #48	; 0x30
 800b9c8:	d0f8      	beq.n	800b9bc <_strtod_l+0x1ec>
 800b9ca:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800b9ce:	2b08      	cmp	r3, #8
 800b9d0:	f200 84c1 	bhi.w	800c356 <_strtod_l+0xb86>
 800b9d4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9d6:	9005      	str	r0, [sp, #20]
 800b9d8:	2000      	movs	r0, #0
 800b9da:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9dc:	4606      	mov	r6, r0
 800b9de:	3a30      	subs	r2, #48	; 0x30
 800b9e0:	f100 0301 	add.w	r3, r0, #1
 800b9e4:	d014      	beq.n	800ba10 <_strtod_l+0x240>
 800b9e6:	9905      	ldr	r1, [sp, #20]
 800b9e8:	4419      	add	r1, r3
 800b9ea:	9105      	str	r1, [sp, #20]
 800b9ec:	4633      	mov	r3, r6
 800b9ee:	eb00 0c06 	add.w	ip, r0, r6
 800b9f2:	210a      	movs	r1, #10
 800b9f4:	4563      	cmp	r3, ip
 800b9f6:	d113      	bne.n	800ba20 <_strtod_l+0x250>
 800b9f8:	1833      	adds	r3, r6, r0
 800b9fa:	2b08      	cmp	r3, #8
 800b9fc:	f106 0601 	add.w	r6, r6, #1
 800ba00:	4406      	add	r6, r0
 800ba02:	dc1a      	bgt.n	800ba3a <_strtod_l+0x26a>
 800ba04:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba06:	230a      	movs	r3, #10
 800ba08:	fb03 2301 	mla	r3, r3, r1, r2
 800ba0c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba0e:	2300      	movs	r3, #0
 800ba10:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ba12:	1c51      	adds	r1, r2, #1
 800ba14:	9115      	str	r1, [sp, #84]	; 0x54
 800ba16:	7852      	ldrb	r2, [r2, #1]
 800ba18:	4618      	mov	r0, r3
 800ba1a:	e7c9      	b.n	800b9b0 <_strtod_l+0x1e0>
 800ba1c:	4658      	mov	r0, fp
 800ba1e:	e7d2      	b.n	800b9c6 <_strtod_l+0x1f6>
 800ba20:	2b08      	cmp	r3, #8
 800ba22:	f103 0301 	add.w	r3, r3, #1
 800ba26:	dc03      	bgt.n	800ba30 <_strtod_l+0x260>
 800ba28:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800ba2a:	434f      	muls	r7, r1
 800ba2c:	9709      	str	r7, [sp, #36]	; 0x24
 800ba2e:	e7e1      	b.n	800b9f4 <_strtod_l+0x224>
 800ba30:	2b10      	cmp	r3, #16
 800ba32:	bfd8      	it	le
 800ba34:	fb01 fa0a 	mulle.w	sl, r1, sl
 800ba38:	e7dc      	b.n	800b9f4 <_strtod_l+0x224>
 800ba3a:	2e10      	cmp	r6, #16
 800ba3c:	bfdc      	itt	le
 800ba3e:	230a      	movle	r3, #10
 800ba40:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800ba44:	e7e3      	b.n	800ba0e <_strtod_l+0x23e>
 800ba46:	2300      	movs	r3, #0
 800ba48:	9305      	str	r3, [sp, #20]
 800ba4a:	2301      	movs	r3, #1
 800ba4c:	e780      	b.n	800b950 <_strtod_l+0x180>
 800ba4e:	f04f 0c00 	mov.w	ip, #0
 800ba52:	1caa      	adds	r2, r5, #2
 800ba54:	9215      	str	r2, [sp, #84]	; 0x54
 800ba56:	78aa      	ldrb	r2, [r5, #2]
 800ba58:	e788      	b.n	800b96c <_strtod_l+0x19c>
 800ba5a:	f04f 0c01 	mov.w	ip, #1
 800ba5e:	e7f8      	b.n	800ba52 <_strtod_l+0x282>
 800ba60:	0800d940 	.word	0x0800d940
 800ba64:	0800d93c 	.word	0x0800d93c
 800ba68:	7ff00000 	.word	0x7ff00000
 800ba6c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ba6e:	1c51      	adds	r1, r2, #1
 800ba70:	9115      	str	r1, [sp, #84]	; 0x54
 800ba72:	7852      	ldrb	r2, [r2, #1]
 800ba74:	2a30      	cmp	r2, #48	; 0x30
 800ba76:	d0f9      	beq.n	800ba6c <_strtod_l+0x29c>
 800ba78:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800ba7c:	2908      	cmp	r1, #8
 800ba7e:	f63f af7a 	bhi.w	800b976 <_strtod_l+0x1a6>
 800ba82:	3a30      	subs	r2, #48	; 0x30
 800ba84:	9208      	str	r2, [sp, #32]
 800ba86:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ba88:	920c      	str	r2, [sp, #48]	; 0x30
 800ba8a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800ba8c:	1c57      	adds	r7, r2, #1
 800ba8e:	9715      	str	r7, [sp, #84]	; 0x54
 800ba90:	7852      	ldrb	r2, [r2, #1]
 800ba92:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800ba96:	f1be 0f09 	cmp.w	lr, #9
 800ba9a:	d938      	bls.n	800bb0e <_strtod_l+0x33e>
 800ba9c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800ba9e:	1a7f      	subs	r7, r7, r1
 800baa0:	2f08      	cmp	r7, #8
 800baa2:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800baa6:	dc03      	bgt.n	800bab0 <_strtod_l+0x2e0>
 800baa8:	9908      	ldr	r1, [sp, #32]
 800baaa:	428f      	cmp	r7, r1
 800baac:	bfa8      	it	ge
 800baae:	460f      	movge	r7, r1
 800bab0:	f1bc 0f00 	cmp.w	ip, #0
 800bab4:	d000      	beq.n	800bab8 <_strtod_l+0x2e8>
 800bab6:	427f      	negs	r7, r7
 800bab8:	2e00      	cmp	r6, #0
 800baba:	d14f      	bne.n	800bb5c <_strtod_l+0x38c>
 800babc:	9904      	ldr	r1, [sp, #16]
 800babe:	4301      	orrs	r1, r0
 800bac0:	f47f aec1 	bne.w	800b846 <_strtod_l+0x76>
 800bac4:	2b00      	cmp	r3, #0
 800bac6:	f47f aedb 	bne.w	800b880 <_strtod_l+0xb0>
 800baca:	2a69      	cmp	r2, #105	; 0x69
 800bacc:	d029      	beq.n	800bb22 <_strtod_l+0x352>
 800bace:	dc26      	bgt.n	800bb1e <_strtod_l+0x34e>
 800bad0:	2a49      	cmp	r2, #73	; 0x49
 800bad2:	d026      	beq.n	800bb22 <_strtod_l+0x352>
 800bad4:	2a4e      	cmp	r2, #78	; 0x4e
 800bad6:	f47f aed3 	bne.w	800b880 <_strtod_l+0xb0>
 800bada:	499b      	ldr	r1, [pc, #620]	; (800bd48 <_strtod_l+0x578>)
 800badc:	a815      	add	r0, sp, #84	; 0x54
 800bade:	f001 fa27 	bl	800cf30 <__match>
 800bae2:	2800      	cmp	r0, #0
 800bae4:	f43f aecc 	beq.w	800b880 <_strtod_l+0xb0>
 800bae8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800baea:	781b      	ldrb	r3, [r3, #0]
 800baec:	2b28      	cmp	r3, #40	; 0x28
 800baee:	d12f      	bne.n	800bb50 <_strtod_l+0x380>
 800baf0:	4996      	ldr	r1, [pc, #600]	; (800bd4c <_strtod_l+0x57c>)
 800baf2:	aa18      	add	r2, sp, #96	; 0x60
 800baf4:	a815      	add	r0, sp, #84	; 0x54
 800baf6:	f001 fa2f 	bl	800cf58 <__hexnan>
 800bafa:	2805      	cmp	r0, #5
 800bafc:	d128      	bne.n	800bb50 <_strtod_l+0x380>
 800bafe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bb00:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bb04:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800bb08:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800bb0c:	e69b      	b.n	800b846 <_strtod_l+0x76>
 800bb0e:	9f08      	ldr	r7, [sp, #32]
 800bb10:	210a      	movs	r1, #10
 800bb12:	fb01 2107 	mla	r1, r1, r7, r2
 800bb16:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800bb1a:	9208      	str	r2, [sp, #32]
 800bb1c:	e7b5      	b.n	800ba8a <_strtod_l+0x2ba>
 800bb1e:	2a6e      	cmp	r2, #110	; 0x6e
 800bb20:	e7d9      	b.n	800bad6 <_strtod_l+0x306>
 800bb22:	498b      	ldr	r1, [pc, #556]	; (800bd50 <_strtod_l+0x580>)
 800bb24:	a815      	add	r0, sp, #84	; 0x54
 800bb26:	f001 fa03 	bl	800cf30 <__match>
 800bb2a:	2800      	cmp	r0, #0
 800bb2c:	f43f aea8 	beq.w	800b880 <_strtod_l+0xb0>
 800bb30:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb32:	4988      	ldr	r1, [pc, #544]	; (800bd54 <_strtod_l+0x584>)
 800bb34:	3b01      	subs	r3, #1
 800bb36:	a815      	add	r0, sp, #84	; 0x54
 800bb38:	9315      	str	r3, [sp, #84]	; 0x54
 800bb3a:	f001 f9f9 	bl	800cf30 <__match>
 800bb3e:	b910      	cbnz	r0, 800bb46 <_strtod_l+0x376>
 800bb40:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb42:	3301      	adds	r3, #1
 800bb44:	9315      	str	r3, [sp, #84]	; 0x54
 800bb46:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800bd64 <_strtod_l+0x594>
 800bb4a:	f04f 0800 	mov.w	r8, #0
 800bb4e:	e67a      	b.n	800b846 <_strtod_l+0x76>
 800bb50:	4881      	ldr	r0, [pc, #516]	; (800bd58 <_strtod_l+0x588>)
 800bb52:	f000 ff09 	bl	800c968 <nan>
 800bb56:	ec59 8b10 	vmov	r8, r9, d0
 800bb5a:	e674      	b.n	800b846 <_strtod_l+0x76>
 800bb5c:	9b05      	ldr	r3, [sp, #20]
 800bb5e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bb60:	1afb      	subs	r3, r7, r3
 800bb62:	f1bb 0f00 	cmp.w	fp, #0
 800bb66:	bf08      	it	eq
 800bb68:	46b3      	moveq	fp, r6
 800bb6a:	2e10      	cmp	r6, #16
 800bb6c:	9308      	str	r3, [sp, #32]
 800bb6e:	4635      	mov	r5, r6
 800bb70:	bfa8      	it	ge
 800bb72:	2510      	movge	r5, #16
 800bb74:	f7f4 fcf6 	bl	8000564 <__aeabi_ui2d>
 800bb78:	2e09      	cmp	r6, #9
 800bb7a:	4680      	mov	r8, r0
 800bb7c:	4689      	mov	r9, r1
 800bb7e:	dd13      	ble.n	800bba8 <_strtod_l+0x3d8>
 800bb80:	4b76      	ldr	r3, [pc, #472]	; (800bd5c <_strtod_l+0x58c>)
 800bb82:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bb86:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bb8a:	f7f4 fd65 	bl	8000658 <__aeabi_dmul>
 800bb8e:	4680      	mov	r8, r0
 800bb90:	4650      	mov	r0, sl
 800bb92:	4689      	mov	r9, r1
 800bb94:	f7f4 fce6 	bl	8000564 <__aeabi_ui2d>
 800bb98:	4602      	mov	r2, r0
 800bb9a:	460b      	mov	r3, r1
 800bb9c:	4640      	mov	r0, r8
 800bb9e:	4649      	mov	r1, r9
 800bba0:	f7f4 fba4 	bl	80002ec <__adddf3>
 800bba4:	4680      	mov	r8, r0
 800bba6:	4689      	mov	r9, r1
 800bba8:	2e0f      	cmp	r6, #15
 800bbaa:	dc38      	bgt.n	800bc1e <_strtod_l+0x44e>
 800bbac:	9b08      	ldr	r3, [sp, #32]
 800bbae:	2b00      	cmp	r3, #0
 800bbb0:	f43f ae49 	beq.w	800b846 <_strtod_l+0x76>
 800bbb4:	dd24      	ble.n	800bc00 <_strtod_l+0x430>
 800bbb6:	2b16      	cmp	r3, #22
 800bbb8:	dc0b      	bgt.n	800bbd2 <_strtod_l+0x402>
 800bbba:	4968      	ldr	r1, [pc, #416]	; (800bd5c <_strtod_l+0x58c>)
 800bbbc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bbc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbc4:	4642      	mov	r2, r8
 800bbc6:	464b      	mov	r3, r9
 800bbc8:	f7f4 fd46 	bl	8000658 <__aeabi_dmul>
 800bbcc:	4680      	mov	r8, r0
 800bbce:	4689      	mov	r9, r1
 800bbd0:	e639      	b.n	800b846 <_strtod_l+0x76>
 800bbd2:	9a08      	ldr	r2, [sp, #32]
 800bbd4:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800bbd8:	4293      	cmp	r3, r2
 800bbda:	db20      	blt.n	800bc1e <_strtod_l+0x44e>
 800bbdc:	4c5f      	ldr	r4, [pc, #380]	; (800bd5c <_strtod_l+0x58c>)
 800bbde:	f1c6 060f 	rsb	r6, r6, #15
 800bbe2:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800bbe6:	4642      	mov	r2, r8
 800bbe8:	464b      	mov	r3, r9
 800bbea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bbee:	f7f4 fd33 	bl	8000658 <__aeabi_dmul>
 800bbf2:	9b08      	ldr	r3, [sp, #32]
 800bbf4:	1b9e      	subs	r6, r3, r6
 800bbf6:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800bbfa:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bbfe:	e7e3      	b.n	800bbc8 <_strtod_l+0x3f8>
 800bc00:	9b08      	ldr	r3, [sp, #32]
 800bc02:	3316      	adds	r3, #22
 800bc04:	db0b      	blt.n	800bc1e <_strtod_l+0x44e>
 800bc06:	9b05      	ldr	r3, [sp, #20]
 800bc08:	1bdf      	subs	r7, r3, r7
 800bc0a:	4b54      	ldr	r3, [pc, #336]	; (800bd5c <_strtod_l+0x58c>)
 800bc0c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800bc10:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bc14:	4640      	mov	r0, r8
 800bc16:	4649      	mov	r1, r9
 800bc18:	f7f4 fe48 	bl	80008ac <__aeabi_ddiv>
 800bc1c:	e7d6      	b.n	800bbcc <_strtod_l+0x3fc>
 800bc1e:	9b08      	ldr	r3, [sp, #32]
 800bc20:	1b75      	subs	r5, r6, r5
 800bc22:	441d      	add	r5, r3
 800bc24:	2d00      	cmp	r5, #0
 800bc26:	dd70      	ble.n	800bd0a <_strtod_l+0x53a>
 800bc28:	f015 030f 	ands.w	r3, r5, #15
 800bc2c:	d00a      	beq.n	800bc44 <_strtod_l+0x474>
 800bc2e:	494b      	ldr	r1, [pc, #300]	; (800bd5c <_strtod_l+0x58c>)
 800bc30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bc34:	4642      	mov	r2, r8
 800bc36:	464b      	mov	r3, r9
 800bc38:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc3c:	f7f4 fd0c 	bl	8000658 <__aeabi_dmul>
 800bc40:	4680      	mov	r8, r0
 800bc42:	4689      	mov	r9, r1
 800bc44:	f035 050f 	bics.w	r5, r5, #15
 800bc48:	d04d      	beq.n	800bce6 <_strtod_l+0x516>
 800bc4a:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800bc4e:	dd22      	ble.n	800bc96 <_strtod_l+0x4c6>
 800bc50:	2500      	movs	r5, #0
 800bc52:	46ab      	mov	fp, r5
 800bc54:	9509      	str	r5, [sp, #36]	; 0x24
 800bc56:	9505      	str	r5, [sp, #20]
 800bc58:	2322      	movs	r3, #34	; 0x22
 800bc5a:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800bd64 <_strtod_l+0x594>
 800bc5e:	6023      	str	r3, [r4, #0]
 800bc60:	f04f 0800 	mov.w	r8, #0
 800bc64:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bc66:	2b00      	cmp	r3, #0
 800bc68:	f43f aded 	beq.w	800b846 <_strtod_l+0x76>
 800bc6c:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bc6e:	4620      	mov	r0, r4
 800bc70:	f7ff f924 	bl	800aebc <_Bfree>
 800bc74:	9905      	ldr	r1, [sp, #20]
 800bc76:	4620      	mov	r0, r4
 800bc78:	f7ff f920 	bl	800aebc <_Bfree>
 800bc7c:	4659      	mov	r1, fp
 800bc7e:	4620      	mov	r0, r4
 800bc80:	f7ff f91c 	bl	800aebc <_Bfree>
 800bc84:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bc86:	4620      	mov	r0, r4
 800bc88:	f7ff f918 	bl	800aebc <_Bfree>
 800bc8c:	4629      	mov	r1, r5
 800bc8e:	4620      	mov	r0, r4
 800bc90:	f7ff f914 	bl	800aebc <_Bfree>
 800bc94:	e5d7      	b.n	800b846 <_strtod_l+0x76>
 800bc96:	4b32      	ldr	r3, [pc, #200]	; (800bd60 <_strtod_l+0x590>)
 800bc98:	9304      	str	r3, [sp, #16]
 800bc9a:	2300      	movs	r3, #0
 800bc9c:	112d      	asrs	r5, r5, #4
 800bc9e:	4640      	mov	r0, r8
 800bca0:	4649      	mov	r1, r9
 800bca2:	469a      	mov	sl, r3
 800bca4:	2d01      	cmp	r5, #1
 800bca6:	dc21      	bgt.n	800bcec <_strtod_l+0x51c>
 800bca8:	b10b      	cbz	r3, 800bcae <_strtod_l+0x4de>
 800bcaa:	4680      	mov	r8, r0
 800bcac:	4689      	mov	r9, r1
 800bcae:	492c      	ldr	r1, [pc, #176]	; (800bd60 <_strtod_l+0x590>)
 800bcb0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800bcb4:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bcb8:	4642      	mov	r2, r8
 800bcba:	464b      	mov	r3, r9
 800bcbc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bcc0:	f7f4 fcca 	bl	8000658 <__aeabi_dmul>
 800bcc4:	4b27      	ldr	r3, [pc, #156]	; (800bd64 <_strtod_l+0x594>)
 800bcc6:	460a      	mov	r2, r1
 800bcc8:	400b      	ands	r3, r1
 800bcca:	4927      	ldr	r1, [pc, #156]	; (800bd68 <_strtod_l+0x598>)
 800bccc:	428b      	cmp	r3, r1
 800bcce:	4680      	mov	r8, r0
 800bcd0:	d8be      	bhi.n	800bc50 <_strtod_l+0x480>
 800bcd2:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bcd6:	428b      	cmp	r3, r1
 800bcd8:	bf86      	itte	hi
 800bcda:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800bd6c <_strtod_l+0x59c>
 800bcde:	f04f 38ff 	movhi.w	r8, #4294967295
 800bce2:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800bce6:	2300      	movs	r3, #0
 800bce8:	9304      	str	r3, [sp, #16]
 800bcea:	e07b      	b.n	800bde4 <_strtod_l+0x614>
 800bcec:	07ea      	lsls	r2, r5, #31
 800bcee:	d505      	bpl.n	800bcfc <_strtod_l+0x52c>
 800bcf0:	9b04      	ldr	r3, [sp, #16]
 800bcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf6:	f7f4 fcaf 	bl	8000658 <__aeabi_dmul>
 800bcfa:	2301      	movs	r3, #1
 800bcfc:	9a04      	ldr	r2, [sp, #16]
 800bcfe:	3208      	adds	r2, #8
 800bd00:	f10a 0a01 	add.w	sl, sl, #1
 800bd04:	106d      	asrs	r5, r5, #1
 800bd06:	9204      	str	r2, [sp, #16]
 800bd08:	e7cc      	b.n	800bca4 <_strtod_l+0x4d4>
 800bd0a:	d0ec      	beq.n	800bce6 <_strtod_l+0x516>
 800bd0c:	426d      	negs	r5, r5
 800bd0e:	f015 020f 	ands.w	r2, r5, #15
 800bd12:	d00a      	beq.n	800bd2a <_strtod_l+0x55a>
 800bd14:	4b11      	ldr	r3, [pc, #68]	; (800bd5c <_strtod_l+0x58c>)
 800bd16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd1a:	4640      	mov	r0, r8
 800bd1c:	4649      	mov	r1, r9
 800bd1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd22:	f7f4 fdc3 	bl	80008ac <__aeabi_ddiv>
 800bd26:	4680      	mov	r8, r0
 800bd28:	4689      	mov	r9, r1
 800bd2a:	112d      	asrs	r5, r5, #4
 800bd2c:	d0db      	beq.n	800bce6 <_strtod_l+0x516>
 800bd2e:	2d1f      	cmp	r5, #31
 800bd30:	dd1e      	ble.n	800bd70 <_strtod_l+0x5a0>
 800bd32:	2500      	movs	r5, #0
 800bd34:	46ab      	mov	fp, r5
 800bd36:	9509      	str	r5, [sp, #36]	; 0x24
 800bd38:	9505      	str	r5, [sp, #20]
 800bd3a:	2322      	movs	r3, #34	; 0x22
 800bd3c:	f04f 0800 	mov.w	r8, #0
 800bd40:	f04f 0900 	mov.w	r9, #0
 800bd44:	6023      	str	r3, [r4, #0]
 800bd46:	e78d      	b.n	800bc64 <_strtod_l+0x494>
 800bd48:	0800d729 	.word	0x0800d729
 800bd4c:	0800d954 	.word	0x0800d954
 800bd50:	0800d721 	.word	0x0800d721
 800bd54:	0800d758 	.word	0x0800d758
 800bd58:	0800dae5 	.word	0x0800dae5
 800bd5c:	0800d868 	.word	0x0800d868
 800bd60:	0800d840 	.word	0x0800d840
 800bd64:	7ff00000 	.word	0x7ff00000
 800bd68:	7ca00000 	.word	0x7ca00000
 800bd6c:	7fefffff 	.word	0x7fefffff
 800bd70:	f015 0310 	ands.w	r3, r5, #16
 800bd74:	bf18      	it	ne
 800bd76:	236a      	movne	r3, #106	; 0x6a
 800bd78:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c11c <_strtod_l+0x94c>
 800bd7c:	9304      	str	r3, [sp, #16]
 800bd7e:	4640      	mov	r0, r8
 800bd80:	4649      	mov	r1, r9
 800bd82:	2300      	movs	r3, #0
 800bd84:	07ea      	lsls	r2, r5, #31
 800bd86:	d504      	bpl.n	800bd92 <_strtod_l+0x5c2>
 800bd88:	e9da 2300 	ldrd	r2, r3, [sl]
 800bd8c:	f7f4 fc64 	bl	8000658 <__aeabi_dmul>
 800bd90:	2301      	movs	r3, #1
 800bd92:	106d      	asrs	r5, r5, #1
 800bd94:	f10a 0a08 	add.w	sl, sl, #8
 800bd98:	d1f4      	bne.n	800bd84 <_strtod_l+0x5b4>
 800bd9a:	b10b      	cbz	r3, 800bda0 <_strtod_l+0x5d0>
 800bd9c:	4680      	mov	r8, r0
 800bd9e:	4689      	mov	r9, r1
 800bda0:	9b04      	ldr	r3, [sp, #16]
 800bda2:	b1bb      	cbz	r3, 800bdd4 <_strtod_l+0x604>
 800bda4:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800bda8:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	4649      	mov	r1, r9
 800bdb0:	dd10      	ble.n	800bdd4 <_strtod_l+0x604>
 800bdb2:	2b1f      	cmp	r3, #31
 800bdb4:	f340 811e 	ble.w	800bff4 <_strtod_l+0x824>
 800bdb8:	2b34      	cmp	r3, #52	; 0x34
 800bdba:	bfde      	ittt	le
 800bdbc:	f04f 33ff 	movle.w	r3, #4294967295
 800bdc0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800bdc4:	4093      	lslle	r3, r2
 800bdc6:	f04f 0800 	mov.w	r8, #0
 800bdca:	bfcc      	ite	gt
 800bdcc:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800bdd0:	ea03 0901 	andle.w	r9, r3, r1
 800bdd4:	2200      	movs	r2, #0
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	4640      	mov	r0, r8
 800bdda:	4649      	mov	r1, r9
 800bddc:	f7f4 fea4 	bl	8000b28 <__aeabi_dcmpeq>
 800bde0:	2800      	cmp	r0, #0
 800bde2:	d1a6      	bne.n	800bd32 <_strtod_l+0x562>
 800bde4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bde6:	9300      	str	r3, [sp, #0]
 800bde8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800bdea:	4633      	mov	r3, r6
 800bdec:	465a      	mov	r2, fp
 800bdee:	4620      	mov	r0, r4
 800bdf0:	f7ff f8cc 	bl	800af8c <__s2b>
 800bdf4:	9009      	str	r0, [sp, #36]	; 0x24
 800bdf6:	2800      	cmp	r0, #0
 800bdf8:	f43f af2a 	beq.w	800bc50 <_strtod_l+0x480>
 800bdfc:	9a08      	ldr	r2, [sp, #32]
 800bdfe:	9b05      	ldr	r3, [sp, #20]
 800be00:	2a00      	cmp	r2, #0
 800be02:	eba3 0307 	sub.w	r3, r3, r7
 800be06:	bfa8      	it	ge
 800be08:	2300      	movge	r3, #0
 800be0a:	930c      	str	r3, [sp, #48]	; 0x30
 800be0c:	2500      	movs	r5, #0
 800be0e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800be12:	9312      	str	r3, [sp, #72]	; 0x48
 800be14:	46ab      	mov	fp, r5
 800be16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be18:	4620      	mov	r0, r4
 800be1a:	6859      	ldr	r1, [r3, #4]
 800be1c:	f7ff f80e 	bl	800ae3c <_Balloc>
 800be20:	9005      	str	r0, [sp, #20]
 800be22:	2800      	cmp	r0, #0
 800be24:	f43f af18 	beq.w	800bc58 <_strtod_l+0x488>
 800be28:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be2a:	691a      	ldr	r2, [r3, #16]
 800be2c:	3202      	adds	r2, #2
 800be2e:	f103 010c 	add.w	r1, r3, #12
 800be32:	0092      	lsls	r2, r2, #2
 800be34:	300c      	adds	r0, #12
 800be36:	f000 fd87 	bl	800c948 <memcpy>
 800be3a:	ec49 8b10 	vmov	d0, r8, r9
 800be3e:	aa18      	add	r2, sp, #96	; 0x60
 800be40:	a917      	add	r1, sp, #92	; 0x5c
 800be42:	4620      	mov	r0, r4
 800be44:	f7ff fbd6 	bl	800b5f4 <__d2b>
 800be48:	ec49 8b18 	vmov	d8, r8, r9
 800be4c:	9016      	str	r0, [sp, #88]	; 0x58
 800be4e:	2800      	cmp	r0, #0
 800be50:	f43f af02 	beq.w	800bc58 <_strtod_l+0x488>
 800be54:	2101      	movs	r1, #1
 800be56:	4620      	mov	r0, r4
 800be58:	f7ff f930 	bl	800b0bc <__i2b>
 800be5c:	4683      	mov	fp, r0
 800be5e:	2800      	cmp	r0, #0
 800be60:	f43f aefa 	beq.w	800bc58 <_strtod_l+0x488>
 800be64:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800be66:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800be68:	2e00      	cmp	r6, #0
 800be6a:	bfab      	itete	ge
 800be6c:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800be6e:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800be70:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800be72:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800be76:	bfac      	ite	ge
 800be78:	eb06 0a03 	addge.w	sl, r6, r3
 800be7c:	1b9f      	sublt	r7, r3, r6
 800be7e:	9b04      	ldr	r3, [sp, #16]
 800be80:	1af6      	subs	r6, r6, r3
 800be82:	4416      	add	r6, r2
 800be84:	4ba0      	ldr	r3, [pc, #640]	; (800c108 <_strtod_l+0x938>)
 800be86:	3e01      	subs	r6, #1
 800be88:	429e      	cmp	r6, r3
 800be8a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800be8e:	f280 80c4 	bge.w	800c01a <_strtod_l+0x84a>
 800be92:	1b9b      	subs	r3, r3, r6
 800be94:	2b1f      	cmp	r3, #31
 800be96:	eba2 0203 	sub.w	r2, r2, r3
 800be9a:	f04f 0101 	mov.w	r1, #1
 800be9e:	f300 80b0 	bgt.w	800c002 <_strtod_l+0x832>
 800bea2:	fa01 f303 	lsl.w	r3, r1, r3
 800bea6:	930e      	str	r3, [sp, #56]	; 0x38
 800bea8:	2300      	movs	r3, #0
 800beaa:	930d      	str	r3, [sp, #52]	; 0x34
 800beac:	eb0a 0602 	add.w	r6, sl, r2
 800beb0:	9b04      	ldr	r3, [sp, #16]
 800beb2:	45b2      	cmp	sl, r6
 800beb4:	4417      	add	r7, r2
 800beb6:	441f      	add	r7, r3
 800beb8:	4653      	mov	r3, sl
 800beba:	bfa8      	it	ge
 800bebc:	4633      	movge	r3, r6
 800bebe:	42bb      	cmp	r3, r7
 800bec0:	bfa8      	it	ge
 800bec2:	463b      	movge	r3, r7
 800bec4:	2b00      	cmp	r3, #0
 800bec6:	bfc2      	ittt	gt
 800bec8:	1af6      	subgt	r6, r6, r3
 800beca:	1aff      	subgt	r7, r7, r3
 800becc:	ebaa 0a03 	subgt.w	sl, sl, r3
 800bed0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	dd17      	ble.n	800bf06 <_strtod_l+0x736>
 800bed6:	4659      	mov	r1, fp
 800bed8:	461a      	mov	r2, r3
 800beda:	4620      	mov	r0, r4
 800bedc:	f7ff f9ae 	bl	800b23c <__pow5mult>
 800bee0:	4683      	mov	fp, r0
 800bee2:	2800      	cmp	r0, #0
 800bee4:	f43f aeb8 	beq.w	800bc58 <_strtod_l+0x488>
 800bee8:	4601      	mov	r1, r0
 800beea:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800beec:	4620      	mov	r0, r4
 800beee:	f7ff f8fb 	bl	800b0e8 <__multiply>
 800bef2:	900b      	str	r0, [sp, #44]	; 0x2c
 800bef4:	2800      	cmp	r0, #0
 800bef6:	f43f aeaf 	beq.w	800bc58 <_strtod_l+0x488>
 800befa:	9916      	ldr	r1, [sp, #88]	; 0x58
 800befc:	4620      	mov	r0, r4
 800befe:	f7fe ffdd 	bl	800aebc <_Bfree>
 800bf02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf04:	9316      	str	r3, [sp, #88]	; 0x58
 800bf06:	2e00      	cmp	r6, #0
 800bf08:	f300 808c 	bgt.w	800c024 <_strtod_l+0x854>
 800bf0c:	9b08      	ldr	r3, [sp, #32]
 800bf0e:	2b00      	cmp	r3, #0
 800bf10:	dd08      	ble.n	800bf24 <_strtod_l+0x754>
 800bf12:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bf14:	9905      	ldr	r1, [sp, #20]
 800bf16:	4620      	mov	r0, r4
 800bf18:	f7ff f990 	bl	800b23c <__pow5mult>
 800bf1c:	9005      	str	r0, [sp, #20]
 800bf1e:	2800      	cmp	r0, #0
 800bf20:	f43f ae9a 	beq.w	800bc58 <_strtod_l+0x488>
 800bf24:	2f00      	cmp	r7, #0
 800bf26:	dd08      	ble.n	800bf3a <_strtod_l+0x76a>
 800bf28:	9905      	ldr	r1, [sp, #20]
 800bf2a:	463a      	mov	r2, r7
 800bf2c:	4620      	mov	r0, r4
 800bf2e:	f7ff f9df 	bl	800b2f0 <__lshift>
 800bf32:	9005      	str	r0, [sp, #20]
 800bf34:	2800      	cmp	r0, #0
 800bf36:	f43f ae8f 	beq.w	800bc58 <_strtod_l+0x488>
 800bf3a:	f1ba 0f00 	cmp.w	sl, #0
 800bf3e:	dd08      	ble.n	800bf52 <_strtod_l+0x782>
 800bf40:	4659      	mov	r1, fp
 800bf42:	4652      	mov	r2, sl
 800bf44:	4620      	mov	r0, r4
 800bf46:	f7ff f9d3 	bl	800b2f0 <__lshift>
 800bf4a:	4683      	mov	fp, r0
 800bf4c:	2800      	cmp	r0, #0
 800bf4e:	f43f ae83 	beq.w	800bc58 <_strtod_l+0x488>
 800bf52:	9a05      	ldr	r2, [sp, #20]
 800bf54:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bf56:	4620      	mov	r0, r4
 800bf58:	f7ff fa52 	bl	800b400 <__mdiff>
 800bf5c:	4605      	mov	r5, r0
 800bf5e:	2800      	cmp	r0, #0
 800bf60:	f43f ae7a 	beq.w	800bc58 <_strtod_l+0x488>
 800bf64:	68c3      	ldr	r3, [r0, #12]
 800bf66:	930b      	str	r3, [sp, #44]	; 0x2c
 800bf68:	2300      	movs	r3, #0
 800bf6a:	60c3      	str	r3, [r0, #12]
 800bf6c:	4659      	mov	r1, fp
 800bf6e:	f7ff fa2b 	bl	800b3c8 <__mcmp>
 800bf72:	2800      	cmp	r0, #0
 800bf74:	da60      	bge.n	800c038 <_strtod_l+0x868>
 800bf76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf78:	ea53 0308 	orrs.w	r3, r3, r8
 800bf7c:	f040 8084 	bne.w	800c088 <_strtod_l+0x8b8>
 800bf80:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	d17f      	bne.n	800c088 <_strtod_l+0x8b8>
 800bf88:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800bf8c:	0d1b      	lsrs	r3, r3, #20
 800bf8e:	051b      	lsls	r3, r3, #20
 800bf90:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800bf94:	d978      	bls.n	800c088 <_strtod_l+0x8b8>
 800bf96:	696b      	ldr	r3, [r5, #20]
 800bf98:	b913      	cbnz	r3, 800bfa0 <_strtod_l+0x7d0>
 800bf9a:	692b      	ldr	r3, [r5, #16]
 800bf9c:	2b01      	cmp	r3, #1
 800bf9e:	dd73      	ble.n	800c088 <_strtod_l+0x8b8>
 800bfa0:	4629      	mov	r1, r5
 800bfa2:	2201      	movs	r2, #1
 800bfa4:	4620      	mov	r0, r4
 800bfa6:	f7ff f9a3 	bl	800b2f0 <__lshift>
 800bfaa:	4659      	mov	r1, fp
 800bfac:	4605      	mov	r5, r0
 800bfae:	f7ff fa0b 	bl	800b3c8 <__mcmp>
 800bfb2:	2800      	cmp	r0, #0
 800bfb4:	dd68      	ble.n	800c088 <_strtod_l+0x8b8>
 800bfb6:	9904      	ldr	r1, [sp, #16]
 800bfb8:	4a54      	ldr	r2, [pc, #336]	; (800c10c <_strtod_l+0x93c>)
 800bfba:	464b      	mov	r3, r9
 800bfbc:	2900      	cmp	r1, #0
 800bfbe:	f000 8084 	beq.w	800c0ca <_strtod_l+0x8fa>
 800bfc2:	ea02 0109 	and.w	r1, r2, r9
 800bfc6:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800bfca:	dc7e      	bgt.n	800c0ca <_strtod_l+0x8fa>
 800bfcc:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800bfd0:	f77f aeb3 	ble.w	800bd3a <_strtod_l+0x56a>
 800bfd4:	4b4e      	ldr	r3, [pc, #312]	; (800c110 <_strtod_l+0x940>)
 800bfd6:	4640      	mov	r0, r8
 800bfd8:	4649      	mov	r1, r9
 800bfda:	2200      	movs	r2, #0
 800bfdc:	f7f4 fb3c 	bl	8000658 <__aeabi_dmul>
 800bfe0:	4b4a      	ldr	r3, [pc, #296]	; (800c10c <_strtod_l+0x93c>)
 800bfe2:	400b      	ands	r3, r1
 800bfe4:	4680      	mov	r8, r0
 800bfe6:	4689      	mov	r9, r1
 800bfe8:	2b00      	cmp	r3, #0
 800bfea:	f47f ae3f 	bne.w	800bc6c <_strtod_l+0x49c>
 800bfee:	2322      	movs	r3, #34	; 0x22
 800bff0:	6023      	str	r3, [r4, #0]
 800bff2:	e63b      	b.n	800bc6c <_strtod_l+0x49c>
 800bff4:	f04f 32ff 	mov.w	r2, #4294967295
 800bff8:	fa02 f303 	lsl.w	r3, r2, r3
 800bffc:	ea03 0808 	and.w	r8, r3, r8
 800c000:	e6e8      	b.n	800bdd4 <_strtod_l+0x604>
 800c002:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c006:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c00a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c00e:	36e2      	adds	r6, #226	; 0xe2
 800c010:	fa01 f306 	lsl.w	r3, r1, r6
 800c014:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c018:	e748      	b.n	800beac <_strtod_l+0x6dc>
 800c01a:	2100      	movs	r1, #0
 800c01c:	2301      	movs	r3, #1
 800c01e:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800c022:	e743      	b.n	800beac <_strtod_l+0x6dc>
 800c024:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c026:	4632      	mov	r2, r6
 800c028:	4620      	mov	r0, r4
 800c02a:	f7ff f961 	bl	800b2f0 <__lshift>
 800c02e:	9016      	str	r0, [sp, #88]	; 0x58
 800c030:	2800      	cmp	r0, #0
 800c032:	f47f af6b 	bne.w	800bf0c <_strtod_l+0x73c>
 800c036:	e60f      	b.n	800bc58 <_strtod_l+0x488>
 800c038:	46ca      	mov	sl, r9
 800c03a:	d171      	bne.n	800c120 <_strtod_l+0x950>
 800c03c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c03e:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c042:	b352      	cbz	r2, 800c09a <_strtod_l+0x8ca>
 800c044:	4a33      	ldr	r2, [pc, #204]	; (800c114 <_strtod_l+0x944>)
 800c046:	4293      	cmp	r3, r2
 800c048:	d12a      	bne.n	800c0a0 <_strtod_l+0x8d0>
 800c04a:	9b04      	ldr	r3, [sp, #16]
 800c04c:	4641      	mov	r1, r8
 800c04e:	b1fb      	cbz	r3, 800c090 <_strtod_l+0x8c0>
 800c050:	4b2e      	ldr	r3, [pc, #184]	; (800c10c <_strtod_l+0x93c>)
 800c052:	ea09 0303 	and.w	r3, r9, r3
 800c056:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c05a:	f04f 32ff 	mov.w	r2, #4294967295
 800c05e:	d81a      	bhi.n	800c096 <_strtod_l+0x8c6>
 800c060:	0d1b      	lsrs	r3, r3, #20
 800c062:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c066:	fa02 f303 	lsl.w	r3, r2, r3
 800c06a:	4299      	cmp	r1, r3
 800c06c:	d118      	bne.n	800c0a0 <_strtod_l+0x8d0>
 800c06e:	4b2a      	ldr	r3, [pc, #168]	; (800c118 <_strtod_l+0x948>)
 800c070:	459a      	cmp	sl, r3
 800c072:	d102      	bne.n	800c07a <_strtod_l+0x8aa>
 800c074:	3101      	adds	r1, #1
 800c076:	f43f adef 	beq.w	800bc58 <_strtod_l+0x488>
 800c07a:	4b24      	ldr	r3, [pc, #144]	; (800c10c <_strtod_l+0x93c>)
 800c07c:	ea0a 0303 	and.w	r3, sl, r3
 800c080:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c084:	f04f 0800 	mov.w	r8, #0
 800c088:	9b04      	ldr	r3, [sp, #16]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	d1a2      	bne.n	800bfd4 <_strtod_l+0x804>
 800c08e:	e5ed      	b.n	800bc6c <_strtod_l+0x49c>
 800c090:	f04f 33ff 	mov.w	r3, #4294967295
 800c094:	e7e9      	b.n	800c06a <_strtod_l+0x89a>
 800c096:	4613      	mov	r3, r2
 800c098:	e7e7      	b.n	800c06a <_strtod_l+0x89a>
 800c09a:	ea53 0308 	orrs.w	r3, r3, r8
 800c09e:	d08a      	beq.n	800bfb6 <_strtod_l+0x7e6>
 800c0a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c0a2:	b1e3      	cbz	r3, 800c0de <_strtod_l+0x90e>
 800c0a4:	ea13 0f0a 	tst.w	r3, sl
 800c0a8:	d0ee      	beq.n	800c088 <_strtod_l+0x8b8>
 800c0aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c0ac:	9a04      	ldr	r2, [sp, #16]
 800c0ae:	4640      	mov	r0, r8
 800c0b0:	4649      	mov	r1, r9
 800c0b2:	b1c3      	cbz	r3, 800c0e6 <_strtod_l+0x916>
 800c0b4:	f7ff fb6f 	bl	800b796 <sulp>
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	ec51 0b18 	vmov	r0, r1, d8
 800c0c0:	f7f4 f914 	bl	80002ec <__adddf3>
 800c0c4:	4680      	mov	r8, r0
 800c0c6:	4689      	mov	r9, r1
 800c0c8:	e7de      	b.n	800c088 <_strtod_l+0x8b8>
 800c0ca:	4013      	ands	r3, r2
 800c0cc:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c0d0:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c0d4:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c0d8:	f04f 38ff 	mov.w	r8, #4294967295
 800c0dc:	e7d4      	b.n	800c088 <_strtod_l+0x8b8>
 800c0de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c0e0:	ea13 0f08 	tst.w	r3, r8
 800c0e4:	e7e0      	b.n	800c0a8 <_strtod_l+0x8d8>
 800c0e6:	f7ff fb56 	bl	800b796 <sulp>
 800c0ea:	4602      	mov	r2, r0
 800c0ec:	460b      	mov	r3, r1
 800c0ee:	ec51 0b18 	vmov	r0, r1, d8
 800c0f2:	f7f4 f8f9 	bl	80002e8 <__aeabi_dsub>
 800c0f6:	2200      	movs	r2, #0
 800c0f8:	2300      	movs	r3, #0
 800c0fa:	4680      	mov	r8, r0
 800c0fc:	4689      	mov	r9, r1
 800c0fe:	f7f4 fd13 	bl	8000b28 <__aeabi_dcmpeq>
 800c102:	2800      	cmp	r0, #0
 800c104:	d0c0      	beq.n	800c088 <_strtod_l+0x8b8>
 800c106:	e618      	b.n	800bd3a <_strtod_l+0x56a>
 800c108:	fffffc02 	.word	0xfffffc02
 800c10c:	7ff00000 	.word	0x7ff00000
 800c110:	39500000 	.word	0x39500000
 800c114:	000fffff 	.word	0x000fffff
 800c118:	7fefffff 	.word	0x7fefffff
 800c11c:	0800d968 	.word	0x0800d968
 800c120:	4659      	mov	r1, fp
 800c122:	4628      	mov	r0, r5
 800c124:	f7ff fac0 	bl	800b6a8 <__ratio>
 800c128:	ec57 6b10 	vmov	r6, r7, d0
 800c12c:	ee10 0a10 	vmov	r0, s0
 800c130:	2200      	movs	r2, #0
 800c132:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c136:	4639      	mov	r1, r7
 800c138:	f7f4 fd0a 	bl	8000b50 <__aeabi_dcmple>
 800c13c:	2800      	cmp	r0, #0
 800c13e:	d071      	beq.n	800c224 <_strtod_l+0xa54>
 800c140:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c142:	2b00      	cmp	r3, #0
 800c144:	d17c      	bne.n	800c240 <_strtod_l+0xa70>
 800c146:	f1b8 0f00 	cmp.w	r8, #0
 800c14a:	d15a      	bne.n	800c202 <_strtod_l+0xa32>
 800c14c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c150:	2b00      	cmp	r3, #0
 800c152:	d15d      	bne.n	800c210 <_strtod_l+0xa40>
 800c154:	4b90      	ldr	r3, [pc, #576]	; (800c398 <_strtod_l+0xbc8>)
 800c156:	2200      	movs	r2, #0
 800c158:	4630      	mov	r0, r6
 800c15a:	4639      	mov	r1, r7
 800c15c:	f7f4 fcee 	bl	8000b3c <__aeabi_dcmplt>
 800c160:	2800      	cmp	r0, #0
 800c162:	d15c      	bne.n	800c21e <_strtod_l+0xa4e>
 800c164:	4630      	mov	r0, r6
 800c166:	4639      	mov	r1, r7
 800c168:	4b8c      	ldr	r3, [pc, #560]	; (800c39c <_strtod_l+0xbcc>)
 800c16a:	2200      	movs	r2, #0
 800c16c:	f7f4 fa74 	bl	8000658 <__aeabi_dmul>
 800c170:	4606      	mov	r6, r0
 800c172:	460f      	mov	r7, r1
 800c174:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c178:	9606      	str	r6, [sp, #24]
 800c17a:	9307      	str	r3, [sp, #28]
 800c17c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c180:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c184:	4b86      	ldr	r3, [pc, #536]	; (800c3a0 <_strtod_l+0xbd0>)
 800c186:	ea0a 0303 	and.w	r3, sl, r3
 800c18a:	930d      	str	r3, [sp, #52]	; 0x34
 800c18c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c18e:	4b85      	ldr	r3, [pc, #532]	; (800c3a4 <_strtod_l+0xbd4>)
 800c190:	429a      	cmp	r2, r3
 800c192:	f040 8090 	bne.w	800c2b6 <_strtod_l+0xae6>
 800c196:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c19a:	ec49 8b10 	vmov	d0, r8, r9
 800c19e:	f7ff f9b9 	bl	800b514 <__ulp>
 800c1a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1a6:	ec51 0b10 	vmov	r0, r1, d0
 800c1aa:	f7f4 fa55 	bl	8000658 <__aeabi_dmul>
 800c1ae:	4642      	mov	r2, r8
 800c1b0:	464b      	mov	r3, r9
 800c1b2:	f7f4 f89b 	bl	80002ec <__adddf3>
 800c1b6:	460b      	mov	r3, r1
 800c1b8:	4979      	ldr	r1, [pc, #484]	; (800c3a0 <_strtod_l+0xbd0>)
 800c1ba:	4a7b      	ldr	r2, [pc, #492]	; (800c3a8 <_strtod_l+0xbd8>)
 800c1bc:	4019      	ands	r1, r3
 800c1be:	4291      	cmp	r1, r2
 800c1c0:	4680      	mov	r8, r0
 800c1c2:	d944      	bls.n	800c24e <_strtod_l+0xa7e>
 800c1c4:	ee18 2a90 	vmov	r2, s17
 800c1c8:	4b78      	ldr	r3, [pc, #480]	; (800c3ac <_strtod_l+0xbdc>)
 800c1ca:	429a      	cmp	r2, r3
 800c1cc:	d104      	bne.n	800c1d8 <_strtod_l+0xa08>
 800c1ce:	ee18 3a10 	vmov	r3, s16
 800c1d2:	3301      	adds	r3, #1
 800c1d4:	f43f ad40 	beq.w	800bc58 <_strtod_l+0x488>
 800c1d8:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c3ac <_strtod_l+0xbdc>
 800c1dc:	f04f 38ff 	mov.w	r8, #4294967295
 800c1e0:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c1e2:	4620      	mov	r0, r4
 800c1e4:	f7fe fe6a 	bl	800aebc <_Bfree>
 800c1e8:	9905      	ldr	r1, [sp, #20]
 800c1ea:	4620      	mov	r0, r4
 800c1ec:	f7fe fe66 	bl	800aebc <_Bfree>
 800c1f0:	4659      	mov	r1, fp
 800c1f2:	4620      	mov	r0, r4
 800c1f4:	f7fe fe62 	bl	800aebc <_Bfree>
 800c1f8:	4629      	mov	r1, r5
 800c1fa:	4620      	mov	r0, r4
 800c1fc:	f7fe fe5e 	bl	800aebc <_Bfree>
 800c200:	e609      	b.n	800be16 <_strtod_l+0x646>
 800c202:	f1b8 0f01 	cmp.w	r8, #1
 800c206:	d103      	bne.n	800c210 <_strtod_l+0xa40>
 800c208:	f1b9 0f00 	cmp.w	r9, #0
 800c20c:	f43f ad95 	beq.w	800bd3a <_strtod_l+0x56a>
 800c210:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c368 <_strtod_l+0xb98>
 800c214:	4f60      	ldr	r7, [pc, #384]	; (800c398 <_strtod_l+0xbc8>)
 800c216:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c21a:	2600      	movs	r6, #0
 800c21c:	e7ae      	b.n	800c17c <_strtod_l+0x9ac>
 800c21e:	4f5f      	ldr	r7, [pc, #380]	; (800c39c <_strtod_l+0xbcc>)
 800c220:	2600      	movs	r6, #0
 800c222:	e7a7      	b.n	800c174 <_strtod_l+0x9a4>
 800c224:	4b5d      	ldr	r3, [pc, #372]	; (800c39c <_strtod_l+0xbcc>)
 800c226:	4630      	mov	r0, r6
 800c228:	4639      	mov	r1, r7
 800c22a:	2200      	movs	r2, #0
 800c22c:	f7f4 fa14 	bl	8000658 <__aeabi_dmul>
 800c230:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c232:	4606      	mov	r6, r0
 800c234:	460f      	mov	r7, r1
 800c236:	2b00      	cmp	r3, #0
 800c238:	d09c      	beq.n	800c174 <_strtod_l+0x9a4>
 800c23a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c23e:	e79d      	b.n	800c17c <_strtod_l+0x9ac>
 800c240:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c370 <_strtod_l+0xba0>
 800c244:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c248:	ec57 6b17 	vmov	r6, r7, d7
 800c24c:	e796      	b.n	800c17c <_strtod_l+0x9ac>
 800c24e:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c252:	9b04      	ldr	r3, [sp, #16]
 800c254:	46ca      	mov	sl, r9
 800c256:	2b00      	cmp	r3, #0
 800c258:	d1c2      	bne.n	800c1e0 <_strtod_l+0xa10>
 800c25a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c25e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c260:	0d1b      	lsrs	r3, r3, #20
 800c262:	051b      	lsls	r3, r3, #20
 800c264:	429a      	cmp	r2, r3
 800c266:	d1bb      	bne.n	800c1e0 <_strtod_l+0xa10>
 800c268:	4630      	mov	r0, r6
 800c26a:	4639      	mov	r1, r7
 800c26c:	f7f4 fd54 	bl	8000d18 <__aeabi_d2lz>
 800c270:	f7f4 f9c4 	bl	80005fc <__aeabi_l2d>
 800c274:	4602      	mov	r2, r0
 800c276:	460b      	mov	r3, r1
 800c278:	4630      	mov	r0, r6
 800c27a:	4639      	mov	r1, r7
 800c27c:	f7f4 f834 	bl	80002e8 <__aeabi_dsub>
 800c280:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c282:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c286:	ea43 0308 	orr.w	r3, r3, r8
 800c28a:	4313      	orrs	r3, r2
 800c28c:	4606      	mov	r6, r0
 800c28e:	460f      	mov	r7, r1
 800c290:	d054      	beq.n	800c33c <_strtod_l+0xb6c>
 800c292:	a339      	add	r3, pc, #228	; (adr r3, 800c378 <_strtod_l+0xba8>)
 800c294:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c298:	f7f4 fc50 	bl	8000b3c <__aeabi_dcmplt>
 800c29c:	2800      	cmp	r0, #0
 800c29e:	f47f ace5 	bne.w	800bc6c <_strtod_l+0x49c>
 800c2a2:	a337      	add	r3, pc, #220	; (adr r3, 800c380 <_strtod_l+0xbb0>)
 800c2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a8:	4630      	mov	r0, r6
 800c2aa:	4639      	mov	r1, r7
 800c2ac:	f7f4 fc64 	bl	8000b78 <__aeabi_dcmpgt>
 800c2b0:	2800      	cmp	r0, #0
 800c2b2:	d095      	beq.n	800c1e0 <_strtod_l+0xa10>
 800c2b4:	e4da      	b.n	800bc6c <_strtod_l+0x49c>
 800c2b6:	9b04      	ldr	r3, [sp, #16]
 800c2b8:	b333      	cbz	r3, 800c308 <_strtod_l+0xb38>
 800c2ba:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c2bc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c2c0:	d822      	bhi.n	800c308 <_strtod_l+0xb38>
 800c2c2:	a331      	add	r3, pc, #196	; (adr r3, 800c388 <_strtod_l+0xbb8>)
 800c2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2c8:	4630      	mov	r0, r6
 800c2ca:	4639      	mov	r1, r7
 800c2cc:	f7f4 fc40 	bl	8000b50 <__aeabi_dcmple>
 800c2d0:	b1a0      	cbz	r0, 800c2fc <_strtod_l+0xb2c>
 800c2d2:	4639      	mov	r1, r7
 800c2d4:	4630      	mov	r0, r6
 800c2d6:	f7f4 fc97 	bl	8000c08 <__aeabi_d2uiz>
 800c2da:	2801      	cmp	r0, #1
 800c2dc:	bf38      	it	cc
 800c2de:	2001      	movcc	r0, #1
 800c2e0:	f7f4 f940 	bl	8000564 <__aeabi_ui2d>
 800c2e4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2e6:	4606      	mov	r6, r0
 800c2e8:	460f      	mov	r7, r1
 800c2ea:	bb23      	cbnz	r3, 800c336 <_strtod_l+0xb66>
 800c2ec:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c2f0:	9010      	str	r0, [sp, #64]	; 0x40
 800c2f2:	9311      	str	r3, [sp, #68]	; 0x44
 800c2f4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c2f8:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c2fc:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c2fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c300:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c304:	1a9b      	subs	r3, r3, r2
 800c306:	930f      	str	r3, [sp, #60]	; 0x3c
 800c308:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c30c:	eeb0 0a48 	vmov.f32	s0, s16
 800c310:	eef0 0a68 	vmov.f32	s1, s17
 800c314:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c318:	f7ff f8fc 	bl	800b514 <__ulp>
 800c31c:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c320:	ec53 2b10 	vmov	r2, r3, d0
 800c324:	f7f4 f998 	bl	8000658 <__aeabi_dmul>
 800c328:	ec53 2b18 	vmov	r2, r3, d8
 800c32c:	f7f3 ffde 	bl	80002ec <__adddf3>
 800c330:	4680      	mov	r8, r0
 800c332:	4689      	mov	r9, r1
 800c334:	e78d      	b.n	800c252 <_strtod_l+0xa82>
 800c336:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c33a:	e7db      	b.n	800c2f4 <_strtod_l+0xb24>
 800c33c:	a314      	add	r3, pc, #80	; (adr r3, 800c390 <_strtod_l+0xbc0>)
 800c33e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c342:	f7f4 fbfb 	bl	8000b3c <__aeabi_dcmplt>
 800c346:	e7b3      	b.n	800c2b0 <_strtod_l+0xae0>
 800c348:	2300      	movs	r3, #0
 800c34a:	930a      	str	r3, [sp, #40]	; 0x28
 800c34c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c34e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c350:	6013      	str	r3, [r2, #0]
 800c352:	f7ff ba7c 	b.w	800b84e <_strtod_l+0x7e>
 800c356:	2a65      	cmp	r2, #101	; 0x65
 800c358:	f43f ab75 	beq.w	800ba46 <_strtod_l+0x276>
 800c35c:	2a45      	cmp	r2, #69	; 0x45
 800c35e:	f43f ab72 	beq.w	800ba46 <_strtod_l+0x276>
 800c362:	2301      	movs	r3, #1
 800c364:	f7ff bbaa 	b.w	800babc <_strtod_l+0x2ec>
 800c368:	00000000 	.word	0x00000000
 800c36c:	bff00000 	.word	0xbff00000
 800c370:	00000000 	.word	0x00000000
 800c374:	3ff00000 	.word	0x3ff00000
 800c378:	94a03595 	.word	0x94a03595
 800c37c:	3fdfffff 	.word	0x3fdfffff
 800c380:	35afe535 	.word	0x35afe535
 800c384:	3fe00000 	.word	0x3fe00000
 800c388:	ffc00000 	.word	0xffc00000
 800c38c:	41dfffff 	.word	0x41dfffff
 800c390:	94a03595 	.word	0x94a03595
 800c394:	3fcfffff 	.word	0x3fcfffff
 800c398:	3ff00000 	.word	0x3ff00000
 800c39c:	3fe00000 	.word	0x3fe00000
 800c3a0:	7ff00000 	.word	0x7ff00000
 800c3a4:	7fe00000 	.word	0x7fe00000
 800c3a8:	7c9fffff 	.word	0x7c9fffff
 800c3ac:	7fefffff 	.word	0x7fefffff

0800c3b0 <_strtod_r>:
 800c3b0:	4b01      	ldr	r3, [pc, #4]	; (800c3b8 <_strtod_r+0x8>)
 800c3b2:	f7ff ba0d 	b.w	800b7d0 <_strtod_l>
 800c3b6:	bf00      	nop
 800c3b8:	2000007c 	.word	0x2000007c

0800c3bc <_strtol_l.constprop.0>:
 800c3bc:	2b01      	cmp	r3, #1
 800c3be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c3c2:	d001      	beq.n	800c3c8 <_strtol_l.constprop.0+0xc>
 800c3c4:	2b24      	cmp	r3, #36	; 0x24
 800c3c6:	d906      	bls.n	800c3d6 <_strtol_l.constprop.0+0x1a>
 800c3c8:	f7fd fd88 	bl	8009edc <__errno>
 800c3cc:	2316      	movs	r3, #22
 800c3ce:	6003      	str	r3, [r0, #0]
 800c3d0:	2000      	movs	r0, #0
 800c3d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c3d6:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c4bc <_strtol_l.constprop.0+0x100>
 800c3da:	460d      	mov	r5, r1
 800c3dc:	462e      	mov	r6, r5
 800c3de:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c3e2:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c3e6:	f017 0708 	ands.w	r7, r7, #8
 800c3ea:	d1f7      	bne.n	800c3dc <_strtol_l.constprop.0+0x20>
 800c3ec:	2c2d      	cmp	r4, #45	; 0x2d
 800c3ee:	d132      	bne.n	800c456 <_strtol_l.constprop.0+0x9a>
 800c3f0:	782c      	ldrb	r4, [r5, #0]
 800c3f2:	2701      	movs	r7, #1
 800c3f4:	1cb5      	adds	r5, r6, #2
 800c3f6:	2b00      	cmp	r3, #0
 800c3f8:	d05b      	beq.n	800c4b2 <_strtol_l.constprop.0+0xf6>
 800c3fa:	2b10      	cmp	r3, #16
 800c3fc:	d109      	bne.n	800c412 <_strtol_l.constprop.0+0x56>
 800c3fe:	2c30      	cmp	r4, #48	; 0x30
 800c400:	d107      	bne.n	800c412 <_strtol_l.constprop.0+0x56>
 800c402:	782c      	ldrb	r4, [r5, #0]
 800c404:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c408:	2c58      	cmp	r4, #88	; 0x58
 800c40a:	d14d      	bne.n	800c4a8 <_strtol_l.constprop.0+0xec>
 800c40c:	786c      	ldrb	r4, [r5, #1]
 800c40e:	2310      	movs	r3, #16
 800c410:	3502      	adds	r5, #2
 800c412:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c416:	f108 38ff 	add.w	r8, r8, #4294967295
 800c41a:	f04f 0e00 	mov.w	lr, #0
 800c41e:	fbb8 f9f3 	udiv	r9, r8, r3
 800c422:	4676      	mov	r6, lr
 800c424:	fb03 8a19 	mls	sl, r3, r9, r8
 800c428:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c42c:	f1bc 0f09 	cmp.w	ip, #9
 800c430:	d816      	bhi.n	800c460 <_strtol_l.constprop.0+0xa4>
 800c432:	4664      	mov	r4, ip
 800c434:	42a3      	cmp	r3, r4
 800c436:	dd24      	ble.n	800c482 <_strtol_l.constprop.0+0xc6>
 800c438:	f1be 3fff 	cmp.w	lr, #4294967295
 800c43c:	d008      	beq.n	800c450 <_strtol_l.constprop.0+0x94>
 800c43e:	45b1      	cmp	r9, r6
 800c440:	d31c      	bcc.n	800c47c <_strtol_l.constprop.0+0xc0>
 800c442:	d101      	bne.n	800c448 <_strtol_l.constprop.0+0x8c>
 800c444:	45a2      	cmp	sl, r4
 800c446:	db19      	blt.n	800c47c <_strtol_l.constprop.0+0xc0>
 800c448:	fb06 4603 	mla	r6, r6, r3, r4
 800c44c:	f04f 0e01 	mov.w	lr, #1
 800c450:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c454:	e7e8      	b.n	800c428 <_strtol_l.constprop.0+0x6c>
 800c456:	2c2b      	cmp	r4, #43	; 0x2b
 800c458:	bf04      	itt	eq
 800c45a:	782c      	ldrbeq	r4, [r5, #0]
 800c45c:	1cb5      	addeq	r5, r6, #2
 800c45e:	e7ca      	b.n	800c3f6 <_strtol_l.constprop.0+0x3a>
 800c460:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c464:	f1bc 0f19 	cmp.w	ip, #25
 800c468:	d801      	bhi.n	800c46e <_strtol_l.constprop.0+0xb2>
 800c46a:	3c37      	subs	r4, #55	; 0x37
 800c46c:	e7e2      	b.n	800c434 <_strtol_l.constprop.0+0x78>
 800c46e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c472:	f1bc 0f19 	cmp.w	ip, #25
 800c476:	d804      	bhi.n	800c482 <_strtol_l.constprop.0+0xc6>
 800c478:	3c57      	subs	r4, #87	; 0x57
 800c47a:	e7db      	b.n	800c434 <_strtol_l.constprop.0+0x78>
 800c47c:	f04f 3eff 	mov.w	lr, #4294967295
 800c480:	e7e6      	b.n	800c450 <_strtol_l.constprop.0+0x94>
 800c482:	f1be 3fff 	cmp.w	lr, #4294967295
 800c486:	d105      	bne.n	800c494 <_strtol_l.constprop.0+0xd8>
 800c488:	2322      	movs	r3, #34	; 0x22
 800c48a:	6003      	str	r3, [r0, #0]
 800c48c:	4646      	mov	r6, r8
 800c48e:	b942      	cbnz	r2, 800c4a2 <_strtol_l.constprop.0+0xe6>
 800c490:	4630      	mov	r0, r6
 800c492:	e79e      	b.n	800c3d2 <_strtol_l.constprop.0+0x16>
 800c494:	b107      	cbz	r7, 800c498 <_strtol_l.constprop.0+0xdc>
 800c496:	4276      	negs	r6, r6
 800c498:	2a00      	cmp	r2, #0
 800c49a:	d0f9      	beq.n	800c490 <_strtol_l.constprop.0+0xd4>
 800c49c:	f1be 0f00 	cmp.w	lr, #0
 800c4a0:	d000      	beq.n	800c4a4 <_strtol_l.constprop.0+0xe8>
 800c4a2:	1e69      	subs	r1, r5, #1
 800c4a4:	6011      	str	r1, [r2, #0]
 800c4a6:	e7f3      	b.n	800c490 <_strtol_l.constprop.0+0xd4>
 800c4a8:	2430      	movs	r4, #48	; 0x30
 800c4aa:	2b00      	cmp	r3, #0
 800c4ac:	d1b1      	bne.n	800c412 <_strtol_l.constprop.0+0x56>
 800c4ae:	2308      	movs	r3, #8
 800c4b0:	e7af      	b.n	800c412 <_strtol_l.constprop.0+0x56>
 800c4b2:	2c30      	cmp	r4, #48	; 0x30
 800c4b4:	d0a5      	beq.n	800c402 <_strtol_l.constprop.0+0x46>
 800c4b6:	230a      	movs	r3, #10
 800c4b8:	e7ab      	b.n	800c412 <_strtol_l.constprop.0+0x56>
 800c4ba:	bf00      	nop
 800c4bc:	0800d991 	.word	0x0800d991

0800c4c0 <_strtol_r>:
 800c4c0:	f7ff bf7c 	b.w	800c3bc <_strtol_l.constprop.0>

0800c4c4 <__ssputs_r>:
 800c4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c4c8:	688e      	ldr	r6, [r1, #8]
 800c4ca:	461f      	mov	r7, r3
 800c4cc:	42be      	cmp	r6, r7
 800c4ce:	680b      	ldr	r3, [r1, #0]
 800c4d0:	4682      	mov	sl, r0
 800c4d2:	460c      	mov	r4, r1
 800c4d4:	4690      	mov	r8, r2
 800c4d6:	d82c      	bhi.n	800c532 <__ssputs_r+0x6e>
 800c4d8:	898a      	ldrh	r2, [r1, #12]
 800c4da:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c4de:	d026      	beq.n	800c52e <__ssputs_r+0x6a>
 800c4e0:	6965      	ldr	r5, [r4, #20]
 800c4e2:	6909      	ldr	r1, [r1, #16]
 800c4e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c4e8:	eba3 0901 	sub.w	r9, r3, r1
 800c4ec:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c4f0:	1c7b      	adds	r3, r7, #1
 800c4f2:	444b      	add	r3, r9
 800c4f4:	106d      	asrs	r5, r5, #1
 800c4f6:	429d      	cmp	r5, r3
 800c4f8:	bf38      	it	cc
 800c4fa:	461d      	movcc	r5, r3
 800c4fc:	0553      	lsls	r3, r2, #21
 800c4fe:	d527      	bpl.n	800c550 <__ssputs_r+0x8c>
 800c500:	4629      	mov	r1, r5
 800c502:	f7fe fc0f 	bl	800ad24 <_malloc_r>
 800c506:	4606      	mov	r6, r0
 800c508:	b360      	cbz	r0, 800c564 <__ssputs_r+0xa0>
 800c50a:	6921      	ldr	r1, [r4, #16]
 800c50c:	464a      	mov	r2, r9
 800c50e:	f000 fa1b 	bl	800c948 <memcpy>
 800c512:	89a3      	ldrh	r3, [r4, #12]
 800c514:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c518:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c51c:	81a3      	strh	r3, [r4, #12]
 800c51e:	6126      	str	r6, [r4, #16]
 800c520:	6165      	str	r5, [r4, #20]
 800c522:	444e      	add	r6, r9
 800c524:	eba5 0509 	sub.w	r5, r5, r9
 800c528:	6026      	str	r6, [r4, #0]
 800c52a:	60a5      	str	r5, [r4, #8]
 800c52c:	463e      	mov	r6, r7
 800c52e:	42be      	cmp	r6, r7
 800c530:	d900      	bls.n	800c534 <__ssputs_r+0x70>
 800c532:	463e      	mov	r6, r7
 800c534:	6820      	ldr	r0, [r4, #0]
 800c536:	4632      	mov	r2, r6
 800c538:	4641      	mov	r1, r8
 800c53a:	f000 f9c9 	bl	800c8d0 <memmove>
 800c53e:	68a3      	ldr	r3, [r4, #8]
 800c540:	1b9b      	subs	r3, r3, r6
 800c542:	60a3      	str	r3, [r4, #8]
 800c544:	6823      	ldr	r3, [r4, #0]
 800c546:	4433      	add	r3, r6
 800c548:	6023      	str	r3, [r4, #0]
 800c54a:	2000      	movs	r0, #0
 800c54c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c550:	462a      	mov	r2, r5
 800c552:	f000 fdae 	bl	800d0b2 <_realloc_r>
 800c556:	4606      	mov	r6, r0
 800c558:	2800      	cmp	r0, #0
 800c55a:	d1e0      	bne.n	800c51e <__ssputs_r+0x5a>
 800c55c:	6921      	ldr	r1, [r4, #16]
 800c55e:	4650      	mov	r0, sl
 800c560:	f7fe fb6c 	bl	800ac3c <_free_r>
 800c564:	230c      	movs	r3, #12
 800c566:	f8ca 3000 	str.w	r3, [sl]
 800c56a:	89a3      	ldrh	r3, [r4, #12]
 800c56c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c570:	81a3      	strh	r3, [r4, #12]
 800c572:	f04f 30ff 	mov.w	r0, #4294967295
 800c576:	e7e9      	b.n	800c54c <__ssputs_r+0x88>

0800c578 <_svfiprintf_r>:
 800c578:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c57c:	4698      	mov	r8, r3
 800c57e:	898b      	ldrh	r3, [r1, #12]
 800c580:	061b      	lsls	r3, r3, #24
 800c582:	b09d      	sub	sp, #116	; 0x74
 800c584:	4607      	mov	r7, r0
 800c586:	460d      	mov	r5, r1
 800c588:	4614      	mov	r4, r2
 800c58a:	d50e      	bpl.n	800c5aa <_svfiprintf_r+0x32>
 800c58c:	690b      	ldr	r3, [r1, #16]
 800c58e:	b963      	cbnz	r3, 800c5aa <_svfiprintf_r+0x32>
 800c590:	2140      	movs	r1, #64	; 0x40
 800c592:	f7fe fbc7 	bl	800ad24 <_malloc_r>
 800c596:	6028      	str	r0, [r5, #0]
 800c598:	6128      	str	r0, [r5, #16]
 800c59a:	b920      	cbnz	r0, 800c5a6 <_svfiprintf_r+0x2e>
 800c59c:	230c      	movs	r3, #12
 800c59e:	603b      	str	r3, [r7, #0]
 800c5a0:	f04f 30ff 	mov.w	r0, #4294967295
 800c5a4:	e0d0      	b.n	800c748 <_svfiprintf_r+0x1d0>
 800c5a6:	2340      	movs	r3, #64	; 0x40
 800c5a8:	616b      	str	r3, [r5, #20]
 800c5aa:	2300      	movs	r3, #0
 800c5ac:	9309      	str	r3, [sp, #36]	; 0x24
 800c5ae:	2320      	movs	r3, #32
 800c5b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c5b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800c5b8:	2330      	movs	r3, #48	; 0x30
 800c5ba:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c760 <_svfiprintf_r+0x1e8>
 800c5be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c5c2:	f04f 0901 	mov.w	r9, #1
 800c5c6:	4623      	mov	r3, r4
 800c5c8:	469a      	mov	sl, r3
 800c5ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c5ce:	b10a      	cbz	r2, 800c5d4 <_svfiprintf_r+0x5c>
 800c5d0:	2a25      	cmp	r2, #37	; 0x25
 800c5d2:	d1f9      	bne.n	800c5c8 <_svfiprintf_r+0x50>
 800c5d4:	ebba 0b04 	subs.w	fp, sl, r4
 800c5d8:	d00b      	beq.n	800c5f2 <_svfiprintf_r+0x7a>
 800c5da:	465b      	mov	r3, fp
 800c5dc:	4622      	mov	r2, r4
 800c5de:	4629      	mov	r1, r5
 800c5e0:	4638      	mov	r0, r7
 800c5e2:	f7ff ff6f 	bl	800c4c4 <__ssputs_r>
 800c5e6:	3001      	adds	r0, #1
 800c5e8:	f000 80a9 	beq.w	800c73e <_svfiprintf_r+0x1c6>
 800c5ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c5ee:	445a      	add	r2, fp
 800c5f0:	9209      	str	r2, [sp, #36]	; 0x24
 800c5f2:	f89a 3000 	ldrb.w	r3, [sl]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	f000 80a1 	beq.w	800c73e <_svfiprintf_r+0x1c6>
 800c5fc:	2300      	movs	r3, #0
 800c5fe:	f04f 32ff 	mov.w	r2, #4294967295
 800c602:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c606:	f10a 0a01 	add.w	sl, sl, #1
 800c60a:	9304      	str	r3, [sp, #16]
 800c60c:	9307      	str	r3, [sp, #28]
 800c60e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c612:	931a      	str	r3, [sp, #104]	; 0x68
 800c614:	4654      	mov	r4, sl
 800c616:	2205      	movs	r2, #5
 800c618:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c61c:	4850      	ldr	r0, [pc, #320]	; (800c760 <_svfiprintf_r+0x1e8>)
 800c61e:	f7f3 fe07 	bl	8000230 <memchr>
 800c622:	9a04      	ldr	r2, [sp, #16]
 800c624:	b9d8      	cbnz	r0, 800c65e <_svfiprintf_r+0xe6>
 800c626:	06d0      	lsls	r0, r2, #27
 800c628:	bf44      	itt	mi
 800c62a:	2320      	movmi	r3, #32
 800c62c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c630:	0711      	lsls	r1, r2, #28
 800c632:	bf44      	itt	mi
 800c634:	232b      	movmi	r3, #43	; 0x2b
 800c636:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c63a:	f89a 3000 	ldrb.w	r3, [sl]
 800c63e:	2b2a      	cmp	r3, #42	; 0x2a
 800c640:	d015      	beq.n	800c66e <_svfiprintf_r+0xf6>
 800c642:	9a07      	ldr	r2, [sp, #28]
 800c644:	4654      	mov	r4, sl
 800c646:	2000      	movs	r0, #0
 800c648:	f04f 0c0a 	mov.w	ip, #10
 800c64c:	4621      	mov	r1, r4
 800c64e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c652:	3b30      	subs	r3, #48	; 0x30
 800c654:	2b09      	cmp	r3, #9
 800c656:	d94d      	bls.n	800c6f4 <_svfiprintf_r+0x17c>
 800c658:	b1b0      	cbz	r0, 800c688 <_svfiprintf_r+0x110>
 800c65a:	9207      	str	r2, [sp, #28]
 800c65c:	e014      	b.n	800c688 <_svfiprintf_r+0x110>
 800c65e:	eba0 0308 	sub.w	r3, r0, r8
 800c662:	fa09 f303 	lsl.w	r3, r9, r3
 800c666:	4313      	orrs	r3, r2
 800c668:	9304      	str	r3, [sp, #16]
 800c66a:	46a2      	mov	sl, r4
 800c66c:	e7d2      	b.n	800c614 <_svfiprintf_r+0x9c>
 800c66e:	9b03      	ldr	r3, [sp, #12]
 800c670:	1d19      	adds	r1, r3, #4
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	9103      	str	r1, [sp, #12]
 800c676:	2b00      	cmp	r3, #0
 800c678:	bfbb      	ittet	lt
 800c67a:	425b      	neglt	r3, r3
 800c67c:	f042 0202 	orrlt.w	r2, r2, #2
 800c680:	9307      	strge	r3, [sp, #28]
 800c682:	9307      	strlt	r3, [sp, #28]
 800c684:	bfb8      	it	lt
 800c686:	9204      	strlt	r2, [sp, #16]
 800c688:	7823      	ldrb	r3, [r4, #0]
 800c68a:	2b2e      	cmp	r3, #46	; 0x2e
 800c68c:	d10c      	bne.n	800c6a8 <_svfiprintf_r+0x130>
 800c68e:	7863      	ldrb	r3, [r4, #1]
 800c690:	2b2a      	cmp	r3, #42	; 0x2a
 800c692:	d134      	bne.n	800c6fe <_svfiprintf_r+0x186>
 800c694:	9b03      	ldr	r3, [sp, #12]
 800c696:	1d1a      	adds	r2, r3, #4
 800c698:	681b      	ldr	r3, [r3, #0]
 800c69a:	9203      	str	r2, [sp, #12]
 800c69c:	2b00      	cmp	r3, #0
 800c69e:	bfb8      	it	lt
 800c6a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800c6a4:	3402      	adds	r4, #2
 800c6a6:	9305      	str	r3, [sp, #20]
 800c6a8:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c770 <_svfiprintf_r+0x1f8>
 800c6ac:	7821      	ldrb	r1, [r4, #0]
 800c6ae:	2203      	movs	r2, #3
 800c6b0:	4650      	mov	r0, sl
 800c6b2:	f7f3 fdbd 	bl	8000230 <memchr>
 800c6b6:	b138      	cbz	r0, 800c6c8 <_svfiprintf_r+0x150>
 800c6b8:	9b04      	ldr	r3, [sp, #16]
 800c6ba:	eba0 000a 	sub.w	r0, r0, sl
 800c6be:	2240      	movs	r2, #64	; 0x40
 800c6c0:	4082      	lsls	r2, r0
 800c6c2:	4313      	orrs	r3, r2
 800c6c4:	3401      	adds	r4, #1
 800c6c6:	9304      	str	r3, [sp, #16]
 800c6c8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6cc:	4825      	ldr	r0, [pc, #148]	; (800c764 <_svfiprintf_r+0x1ec>)
 800c6ce:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c6d2:	2206      	movs	r2, #6
 800c6d4:	f7f3 fdac 	bl	8000230 <memchr>
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	d038      	beq.n	800c74e <_svfiprintf_r+0x1d6>
 800c6dc:	4b22      	ldr	r3, [pc, #136]	; (800c768 <_svfiprintf_r+0x1f0>)
 800c6de:	bb1b      	cbnz	r3, 800c728 <_svfiprintf_r+0x1b0>
 800c6e0:	9b03      	ldr	r3, [sp, #12]
 800c6e2:	3307      	adds	r3, #7
 800c6e4:	f023 0307 	bic.w	r3, r3, #7
 800c6e8:	3308      	adds	r3, #8
 800c6ea:	9303      	str	r3, [sp, #12]
 800c6ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c6ee:	4433      	add	r3, r6
 800c6f0:	9309      	str	r3, [sp, #36]	; 0x24
 800c6f2:	e768      	b.n	800c5c6 <_svfiprintf_r+0x4e>
 800c6f4:	fb0c 3202 	mla	r2, ip, r2, r3
 800c6f8:	460c      	mov	r4, r1
 800c6fa:	2001      	movs	r0, #1
 800c6fc:	e7a6      	b.n	800c64c <_svfiprintf_r+0xd4>
 800c6fe:	2300      	movs	r3, #0
 800c700:	3401      	adds	r4, #1
 800c702:	9305      	str	r3, [sp, #20]
 800c704:	4619      	mov	r1, r3
 800c706:	f04f 0c0a 	mov.w	ip, #10
 800c70a:	4620      	mov	r0, r4
 800c70c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c710:	3a30      	subs	r2, #48	; 0x30
 800c712:	2a09      	cmp	r2, #9
 800c714:	d903      	bls.n	800c71e <_svfiprintf_r+0x1a6>
 800c716:	2b00      	cmp	r3, #0
 800c718:	d0c6      	beq.n	800c6a8 <_svfiprintf_r+0x130>
 800c71a:	9105      	str	r1, [sp, #20]
 800c71c:	e7c4      	b.n	800c6a8 <_svfiprintf_r+0x130>
 800c71e:	fb0c 2101 	mla	r1, ip, r1, r2
 800c722:	4604      	mov	r4, r0
 800c724:	2301      	movs	r3, #1
 800c726:	e7f0      	b.n	800c70a <_svfiprintf_r+0x192>
 800c728:	ab03      	add	r3, sp, #12
 800c72a:	9300      	str	r3, [sp, #0]
 800c72c:	462a      	mov	r2, r5
 800c72e:	4b0f      	ldr	r3, [pc, #60]	; (800c76c <_svfiprintf_r+0x1f4>)
 800c730:	a904      	add	r1, sp, #16
 800c732:	4638      	mov	r0, r7
 800c734:	f7fc fc50 	bl	8008fd8 <_printf_float>
 800c738:	1c42      	adds	r2, r0, #1
 800c73a:	4606      	mov	r6, r0
 800c73c:	d1d6      	bne.n	800c6ec <_svfiprintf_r+0x174>
 800c73e:	89ab      	ldrh	r3, [r5, #12]
 800c740:	065b      	lsls	r3, r3, #25
 800c742:	f53f af2d 	bmi.w	800c5a0 <_svfiprintf_r+0x28>
 800c746:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c748:	b01d      	add	sp, #116	; 0x74
 800c74a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c74e:	ab03      	add	r3, sp, #12
 800c750:	9300      	str	r3, [sp, #0]
 800c752:	462a      	mov	r2, r5
 800c754:	4b05      	ldr	r3, [pc, #20]	; (800c76c <_svfiprintf_r+0x1f4>)
 800c756:	a904      	add	r1, sp, #16
 800c758:	4638      	mov	r0, r7
 800c75a:	f7fc fee1 	bl	8009520 <_printf_i>
 800c75e:	e7eb      	b.n	800c738 <_svfiprintf_r+0x1c0>
 800c760:	0800da91 	.word	0x0800da91
 800c764:	0800da9b 	.word	0x0800da9b
 800c768:	08008fd9 	.word	0x08008fd9
 800c76c:	0800c4c5 	.word	0x0800c4c5
 800c770:	0800da97 	.word	0x0800da97

0800c774 <__sflush_r>:
 800c774:	898a      	ldrh	r2, [r1, #12]
 800c776:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c77a:	4605      	mov	r5, r0
 800c77c:	0710      	lsls	r0, r2, #28
 800c77e:	460c      	mov	r4, r1
 800c780:	d458      	bmi.n	800c834 <__sflush_r+0xc0>
 800c782:	684b      	ldr	r3, [r1, #4]
 800c784:	2b00      	cmp	r3, #0
 800c786:	dc05      	bgt.n	800c794 <__sflush_r+0x20>
 800c788:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	dc02      	bgt.n	800c794 <__sflush_r+0x20>
 800c78e:	2000      	movs	r0, #0
 800c790:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c794:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c796:	2e00      	cmp	r6, #0
 800c798:	d0f9      	beq.n	800c78e <__sflush_r+0x1a>
 800c79a:	2300      	movs	r3, #0
 800c79c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c7a0:	682f      	ldr	r7, [r5, #0]
 800c7a2:	6a21      	ldr	r1, [r4, #32]
 800c7a4:	602b      	str	r3, [r5, #0]
 800c7a6:	d032      	beq.n	800c80e <__sflush_r+0x9a>
 800c7a8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c7aa:	89a3      	ldrh	r3, [r4, #12]
 800c7ac:	075a      	lsls	r2, r3, #29
 800c7ae:	d505      	bpl.n	800c7bc <__sflush_r+0x48>
 800c7b0:	6863      	ldr	r3, [r4, #4]
 800c7b2:	1ac0      	subs	r0, r0, r3
 800c7b4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c7b6:	b10b      	cbz	r3, 800c7bc <__sflush_r+0x48>
 800c7b8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c7ba:	1ac0      	subs	r0, r0, r3
 800c7bc:	2300      	movs	r3, #0
 800c7be:	4602      	mov	r2, r0
 800c7c0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c7c2:	6a21      	ldr	r1, [r4, #32]
 800c7c4:	4628      	mov	r0, r5
 800c7c6:	47b0      	blx	r6
 800c7c8:	1c43      	adds	r3, r0, #1
 800c7ca:	89a3      	ldrh	r3, [r4, #12]
 800c7cc:	d106      	bne.n	800c7dc <__sflush_r+0x68>
 800c7ce:	6829      	ldr	r1, [r5, #0]
 800c7d0:	291d      	cmp	r1, #29
 800c7d2:	d82b      	bhi.n	800c82c <__sflush_r+0xb8>
 800c7d4:	4a29      	ldr	r2, [pc, #164]	; (800c87c <__sflush_r+0x108>)
 800c7d6:	410a      	asrs	r2, r1
 800c7d8:	07d6      	lsls	r6, r2, #31
 800c7da:	d427      	bmi.n	800c82c <__sflush_r+0xb8>
 800c7dc:	2200      	movs	r2, #0
 800c7de:	6062      	str	r2, [r4, #4]
 800c7e0:	04d9      	lsls	r1, r3, #19
 800c7e2:	6922      	ldr	r2, [r4, #16]
 800c7e4:	6022      	str	r2, [r4, #0]
 800c7e6:	d504      	bpl.n	800c7f2 <__sflush_r+0x7e>
 800c7e8:	1c42      	adds	r2, r0, #1
 800c7ea:	d101      	bne.n	800c7f0 <__sflush_r+0x7c>
 800c7ec:	682b      	ldr	r3, [r5, #0]
 800c7ee:	b903      	cbnz	r3, 800c7f2 <__sflush_r+0x7e>
 800c7f0:	6560      	str	r0, [r4, #84]	; 0x54
 800c7f2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7f4:	602f      	str	r7, [r5, #0]
 800c7f6:	2900      	cmp	r1, #0
 800c7f8:	d0c9      	beq.n	800c78e <__sflush_r+0x1a>
 800c7fa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c7fe:	4299      	cmp	r1, r3
 800c800:	d002      	beq.n	800c808 <__sflush_r+0x94>
 800c802:	4628      	mov	r0, r5
 800c804:	f7fe fa1a 	bl	800ac3c <_free_r>
 800c808:	2000      	movs	r0, #0
 800c80a:	6360      	str	r0, [r4, #52]	; 0x34
 800c80c:	e7c0      	b.n	800c790 <__sflush_r+0x1c>
 800c80e:	2301      	movs	r3, #1
 800c810:	4628      	mov	r0, r5
 800c812:	47b0      	blx	r6
 800c814:	1c41      	adds	r1, r0, #1
 800c816:	d1c8      	bne.n	800c7aa <__sflush_r+0x36>
 800c818:	682b      	ldr	r3, [r5, #0]
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	d0c5      	beq.n	800c7aa <__sflush_r+0x36>
 800c81e:	2b1d      	cmp	r3, #29
 800c820:	d001      	beq.n	800c826 <__sflush_r+0xb2>
 800c822:	2b16      	cmp	r3, #22
 800c824:	d101      	bne.n	800c82a <__sflush_r+0xb6>
 800c826:	602f      	str	r7, [r5, #0]
 800c828:	e7b1      	b.n	800c78e <__sflush_r+0x1a>
 800c82a:	89a3      	ldrh	r3, [r4, #12]
 800c82c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c830:	81a3      	strh	r3, [r4, #12]
 800c832:	e7ad      	b.n	800c790 <__sflush_r+0x1c>
 800c834:	690f      	ldr	r7, [r1, #16]
 800c836:	2f00      	cmp	r7, #0
 800c838:	d0a9      	beq.n	800c78e <__sflush_r+0x1a>
 800c83a:	0793      	lsls	r3, r2, #30
 800c83c:	680e      	ldr	r6, [r1, #0]
 800c83e:	bf08      	it	eq
 800c840:	694b      	ldreq	r3, [r1, #20]
 800c842:	600f      	str	r7, [r1, #0]
 800c844:	bf18      	it	ne
 800c846:	2300      	movne	r3, #0
 800c848:	eba6 0807 	sub.w	r8, r6, r7
 800c84c:	608b      	str	r3, [r1, #8]
 800c84e:	f1b8 0f00 	cmp.w	r8, #0
 800c852:	dd9c      	ble.n	800c78e <__sflush_r+0x1a>
 800c854:	6a21      	ldr	r1, [r4, #32]
 800c856:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c858:	4643      	mov	r3, r8
 800c85a:	463a      	mov	r2, r7
 800c85c:	4628      	mov	r0, r5
 800c85e:	47b0      	blx	r6
 800c860:	2800      	cmp	r0, #0
 800c862:	dc06      	bgt.n	800c872 <__sflush_r+0xfe>
 800c864:	89a3      	ldrh	r3, [r4, #12]
 800c866:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c86a:	81a3      	strh	r3, [r4, #12]
 800c86c:	f04f 30ff 	mov.w	r0, #4294967295
 800c870:	e78e      	b.n	800c790 <__sflush_r+0x1c>
 800c872:	4407      	add	r7, r0
 800c874:	eba8 0800 	sub.w	r8, r8, r0
 800c878:	e7e9      	b.n	800c84e <__sflush_r+0xda>
 800c87a:	bf00      	nop
 800c87c:	dfbffffe 	.word	0xdfbffffe

0800c880 <_fflush_r>:
 800c880:	b538      	push	{r3, r4, r5, lr}
 800c882:	690b      	ldr	r3, [r1, #16]
 800c884:	4605      	mov	r5, r0
 800c886:	460c      	mov	r4, r1
 800c888:	b913      	cbnz	r3, 800c890 <_fflush_r+0x10>
 800c88a:	2500      	movs	r5, #0
 800c88c:	4628      	mov	r0, r5
 800c88e:	bd38      	pop	{r3, r4, r5, pc}
 800c890:	b118      	cbz	r0, 800c89a <_fflush_r+0x1a>
 800c892:	6a03      	ldr	r3, [r0, #32]
 800c894:	b90b      	cbnz	r3, 800c89a <_fflush_r+0x1a>
 800c896:	f7fd fa01 	bl	8009c9c <__sinit>
 800c89a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c89e:	2b00      	cmp	r3, #0
 800c8a0:	d0f3      	beq.n	800c88a <_fflush_r+0xa>
 800c8a2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c8a4:	07d0      	lsls	r0, r2, #31
 800c8a6:	d404      	bmi.n	800c8b2 <_fflush_r+0x32>
 800c8a8:	0599      	lsls	r1, r3, #22
 800c8aa:	d402      	bmi.n	800c8b2 <_fflush_r+0x32>
 800c8ac:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8ae:	f7fd fb40 	bl	8009f32 <__retarget_lock_acquire_recursive>
 800c8b2:	4628      	mov	r0, r5
 800c8b4:	4621      	mov	r1, r4
 800c8b6:	f7ff ff5d 	bl	800c774 <__sflush_r>
 800c8ba:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c8bc:	07da      	lsls	r2, r3, #31
 800c8be:	4605      	mov	r5, r0
 800c8c0:	d4e4      	bmi.n	800c88c <_fflush_r+0xc>
 800c8c2:	89a3      	ldrh	r3, [r4, #12]
 800c8c4:	059b      	lsls	r3, r3, #22
 800c8c6:	d4e1      	bmi.n	800c88c <_fflush_r+0xc>
 800c8c8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c8ca:	f7fd fb33 	bl	8009f34 <__retarget_lock_release_recursive>
 800c8ce:	e7dd      	b.n	800c88c <_fflush_r+0xc>

0800c8d0 <memmove>:
 800c8d0:	4288      	cmp	r0, r1
 800c8d2:	b510      	push	{r4, lr}
 800c8d4:	eb01 0402 	add.w	r4, r1, r2
 800c8d8:	d902      	bls.n	800c8e0 <memmove+0x10>
 800c8da:	4284      	cmp	r4, r0
 800c8dc:	4623      	mov	r3, r4
 800c8de:	d807      	bhi.n	800c8f0 <memmove+0x20>
 800c8e0:	1e43      	subs	r3, r0, #1
 800c8e2:	42a1      	cmp	r1, r4
 800c8e4:	d008      	beq.n	800c8f8 <memmove+0x28>
 800c8e6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c8ea:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c8ee:	e7f8      	b.n	800c8e2 <memmove+0x12>
 800c8f0:	4402      	add	r2, r0
 800c8f2:	4601      	mov	r1, r0
 800c8f4:	428a      	cmp	r2, r1
 800c8f6:	d100      	bne.n	800c8fa <memmove+0x2a>
 800c8f8:	bd10      	pop	{r4, pc}
 800c8fa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c8fe:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c902:	e7f7      	b.n	800c8f4 <memmove+0x24>

0800c904 <strncmp>:
 800c904:	b510      	push	{r4, lr}
 800c906:	b16a      	cbz	r2, 800c924 <strncmp+0x20>
 800c908:	3901      	subs	r1, #1
 800c90a:	1884      	adds	r4, r0, r2
 800c90c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c910:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c914:	429a      	cmp	r2, r3
 800c916:	d103      	bne.n	800c920 <strncmp+0x1c>
 800c918:	42a0      	cmp	r0, r4
 800c91a:	d001      	beq.n	800c920 <strncmp+0x1c>
 800c91c:	2a00      	cmp	r2, #0
 800c91e:	d1f5      	bne.n	800c90c <strncmp+0x8>
 800c920:	1ad0      	subs	r0, r2, r3
 800c922:	bd10      	pop	{r4, pc}
 800c924:	4610      	mov	r0, r2
 800c926:	e7fc      	b.n	800c922 <strncmp+0x1e>

0800c928 <_sbrk_r>:
 800c928:	b538      	push	{r3, r4, r5, lr}
 800c92a:	4d06      	ldr	r5, [pc, #24]	; (800c944 <_sbrk_r+0x1c>)
 800c92c:	2300      	movs	r3, #0
 800c92e:	4604      	mov	r4, r0
 800c930:	4608      	mov	r0, r1
 800c932:	602b      	str	r3, [r5, #0]
 800c934:	f7f5 fa2a 	bl	8001d8c <_sbrk>
 800c938:	1c43      	adds	r3, r0, #1
 800c93a:	d102      	bne.n	800c942 <_sbrk_r+0x1a>
 800c93c:	682b      	ldr	r3, [r5, #0]
 800c93e:	b103      	cbz	r3, 800c942 <_sbrk_r+0x1a>
 800c940:	6023      	str	r3, [r4, #0]
 800c942:	bd38      	pop	{r3, r4, r5, pc}
 800c944:	20000d10 	.word	0x20000d10

0800c948 <memcpy>:
 800c948:	440a      	add	r2, r1
 800c94a:	4291      	cmp	r1, r2
 800c94c:	f100 33ff 	add.w	r3, r0, #4294967295
 800c950:	d100      	bne.n	800c954 <memcpy+0xc>
 800c952:	4770      	bx	lr
 800c954:	b510      	push	{r4, lr}
 800c956:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c95a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c95e:	4291      	cmp	r1, r2
 800c960:	d1f9      	bne.n	800c956 <memcpy+0xe>
 800c962:	bd10      	pop	{r4, pc}
 800c964:	0000      	movs	r0, r0
	...

0800c968 <nan>:
 800c968:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800c970 <nan+0x8>
 800c96c:	4770      	bx	lr
 800c96e:	bf00      	nop
 800c970:	00000000 	.word	0x00000000
 800c974:	7ff80000 	.word	0x7ff80000

0800c978 <__assert_func>:
 800c978:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c97a:	4614      	mov	r4, r2
 800c97c:	461a      	mov	r2, r3
 800c97e:	4b09      	ldr	r3, [pc, #36]	; (800c9a4 <__assert_func+0x2c>)
 800c980:	681b      	ldr	r3, [r3, #0]
 800c982:	4605      	mov	r5, r0
 800c984:	68d8      	ldr	r0, [r3, #12]
 800c986:	b14c      	cbz	r4, 800c99c <__assert_func+0x24>
 800c988:	4b07      	ldr	r3, [pc, #28]	; (800c9a8 <__assert_func+0x30>)
 800c98a:	9100      	str	r1, [sp, #0]
 800c98c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c990:	4906      	ldr	r1, [pc, #24]	; (800c9ac <__assert_func+0x34>)
 800c992:	462b      	mov	r3, r5
 800c994:	f000 fbca 	bl	800d12c <fiprintf>
 800c998:	f000 fbda 	bl	800d150 <abort>
 800c99c:	4b04      	ldr	r3, [pc, #16]	; (800c9b0 <__assert_func+0x38>)
 800c99e:	461c      	mov	r4, r3
 800c9a0:	e7f3      	b.n	800c98a <__assert_func+0x12>
 800c9a2:	bf00      	nop
 800c9a4:	20000078 	.word	0x20000078
 800c9a8:	0800daaa 	.word	0x0800daaa
 800c9ac:	0800dab7 	.word	0x0800dab7
 800c9b0:	0800dae5 	.word	0x0800dae5

0800c9b4 <_calloc_r>:
 800c9b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c9b6:	fba1 2402 	umull	r2, r4, r1, r2
 800c9ba:	b94c      	cbnz	r4, 800c9d0 <_calloc_r+0x1c>
 800c9bc:	4611      	mov	r1, r2
 800c9be:	9201      	str	r2, [sp, #4]
 800c9c0:	f7fe f9b0 	bl	800ad24 <_malloc_r>
 800c9c4:	9a01      	ldr	r2, [sp, #4]
 800c9c6:	4605      	mov	r5, r0
 800c9c8:	b930      	cbnz	r0, 800c9d8 <_calloc_r+0x24>
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	b003      	add	sp, #12
 800c9ce:	bd30      	pop	{r4, r5, pc}
 800c9d0:	220c      	movs	r2, #12
 800c9d2:	6002      	str	r2, [r0, #0]
 800c9d4:	2500      	movs	r5, #0
 800c9d6:	e7f8      	b.n	800c9ca <_calloc_r+0x16>
 800c9d8:	4621      	mov	r1, r4
 800c9da:	f7fd fa2c 	bl	8009e36 <memset>
 800c9de:	e7f4      	b.n	800c9ca <_calloc_r+0x16>

0800c9e0 <rshift>:
 800c9e0:	6903      	ldr	r3, [r0, #16]
 800c9e2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c9e6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c9ea:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c9ee:	f100 0414 	add.w	r4, r0, #20
 800c9f2:	dd45      	ble.n	800ca80 <rshift+0xa0>
 800c9f4:	f011 011f 	ands.w	r1, r1, #31
 800c9f8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c9fc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ca00:	d10c      	bne.n	800ca1c <rshift+0x3c>
 800ca02:	f100 0710 	add.w	r7, r0, #16
 800ca06:	4629      	mov	r1, r5
 800ca08:	42b1      	cmp	r1, r6
 800ca0a:	d334      	bcc.n	800ca76 <rshift+0x96>
 800ca0c:	1a9b      	subs	r3, r3, r2
 800ca0e:	009b      	lsls	r3, r3, #2
 800ca10:	1eea      	subs	r2, r5, #3
 800ca12:	4296      	cmp	r6, r2
 800ca14:	bf38      	it	cc
 800ca16:	2300      	movcc	r3, #0
 800ca18:	4423      	add	r3, r4
 800ca1a:	e015      	b.n	800ca48 <rshift+0x68>
 800ca1c:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800ca20:	f1c1 0820 	rsb	r8, r1, #32
 800ca24:	40cf      	lsrs	r7, r1
 800ca26:	f105 0e04 	add.w	lr, r5, #4
 800ca2a:	46a1      	mov	r9, r4
 800ca2c:	4576      	cmp	r6, lr
 800ca2e:	46f4      	mov	ip, lr
 800ca30:	d815      	bhi.n	800ca5e <rshift+0x7e>
 800ca32:	1a9a      	subs	r2, r3, r2
 800ca34:	0092      	lsls	r2, r2, #2
 800ca36:	3a04      	subs	r2, #4
 800ca38:	3501      	adds	r5, #1
 800ca3a:	42ae      	cmp	r6, r5
 800ca3c:	bf38      	it	cc
 800ca3e:	2200      	movcc	r2, #0
 800ca40:	18a3      	adds	r3, r4, r2
 800ca42:	50a7      	str	r7, [r4, r2]
 800ca44:	b107      	cbz	r7, 800ca48 <rshift+0x68>
 800ca46:	3304      	adds	r3, #4
 800ca48:	1b1a      	subs	r2, r3, r4
 800ca4a:	42a3      	cmp	r3, r4
 800ca4c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800ca50:	bf08      	it	eq
 800ca52:	2300      	moveq	r3, #0
 800ca54:	6102      	str	r2, [r0, #16]
 800ca56:	bf08      	it	eq
 800ca58:	6143      	streq	r3, [r0, #20]
 800ca5a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca5e:	f8dc c000 	ldr.w	ip, [ip]
 800ca62:	fa0c fc08 	lsl.w	ip, ip, r8
 800ca66:	ea4c 0707 	orr.w	r7, ip, r7
 800ca6a:	f849 7b04 	str.w	r7, [r9], #4
 800ca6e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ca72:	40cf      	lsrs	r7, r1
 800ca74:	e7da      	b.n	800ca2c <rshift+0x4c>
 800ca76:	f851 cb04 	ldr.w	ip, [r1], #4
 800ca7a:	f847 cf04 	str.w	ip, [r7, #4]!
 800ca7e:	e7c3      	b.n	800ca08 <rshift+0x28>
 800ca80:	4623      	mov	r3, r4
 800ca82:	e7e1      	b.n	800ca48 <rshift+0x68>

0800ca84 <__hexdig_fun>:
 800ca84:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800ca88:	2b09      	cmp	r3, #9
 800ca8a:	d802      	bhi.n	800ca92 <__hexdig_fun+0xe>
 800ca8c:	3820      	subs	r0, #32
 800ca8e:	b2c0      	uxtb	r0, r0
 800ca90:	4770      	bx	lr
 800ca92:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800ca96:	2b05      	cmp	r3, #5
 800ca98:	d801      	bhi.n	800ca9e <__hexdig_fun+0x1a>
 800ca9a:	3847      	subs	r0, #71	; 0x47
 800ca9c:	e7f7      	b.n	800ca8e <__hexdig_fun+0xa>
 800ca9e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800caa2:	2b05      	cmp	r3, #5
 800caa4:	d801      	bhi.n	800caaa <__hexdig_fun+0x26>
 800caa6:	3827      	subs	r0, #39	; 0x27
 800caa8:	e7f1      	b.n	800ca8e <__hexdig_fun+0xa>
 800caaa:	2000      	movs	r0, #0
 800caac:	4770      	bx	lr
	...

0800cab0 <__gethex>:
 800cab0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cab4:	4617      	mov	r7, r2
 800cab6:	680a      	ldr	r2, [r1, #0]
 800cab8:	b085      	sub	sp, #20
 800caba:	f102 0b02 	add.w	fp, r2, #2
 800cabe:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cac2:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cac6:	4681      	mov	r9, r0
 800cac8:	468a      	mov	sl, r1
 800caca:	9302      	str	r3, [sp, #8]
 800cacc:	32fe      	adds	r2, #254	; 0xfe
 800cace:	eb02 030b 	add.w	r3, r2, fp
 800cad2:	46d8      	mov	r8, fp
 800cad4:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800cad8:	9301      	str	r3, [sp, #4]
 800cada:	2830      	cmp	r0, #48	; 0x30
 800cadc:	d0f7      	beq.n	800cace <__gethex+0x1e>
 800cade:	f7ff ffd1 	bl	800ca84 <__hexdig_fun>
 800cae2:	4604      	mov	r4, r0
 800cae4:	2800      	cmp	r0, #0
 800cae6:	d138      	bne.n	800cb5a <__gethex+0xaa>
 800cae8:	49a7      	ldr	r1, [pc, #668]	; (800cd88 <__gethex+0x2d8>)
 800caea:	2201      	movs	r2, #1
 800caec:	4640      	mov	r0, r8
 800caee:	f7ff ff09 	bl	800c904 <strncmp>
 800caf2:	4606      	mov	r6, r0
 800caf4:	2800      	cmp	r0, #0
 800caf6:	d169      	bne.n	800cbcc <__gethex+0x11c>
 800caf8:	f898 0001 	ldrb.w	r0, [r8, #1]
 800cafc:	465d      	mov	r5, fp
 800cafe:	f7ff ffc1 	bl	800ca84 <__hexdig_fun>
 800cb02:	2800      	cmp	r0, #0
 800cb04:	d064      	beq.n	800cbd0 <__gethex+0x120>
 800cb06:	465a      	mov	r2, fp
 800cb08:	7810      	ldrb	r0, [r2, #0]
 800cb0a:	2830      	cmp	r0, #48	; 0x30
 800cb0c:	4690      	mov	r8, r2
 800cb0e:	f102 0201 	add.w	r2, r2, #1
 800cb12:	d0f9      	beq.n	800cb08 <__gethex+0x58>
 800cb14:	f7ff ffb6 	bl	800ca84 <__hexdig_fun>
 800cb18:	2301      	movs	r3, #1
 800cb1a:	fab0 f480 	clz	r4, r0
 800cb1e:	0964      	lsrs	r4, r4, #5
 800cb20:	465e      	mov	r6, fp
 800cb22:	9301      	str	r3, [sp, #4]
 800cb24:	4642      	mov	r2, r8
 800cb26:	4615      	mov	r5, r2
 800cb28:	3201      	adds	r2, #1
 800cb2a:	7828      	ldrb	r0, [r5, #0]
 800cb2c:	f7ff ffaa 	bl	800ca84 <__hexdig_fun>
 800cb30:	2800      	cmp	r0, #0
 800cb32:	d1f8      	bne.n	800cb26 <__gethex+0x76>
 800cb34:	4994      	ldr	r1, [pc, #592]	; (800cd88 <__gethex+0x2d8>)
 800cb36:	2201      	movs	r2, #1
 800cb38:	4628      	mov	r0, r5
 800cb3a:	f7ff fee3 	bl	800c904 <strncmp>
 800cb3e:	b978      	cbnz	r0, 800cb60 <__gethex+0xb0>
 800cb40:	b946      	cbnz	r6, 800cb54 <__gethex+0xa4>
 800cb42:	1c6e      	adds	r6, r5, #1
 800cb44:	4632      	mov	r2, r6
 800cb46:	4615      	mov	r5, r2
 800cb48:	3201      	adds	r2, #1
 800cb4a:	7828      	ldrb	r0, [r5, #0]
 800cb4c:	f7ff ff9a 	bl	800ca84 <__hexdig_fun>
 800cb50:	2800      	cmp	r0, #0
 800cb52:	d1f8      	bne.n	800cb46 <__gethex+0x96>
 800cb54:	1b73      	subs	r3, r6, r5
 800cb56:	009e      	lsls	r6, r3, #2
 800cb58:	e004      	b.n	800cb64 <__gethex+0xb4>
 800cb5a:	2400      	movs	r4, #0
 800cb5c:	4626      	mov	r6, r4
 800cb5e:	e7e1      	b.n	800cb24 <__gethex+0x74>
 800cb60:	2e00      	cmp	r6, #0
 800cb62:	d1f7      	bne.n	800cb54 <__gethex+0xa4>
 800cb64:	782b      	ldrb	r3, [r5, #0]
 800cb66:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cb6a:	2b50      	cmp	r3, #80	; 0x50
 800cb6c:	d13d      	bne.n	800cbea <__gethex+0x13a>
 800cb6e:	786b      	ldrb	r3, [r5, #1]
 800cb70:	2b2b      	cmp	r3, #43	; 0x2b
 800cb72:	d02f      	beq.n	800cbd4 <__gethex+0x124>
 800cb74:	2b2d      	cmp	r3, #45	; 0x2d
 800cb76:	d031      	beq.n	800cbdc <__gethex+0x12c>
 800cb78:	1c69      	adds	r1, r5, #1
 800cb7a:	f04f 0b00 	mov.w	fp, #0
 800cb7e:	7808      	ldrb	r0, [r1, #0]
 800cb80:	f7ff ff80 	bl	800ca84 <__hexdig_fun>
 800cb84:	1e42      	subs	r2, r0, #1
 800cb86:	b2d2      	uxtb	r2, r2
 800cb88:	2a18      	cmp	r2, #24
 800cb8a:	d82e      	bhi.n	800cbea <__gethex+0x13a>
 800cb8c:	f1a0 0210 	sub.w	r2, r0, #16
 800cb90:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cb94:	f7ff ff76 	bl	800ca84 <__hexdig_fun>
 800cb98:	f100 3cff 	add.w	ip, r0, #4294967295
 800cb9c:	fa5f fc8c 	uxtb.w	ip, ip
 800cba0:	f1bc 0f18 	cmp.w	ip, #24
 800cba4:	d91d      	bls.n	800cbe2 <__gethex+0x132>
 800cba6:	f1bb 0f00 	cmp.w	fp, #0
 800cbaa:	d000      	beq.n	800cbae <__gethex+0xfe>
 800cbac:	4252      	negs	r2, r2
 800cbae:	4416      	add	r6, r2
 800cbb0:	f8ca 1000 	str.w	r1, [sl]
 800cbb4:	b1dc      	cbz	r4, 800cbee <__gethex+0x13e>
 800cbb6:	9b01      	ldr	r3, [sp, #4]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	bf14      	ite	ne
 800cbbc:	f04f 0800 	movne.w	r8, #0
 800cbc0:	f04f 0806 	moveq.w	r8, #6
 800cbc4:	4640      	mov	r0, r8
 800cbc6:	b005      	add	sp, #20
 800cbc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cbcc:	4645      	mov	r5, r8
 800cbce:	4626      	mov	r6, r4
 800cbd0:	2401      	movs	r4, #1
 800cbd2:	e7c7      	b.n	800cb64 <__gethex+0xb4>
 800cbd4:	f04f 0b00 	mov.w	fp, #0
 800cbd8:	1ca9      	adds	r1, r5, #2
 800cbda:	e7d0      	b.n	800cb7e <__gethex+0xce>
 800cbdc:	f04f 0b01 	mov.w	fp, #1
 800cbe0:	e7fa      	b.n	800cbd8 <__gethex+0x128>
 800cbe2:	230a      	movs	r3, #10
 800cbe4:	fb03 0002 	mla	r0, r3, r2, r0
 800cbe8:	e7d0      	b.n	800cb8c <__gethex+0xdc>
 800cbea:	4629      	mov	r1, r5
 800cbec:	e7e0      	b.n	800cbb0 <__gethex+0x100>
 800cbee:	eba5 0308 	sub.w	r3, r5, r8
 800cbf2:	3b01      	subs	r3, #1
 800cbf4:	4621      	mov	r1, r4
 800cbf6:	2b07      	cmp	r3, #7
 800cbf8:	dc0a      	bgt.n	800cc10 <__gethex+0x160>
 800cbfa:	4648      	mov	r0, r9
 800cbfc:	f7fe f91e 	bl	800ae3c <_Balloc>
 800cc00:	4604      	mov	r4, r0
 800cc02:	b940      	cbnz	r0, 800cc16 <__gethex+0x166>
 800cc04:	4b61      	ldr	r3, [pc, #388]	; (800cd8c <__gethex+0x2dc>)
 800cc06:	4602      	mov	r2, r0
 800cc08:	21e4      	movs	r1, #228	; 0xe4
 800cc0a:	4861      	ldr	r0, [pc, #388]	; (800cd90 <__gethex+0x2e0>)
 800cc0c:	f7ff feb4 	bl	800c978 <__assert_func>
 800cc10:	3101      	adds	r1, #1
 800cc12:	105b      	asrs	r3, r3, #1
 800cc14:	e7ef      	b.n	800cbf6 <__gethex+0x146>
 800cc16:	f100 0a14 	add.w	sl, r0, #20
 800cc1a:	2300      	movs	r3, #0
 800cc1c:	495a      	ldr	r1, [pc, #360]	; (800cd88 <__gethex+0x2d8>)
 800cc1e:	f8cd a004 	str.w	sl, [sp, #4]
 800cc22:	469b      	mov	fp, r3
 800cc24:	45a8      	cmp	r8, r5
 800cc26:	d342      	bcc.n	800ccae <__gethex+0x1fe>
 800cc28:	9801      	ldr	r0, [sp, #4]
 800cc2a:	f840 bb04 	str.w	fp, [r0], #4
 800cc2e:	eba0 000a 	sub.w	r0, r0, sl
 800cc32:	1080      	asrs	r0, r0, #2
 800cc34:	6120      	str	r0, [r4, #16]
 800cc36:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800cc3a:	4658      	mov	r0, fp
 800cc3c:	f7fe f9f0 	bl	800b020 <__hi0bits>
 800cc40:	683d      	ldr	r5, [r7, #0]
 800cc42:	eba8 0000 	sub.w	r0, r8, r0
 800cc46:	42a8      	cmp	r0, r5
 800cc48:	dd59      	ble.n	800ccfe <__gethex+0x24e>
 800cc4a:	eba0 0805 	sub.w	r8, r0, r5
 800cc4e:	4641      	mov	r1, r8
 800cc50:	4620      	mov	r0, r4
 800cc52:	f7fe fd7f 	bl	800b754 <__any_on>
 800cc56:	4683      	mov	fp, r0
 800cc58:	b1b8      	cbz	r0, 800cc8a <__gethex+0x1da>
 800cc5a:	f108 33ff 	add.w	r3, r8, #4294967295
 800cc5e:	1159      	asrs	r1, r3, #5
 800cc60:	f003 021f 	and.w	r2, r3, #31
 800cc64:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800cc68:	f04f 0b01 	mov.w	fp, #1
 800cc6c:	fa0b f202 	lsl.w	r2, fp, r2
 800cc70:	420a      	tst	r2, r1
 800cc72:	d00a      	beq.n	800cc8a <__gethex+0x1da>
 800cc74:	455b      	cmp	r3, fp
 800cc76:	dd06      	ble.n	800cc86 <__gethex+0x1d6>
 800cc78:	f1a8 0102 	sub.w	r1, r8, #2
 800cc7c:	4620      	mov	r0, r4
 800cc7e:	f7fe fd69 	bl	800b754 <__any_on>
 800cc82:	2800      	cmp	r0, #0
 800cc84:	d138      	bne.n	800ccf8 <__gethex+0x248>
 800cc86:	f04f 0b02 	mov.w	fp, #2
 800cc8a:	4641      	mov	r1, r8
 800cc8c:	4620      	mov	r0, r4
 800cc8e:	f7ff fea7 	bl	800c9e0 <rshift>
 800cc92:	4446      	add	r6, r8
 800cc94:	68bb      	ldr	r3, [r7, #8]
 800cc96:	42b3      	cmp	r3, r6
 800cc98:	da41      	bge.n	800cd1e <__gethex+0x26e>
 800cc9a:	4621      	mov	r1, r4
 800cc9c:	4648      	mov	r0, r9
 800cc9e:	f7fe f90d 	bl	800aebc <_Bfree>
 800cca2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cca4:	2300      	movs	r3, #0
 800cca6:	6013      	str	r3, [r2, #0]
 800cca8:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800ccac:	e78a      	b.n	800cbc4 <__gethex+0x114>
 800ccae:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800ccb2:	2a2e      	cmp	r2, #46	; 0x2e
 800ccb4:	d014      	beq.n	800cce0 <__gethex+0x230>
 800ccb6:	2b20      	cmp	r3, #32
 800ccb8:	d106      	bne.n	800ccc8 <__gethex+0x218>
 800ccba:	9b01      	ldr	r3, [sp, #4]
 800ccbc:	f843 bb04 	str.w	fp, [r3], #4
 800ccc0:	f04f 0b00 	mov.w	fp, #0
 800ccc4:	9301      	str	r3, [sp, #4]
 800ccc6:	465b      	mov	r3, fp
 800ccc8:	7828      	ldrb	r0, [r5, #0]
 800ccca:	9303      	str	r3, [sp, #12]
 800cccc:	f7ff feda 	bl	800ca84 <__hexdig_fun>
 800ccd0:	9b03      	ldr	r3, [sp, #12]
 800ccd2:	f000 000f 	and.w	r0, r0, #15
 800ccd6:	4098      	lsls	r0, r3
 800ccd8:	ea4b 0b00 	orr.w	fp, fp, r0
 800ccdc:	3304      	adds	r3, #4
 800ccde:	e7a1      	b.n	800cc24 <__gethex+0x174>
 800cce0:	45a8      	cmp	r8, r5
 800cce2:	d8e8      	bhi.n	800ccb6 <__gethex+0x206>
 800cce4:	2201      	movs	r2, #1
 800cce6:	4628      	mov	r0, r5
 800cce8:	9303      	str	r3, [sp, #12]
 800ccea:	f7ff fe0b 	bl	800c904 <strncmp>
 800ccee:	4926      	ldr	r1, [pc, #152]	; (800cd88 <__gethex+0x2d8>)
 800ccf0:	9b03      	ldr	r3, [sp, #12]
 800ccf2:	2800      	cmp	r0, #0
 800ccf4:	d1df      	bne.n	800ccb6 <__gethex+0x206>
 800ccf6:	e795      	b.n	800cc24 <__gethex+0x174>
 800ccf8:	f04f 0b03 	mov.w	fp, #3
 800ccfc:	e7c5      	b.n	800cc8a <__gethex+0x1da>
 800ccfe:	da0b      	bge.n	800cd18 <__gethex+0x268>
 800cd00:	eba5 0800 	sub.w	r8, r5, r0
 800cd04:	4621      	mov	r1, r4
 800cd06:	4642      	mov	r2, r8
 800cd08:	4648      	mov	r0, r9
 800cd0a:	f7fe faf1 	bl	800b2f0 <__lshift>
 800cd0e:	eba6 0608 	sub.w	r6, r6, r8
 800cd12:	4604      	mov	r4, r0
 800cd14:	f100 0a14 	add.w	sl, r0, #20
 800cd18:	f04f 0b00 	mov.w	fp, #0
 800cd1c:	e7ba      	b.n	800cc94 <__gethex+0x1e4>
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	42b3      	cmp	r3, r6
 800cd22:	dd73      	ble.n	800ce0c <__gethex+0x35c>
 800cd24:	1b9e      	subs	r6, r3, r6
 800cd26:	42b5      	cmp	r5, r6
 800cd28:	dc34      	bgt.n	800cd94 <__gethex+0x2e4>
 800cd2a:	68fb      	ldr	r3, [r7, #12]
 800cd2c:	2b02      	cmp	r3, #2
 800cd2e:	d023      	beq.n	800cd78 <__gethex+0x2c8>
 800cd30:	2b03      	cmp	r3, #3
 800cd32:	d025      	beq.n	800cd80 <__gethex+0x2d0>
 800cd34:	2b01      	cmp	r3, #1
 800cd36:	d115      	bne.n	800cd64 <__gethex+0x2b4>
 800cd38:	42b5      	cmp	r5, r6
 800cd3a:	d113      	bne.n	800cd64 <__gethex+0x2b4>
 800cd3c:	2d01      	cmp	r5, #1
 800cd3e:	d10b      	bne.n	800cd58 <__gethex+0x2a8>
 800cd40:	9a02      	ldr	r2, [sp, #8]
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	6013      	str	r3, [r2, #0]
 800cd46:	2301      	movs	r3, #1
 800cd48:	6123      	str	r3, [r4, #16]
 800cd4a:	f8ca 3000 	str.w	r3, [sl]
 800cd4e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cd50:	f04f 0862 	mov.w	r8, #98	; 0x62
 800cd54:	601c      	str	r4, [r3, #0]
 800cd56:	e735      	b.n	800cbc4 <__gethex+0x114>
 800cd58:	1e69      	subs	r1, r5, #1
 800cd5a:	4620      	mov	r0, r4
 800cd5c:	f7fe fcfa 	bl	800b754 <__any_on>
 800cd60:	2800      	cmp	r0, #0
 800cd62:	d1ed      	bne.n	800cd40 <__gethex+0x290>
 800cd64:	4621      	mov	r1, r4
 800cd66:	4648      	mov	r0, r9
 800cd68:	f7fe f8a8 	bl	800aebc <_Bfree>
 800cd6c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd6e:	2300      	movs	r3, #0
 800cd70:	6013      	str	r3, [r2, #0]
 800cd72:	f04f 0850 	mov.w	r8, #80	; 0x50
 800cd76:	e725      	b.n	800cbc4 <__gethex+0x114>
 800cd78:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d1f2      	bne.n	800cd64 <__gethex+0x2b4>
 800cd7e:	e7df      	b.n	800cd40 <__gethex+0x290>
 800cd80:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cd82:	2b00      	cmp	r3, #0
 800cd84:	d1dc      	bne.n	800cd40 <__gethex+0x290>
 800cd86:	e7ed      	b.n	800cd64 <__gethex+0x2b4>
 800cd88:	0800d93c 	.word	0x0800d93c
 800cd8c:	0800d7d1 	.word	0x0800d7d1
 800cd90:	0800dae6 	.word	0x0800dae6
 800cd94:	f106 38ff 	add.w	r8, r6, #4294967295
 800cd98:	f1bb 0f00 	cmp.w	fp, #0
 800cd9c:	d133      	bne.n	800ce06 <__gethex+0x356>
 800cd9e:	f1b8 0f00 	cmp.w	r8, #0
 800cda2:	d004      	beq.n	800cdae <__gethex+0x2fe>
 800cda4:	4641      	mov	r1, r8
 800cda6:	4620      	mov	r0, r4
 800cda8:	f7fe fcd4 	bl	800b754 <__any_on>
 800cdac:	4683      	mov	fp, r0
 800cdae:	ea4f 1268 	mov.w	r2, r8, asr #5
 800cdb2:	2301      	movs	r3, #1
 800cdb4:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800cdb8:	f008 081f 	and.w	r8, r8, #31
 800cdbc:	fa03 f308 	lsl.w	r3, r3, r8
 800cdc0:	4213      	tst	r3, r2
 800cdc2:	4631      	mov	r1, r6
 800cdc4:	4620      	mov	r0, r4
 800cdc6:	bf18      	it	ne
 800cdc8:	f04b 0b02 	orrne.w	fp, fp, #2
 800cdcc:	1bad      	subs	r5, r5, r6
 800cdce:	f7ff fe07 	bl	800c9e0 <rshift>
 800cdd2:	687e      	ldr	r6, [r7, #4]
 800cdd4:	f04f 0802 	mov.w	r8, #2
 800cdd8:	f1bb 0f00 	cmp.w	fp, #0
 800cddc:	d04a      	beq.n	800ce74 <__gethex+0x3c4>
 800cdde:	68fb      	ldr	r3, [r7, #12]
 800cde0:	2b02      	cmp	r3, #2
 800cde2:	d016      	beq.n	800ce12 <__gethex+0x362>
 800cde4:	2b03      	cmp	r3, #3
 800cde6:	d018      	beq.n	800ce1a <__gethex+0x36a>
 800cde8:	2b01      	cmp	r3, #1
 800cdea:	d109      	bne.n	800ce00 <__gethex+0x350>
 800cdec:	f01b 0f02 	tst.w	fp, #2
 800cdf0:	d006      	beq.n	800ce00 <__gethex+0x350>
 800cdf2:	f8da 3000 	ldr.w	r3, [sl]
 800cdf6:	ea4b 0b03 	orr.w	fp, fp, r3
 800cdfa:	f01b 0f01 	tst.w	fp, #1
 800cdfe:	d10f      	bne.n	800ce20 <__gethex+0x370>
 800ce00:	f048 0810 	orr.w	r8, r8, #16
 800ce04:	e036      	b.n	800ce74 <__gethex+0x3c4>
 800ce06:	f04f 0b01 	mov.w	fp, #1
 800ce0a:	e7d0      	b.n	800cdae <__gethex+0x2fe>
 800ce0c:	f04f 0801 	mov.w	r8, #1
 800ce10:	e7e2      	b.n	800cdd8 <__gethex+0x328>
 800ce12:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce14:	f1c3 0301 	rsb	r3, r3, #1
 800ce18:	930f      	str	r3, [sp, #60]	; 0x3c
 800ce1a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce1c:	2b00      	cmp	r3, #0
 800ce1e:	d0ef      	beq.n	800ce00 <__gethex+0x350>
 800ce20:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ce24:	f104 0214 	add.w	r2, r4, #20
 800ce28:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800ce2c:	9301      	str	r3, [sp, #4]
 800ce2e:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800ce32:	2300      	movs	r3, #0
 800ce34:	4694      	mov	ip, r2
 800ce36:	f852 1b04 	ldr.w	r1, [r2], #4
 800ce3a:	f1b1 3fff 	cmp.w	r1, #4294967295
 800ce3e:	d01e      	beq.n	800ce7e <__gethex+0x3ce>
 800ce40:	3101      	adds	r1, #1
 800ce42:	f8cc 1000 	str.w	r1, [ip]
 800ce46:	f1b8 0f02 	cmp.w	r8, #2
 800ce4a:	f104 0214 	add.w	r2, r4, #20
 800ce4e:	d13d      	bne.n	800cecc <__gethex+0x41c>
 800ce50:	683b      	ldr	r3, [r7, #0]
 800ce52:	3b01      	subs	r3, #1
 800ce54:	42ab      	cmp	r3, r5
 800ce56:	d10b      	bne.n	800ce70 <__gethex+0x3c0>
 800ce58:	1169      	asrs	r1, r5, #5
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	f005 051f 	and.w	r5, r5, #31
 800ce60:	fa03 f505 	lsl.w	r5, r3, r5
 800ce64:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce68:	421d      	tst	r5, r3
 800ce6a:	bf18      	it	ne
 800ce6c:	f04f 0801 	movne.w	r8, #1
 800ce70:	f048 0820 	orr.w	r8, r8, #32
 800ce74:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ce76:	601c      	str	r4, [r3, #0]
 800ce78:	9b02      	ldr	r3, [sp, #8]
 800ce7a:	601e      	str	r6, [r3, #0]
 800ce7c:	e6a2      	b.n	800cbc4 <__gethex+0x114>
 800ce7e:	4290      	cmp	r0, r2
 800ce80:	f842 3c04 	str.w	r3, [r2, #-4]
 800ce84:	d8d6      	bhi.n	800ce34 <__gethex+0x384>
 800ce86:	68a2      	ldr	r2, [r4, #8]
 800ce88:	4593      	cmp	fp, r2
 800ce8a:	db17      	blt.n	800cebc <__gethex+0x40c>
 800ce8c:	6861      	ldr	r1, [r4, #4]
 800ce8e:	4648      	mov	r0, r9
 800ce90:	3101      	adds	r1, #1
 800ce92:	f7fd ffd3 	bl	800ae3c <_Balloc>
 800ce96:	4682      	mov	sl, r0
 800ce98:	b918      	cbnz	r0, 800cea2 <__gethex+0x3f2>
 800ce9a:	4b1b      	ldr	r3, [pc, #108]	; (800cf08 <__gethex+0x458>)
 800ce9c:	4602      	mov	r2, r0
 800ce9e:	2184      	movs	r1, #132	; 0x84
 800cea0:	e6b3      	b.n	800cc0a <__gethex+0x15a>
 800cea2:	6922      	ldr	r2, [r4, #16]
 800cea4:	3202      	adds	r2, #2
 800cea6:	f104 010c 	add.w	r1, r4, #12
 800ceaa:	0092      	lsls	r2, r2, #2
 800ceac:	300c      	adds	r0, #12
 800ceae:	f7ff fd4b 	bl	800c948 <memcpy>
 800ceb2:	4621      	mov	r1, r4
 800ceb4:	4648      	mov	r0, r9
 800ceb6:	f7fe f801 	bl	800aebc <_Bfree>
 800ceba:	4654      	mov	r4, sl
 800cebc:	6922      	ldr	r2, [r4, #16]
 800cebe:	1c51      	adds	r1, r2, #1
 800cec0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cec4:	6121      	str	r1, [r4, #16]
 800cec6:	2101      	movs	r1, #1
 800cec8:	6151      	str	r1, [r2, #20]
 800ceca:	e7bc      	b.n	800ce46 <__gethex+0x396>
 800cecc:	6921      	ldr	r1, [r4, #16]
 800cece:	4559      	cmp	r1, fp
 800ced0:	dd0b      	ble.n	800ceea <__gethex+0x43a>
 800ced2:	2101      	movs	r1, #1
 800ced4:	4620      	mov	r0, r4
 800ced6:	f7ff fd83 	bl	800c9e0 <rshift>
 800ceda:	68bb      	ldr	r3, [r7, #8]
 800cedc:	3601      	adds	r6, #1
 800cede:	42b3      	cmp	r3, r6
 800cee0:	f6ff aedb 	blt.w	800cc9a <__gethex+0x1ea>
 800cee4:	f04f 0801 	mov.w	r8, #1
 800cee8:	e7c2      	b.n	800ce70 <__gethex+0x3c0>
 800ceea:	f015 051f 	ands.w	r5, r5, #31
 800ceee:	d0f9      	beq.n	800cee4 <__gethex+0x434>
 800cef0:	9b01      	ldr	r3, [sp, #4]
 800cef2:	441a      	add	r2, r3
 800cef4:	f1c5 0520 	rsb	r5, r5, #32
 800cef8:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800cefc:	f7fe f890 	bl	800b020 <__hi0bits>
 800cf00:	42a8      	cmp	r0, r5
 800cf02:	dbe6      	blt.n	800ced2 <__gethex+0x422>
 800cf04:	e7ee      	b.n	800cee4 <__gethex+0x434>
 800cf06:	bf00      	nop
 800cf08:	0800d7d1 	.word	0x0800d7d1

0800cf0c <L_shift>:
 800cf0c:	f1c2 0208 	rsb	r2, r2, #8
 800cf10:	0092      	lsls	r2, r2, #2
 800cf12:	b570      	push	{r4, r5, r6, lr}
 800cf14:	f1c2 0620 	rsb	r6, r2, #32
 800cf18:	6843      	ldr	r3, [r0, #4]
 800cf1a:	6804      	ldr	r4, [r0, #0]
 800cf1c:	fa03 f506 	lsl.w	r5, r3, r6
 800cf20:	432c      	orrs	r4, r5
 800cf22:	40d3      	lsrs	r3, r2
 800cf24:	6004      	str	r4, [r0, #0]
 800cf26:	f840 3f04 	str.w	r3, [r0, #4]!
 800cf2a:	4288      	cmp	r0, r1
 800cf2c:	d3f4      	bcc.n	800cf18 <L_shift+0xc>
 800cf2e:	bd70      	pop	{r4, r5, r6, pc}

0800cf30 <__match>:
 800cf30:	b530      	push	{r4, r5, lr}
 800cf32:	6803      	ldr	r3, [r0, #0]
 800cf34:	3301      	adds	r3, #1
 800cf36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf3a:	b914      	cbnz	r4, 800cf42 <__match+0x12>
 800cf3c:	6003      	str	r3, [r0, #0]
 800cf3e:	2001      	movs	r0, #1
 800cf40:	bd30      	pop	{r4, r5, pc}
 800cf42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cf4a:	2d19      	cmp	r5, #25
 800cf4c:	bf98      	it	ls
 800cf4e:	3220      	addls	r2, #32
 800cf50:	42a2      	cmp	r2, r4
 800cf52:	d0f0      	beq.n	800cf36 <__match+0x6>
 800cf54:	2000      	movs	r0, #0
 800cf56:	e7f3      	b.n	800cf40 <__match+0x10>

0800cf58 <__hexnan>:
 800cf58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf5c:	680b      	ldr	r3, [r1, #0]
 800cf5e:	6801      	ldr	r1, [r0, #0]
 800cf60:	115e      	asrs	r6, r3, #5
 800cf62:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cf66:	f013 031f 	ands.w	r3, r3, #31
 800cf6a:	b087      	sub	sp, #28
 800cf6c:	bf18      	it	ne
 800cf6e:	3604      	addne	r6, #4
 800cf70:	2500      	movs	r5, #0
 800cf72:	1f37      	subs	r7, r6, #4
 800cf74:	4682      	mov	sl, r0
 800cf76:	4690      	mov	r8, r2
 800cf78:	9301      	str	r3, [sp, #4]
 800cf7a:	f846 5c04 	str.w	r5, [r6, #-4]
 800cf7e:	46b9      	mov	r9, r7
 800cf80:	463c      	mov	r4, r7
 800cf82:	9502      	str	r5, [sp, #8]
 800cf84:	46ab      	mov	fp, r5
 800cf86:	784a      	ldrb	r2, [r1, #1]
 800cf88:	1c4b      	adds	r3, r1, #1
 800cf8a:	9303      	str	r3, [sp, #12]
 800cf8c:	b342      	cbz	r2, 800cfe0 <__hexnan+0x88>
 800cf8e:	4610      	mov	r0, r2
 800cf90:	9105      	str	r1, [sp, #20]
 800cf92:	9204      	str	r2, [sp, #16]
 800cf94:	f7ff fd76 	bl	800ca84 <__hexdig_fun>
 800cf98:	2800      	cmp	r0, #0
 800cf9a:	d14f      	bne.n	800d03c <__hexnan+0xe4>
 800cf9c:	9a04      	ldr	r2, [sp, #16]
 800cf9e:	9905      	ldr	r1, [sp, #20]
 800cfa0:	2a20      	cmp	r2, #32
 800cfa2:	d818      	bhi.n	800cfd6 <__hexnan+0x7e>
 800cfa4:	9b02      	ldr	r3, [sp, #8]
 800cfa6:	459b      	cmp	fp, r3
 800cfa8:	dd13      	ble.n	800cfd2 <__hexnan+0x7a>
 800cfaa:	454c      	cmp	r4, r9
 800cfac:	d206      	bcs.n	800cfbc <__hexnan+0x64>
 800cfae:	2d07      	cmp	r5, #7
 800cfb0:	dc04      	bgt.n	800cfbc <__hexnan+0x64>
 800cfb2:	462a      	mov	r2, r5
 800cfb4:	4649      	mov	r1, r9
 800cfb6:	4620      	mov	r0, r4
 800cfb8:	f7ff ffa8 	bl	800cf0c <L_shift>
 800cfbc:	4544      	cmp	r4, r8
 800cfbe:	d950      	bls.n	800d062 <__hexnan+0x10a>
 800cfc0:	2300      	movs	r3, #0
 800cfc2:	f1a4 0904 	sub.w	r9, r4, #4
 800cfc6:	f844 3c04 	str.w	r3, [r4, #-4]
 800cfca:	f8cd b008 	str.w	fp, [sp, #8]
 800cfce:	464c      	mov	r4, r9
 800cfd0:	461d      	mov	r5, r3
 800cfd2:	9903      	ldr	r1, [sp, #12]
 800cfd4:	e7d7      	b.n	800cf86 <__hexnan+0x2e>
 800cfd6:	2a29      	cmp	r2, #41	; 0x29
 800cfd8:	d155      	bne.n	800d086 <__hexnan+0x12e>
 800cfda:	3102      	adds	r1, #2
 800cfdc:	f8ca 1000 	str.w	r1, [sl]
 800cfe0:	f1bb 0f00 	cmp.w	fp, #0
 800cfe4:	d04f      	beq.n	800d086 <__hexnan+0x12e>
 800cfe6:	454c      	cmp	r4, r9
 800cfe8:	d206      	bcs.n	800cff8 <__hexnan+0xa0>
 800cfea:	2d07      	cmp	r5, #7
 800cfec:	dc04      	bgt.n	800cff8 <__hexnan+0xa0>
 800cfee:	462a      	mov	r2, r5
 800cff0:	4649      	mov	r1, r9
 800cff2:	4620      	mov	r0, r4
 800cff4:	f7ff ff8a 	bl	800cf0c <L_shift>
 800cff8:	4544      	cmp	r4, r8
 800cffa:	d934      	bls.n	800d066 <__hexnan+0x10e>
 800cffc:	f1a8 0204 	sub.w	r2, r8, #4
 800d000:	4623      	mov	r3, r4
 800d002:	f853 1b04 	ldr.w	r1, [r3], #4
 800d006:	f842 1f04 	str.w	r1, [r2, #4]!
 800d00a:	429f      	cmp	r7, r3
 800d00c:	d2f9      	bcs.n	800d002 <__hexnan+0xaa>
 800d00e:	1b3b      	subs	r3, r7, r4
 800d010:	f023 0303 	bic.w	r3, r3, #3
 800d014:	3304      	adds	r3, #4
 800d016:	3e03      	subs	r6, #3
 800d018:	3401      	adds	r4, #1
 800d01a:	42a6      	cmp	r6, r4
 800d01c:	bf38      	it	cc
 800d01e:	2304      	movcc	r3, #4
 800d020:	4443      	add	r3, r8
 800d022:	2200      	movs	r2, #0
 800d024:	f843 2b04 	str.w	r2, [r3], #4
 800d028:	429f      	cmp	r7, r3
 800d02a:	d2fb      	bcs.n	800d024 <__hexnan+0xcc>
 800d02c:	683b      	ldr	r3, [r7, #0]
 800d02e:	b91b      	cbnz	r3, 800d038 <__hexnan+0xe0>
 800d030:	4547      	cmp	r7, r8
 800d032:	d126      	bne.n	800d082 <__hexnan+0x12a>
 800d034:	2301      	movs	r3, #1
 800d036:	603b      	str	r3, [r7, #0]
 800d038:	2005      	movs	r0, #5
 800d03a:	e025      	b.n	800d088 <__hexnan+0x130>
 800d03c:	3501      	adds	r5, #1
 800d03e:	2d08      	cmp	r5, #8
 800d040:	f10b 0b01 	add.w	fp, fp, #1
 800d044:	dd06      	ble.n	800d054 <__hexnan+0xfc>
 800d046:	4544      	cmp	r4, r8
 800d048:	d9c3      	bls.n	800cfd2 <__hexnan+0x7a>
 800d04a:	2300      	movs	r3, #0
 800d04c:	f844 3c04 	str.w	r3, [r4, #-4]
 800d050:	2501      	movs	r5, #1
 800d052:	3c04      	subs	r4, #4
 800d054:	6822      	ldr	r2, [r4, #0]
 800d056:	f000 000f 	and.w	r0, r0, #15
 800d05a:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d05e:	6020      	str	r0, [r4, #0]
 800d060:	e7b7      	b.n	800cfd2 <__hexnan+0x7a>
 800d062:	2508      	movs	r5, #8
 800d064:	e7b5      	b.n	800cfd2 <__hexnan+0x7a>
 800d066:	9b01      	ldr	r3, [sp, #4]
 800d068:	2b00      	cmp	r3, #0
 800d06a:	d0df      	beq.n	800d02c <__hexnan+0xd4>
 800d06c:	f1c3 0320 	rsb	r3, r3, #32
 800d070:	f04f 32ff 	mov.w	r2, #4294967295
 800d074:	40da      	lsrs	r2, r3
 800d076:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d07a:	4013      	ands	r3, r2
 800d07c:	f846 3c04 	str.w	r3, [r6, #-4]
 800d080:	e7d4      	b.n	800d02c <__hexnan+0xd4>
 800d082:	3f04      	subs	r7, #4
 800d084:	e7d2      	b.n	800d02c <__hexnan+0xd4>
 800d086:	2004      	movs	r0, #4
 800d088:	b007      	add	sp, #28
 800d08a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d08e <__ascii_mbtowc>:
 800d08e:	b082      	sub	sp, #8
 800d090:	b901      	cbnz	r1, 800d094 <__ascii_mbtowc+0x6>
 800d092:	a901      	add	r1, sp, #4
 800d094:	b142      	cbz	r2, 800d0a8 <__ascii_mbtowc+0x1a>
 800d096:	b14b      	cbz	r3, 800d0ac <__ascii_mbtowc+0x1e>
 800d098:	7813      	ldrb	r3, [r2, #0]
 800d09a:	600b      	str	r3, [r1, #0]
 800d09c:	7812      	ldrb	r2, [r2, #0]
 800d09e:	1e10      	subs	r0, r2, #0
 800d0a0:	bf18      	it	ne
 800d0a2:	2001      	movne	r0, #1
 800d0a4:	b002      	add	sp, #8
 800d0a6:	4770      	bx	lr
 800d0a8:	4610      	mov	r0, r2
 800d0aa:	e7fb      	b.n	800d0a4 <__ascii_mbtowc+0x16>
 800d0ac:	f06f 0001 	mvn.w	r0, #1
 800d0b0:	e7f8      	b.n	800d0a4 <__ascii_mbtowc+0x16>

0800d0b2 <_realloc_r>:
 800d0b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d0b6:	4680      	mov	r8, r0
 800d0b8:	4614      	mov	r4, r2
 800d0ba:	460e      	mov	r6, r1
 800d0bc:	b921      	cbnz	r1, 800d0c8 <_realloc_r+0x16>
 800d0be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d0c2:	4611      	mov	r1, r2
 800d0c4:	f7fd be2e 	b.w	800ad24 <_malloc_r>
 800d0c8:	b92a      	cbnz	r2, 800d0d6 <_realloc_r+0x24>
 800d0ca:	f7fd fdb7 	bl	800ac3c <_free_r>
 800d0ce:	4625      	mov	r5, r4
 800d0d0:	4628      	mov	r0, r5
 800d0d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0d6:	f000 f842 	bl	800d15e <_malloc_usable_size_r>
 800d0da:	4284      	cmp	r4, r0
 800d0dc:	4607      	mov	r7, r0
 800d0de:	d802      	bhi.n	800d0e6 <_realloc_r+0x34>
 800d0e0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d0e4:	d812      	bhi.n	800d10c <_realloc_r+0x5a>
 800d0e6:	4621      	mov	r1, r4
 800d0e8:	4640      	mov	r0, r8
 800d0ea:	f7fd fe1b 	bl	800ad24 <_malloc_r>
 800d0ee:	4605      	mov	r5, r0
 800d0f0:	2800      	cmp	r0, #0
 800d0f2:	d0ed      	beq.n	800d0d0 <_realloc_r+0x1e>
 800d0f4:	42bc      	cmp	r4, r7
 800d0f6:	4622      	mov	r2, r4
 800d0f8:	4631      	mov	r1, r6
 800d0fa:	bf28      	it	cs
 800d0fc:	463a      	movcs	r2, r7
 800d0fe:	f7ff fc23 	bl	800c948 <memcpy>
 800d102:	4631      	mov	r1, r6
 800d104:	4640      	mov	r0, r8
 800d106:	f7fd fd99 	bl	800ac3c <_free_r>
 800d10a:	e7e1      	b.n	800d0d0 <_realloc_r+0x1e>
 800d10c:	4635      	mov	r5, r6
 800d10e:	e7df      	b.n	800d0d0 <_realloc_r+0x1e>

0800d110 <__ascii_wctomb>:
 800d110:	b149      	cbz	r1, 800d126 <__ascii_wctomb+0x16>
 800d112:	2aff      	cmp	r2, #255	; 0xff
 800d114:	bf85      	ittet	hi
 800d116:	238a      	movhi	r3, #138	; 0x8a
 800d118:	6003      	strhi	r3, [r0, #0]
 800d11a:	700a      	strbls	r2, [r1, #0]
 800d11c:	f04f 30ff 	movhi.w	r0, #4294967295
 800d120:	bf98      	it	ls
 800d122:	2001      	movls	r0, #1
 800d124:	4770      	bx	lr
 800d126:	4608      	mov	r0, r1
 800d128:	4770      	bx	lr
	...

0800d12c <fiprintf>:
 800d12c:	b40e      	push	{r1, r2, r3}
 800d12e:	b503      	push	{r0, r1, lr}
 800d130:	4601      	mov	r1, r0
 800d132:	ab03      	add	r3, sp, #12
 800d134:	4805      	ldr	r0, [pc, #20]	; (800d14c <fiprintf+0x20>)
 800d136:	f853 2b04 	ldr.w	r2, [r3], #4
 800d13a:	6800      	ldr	r0, [r0, #0]
 800d13c:	9301      	str	r3, [sp, #4]
 800d13e:	f000 f83f 	bl	800d1c0 <_vfiprintf_r>
 800d142:	b002      	add	sp, #8
 800d144:	f85d eb04 	ldr.w	lr, [sp], #4
 800d148:	b003      	add	sp, #12
 800d14a:	4770      	bx	lr
 800d14c:	20000078 	.word	0x20000078

0800d150 <abort>:
 800d150:	b508      	push	{r3, lr}
 800d152:	2006      	movs	r0, #6
 800d154:	f000 fa0c 	bl	800d570 <raise>
 800d158:	2001      	movs	r0, #1
 800d15a:	f7f4 fd9f 	bl	8001c9c <_exit>

0800d15e <_malloc_usable_size_r>:
 800d15e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d162:	1f18      	subs	r0, r3, #4
 800d164:	2b00      	cmp	r3, #0
 800d166:	bfbc      	itt	lt
 800d168:	580b      	ldrlt	r3, [r1, r0]
 800d16a:	18c0      	addlt	r0, r0, r3
 800d16c:	4770      	bx	lr

0800d16e <__sfputc_r>:
 800d16e:	6893      	ldr	r3, [r2, #8]
 800d170:	3b01      	subs	r3, #1
 800d172:	2b00      	cmp	r3, #0
 800d174:	b410      	push	{r4}
 800d176:	6093      	str	r3, [r2, #8]
 800d178:	da08      	bge.n	800d18c <__sfputc_r+0x1e>
 800d17a:	6994      	ldr	r4, [r2, #24]
 800d17c:	42a3      	cmp	r3, r4
 800d17e:	db01      	blt.n	800d184 <__sfputc_r+0x16>
 800d180:	290a      	cmp	r1, #10
 800d182:	d103      	bne.n	800d18c <__sfputc_r+0x1e>
 800d184:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d188:	f000 b934 	b.w	800d3f4 <__swbuf_r>
 800d18c:	6813      	ldr	r3, [r2, #0]
 800d18e:	1c58      	adds	r0, r3, #1
 800d190:	6010      	str	r0, [r2, #0]
 800d192:	7019      	strb	r1, [r3, #0]
 800d194:	4608      	mov	r0, r1
 800d196:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d19a:	4770      	bx	lr

0800d19c <__sfputs_r>:
 800d19c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d19e:	4606      	mov	r6, r0
 800d1a0:	460f      	mov	r7, r1
 800d1a2:	4614      	mov	r4, r2
 800d1a4:	18d5      	adds	r5, r2, r3
 800d1a6:	42ac      	cmp	r4, r5
 800d1a8:	d101      	bne.n	800d1ae <__sfputs_r+0x12>
 800d1aa:	2000      	movs	r0, #0
 800d1ac:	e007      	b.n	800d1be <__sfputs_r+0x22>
 800d1ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1b2:	463a      	mov	r2, r7
 800d1b4:	4630      	mov	r0, r6
 800d1b6:	f7ff ffda 	bl	800d16e <__sfputc_r>
 800d1ba:	1c43      	adds	r3, r0, #1
 800d1bc:	d1f3      	bne.n	800d1a6 <__sfputs_r+0xa>
 800d1be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d1c0 <_vfiprintf_r>:
 800d1c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d1c4:	460d      	mov	r5, r1
 800d1c6:	b09d      	sub	sp, #116	; 0x74
 800d1c8:	4614      	mov	r4, r2
 800d1ca:	4698      	mov	r8, r3
 800d1cc:	4606      	mov	r6, r0
 800d1ce:	b118      	cbz	r0, 800d1d8 <_vfiprintf_r+0x18>
 800d1d0:	6a03      	ldr	r3, [r0, #32]
 800d1d2:	b90b      	cbnz	r3, 800d1d8 <_vfiprintf_r+0x18>
 800d1d4:	f7fc fd62 	bl	8009c9c <__sinit>
 800d1d8:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1da:	07d9      	lsls	r1, r3, #31
 800d1dc:	d405      	bmi.n	800d1ea <_vfiprintf_r+0x2a>
 800d1de:	89ab      	ldrh	r3, [r5, #12]
 800d1e0:	059a      	lsls	r2, r3, #22
 800d1e2:	d402      	bmi.n	800d1ea <_vfiprintf_r+0x2a>
 800d1e4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1e6:	f7fc fea4 	bl	8009f32 <__retarget_lock_acquire_recursive>
 800d1ea:	89ab      	ldrh	r3, [r5, #12]
 800d1ec:	071b      	lsls	r3, r3, #28
 800d1ee:	d501      	bpl.n	800d1f4 <_vfiprintf_r+0x34>
 800d1f0:	692b      	ldr	r3, [r5, #16]
 800d1f2:	b99b      	cbnz	r3, 800d21c <_vfiprintf_r+0x5c>
 800d1f4:	4629      	mov	r1, r5
 800d1f6:	4630      	mov	r0, r6
 800d1f8:	f000 f93a 	bl	800d470 <__swsetup_r>
 800d1fc:	b170      	cbz	r0, 800d21c <_vfiprintf_r+0x5c>
 800d1fe:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d200:	07dc      	lsls	r4, r3, #31
 800d202:	d504      	bpl.n	800d20e <_vfiprintf_r+0x4e>
 800d204:	f04f 30ff 	mov.w	r0, #4294967295
 800d208:	b01d      	add	sp, #116	; 0x74
 800d20a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d20e:	89ab      	ldrh	r3, [r5, #12]
 800d210:	0598      	lsls	r0, r3, #22
 800d212:	d4f7      	bmi.n	800d204 <_vfiprintf_r+0x44>
 800d214:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d216:	f7fc fe8d 	bl	8009f34 <__retarget_lock_release_recursive>
 800d21a:	e7f3      	b.n	800d204 <_vfiprintf_r+0x44>
 800d21c:	2300      	movs	r3, #0
 800d21e:	9309      	str	r3, [sp, #36]	; 0x24
 800d220:	2320      	movs	r3, #32
 800d222:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d226:	f8cd 800c 	str.w	r8, [sp, #12]
 800d22a:	2330      	movs	r3, #48	; 0x30
 800d22c:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d3e0 <_vfiprintf_r+0x220>
 800d230:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d234:	f04f 0901 	mov.w	r9, #1
 800d238:	4623      	mov	r3, r4
 800d23a:	469a      	mov	sl, r3
 800d23c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d240:	b10a      	cbz	r2, 800d246 <_vfiprintf_r+0x86>
 800d242:	2a25      	cmp	r2, #37	; 0x25
 800d244:	d1f9      	bne.n	800d23a <_vfiprintf_r+0x7a>
 800d246:	ebba 0b04 	subs.w	fp, sl, r4
 800d24a:	d00b      	beq.n	800d264 <_vfiprintf_r+0xa4>
 800d24c:	465b      	mov	r3, fp
 800d24e:	4622      	mov	r2, r4
 800d250:	4629      	mov	r1, r5
 800d252:	4630      	mov	r0, r6
 800d254:	f7ff ffa2 	bl	800d19c <__sfputs_r>
 800d258:	3001      	adds	r0, #1
 800d25a:	f000 80a9 	beq.w	800d3b0 <_vfiprintf_r+0x1f0>
 800d25e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d260:	445a      	add	r2, fp
 800d262:	9209      	str	r2, [sp, #36]	; 0x24
 800d264:	f89a 3000 	ldrb.w	r3, [sl]
 800d268:	2b00      	cmp	r3, #0
 800d26a:	f000 80a1 	beq.w	800d3b0 <_vfiprintf_r+0x1f0>
 800d26e:	2300      	movs	r3, #0
 800d270:	f04f 32ff 	mov.w	r2, #4294967295
 800d274:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d278:	f10a 0a01 	add.w	sl, sl, #1
 800d27c:	9304      	str	r3, [sp, #16]
 800d27e:	9307      	str	r3, [sp, #28]
 800d280:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d284:	931a      	str	r3, [sp, #104]	; 0x68
 800d286:	4654      	mov	r4, sl
 800d288:	2205      	movs	r2, #5
 800d28a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d28e:	4854      	ldr	r0, [pc, #336]	; (800d3e0 <_vfiprintf_r+0x220>)
 800d290:	f7f2 ffce 	bl	8000230 <memchr>
 800d294:	9a04      	ldr	r2, [sp, #16]
 800d296:	b9d8      	cbnz	r0, 800d2d0 <_vfiprintf_r+0x110>
 800d298:	06d1      	lsls	r1, r2, #27
 800d29a:	bf44      	itt	mi
 800d29c:	2320      	movmi	r3, #32
 800d29e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2a2:	0713      	lsls	r3, r2, #28
 800d2a4:	bf44      	itt	mi
 800d2a6:	232b      	movmi	r3, #43	; 0x2b
 800d2a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d2ac:	f89a 3000 	ldrb.w	r3, [sl]
 800d2b0:	2b2a      	cmp	r3, #42	; 0x2a
 800d2b2:	d015      	beq.n	800d2e0 <_vfiprintf_r+0x120>
 800d2b4:	9a07      	ldr	r2, [sp, #28]
 800d2b6:	4654      	mov	r4, sl
 800d2b8:	2000      	movs	r0, #0
 800d2ba:	f04f 0c0a 	mov.w	ip, #10
 800d2be:	4621      	mov	r1, r4
 800d2c0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d2c4:	3b30      	subs	r3, #48	; 0x30
 800d2c6:	2b09      	cmp	r3, #9
 800d2c8:	d94d      	bls.n	800d366 <_vfiprintf_r+0x1a6>
 800d2ca:	b1b0      	cbz	r0, 800d2fa <_vfiprintf_r+0x13a>
 800d2cc:	9207      	str	r2, [sp, #28]
 800d2ce:	e014      	b.n	800d2fa <_vfiprintf_r+0x13a>
 800d2d0:	eba0 0308 	sub.w	r3, r0, r8
 800d2d4:	fa09 f303 	lsl.w	r3, r9, r3
 800d2d8:	4313      	orrs	r3, r2
 800d2da:	9304      	str	r3, [sp, #16]
 800d2dc:	46a2      	mov	sl, r4
 800d2de:	e7d2      	b.n	800d286 <_vfiprintf_r+0xc6>
 800d2e0:	9b03      	ldr	r3, [sp, #12]
 800d2e2:	1d19      	adds	r1, r3, #4
 800d2e4:	681b      	ldr	r3, [r3, #0]
 800d2e6:	9103      	str	r1, [sp, #12]
 800d2e8:	2b00      	cmp	r3, #0
 800d2ea:	bfbb      	ittet	lt
 800d2ec:	425b      	neglt	r3, r3
 800d2ee:	f042 0202 	orrlt.w	r2, r2, #2
 800d2f2:	9307      	strge	r3, [sp, #28]
 800d2f4:	9307      	strlt	r3, [sp, #28]
 800d2f6:	bfb8      	it	lt
 800d2f8:	9204      	strlt	r2, [sp, #16]
 800d2fa:	7823      	ldrb	r3, [r4, #0]
 800d2fc:	2b2e      	cmp	r3, #46	; 0x2e
 800d2fe:	d10c      	bne.n	800d31a <_vfiprintf_r+0x15a>
 800d300:	7863      	ldrb	r3, [r4, #1]
 800d302:	2b2a      	cmp	r3, #42	; 0x2a
 800d304:	d134      	bne.n	800d370 <_vfiprintf_r+0x1b0>
 800d306:	9b03      	ldr	r3, [sp, #12]
 800d308:	1d1a      	adds	r2, r3, #4
 800d30a:	681b      	ldr	r3, [r3, #0]
 800d30c:	9203      	str	r2, [sp, #12]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	bfb8      	it	lt
 800d312:	f04f 33ff 	movlt.w	r3, #4294967295
 800d316:	3402      	adds	r4, #2
 800d318:	9305      	str	r3, [sp, #20]
 800d31a:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d3f0 <_vfiprintf_r+0x230>
 800d31e:	7821      	ldrb	r1, [r4, #0]
 800d320:	2203      	movs	r2, #3
 800d322:	4650      	mov	r0, sl
 800d324:	f7f2 ff84 	bl	8000230 <memchr>
 800d328:	b138      	cbz	r0, 800d33a <_vfiprintf_r+0x17a>
 800d32a:	9b04      	ldr	r3, [sp, #16]
 800d32c:	eba0 000a 	sub.w	r0, r0, sl
 800d330:	2240      	movs	r2, #64	; 0x40
 800d332:	4082      	lsls	r2, r0
 800d334:	4313      	orrs	r3, r2
 800d336:	3401      	adds	r4, #1
 800d338:	9304      	str	r3, [sp, #16]
 800d33a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d33e:	4829      	ldr	r0, [pc, #164]	; (800d3e4 <_vfiprintf_r+0x224>)
 800d340:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d344:	2206      	movs	r2, #6
 800d346:	f7f2 ff73 	bl	8000230 <memchr>
 800d34a:	2800      	cmp	r0, #0
 800d34c:	d03f      	beq.n	800d3ce <_vfiprintf_r+0x20e>
 800d34e:	4b26      	ldr	r3, [pc, #152]	; (800d3e8 <_vfiprintf_r+0x228>)
 800d350:	bb1b      	cbnz	r3, 800d39a <_vfiprintf_r+0x1da>
 800d352:	9b03      	ldr	r3, [sp, #12]
 800d354:	3307      	adds	r3, #7
 800d356:	f023 0307 	bic.w	r3, r3, #7
 800d35a:	3308      	adds	r3, #8
 800d35c:	9303      	str	r3, [sp, #12]
 800d35e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d360:	443b      	add	r3, r7
 800d362:	9309      	str	r3, [sp, #36]	; 0x24
 800d364:	e768      	b.n	800d238 <_vfiprintf_r+0x78>
 800d366:	fb0c 3202 	mla	r2, ip, r2, r3
 800d36a:	460c      	mov	r4, r1
 800d36c:	2001      	movs	r0, #1
 800d36e:	e7a6      	b.n	800d2be <_vfiprintf_r+0xfe>
 800d370:	2300      	movs	r3, #0
 800d372:	3401      	adds	r4, #1
 800d374:	9305      	str	r3, [sp, #20]
 800d376:	4619      	mov	r1, r3
 800d378:	f04f 0c0a 	mov.w	ip, #10
 800d37c:	4620      	mov	r0, r4
 800d37e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d382:	3a30      	subs	r2, #48	; 0x30
 800d384:	2a09      	cmp	r2, #9
 800d386:	d903      	bls.n	800d390 <_vfiprintf_r+0x1d0>
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d0c6      	beq.n	800d31a <_vfiprintf_r+0x15a>
 800d38c:	9105      	str	r1, [sp, #20]
 800d38e:	e7c4      	b.n	800d31a <_vfiprintf_r+0x15a>
 800d390:	fb0c 2101 	mla	r1, ip, r1, r2
 800d394:	4604      	mov	r4, r0
 800d396:	2301      	movs	r3, #1
 800d398:	e7f0      	b.n	800d37c <_vfiprintf_r+0x1bc>
 800d39a:	ab03      	add	r3, sp, #12
 800d39c:	9300      	str	r3, [sp, #0]
 800d39e:	462a      	mov	r2, r5
 800d3a0:	4b12      	ldr	r3, [pc, #72]	; (800d3ec <_vfiprintf_r+0x22c>)
 800d3a2:	a904      	add	r1, sp, #16
 800d3a4:	4630      	mov	r0, r6
 800d3a6:	f7fb fe17 	bl	8008fd8 <_printf_float>
 800d3aa:	4607      	mov	r7, r0
 800d3ac:	1c78      	adds	r0, r7, #1
 800d3ae:	d1d6      	bne.n	800d35e <_vfiprintf_r+0x19e>
 800d3b0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d3b2:	07d9      	lsls	r1, r3, #31
 800d3b4:	d405      	bmi.n	800d3c2 <_vfiprintf_r+0x202>
 800d3b6:	89ab      	ldrh	r3, [r5, #12]
 800d3b8:	059a      	lsls	r2, r3, #22
 800d3ba:	d402      	bmi.n	800d3c2 <_vfiprintf_r+0x202>
 800d3bc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d3be:	f7fc fdb9 	bl	8009f34 <__retarget_lock_release_recursive>
 800d3c2:	89ab      	ldrh	r3, [r5, #12]
 800d3c4:	065b      	lsls	r3, r3, #25
 800d3c6:	f53f af1d 	bmi.w	800d204 <_vfiprintf_r+0x44>
 800d3ca:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3cc:	e71c      	b.n	800d208 <_vfiprintf_r+0x48>
 800d3ce:	ab03      	add	r3, sp, #12
 800d3d0:	9300      	str	r3, [sp, #0]
 800d3d2:	462a      	mov	r2, r5
 800d3d4:	4b05      	ldr	r3, [pc, #20]	; (800d3ec <_vfiprintf_r+0x22c>)
 800d3d6:	a904      	add	r1, sp, #16
 800d3d8:	4630      	mov	r0, r6
 800d3da:	f7fc f8a1 	bl	8009520 <_printf_i>
 800d3de:	e7e4      	b.n	800d3aa <_vfiprintf_r+0x1ea>
 800d3e0:	0800da91 	.word	0x0800da91
 800d3e4:	0800da9b 	.word	0x0800da9b
 800d3e8:	08008fd9 	.word	0x08008fd9
 800d3ec:	0800d19d 	.word	0x0800d19d
 800d3f0:	0800da97 	.word	0x0800da97

0800d3f4 <__swbuf_r>:
 800d3f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d3f6:	460e      	mov	r6, r1
 800d3f8:	4614      	mov	r4, r2
 800d3fa:	4605      	mov	r5, r0
 800d3fc:	b118      	cbz	r0, 800d406 <__swbuf_r+0x12>
 800d3fe:	6a03      	ldr	r3, [r0, #32]
 800d400:	b90b      	cbnz	r3, 800d406 <__swbuf_r+0x12>
 800d402:	f7fc fc4b 	bl	8009c9c <__sinit>
 800d406:	69a3      	ldr	r3, [r4, #24]
 800d408:	60a3      	str	r3, [r4, #8]
 800d40a:	89a3      	ldrh	r3, [r4, #12]
 800d40c:	071a      	lsls	r2, r3, #28
 800d40e:	d525      	bpl.n	800d45c <__swbuf_r+0x68>
 800d410:	6923      	ldr	r3, [r4, #16]
 800d412:	b31b      	cbz	r3, 800d45c <__swbuf_r+0x68>
 800d414:	6823      	ldr	r3, [r4, #0]
 800d416:	6922      	ldr	r2, [r4, #16]
 800d418:	1a98      	subs	r0, r3, r2
 800d41a:	6963      	ldr	r3, [r4, #20]
 800d41c:	b2f6      	uxtb	r6, r6
 800d41e:	4283      	cmp	r3, r0
 800d420:	4637      	mov	r7, r6
 800d422:	dc04      	bgt.n	800d42e <__swbuf_r+0x3a>
 800d424:	4621      	mov	r1, r4
 800d426:	4628      	mov	r0, r5
 800d428:	f7ff fa2a 	bl	800c880 <_fflush_r>
 800d42c:	b9e0      	cbnz	r0, 800d468 <__swbuf_r+0x74>
 800d42e:	68a3      	ldr	r3, [r4, #8]
 800d430:	3b01      	subs	r3, #1
 800d432:	60a3      	str	r3, [r4, #8]
 800d434:	6823      	ldr	r3, [r4, #0]
 800d436:	1c5a      	adds	r2, r3, #1
 800d438:	6022      	str	r2, [r4, #0]
 800d43a:	701e      	strb	r6, [r3, #0]
 800d43c:	6962      	ldr	r2, [r4, #20]
 800d43e:	1c43      	adds	r3, r0, #1
 800d440:	429a      	cmp	r2, r3
 800d442:	d004      	beq.n	800d44e <__swbuf_r+0x5a>
 800d444:	89a3      	ldrh	r3, [r4, #12]
 800d446:	07db      	lsls	r3, r3, #31
 800d448:	d506      	bpl.n	800d458 <__swbuf_r+0x64>
 800d44a:	2e0a      	cmp	r6, #10
 800d44c:	d104      	bne.n	800d458 <__swbuf_r+0x64>
 800d44e:	4621      	mov	r1, r4
 800d450:	4628      	mov	r0, r5
 800d452:	f7ff fa15 	bl	800c880 <_fflush_r>
 800d456:	b938      	cbnz	r0, 800d468 <__swbuf_r+0x74>
 800d458:	4638      	mov	r0, r7
 800d45a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d45c:	4621      	mov	r1, r4
 800d45e:	4628      	mov	r0, r5
 800d460:	f000 f806 	bl	800d470 <__swsetup_r>
 800d464:	2800      	cmp	r0, #0
 800d466:	d0d5      	beq.n	800d414 <__swbuf_r+0x20>
 800d468:	f04f 37ff 	mov.w	r7, #4294967295
 800d46c:	e7f4      	b.n	800d458 <__swbuf_r+0x64>
	...

0800d470 <__swsetup_r>:
 800d470:	b538      	push	{r3, r4, r5, lr}
 800d472:	4b2a      	ldr	r3, [pc, #168]	; (800d51c <__swsetup_r+0xac>)
 800d474:	4605      	mov	r5, r0
 800d476:	6818      	ldr	r0, [r3, #0]
 800d478:	460c      	mov	r4, r1
 800d47a:	b118      	cbz	r0, 800d484 <__swsetup_r+0x14>
 800d47c:	6a03      	ldr	r3, [r0, #32]
 800d47e:	b90b      	cbnz	r3, 800d484 <__swsetup_r+0x14>
 800d480:	f7fc fc0c 	bl	8009c9c <__sinit>
 800d484:	89a3      	ldrh	r3, [r4, #12]
 800d486:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d48a:	0718      	lsls	r0, r3, #28
 800d48c:	d422      	bmi.n	800d4d4 <__swsetup_r+0x64>
 800d48e:	06d9      	lsls	r1, r3, #27
 800d490:	d407      	bmi.n	800d4a2 <__swsetup_r+0x32>
 800d492:	2309      	movs	r3, #9
 800d494:	602b      	str	r3, [r5, #0]
 800d496:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d49a:	81a3      	strh	r3, [r4, #12]
 800d49c:	f04f 30ff 	mov.w	r0, #4294967295
 800d4a0:	e034      	b.n	800d50c <__swsetup_r+0x9c>
 800d4a2:	0758      	lsls	r0, r3, #29
 800d4a4:	d512      	bpl.n	800d4cc <__swsetup_r+0x5c>
 800d4a6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d4a8:	b141      	cbz	r1, 800d4bc <__swsetup_r+0x4c>
 800d4aa:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d4ae:	4299      	cmp	r1, r3
 800d4b0:	d002      	beq.n	800d4b8 <__swsetup_r+0x48>
 800d4b2:	4628      	mov	r0, r5
 800d4b4:	f7fd fbc2 	bl	800ac3c <_free_r>
 800d4b8:	2300      	movs	r3, #0
 800d4ba:	6363      	str	r3, [r4, #52]	; 0x34
 800d4bc:	89a3      	ldrh	r3, [r4, #12]
 800d4be:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d4c2:	81a3      	strh	r3, [r4, #12]
 800d4c4:	2300      	movs	r3, #0
 800d4c6:	6063      	str	r3, [r4, #4]
 800d4c8:	6923      	ldr	r3, [r4, #16]
 800d4ca:	6023      	str	r3, [r4, #0]
 800d4cc:	89a3      	ldrh	r3, [r4, #12]
 800d4ce:	f043 0308 	orr.w	r3, r3, #8
 800d4d2:	81a3      	strh	r3, [r4, #12]
 800d4d4:	6923      	ldr	r3, [r4, #16]
 800d4d6:	b94b      	cbnz	r3, 800d4ec <__swsetup_r+0x7c>
 800d4d8:	89a3      	ldrh	r3, [r4, #12]
 800d4da:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d4de:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4e2:	d003      	beq.n	800d4ec <__swsetup_r+0x7c>
 800d4e4:	4621      	mov	r1, r4
 800d4e6:	4628      	mov	r0, r5
 800d4e8:	f000 f884 	bl	800d5f4 <__smakebuf_r>
 800d4ec:	89a0      	ldrh	r0, [r4, #12]
 800d4ee:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4f2:	f010 0301 	ands.w	r3, r0, #1
 800d4f6:	d00a      	beq.n	800d50e <__swsetup_r+0x9e>
 800d4f8:	2300      	movs	r3, #0
 800d4fa:	60a3      	str	r3, [r4, #8]
 800d4fc:	6963      	ldr	r3, [r4, #20]
 800d4fe:	425b      	negs	r3, r3
 800d500:	61a3      	str	r3, [r4, #24]
 800d502:	6923      	ldr	r3, [r4, #16]
 800d504:	b943      	cbnz	r3, 800d518 <__swsetup_r+0xa8>
 800d506:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d50a:	d1c4      	bne.n	800d496 <__swsetup_r+0x26>
 800d50c:	bd38      	pop	{r3, r4, r5, pc}
 800d50e:	0781      	lsls	r1, r0, #30
 800d510:	bf58      	it	pl
 800d512:	6963      	ldrpl	r3, [r4, #20]
 800d514:	60a3      	str	r3, [r4, #8]
 800d516:	e7f4      	b.n	800d502 <__swsetup_r+0x92>
 800d518:	2000      	movs	r0, #0
 800d51a:	e7f7      	b.n	800d50c <__swsetup_r+0x9c>
 800d51c:	20000078 	.word	0x20000078

0800d520 <_raise_r>:
 800d520:	291f      	cmp	r1, #31
 800d522:	b538      	push	{r3, r4, r5, lr}
 800d524:	4604      	mov	r4, r0
 800d526:	460d      	mov	r5, r1
 800d528:	d904      	bls.n	800d534 <_raise_r+0x14>
 800d52a:	2316      	movs	r3, #22
 800d52c:	6003      	str	r3, [r0, #0]
 800d52e:	f04f 30ff 	mov.w	r0, #4294967295
 800d532:	bd38      	pop	{r3, r4, r5, pc}
 800d534:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d536:	b112      	cbz	r2, 800d53e <_raise_r+0x1e>
 800d538:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d53c:	b94b      	cbnz	r3, 800d552 <_raise_r+0x32>
 800d53e:	4620      	mov	r0, r4
 800d540:	f000 f830 	bl	800d5a4 <_getpid_r>
 800d544:	462a      	mov	r2, r5
 800d546:	4601      	mov	r1, r0
 800d548:	4620      	mov	r0, r4
 800d54a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d54e:	f000 b817 	b.w	800d580 <_kill_r>
 800d552:	2b01      	cmp	r3, #1
 800d554:	d00a      	beq.n	800d56c <_raise_r+0x4c>
 800d556:	1c59      	adds	r1, r3, #1
 800d558:	d103      	bne.n	800d562 <_raise_r+0x42>
 800d55a:	2316      	movs	r3, #22
 800d55c:	6003      	str	r3, [r0, #0]
 800d55e:	2001      	movs	r0, #1
 800d560:	e7e7      	b.n	800d532 <_raise_r+0x12>
 800d562:	2400      	movs	r4, #0
 800d564:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d568:	4628      	mov	r0, r5
 800d56a:	4798      	blx	r3
 800d56c:	2000      	movs	r0, #0
 800d56e:	e7e0      	b.n	800d532 <_raise_r+0x12>

0800d570 <raise>:
 800d570:	4b02      	ldr	r3, [pc, #8]	; (800d57c <raise+0xc>)
 800d572:	4601      	mov	r1, r0
 800d574:	6818      	ldr	r0, [r3, #0]
 800d576:	f7ff bfd3 	b.w	800d520 <_raise_r>
 800d57a:	bf00      	nop
 800d57c:	20000078 	.word	0x20000078

0800d580 <_kill_r>:
 800d580:	b538      	push	{r3, r4, r5, lr}
 800d582:	4d07      	ldr	r5, [pc, #28]	; (800d5a0 <_kill_r+0x20>)
 800d584:	2300      	movs	r3, #0
 800d586:	4604      	mov	r4, r0
 800d588:	4608      	mov	r0, r1
 800d58a:	4611      	mov	r1, r2
 800d58c:	602b      	str	r3, [r5, #0]
 800d58e:	f7f4 fb75 	bl	8001c7c <_kill>
 800d592:	1c43      	adds	r3, r0, #1
 800d594:	d102      	bne.n	800d59c <_kill_r+0x1c>
 800d596:	682b      	ldr	r3, [r5, #0]
 800d598:	b103      	cbz	r3, 800d59c <_kill_r+0x1c>
 800d59a:	6023      	str	r3, [r4, #0]
 800d59c:	bd38      	pop	{r3, r4, r5, pc}
 800d59e:	bf00      	nop
 800d5a0:	20000d10 	.word	0x20000d10

0800d5a4 <_getpid_r>:
 800d5a4:	f7f4 bb62 	b.w	8001c6c <_getpid>

0800d5a8 <__swhatbuf_r>:
 800d5a8:	b570      	push	{r4, r5, r6, lr}
 800d5aa:	460c      	mov	r4, r1
 800d5ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d5b0:	2900      	cmp	r1, #0
 800d5b2:	b096      	sub	sp, #88	; 0x58
 800d5b4:	4615      	mov	r5, r2
 800d5b6:	461e      	mov	r6, r3
 800d5b8:	da0d      	bge.n	800d5d6 <__swhatbuf_r+0x2e>
 800d5ba:	89a3      	ldrh	r3, [r4, #12]
 800d5bc:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d5c0:	f04f 0100 	mov.w	r1, #0
 800d5c4:	bf0c      	ite	eq
 800d5c6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d5ca:	2340      	movne	r3, #64	; 0x40
 800d5cc:	2000      	movs	r0, #0
 800d5ce:	6031      	str	r1, [r6, #0]
 800d5d0:	602b      	str	r3, [r5, #0]
 800d5d2:	b016      	add	sp, #88	; 0x58
 800d5d4:	bd70      	pop	{r4, r5, r6, pc}
 800d5d6:	466a      	mov	r2, sp
 800d5d8:	f000 f848 	bl	800d66c <_fstat_r>
 800d5dc:	2800      	cmp	r0, #0
 800d5de:	dbec      	blt.n	800d5ba <__swhatbuf_r+0x12>
 800d5e0:	9901      	ldr	r1, [sp, #4]
 800d5e2:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d5e6:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d5ea:	4259      	negs	r1, r3
 800d5ec:	4159      	adcs	r1, r3
 800d5ee:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d5f2:	e7eb      	b.n	800d5cc <__swhatbuf_r+0x24>

0800d5f4 <__smakebuf_r>:
 800d5f4:	898b      	ldrh	r3, [r1, #12]
 800d5f6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d5f8:	079d      	lsls	r5, r3, #30
 800d5fa:	4606      	mov	r6, r0
 800d5fc:	460c      	mov	r4, r1
 800d5fe:	d507      	bpl.n	800d610 <__smakebuf_r+0x1c>
 800d600:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d604:	6023      	str	r3, [r4, #0]
 800d606:	6123      	str	r3, [r4, #16]
 800d608:	2301      	movs	r3, #1
 800d60a:	6163      	str	r3, [r4, #20]
 800d60c:	b002      	add	sp, #8
 800d60e:	bd70      	pop	{r4, r5, r6, pc}
 800d610:	ab01      	add	r3, sp, #4
 800d612:	466a      	mov	r2, sp
 800d614:	f7ff ffc8 	bl	800d5a8 <__swhatbuf_r>
 800d618:	9900      	ldr	r1, [sp, #0]
 800d61a:	4605      	mov	r5, r0
 800d61c:	4630      	mov	r0, r6
 800d61e:	f7fd fb81 	bl	800ad24 <_malloc_r>
 800d622:	b948      	cbnz	r0, 800d638 <__smakebuf_r+0x44>
 800d624:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d628:	059a      	lsls	r2, r3, #22
 800d62a:	d4ef      	bmi.n	800d60c <__smakebuf_r+0x18>
 800d62c:	f023 0303 	bic.w	r3, r3, #3
 800d630:	f043 0302 	orr.w	r3, r3, #2
 800d634:	81a3      	strh	r3, [r4, #12]
 800d636:	e7e3      	b.n	800d600 <__smakebuf_r+0xc>
 800d638:	89a3      	ldrh	r3, [r4, #12]
 800d63a:	6020      	str	r0, [r4, #0]
 800d63c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d640:	81a3      	strh	r3, [r4, #12]
 800d642:	9b00      	ldr	r3, [sp, #0]
 800d644:	6163      	str	r3, [r4, #20]
 800d646:	9b01      	ldr	r3, [sp, #4]
 800d648:	6120      	str	r0, [r4, #16]
 800d64a:	b15b      	cbz	r3, 800d664 <__smakebuf_r+0x70>
 800d64c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d650:	4630      	mov	r0, r6
 800d652:	f000 f81d 	bl	800d690 <_isatty_r>
 800d656:	b128      	cbz	r0, 800d664 <__smakebuf_r+0x70>
 800d658:	89a3      	ldrh	r3, [r4, #12]
 800d65a:	f023 0303 	bic.w	r3, r3, #3
 800d65e:	f043 0301 	orr.w	r3, r3, #1
 800d662:	81a3      	strh	r3, [r4, #12]
 800d664:	89a3      	ldrh	r3, [r4, #12]
 800d666:	431d      	orrs	r5, r3
 800d668:	81a5      	strh	r5, [r4, #12]
 800d66a:	e7cf      	b.n	800d60c <__smakebuf_r+0x18>

0800d66c <_fstat_r>:
 800d66c:	b538      	push	{r3, r4, r5, lr}
 800d66e:	4d07      	ldr	r5, [pc, #28]	; (800d68c <_fstat_r+0x20>)
 800d670:	2300      	movs	r3, #0
 800d672:	4604      	mov	r4, r0
 800d674:	4608      	mov	r0, r1
 800d676:	4611      	mov	r1, r2
 800d678:	602b      	str	r3, [r5, #0]
 800d67a:	f7f4 fb5e 	bl	8001d3a <_fstat>
 800d67e:	1c43      	adds	r3, r0, #1
 800d680:	d102      	bne.n	800d688 <_fstat_r+0x1c>
 800d682:	682b      	ldr	r3, [r5, #0]
 800d684:	b103      	cbz	r3, 800d688 <_fstat_r+0x1c>
 800d686:	6023      	str	r3, [r4, #0]
 800d688:	bd38      	pop	{r3, r4, r5, pc}
 800d68a:	bf00      	nop
 800d68c:	20000d10 	.word	0x20000d10

0800d690 <_isatty_r>:
 800d690:	b538      	push	{r3, r4, r5, lr}
 800d692:	4d06      	ldr	r5, [pc, #24]	; (800d6ac <_isatty_r+0x1c>)
 800d694:	2300      	movs	r3, #0
 800d696:	4604      	mov	r4, r0
 800d698:	4608      	mov	r0, r1
 800d69a:	602b      	str	r3, [r5, #0]
 800d69c:	f7f4 fb5d 	bl	8001d5a <_isatty>
 800d6a0:	1c43      	adds	r3, r0, #1
 800d6a2:	d102      	bne.n	800d6aa <_isatty_r+0x1a>
 800d6a4:	682b      	ldr	r3, [r5, #0]
 800d6a6:	b103      	cbz	r3, 800d6aa <_isatty_r+0x1a>
 800d6a8:	6023      	str	r3, [r4, #0]
 800d6aa:	bd38      	pop	{r3, r4, r5, pc}
 800d6ac:	20000d10 	.word	0x20000d10

0800d6b0 <_init>:
 800d6b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6b2:	bf00      	nop
 800d6b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6b6:	bc08      	pop	{r3}
 800d6b8:	469e      	mov	lr, r3
 800d6ba:	4770      	bx	lr

0800d6bc <_fini>:
 800d6bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6be:	bf00      	nop
 800d6c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d6c2:	bc08      	pop	{r3}
 800d6c4:	469e      	mov	lr, r3
 800d6c6:	4770      	bx	lr
