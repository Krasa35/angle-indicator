
01_STM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d588  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800d758  0800d758  0001d758  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800dbf8  0800dbf8  00020328  2**0
                  CONTENTS
  4 .ARM          00000008  0800dbf8  0800dbf8  0001dbf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800dc00  0800dc00  00020328  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800dc00  0800dc00  0001dc00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800dc04  0800dc04  0001dc04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  0800dc08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001e8  0800ddf0  000201e8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000288  0800de90  00020288  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          000009fc  20000328  0800df30  00020328  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  20000d24  0800df30  00020d24  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  00020328  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00020358  2**0
                  CONTENTS, READONLY
 15 .debug_info   00020647  00000000  00000000  0002039b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 00004761  00000000  00000000  000409e2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00001a30  00000000  00000000  00045148  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00001446  00000000  00000000  00046b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002c43d  00000000  00000000  00047fbe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00026908  00000000  00000000  000743fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    00100785  00000000  00000000  0009ad03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  00008328  00000000  00000000  0019b488  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000063  00000000  00000000  001a37b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000328 	.word	0x20000328
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800d740 	.word	0x0800d740

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000032c 	.word	0x2000032c
 800020c:	0800d740 	.word	0x0800d740

08000210 <strcmp>:
 8000210:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000214:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000218:	2a01      	cmp	r2, #1
 800021a:	bf28      	it	cs
 800021c:	429a      	cmpcs	r2, r3
 800021e:	d0f7      	beq.n	8000210 <strcmp>
 8000220:	1ad0      	subs	r0, r2, r3
 8000222:	4770      	bx	lr
	...

08000230 <memchr>:
 8000230:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000234:	2a10      	cmp	r2, #16
 8000236:	db2b      	blt.n	8000290 <memchr+0x60>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	d008      	beq.n	8000250 <memchr+0x20>
 800023e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000242:	3a01      	subs	r2, #1
 8000244:	428b      	cmp	r3, r1
 8000246:	d02d      	beq.n	80002a4 <memchr+0x74>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	b342      	cbz	r2, 80002a0 <memchr+0x70>
 800024e:	d1f6      	bne.n	800023e <memchr+0xe>
 8000250:	b4f0      	push	{r4, r5, r6, r7}
 8000252:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000256:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800025a:	f022 0407 	bic.w	r4, r2, #7
 800025e:	f07f 0700 	mvns.w	r7, #0
 8000262:	2300      	movs	r3, #0
 8000264:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000268:	3c08      	subs	r4, #8
 800026a:	ea85 0501 	eor.w	r5, r5, r1
 800026e:	ea86 0601 	eor.w	r6, r6, r1
 8000272:	fa85 f547 	uadd8	r5, r5, r7
 8000276:	faa3 f587 	sel	r5, r3, r7
 800027a:	fa86 f647 	uadd8	r6, r6, r7
 800027e:	faa5 f687 	sel	r6, r5, r7
 8000282:	b98e      	cbnz	r6, 80002a8 <memchr+0x78>
 8000284:	d1ee      	bne.n	8000264 <memchr+0x34>
 8000286:	bcf0      	pop	{r4, r5, r6, r7}
 8000288:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800028c:	f002 0207 	and.w	r2, r2, #7
 8000290:	b132      	cbz	r2, 80002a0 <memchr+0x70>
 8000292:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000296:	3a01      	subs	r2, #1
 8000298:	ea83 0301 	eor.w	r3, r3, r1
 800029c:	b113      	cbz	r3, 80002a4 <memchr+0x74>
 800029e:	d1f8      	bne.n	8000292 <memchr+0x62>
 80002a0:	2000      	movs	r0, #0
 80002a2:	4770      	bx	lr
 80002a4:	3801      	subs	r0, #1
 80002a6:	4770      	bx	lr
 80002a8:	2d00      	cmp	r5, #0
 80002aa:	bf06      	itte	eq
 80002ac:	4635      	moveq	r5, r6
 80002ae:	3803      	subeq	r0, #3
 80002b0:	3807      	subne	r0, #7
 80002b2:	f015 0f01 	tst.w	r5, #1
 80002b6:	d107      	bne.n	80002c8 <memchr+0x98>
 80002b8:	3001      	adds	r0, #1
 80002ba:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002be:	bf02      	ittt	eq
 80002c0:	3001      	addeq	r0, #1
 80002c2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002c6:	3001      	addeq	r0, #1
 80002c8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ca:	3801      	subs	r0, #1
 80002cc:	4770      	bx	lr
 80002ce:	bf00      	nop

080002d0 <strlen>:
 80002d0:	4603      	mov	r3, r0
 80002d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	d1fb      	bne.n	80002d2 <strlen+0x2>
 80002da:	1a18      	subs	r0, r3, r0
 80002dc:	3801      	subs	r0, #1
 80002de:	4770      	bx	lr

080002e0 <__aeabi_drsub>:
 80002e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	e002      	b.n	80002ec <__adddf3>
 80002e6:	bf00      	nop

080002e8 <__aeabi_dsub>:
 80002e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002ec <__adddf3>:
 80002ec:	b530      	push	{r4, r5, lr}
 80002ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002f6:	ea94 0f05 	teq	r4, r5
 80002fa:	bf08      	it	eq
 80002fc:	ea90 0f02 	teqeq	r0, r2
 8000300:	bf1f      	itttt	ne
 8000302:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000306:	ea55 0c02 	orrsne.w	ip, r5, r2
 800030a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800030e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000312:	f000 80e2 	beq.w	80004da <__adddf3+0x1ee>
 8000316:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800031a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800031e:	bfb8      	it	lt
 8000320:	426d      	neglt	r5, r5
 8000322:	dd0c      	ble.n	800033e <__adddf3+0x52>
 8000324:	442c      	add	r4, r5
 8000326:	ea80 0202 	eor.w	r2, r0, r2
 800032a:	ea81 0303 	eor.w	r3, r1, r3
 800032e:	ea82 0000 	eor.w	r0, r2, r0
 8000332:	ea83 0101 	eor.w	r1, r3, r1
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	2d36      	cmp	r5, #54	; 0x36
 8000340:	bf88      	it	hi
 8000342:	bd30      	pophi	{r4, r5, pc}
 8000344:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000348:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800034c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000350:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000354:	d002      	beq.n	800035c <__adddf3+0x70>
 8000356:	4240      	negs	r0, r0
 8000358:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800035c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000360:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000364:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000368:	d002      	beq.n	8000370 <__adddf3+0x84>
 800036a:	4252      	negs	r2, r2
 800036c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000370:	ea94 0f05 	teq	r4, r5
 8000374:	f000 80a7 	beq.w	80004c6 <__adddf3+0x1da>
 8000378:	f1a4 0401 	sub.w	r4, r4, #1
 800037c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000380:	db0d      	blt.n	800039e <__adddf3+0xb2>
 8000382:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000386:	fa22 f205 	lsr.w	r2, r2, r5
 800038a:	1880      	adds	r0, r0, r2
 800038c:	f141 0100 	adc.w	r1, r1, #0
 8000390:	fa03 f20e 	lsl.w	r2, r3, lr
 8000394:	1880      	adds	r0, r0, r2
 8000396:	fa43 f305 	asr.w	r3, r3, r5
 800039a:	4159      	adcs	r1, r3
 800039c:	e00e      	b.n	80003bc <__adddf3+0xd0>
 800039e:	f1a5 0520 	sub.w	r5, r5, #32
 80003a2:	f10e 0e20 	add.w	lr, lr, #32
 80003a6:	2a01      	cmp	r2, #1
 80003a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003ac:	bf28      	it	cs
 80003ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003b2:	fa43 f305 	asr.w	r3, r3, r5
 80003b6:	18c0      	adds	r0, r0, r3
 80003b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003c0:	d507      	bpl.n	80003d2 <__adddf3+0xe6>
 80003c2:	f04f 0e00 	mov.w	lr, #0
 80003c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80003d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003d6:	d31b      	bcc.n	8000410 <__adddf3+0x124>
 80003d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003dc:	d30c      	bcc.n	80003f8 <__adddf3+0x10c>
 80003de:	0849      	lsrs	r1, r1, #1
 80003e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003e8:	f104 0401 	add.w	r4, r4, #1
 80003ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003f4:	f080 809a 	bcs.w	800052c <__adddf3+0x240>
 80003f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003fc:	bf08      	it	eq
 80003fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000402:	f150 0000 	adcs.w	r0, r0, #0
 8000406:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800040a:	ea41 0105 	orr.w	r1, r1, r5
 800040e:	bd30      	pop	{r4, r5, pc}
 8000410:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000414:	4140      	adcs	r0, r0
 8000416:	eb41 0101 	adc.w	r1, r1, r1
 800041a:	3c01      	subs	r4, #1
 800041c:	bf28      	it	cs
 800041e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000422:	d2e9      	bcs.n	80003f8 <__adddf3+0x10c>
 8000424:	f091 0f00 	teq	r1, #0
 8000428:	bf04      	itt	eq
 800042a:	4601      	moveq	r1, r0
 800042c:	2000      	moveq	r0, #0
 800042e:	fab1 f381 	clz	r3, r1
 8000432:	bf08      	it	eq
 8000434:	3320      	addeq	r3, #32
 8000436:	f1a3 030b 	sub.w	r3, r3, #11
 800043a:	f1b3 0220 	subs.w	r2, r3, #32
 800043e:	da0c      	bge.n	800045a <__adddf3+0x16e>
 8000440:	320c      	adds	r2, #12
 8000442:	dd08      	ble.n	8000456 <__adddf3+0x16a>
 8000444:	f102 0c14 	add.w	ip, r2, #20
 8000448:	f1c2 020c 	rsb	r2, r2, #12
 800044c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000450:	fa21 f102 	lsr.w	r1, r1, r2
 8000454:	e00c      	b.n	8000470 <__adddf3+0x184>
 8000456:	f102 0214 	add.w	r2, r2, #20
 800045a:	bfd8      	it	le
 800045c:	f1c2 0c20 	rsble	ip, r2, #32
 8000460:	fa01 f102 	lsl.w	r1, r1, r2
 8000464:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000468:	bfdc      	itt	le
 800046a:	ea41 010c 	orrle.w	r1, r1, ip
 800046e:	4090      	lslle	r0, r2
 8000470:	1ae4      	subs	r4, r4, r3
 8000472:	bfa2      	ittt	ge
 8000474:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000478:	4329      	orrge	r1, r5
 800047a:	bd30      	popge	{r4, r5, pc}
 800047c:	ea6f 0404 	mvn.w	r4, r4
 8000480:	3c1f      	subs	r4, #31
 8000482:	da1c      	bge.n	80004be <__adddf3+0x1d2>
 8000484:	340c      	adds	r4, #12
 8000486:	dc0e      	bgt.n	80004a6 <__adddf3+0x1ba>
 8000488:	f104 0414 	add.w	r4, r4, #20
 800048c:	f1c4 0220 	rsb	r2, r4, #32
 8000490:	fa20 f004 	lsr.w	r0, r0, r4
 8000494:	fa01 f302 	lsl.w	r3, r1, r2
 8000498:	ea40 0003 	orr.w	r0, r0, r3
 800049c:	fa21 f304 	lsr.w	r3, r1, r4
 80004a0:	ea45 0103 	orr.w	r1, r5, r3
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	f1c4 040c 	rsb	r4, r4, #12
 80004aa:	f1c4 0220 	rsb	r2, r4, #32
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 f304 	lsl.w	r3, r1, r4
 80004b6:	ea40 0003 	orr.w	r0, r0, r3
 80004ba:	4629      	mov	r1, r5
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	fa21 f004 	lsr.w	r0, r1, r4
 80004c2:	4629      	mov	r1, r5
 80004c4:	bd30      	pop	{r4, r5, pc}
 80004c6:	f094 0f00 	teq	r4, #0
 80004ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004ce:	bf06      	itte	eq
 80004d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004d4:	3401      	addeq	r4, #1
 80004d6:	3d01      	subne	r5, #1
 80004d8:	e74e      	b.n	8000378 <__adddf3+0x8c>
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf18      	it	ne
 80004e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004e4:	d029      	beq.n	800053a <__adddf3+0x24e>
 80004e6:	ea94 0f05 	teq	r4, r5
 80004ea:	bf08      	it	eq
 80004ec:	ea90 0f02 	teqeq	r0, r2
 80004f0:	d005      	beq.n	80004fe <__adddf3+0x212>
 80004f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004f6:	bf04      	itt	eq
 80004f8:	4619      	moveq	r1, r3
 80004fa:	4610      	moveq	r0, r2
 80004fc:	bd30      	pop	{r4, r5, pc}
 80004fe:	ea91 0f03 	teq	r1, r3
 8000502:	bf1e      	ittt	ne
 8000504:	2100      	movne	r1, #0
 8000506:	2000      	movne	r0, #0
 8000508:	bd30      	popne	{r4, r5, pc}
 800050a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800050e:	d105      	bne.n	800051c <__adddf3+0x230>
 8000510:	0040      	lsls	r0, r0, #1
 8000512:	4149      	adcs	r1, r1
 8000514:	bf28      	it	cs
 8000516:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800051a:	bd30      	pop	{r4, r5, pc}
 800051c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000520:	bf3c      	itt	cc
 8000522:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000526:	bd30      	popcc	{r4, r5, pc}
 8000528:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800052c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000530:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000534:	f04f 0000 	mov.w	r0, #0
 8000538:	bd30      	pop	{r4, r5, pc}
 800053a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800053e:	bf1a      	itte	ne
 8000540:	4619      	movne	r1, r3
 8000542:	4610      	movne	r0, r2
 8000544:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000548:	bf1c      	itt	ne
 800054a:	460b      	movne	r3, r1
 800054c:	4602      	movne	r2, r0
 800054e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000552:	bf06      	itte	eq
 8000554:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000558:	ea91 0f03 	teqeq	r1, r3
 800055c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000560:	bd30      	pop	{r4, r5, pc}
 8000562:	bf00      	nop

08000564 <__aeabi_ui2d>:
 8000564:	f090 0f00 	teq	r0, #0
 8000568:	bf04      	itt	eq
 800056a:	2100      	moveq	r1, #0
 800056c:	4770      	bxeq	lr
 800056e:	b530      	push	{r4, r5, lr}
 8000570:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000574:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000578:	f04f 0500 	mov.w	r5, #0
 800057c:	f04f 0100 	mov.w	r1, #0
 8000580:	e750      	b.n	8000424 <__adddf3+0x138>
 8000582:	bf00      	nop

08000584 <__aeabi_i2d>:
 8000584:	f090 0f00 	teq	r0, #0
 8000588:	bf04      	itt	eq
 800058a:	2100      	moveq	r1, #0
 800058c:	4770      	bxeq	lr
 800058e:	b530      	push	{r4, r5, lr}
 8000590:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000594:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000598:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800059c:	bf48      	it	mi
 800059e:	4240      	negmi	r0, r0
 80005a0:	f04f 0100 	mov.w	r1, #0
 80005a4:	e73e      	b.n	8000424 <__adddf3+0x138>
 80005a6:	bf00      	nop

080005a8 <__aeabi_f2d>:
 80005a8:	0042      	lsls	r2, r0, #1
 80005aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80005b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005b6:	bf1f      	itttt	ne
 80005b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005c4:	4770      	bxne	lr
 80005c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005ca:	bf08      	it	eq
 80005cc:	4770      	bxeq	lr
 80005ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005d2:	bf04      	itt	eq
 80005d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005d8:	4770      	bxeq	lr
 80005da:	b530      	push	{r4, r5, lr}
 80005dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e8:	e71c      	b.n	8000424 <__adddf3+0x138>
 80005ea:	bf00      	nop

080005ec <__aeabi_ul2d>:
 80005ec:	ea50 0201 	orrs.w	r2, r0, r1
 80005f0:	bf08      	it	eq
 80005f2:	4770      	bxeq	lr
 80005f4:	b530      	push	{r4, r5, lr}
 80005f6:	f04f 0500 	mov.w	r5, #0
 80005fa:	e00a      	b.n	8000612 <__aeabi_l2d+0x16>

080005fc <__aeabi_l2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800060a:	d502      	bpl.n	8000612 <__aeabi_l2d+0x16>
 800060c:	4240      	negs	r0, r0
 800060e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000612:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000616:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800061a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800061e:	f43f aed8 	beq.w	80003d2 <__adddf3+0xe6>
 8000622:	f04f 0203 	mov.w	r2, #3
 8000626:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800062a:	bf18      	it	ne
 800062c:	3203      	addne	r2, #3
 800062e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000632:	bf18      	it	ne
 8000634:	3203      	addne	r2, #3
 8000636:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800063a:	f1c2 0320 	rsb	r3, r2, #32
 800063e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000642:	fa20 f002 	lsr.w	r0, r0, r2
 8000646:	fa01 fe03 	lsl.w	lr, r1, r3
 800064a:	ea40 000e 	orr.w	r0, r0, lr
 800064e:	fa21 f102 	lsr.w	r1, r1, r2
 8000652:	4414      	add	r4, r2
 8000654:	e6bd      	b.n	80003d2 <__adddf3+0xe6>
 8000656:	bf00      	nop

08000658 <__aeabi_dmul>:
 8000658:	b570      	push	{r4, r5, r6, lr}
 800065a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800065e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000662:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000666:	bf1d      	ittte	ne
 8000668:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800066c:	ea94 0f0c 	teqne	r4, ip
 8000670:	ea95 0f0c 	teqne	r5, ip
 8000674:	f000 f8de 	bleq	8000834 <__aeabi_dmul+0x1dc>
 8000678:	442c      	add	r4, r5
 800067a:	ea81 0603 	eor.w	r6, r1, r3
 800067e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000682:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000686:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800068a:	bf18      	it	ne
 800068c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000690:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000694:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000698:	d038      	beq.n	800070c <__aeabi_dmul+0xb4>
 800069a:	fba0 ce02 	umull	ip, lr, r0, r2
 800069e:	f04f 0500 	mov.w	r5, #0
 80006a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006ae:	f04f 0600 	mov.w	r6, #0
 80006b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006b6:	f09c 0f00 	teq	ip, #0
 80006ba:	bf18      	it	ne
 80006bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006cc:	d204      	bcs.n	80006d8 <__aeabi_dmul+0x80>
 80006ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006d2:	416d      	adcs	r5, r5
 80006d4:	eb46 0606 	adc.w	r6, r6, r6
 80006d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006f0:	bf88      	it	hi
 80006f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006f6:	d81e      	bhi.n	8000736 <__aeabi_dmul+0xde>
 80006f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006fc:	bf08      	it	eq
 80006fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000702:	f150 0000 	adcs.w	r0, r0, #0
 8000706:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800070a:	bd70      	pop	{r4, r5, r6, pc}
 800070c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000710:	ea46 0101 	orr.w	r1, r6, r1
 8000714:	ea40 0002 	orr.w	r0, r0, r2
 8000718:	ea81 0103 	eor.w	r1, r1, r3
 800071c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000720:	bfc2      	ittt	gt
 8000722:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000726:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800072a:	bd70      	popgt	{r4, r5, r6, pc}
 800072c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000730:	f04f 0e00 	mov.w	lr, #0
 8000734:	3c01      	subs	r4, #1
 8000736:	f300 80ab 	bgt.w	8000890 <__aeabi_dmul+0x238>
 800073a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800073e:	bfde      	ittt	le
 8000740:	2000      	movle	r0, #0
 8000742:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000746:	bd70      	pople	{r4, r5, r6, pc}
 8000748:	f1c4 0400 	rsb	r4, r4, #0
 800074c:	3c20      	subs	r4, #32
 800074e:	da35      	bge.n	80007bc <__aeabi_dmul+0x164>
 8000750:	340c      	adds	r4, #12
 8000752:	dc1b      	bgt.n	800078c <__aeabi_dmul+0x134>
 8000754:	f104 0414 	add.w	r4, r4, #20
 8000758:	f1c4 0520 	rsb	r5, r4, #32
 800075c:	fa00 f305 	lsl.w	r3, r0, r5
 8000760:	fa20 f004 	lsr.w	r0, r0, r4
 8000764:	fa01 f205 	lsl.w	r2, r1, r5
 8000768:	ea40 0002 	orr.w	r0, r0, r2
 800076c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000770:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000774:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000778:	fa21 f604 	lsr.w	r6, r1, r4
 800077c:	eb42 0106 	adc.w	r1, r2, r6
 8000780:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000784:	bf08      	it	eq
 8000786:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800078a:	bd70      	pop	{r4, r5, r6, pc}
 800078c:	f1c4 040c 	rsb	r4, r4, #12
 8000790:	f1c4 0520 	rsb	r5, r4, #32
 8000794:	fa00 f304 	lsl.w	r3, r0, r4
 8000798:	fa20 f005 	lsr.w	r0, r0, r5
 800079c:	fa01 f204 	lsl.w	r2, r1, r4
 80007a0:	ea40 0002 	orr.w	r0, r0, r2
 80007a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007ac:	f141 0100 	adc.w	r1, r1, #0
 80007b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007b4:	bf08      	it	eq
 80007b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ba:	bd70      	pop	{r4, r5, r6, pc}
 80007bc:	f1c4 0520 	rsb	r5, r4, #32
 80007c0:	fa00 f205 	lsl.w	r2, r0, r5
 80007c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007c8:	fa20 f304 	lsr.w	r3, r0, r4
 80007cc:	fa01 f205 	lsl.w	r2, r1, r5
 80007d0:	ea43 0302 	orr.w	r3, r3, r2
 80007d4:	fa21 f004 	lsr.w	r0, r1, r4
 80007d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007dc:	fa21 f204 	lsr.w	r2, r1, r4
 80007e0:	ea20 0002 	bic.w	r0, r0, r2
 80007e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ec:	bf08      	it	eq
 80007ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007f2:	bd70      	pop	{r4, r5, r6, pc}
 80007f4:	f094 0f00 	teq	r4, #0
 80007f8:	d10f      	bne.n	800081a <__aeabi_dmul+0x1c2>
 80007fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007fe:	0040      	lsls	r0, r0, #1
 8000800:	eb41 0101 	adc.w	r1, r1, r1
 8000804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000808:	bf08      	it	eq
 800080a:	3c01      	subeq	r4, #1
 800080c:	d0f7      	beq.n	80007fe <__aeabi_dmul+0x1a6>
 800080e:	ea41 0106 	orr.w	r1, r1, r6
 8000812:	f095 0f00 	teq	r5, #0
 8000816:	bf18      	it	ne
 8000818:	4770      	bxne	lr
 800081a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800081e:	0052      	lsls	r2, r2, #1
 8000820:	eb43 0303 	adc.w	r3, r3, r3
 8000824:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000828:	bf08      	it	eq
 800082a:	3d01      	subeq	r5, #1
 800082c:	d0f7      	beq.n	800081e <__aeabi_dmul+0x1c6>
 800082e:	ea43 0306 	orr.w	r3, r3, r6
 8000832:	4770      	bx	lr
 8000834:	ea94 0f0c 	teq	r4, ip
 8000838:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800083c:	bf18      	it	ne
 800083e:	ea95 0f0c 	teqne	r5, ip
 8000842:	d00c      	beq.n	800085e <__aeabi_dmul+0x206>
 8000844:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000848:	bf18      	it	ne
 800084a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800084e:	d1d1      	bne.n	80007f4 <__aeabi_dmul+0x19c>
 8000850:	ea81 0103 	eor.w	r1, r1, r3
 8000854:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000858:	f04f 0000 	mov.w	r0, #0
 800085c:	bd70      	pop	{r4, r5, r6, pc}
 800085e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000862:	bf06      	itte	eq
 8000864:	4610      	moveq	r0, r2
 8000866:	4619      	moveq	r1, r3
 8000868:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800086c:	d019      	beq.n	80008a2 <__aeabi_dmul+0x24a>
 800086e:	ea94 0f0c 	teq	r4, ip
 8000872:	d102      	bne.n	800087a <__aeabi_dmul+0x222>
 8000874:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000878:	d113      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800087a:	ea95 0f0c 	teq	r5, ip
 800087e:	d105      	bne.n	800088c <__aeabi_dmul+0x234>
 8000880:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000884:	bf1c      	itt	ne
 8000886:	4610      	movne	r0, r2
 8000888:	4619      	movne	r1, r3
 800088a:	d10a      	bne.n	80008a2 <__aeabi_dmul+0x24a>
 800088c:	ea81 0103 	eor.w	r1, r1, r3
 8000890:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000894:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000898:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800089c:	f04f 0000 	mov.w	r0, #0
 80008a0:	bd70      	pop	{r4, r5, r6, pc}
 80008a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008aa:	bd70      	pop	{r4, r5, r6, pc}

080008ac <__aeabi_ddiv>:
 80008ac:	b570      	push	{r4, r5, r6, lr}
 80008ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ba:	bf1d      	ittte	ne
 80008bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008c0:	ea94 0f0c 	teqne	r4, ip
 80008c4:	ea95 0f0c 	teqne	r5, ip
 80008c8:	f000 f8a7 	bleq	8000a1a <__aeabi_ddiv+0x16e>
 80008cc:	eba4 0405 	sub.w	r4, r4, r5
 80008d0:	ea81 0e03 	eor.w	lr, r1, r3
 80008d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008dc:	f000 8088 	beq.w	80009f0 <__aeabi_ddiv+0x144>
 80008e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000900:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000904:	429d      	cmp	r5, r3
 8000906:	bf08      	it	eq
 8000908:	4296      	cmpeq	r6, r2
 800090a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800090e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000912:	d202      	bcs.n	800091a <__aeabi_ddiv+0x6e>
 8000914:	085b      	lsrs	r3, r3, #1
 8000916:	ea4f 0232 	mov.w	r2, r2, rrx
 800091a:	1ab6      	subs	r6, r6, r2
 800091c:	eb65 0503 	sbc.w	r5, r5, r3
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800092a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000970:	085b      	lsrs	r3, r3, #1
 8000972:	ea4f 0232 	mov.w	r2, r2, rrx
 8000976:	ebb6 0e02 	subs.w	lr, r6, r2
 800097a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800097e:	bf22      	ittt	cs
 8000980:	1ab6      	subcs	r6, r6, r2
 8000982:	4675      	movcs	r5, lr
 8000984:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000988:	ea55 0e06 	orrs.w	lr, r5, r6
 800098c:	d018      	beq.n	80009c0 <__aeabi_ddiv+0x114>
 800098e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000992:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000996:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800099a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800099e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009aa:	d1c0      	bne.n	800092e <__aeabi_ddiv+0x82>
 80009ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009b0:	d10b      	bne.n	80009ca <__aeabi_ddiv+0x11e>
 80009b2:	ea41 0100 	orr.w	r1, r1, r0
 80009b6:	f04f 0000 	mov.w	r0, #0
 80009ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009be:	e7b6      	b.n	800092e <__aeabi_ddiv+0x82>
 80009c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c4:	bf04      	itt	eq
 80009c6:	4301      	orreq	r1, r0
 80009c8:	2000      	moveq	r0, #0
 80009ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009ce:	bf88      	it	hi
 80009d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009d4:	f63f aeaf 	bhi.w	8000736 <__aeabi_dmul+0xde>
 80009d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009dc:	bf04      	itt	eq
 80009de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009e6:	f150 0000 	adcs.w	r0, r0, #0
 80009ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	pop	{r4, r5, r6, pc}
 80009f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009fc:	bfc2      	ittt	gt
 80009fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a02:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a06:	bd70      	popgt	{r4, r5, r6, pc}
 8000a08:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a0c:	f04f 0e00 	mov.w	lr, #0
 8000a10:	3c01      	subs	r4, #1
 8000a12:	e690      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a14:	ea45 0e06 	orr.w	lr, r5, r6
 8000a18:	e68d      	b.n	8000736 <__aeabi_dmul+0xde>
 8000a1a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a1e:	ea94 0f0c 	teq	r4, ip
 8000a22:	bf08      	it	eq
 8000a24:	ea95 0f0c 	teqeq	r5, ip
 8000a28:	f43f af3b 	beq.w	80008a2 <__aeabi_dmul+0x24a>
 8000a2c:	ea94 0f0c 	teq	r4, ip
 8000a30:	d10a      	bne.n	8000a48 <__aeabi_ddiv+0x19c>
 8000a32:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a36:	f47f af34 	bne.w	80008a2 <__aeabi_dmul+0x24a>
 8000a3a:	ea95 0f0c 	teq	r5, ip
 8000a3e:	f47f af25 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a42:	4610      	mov	r0, r2
 8000a44:	4619      	mov	r1, r3
 8000a46:	e72c      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a48:	ea95 0f0c 	teq	r5, ip
 8000a4c:	d106      	bne.n	8000a5c <__aeabi_ddiv+0x1b0>
 8000a4e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a52:	f43f aefd 	beq.w	8000850 <__aeabi_dmul+0x1f8>
 8000a56:	4610      	mov	r0, r2
 8000a58:	4619      	mov	r1, r3
 8000a5a:	e722      	b.n	80008a2 <__aeabi_dmul+0x24a>
 8000a5c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a66:	f47f aec5 	bne.w	80007f4 <__aeabi_dmul+0x19c>
 8000a6a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a6e:	f47f af0d 	bne.w	800088c <__aeabi_dmul+0x234>
 8000a72:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a76:	f47f aeeb 	bne.w	8000850 <__aeabi_dmul+0x1f8>
 8000a7a:	e712      	b.n	80008a2 <__aeabi_dmul+0x24a>

08000a7c <__gedf2>:
 8000a7c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a80:	e006      	b.n	8000a90 <__cmpdf2+0x4>
 8000a82:	bf00      	nop

08000a84 <__ledf2>:
 8000a84:	f04f 0c01 	mov.w	ip, #1
 8000a88:	e002      	b.n	8000a90 <__cmpdf2+0x4>
 8000a8a:	bf00      	nop

08000a8c <__cmpdf2>:
 8000a8c:	f04f 0c01 	mov.w	ip, #1
 8000a90:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a94:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	bf18      	it	ne
 8000aa2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000aa6:	d01b      	beq.n	8000ae0 <__cmpdf2+0x54>
 8000aa8:	b001      	add	sp, #4
 8000aaa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000aae:	bf0c      	ite	eq
 8000ab0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ab4:	ea91 0f03 	teqne	r1, r3
 8000ab8:	bf02      	ittt	eq
 8000aba:	ea90 0f02 	teqeq	r0, r2
 8000abe:	2000      	moveq	r0, #0
 8000ac0:	4770      	bxeq	lr
 8000ac2:	f110 0f00 	cmn.w	r0, #0
 8000ac6:	ea91 0f03 	teq	r1, r3
 8000aca:	bf58      	it	pl
 8000acc:	4299      	cmppl	r1, r3
 8000ace:	bf08      	it	eq
 8000ad0:	4290      	cmpeq	r0, r2
 8000ad2:	bf2c      	ite	cs
 8000ad4:	17d8      	asrcs	r0, r3, #31
 8000ad6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ada:	f040 0001 	orr.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ae4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae8:	d102      	bne.n	8000af0 <__cmpdf2+0x64>
 8000aea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aee:	d107      	bne.n	8000b00 <__cmpdf2+0x74>
 8000af0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d1d6      	bne.n	8000aa8 <__cmpdf2+0x1c>
 8000afa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000afe:	d0d3      	beq.n	8000aa8 <__cmpdf2+0x1c>
 8000b00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_cdrcmple>:
 8000b08:	4684      	mov	ip, r0
 8000b0a:	4610      	mov	r0, r2
 8000b0c:	4662      	mov	r2, ip
 8000b0e:	468c      	mov	ip, r1
 8000b10:	4619      	mov	r1, r3
 8000b12:	4663      	mov	r3, ip
 8000b14:	e000      	b.n	8000b18 <__aeabi_cdcmpeq>
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdcmpeq>:
 8000b18:	b501      	push	{r0, lr}
 8000b1a:	f7ff ffb7 	bl	8000a8c <__cmpdf2>
 8000b1e:	2800      	cmp	r0, #0
 8000b20:	bf48      	it	mi
 8000b22:	f110 0f00 	cmnmi.w	r0, #0
 8000b26:	bd01      	pop	{r0, pc}

08000b28 <__aeabi_dcmpeq>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff fff4 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b30:	bf0c      	ite	eq
 8000b32:	2001      	moveq	r0, #1
 8000b34:	2000      	movne	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmplt>:
 8000b3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b40:	f7ff ffea 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b44:	bf34      	ite	cc
 8000b46:	2001      	movcc	r0, #1
 8000b48:	2000      	movcs	r0, #0
 8000b4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4e:	bf00      	nop

08000b50 <__aeabi_dcmple>:
 8000b50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b54:	f7ff ffe0 	bl	8000b18 <__aeabi_cdcmpeq>
 8000b58:	bf94      	ite	ls
 8000b5a:	2001      	movls	r0, #1
 8000b5c:	2000      	movhi	r0, #0
 8000b5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b62:	bf00      	nop

08000b64 <__aeabi_dcmpge>:
 8000b64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b68:	f7ff ffce 	bl	8000b08 <__aeabi_cdrcmple>
 8000b6c:	bf94      	ite	ls
 8000b6e:	2001      	movls	r0, #1
 8000b70:	2000      	movhi	r0, #0
 8000b72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b76:	bf00      	nop

08000b78 <__aeabi_dcmpgt>:
 8000b78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b7c:	f7ff ffc4 	bl	8000b08 <__aeabi_cdrcmple>
 8000b80:	bf34      	ite	cc
 8000b82:	2001      	movcc	r0, #1
 8000b84:	2000      	movcs	r0, #0
 8000b86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b8a:	bf00      	nop

08000b8c <__aeabi_dcmpun>:
 8000b8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b94:	d102      	bne.n	8000b9c <__aeabi_dcmpun+0x10>
 8000b96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b9a:	d10a      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000b9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x20>
 8000ba6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000baa:	d102      	bne.n	8000bb2 <__aeabi_dcmpun+0x26>
 8000bac:	f04f 0000 	mov.w	r0, #0
 8000bb0:	4770      	bx	lr
 8000bb2:	f04f 0001 	mov.w	r0, #1
 8000bb6:	4770      	bx	lr

08000bb8 <__aeabi_d2iz>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bc0:	d215      	bcs.n	8000bee <__aeabi_d2iz+0x36>
 8000bc2:	d511      	bpl.n	8000be8 <__aeabi_d2iz+0x30>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d912      	bls.n	8000bf4 <__aeabi_d2iz+0x3c>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bde:	fa23 f002 	lsr.w	r0, r3, r2
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bf2:	d105      	bne.n	8000c00 <__aeabi_d2iz+0x48>
 8000bf4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000bf8:	bf08      	it	eq
 8000bfa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bfe:	4770      	bx	lr
 8000c00:	f04f 0000 	mov.w	r0, #0
 8000c04:	4770      	bx	lr
 8000c06:	bf00      	nop

08000c08 <__aeabi_d2uiz>:
 8000c08:	004a      	lsls	r2, r1, #1
 8000c0a:	d211      	bcs.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000c10:	d211      	bcs.n	8000c36 <__aeabi_d2uiz+0x2e>
 8000c12:	d50d      	bpl.n	8000c30 <__aeabi_d2uiz+0x28>
 8000c14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000c18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000c1c:	d40e      	bmi.n	8000c3c <__aeabi_d2uiz+0x34>
 8000c1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000c26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000c2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000c2e:	4770      	bx	lr
 8000c30:	f04f 0000 	mov.w	r0, #0
 8000c34:	4770      	bx	lr
 8000c36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c3a:	d102      	bne.n	8000c42 <__aeabi_d2uiz+0x3a>
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c40:	4770      	bx	lr
 8000c42:	f04f 0000 	mov.w	r0, #0
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_d2f>:
 8000c48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c50:	bf24      	itt	cs
 8000c52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c5a:	d90d      	bls.n	8000c78 <__aeabi_d2f+0x30>
 8000c5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c70:	bf08      	it	eq
 8000c72:	f020 0001 	biceq.w	r0, r0, #1
 8000c76:	4770      	bx	lr
 8000c78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c7c:	d121      	bne.n	8000cc2 <__aeabi_d2f+0x7a>
 8000c7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c82:	bfbc      	itt	lt
 8000c84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c88:	4770      	bxlt	lr
 8000c8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c92:	f1c2 0218 	rsb	r2, r2, #24
 8000c96:	f1c2 0c20 	rsb	ip, r2, #32
 8000c9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ca2:	bf18      	it	ne
 8000ca4:	f040 0001 	orrne.w	r0, r0, #1
 8000ca8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000cac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000cb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000cb4:	ea40 000c 	orr.w	r0, r0, ip
 8000cb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000cbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000cc0:	e7cc      	b.n	8000c5c <__aeabi_d2f+0x14>
 8000cc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000cc6:	d107      	bne.n	8000cd8 <__aeabi_d2f+0x90>
 8000cc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ccc:	bf1e      	ittt	ne
 8000cce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000cd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000cd6:	4770      	bxne	lr
 8000cd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ce0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce4:	4770      	bx	lr
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cfc:	f000 b9a6 	b.w	800104c <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f83c 	bl	8000d84 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__aeabi_d2lz>:
 8000d18:	b538      	push	{r3, r4, r5, lr}
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2300      	movs	r3, #0
 8000d1e:	4604      	mov	r4, r0
 8000d20:	460d      	mov	r5, r1
 8000d22:	f7ff ff0b 	bl	8000b3c <__aeabi_dcmplt>
 8000d26:	b928      	cbnz	r0, 8000d34 <__aeabi_d2lz+0x1c>
 8000d28:	4620      	mov	r0, r4
 8000d2a:	4629      	mov	r1, r5
 8000d2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000d30:	f000 b80a 	b.w	8000d48 <__aeabi_d2ulz>
 8000d34:	4620      	mov	r0, r4
 8000d36:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000d3a:	f000 f805 	bl	8000d48 <__aeabi_d2ulz>
 8000d3e:	4240      	negs	r0, r0
 8000d40:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d44:	bd38      	pop	{r3, r4, r5, pc}
 8000d46:	bf00      	nop

08000d48 <__aeabi_d2ulz>:
 8000d48:	b5d0      	push	{r4, r6, r7, lr}
 8000d4a:	4b0c      	ldr	r3, [pc, #48]	; (8000d7c <__aeabi_d2ulz+0x34>)
 8000d4c:	2200      	movs	r2, #0
 8000d4e:	4606      	mov	r6, r0
 8000d50:	460f      	mov	r7, r1
 8000d52:	f7ff fc81 	bl	8000658 <__aeabi_dmul>
 8000d56:	f7ff ff57 	bl	8000c08 <__aeabi_d2uiz>
 8000d5a:	4604      	mov	r4, r0
 8000d5c:	f7ff fc02 	bl	8000564 <__aeabi_ui2d>
 8000d60:	4b07      	ldr	r3, [pc, #28]	; (8000d80 <__aeabi_d2ulz+0x38>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	f7ff fc78 	bl	8000658 <__aeabi_dmul>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	460b      	mov	r3, r1
 8000d6c:	4630      	mov	r0, r6
 8000d6e:	4639      	mov	r1, r7
 8000d70:	f7ff faba 	bl	80002e8 <__aeabi_dsub>
 8000d74:	f7ff ff48 	bl	8000c08 <__aeabi_d2uiz>
 8000d78:	4621      	mov	r1, r4
 8000d7a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d7c:	3df00000 	.word	0x3df00000
 8000d80:	41f00000 	.word	0x41f00000

08000d84 <__udivmoddi4>:
 8000d84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d88:	9e08      	ldr	r6, [sp, #32]
 8000d8a:	460d      	mov	r5, r1
 8000d8c:	4604      	mov	r4, r0
 8000d8e:	460f      	mov	r7, r1
 8000d90:	2b00      	cmp	r3, #0
 8000d92:	d14a      	bne.n	8000e2a <__udivmoddi4+0xa6>
 8000d94:	428a      	cmp	r2, r1
 8000d96:	4694      	mov	ip, r2
 8000d98:	d965      	bls.n	8000e66 <__udivmoddi4+0xe2>
 8000d9a:	fab2 f382 	clz	r3, r2
 8000d9e:	b143      	cbz	r3, 8000db2 <__udivmoddi4+0x2e>
 8000da0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000da4:	f1c3 0220 	rsb	r2, r3, #32
 8000da8:	409f      	lsls	r7, r3
 8000daa:	fa20 f202 	lsr.w	r2, r0, r2
 8000dae:	4317      	orrs	r7, r2
 8000db0:	409c      	lsls	r4, r3
 8000db2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000db6:	fa1f f58c 	uxth.w	r5, ip
 8000dba:	fbb7 f1fe 	udiv	r1, r7, lr
 8000dbe:	0c22      	lsrs	r2, r4, #16
 8000dc0:	fb0e 7711 	mls	r7, lr, r1, r7
 8000dc4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000dc8:	fb01 f005 	mul.w	r0, r1, r5
 8000dcc:	4290      	cmp	r0, r2
 8000dce:	d90a      	bls.n	8000de6 <__udivmoddi4+0x62>
 8000dd0:	eb1c 0202 	adds.w	r2, ip, r2
 8000dd4:	f101 37ff 	add.w	r7, r1, #4294967295
 8000dd8:	f080 811c 	bcs.w	8001014 <__udivmoddi4+0x290>
 8000ddc:	4290      	cmp	r0, r2
 8000dde:	f240 8119 	bls.w	8001014 <__udivmoddi4+0x290>
 8000de2:	3902      	subs	r1, #2
 8000de4:	4462      	add	r2, ip
 8000de6:	1a12      	subs	r2, r2, r0
 8000de8:	b2a4      	uxth	r4, r4
 8000dea:	fbb2 f0fe 	udiv	r0, r2, lr
 8000dee:	fb0e 2210 	mls	r2, lr, r0, r2
 8000df2:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000df6:	fb00 f505 	mul.w	r5, r0, r5
 8000dfa:	42a5      	cmp	r5, r4
 8000dfc:	d90a      	bls.n	8000e14 <__udivmoddi4+0x90>
 8000dfe:	eb1c 0404 	adds.w	r4, ip, r4
 8000e02:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e06:	f080 8107 	bcs.w	8001018 <__udivmoddi4+0x294>
 8000e0a:	42a5      	cmp	r5, r4
 8000e0c:	f240 8104 	bls.w	8001018 <__udivmoddi4+0x294>
 8000e10:	4464      	add	r4, ip
 8000e12:	3802      	subs	r0, #2
 8000e14:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000e18:	1b64      	subs	r4, r4, r5
 8000e1a:	2100      	movs	r1, #0
 8000e1c:	b11e      	cbz	r6, 8000e26 <__udivmoddi4+0xa2>
 8000e1e:	40dc      	lsrs	r4, r3
 8000e20:	2300      	movs	r3, #0
 8000e22:	e9c6 4300 	strd	r4, r3, [r6]
 8000e26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e2a:	428b      	cmp	r3, r1
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0xbc>
 8000e2e:	2e00      	cmp	r6, #0
 8000e30:	f000 80ed 	beq.w	800100e <__udivmoddi4+0x28a>
 8000e34:	2100      	movs	r1, #0
 8000e36:	e9c6 0500 	strd	r0, r5, [r6]
 8000e3a:	4608      	mov	r0, r1
 8000e3c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e40:	fab3 f183 	clz	r1, r3
 8000e44:	2900      	cmp	r1, #0
 8000e46:	d149      	bne.n	8000edc <__udivmoddi4+0x158>
 8000e48:	42ab      	cmp	r3, r5
 8000e4a:	d302      	bcc.n	8000e52 <__udivmoddi4+0xce>
 8000e4c:	4282      	cmp	r2, r0
 8000e4e:	f200 80f8 	bhi.w	8001042 <__udivmoddi4+0x2be>
 8000e52:	1a84      	subs	r4, r0, r2
 8000e54:	eb65 0203 	sbc.w	r2, r5, r3
 8000e58:	2001      	movs	r0, #1
 8000e5a:	4617      	mov	r7, r2
 8000e5c:	2e00      	cmp	r6, #0
 8000e5e:	d0e2      	beq.n	8000e26 <__udivmoddi4+0xa2>
 8000e60:	e9c6 4700 	strd	r4, r7, [r6]
 8000e64:	e7df      	b.n	8000e26 <__udivmoddi4+0xa2>
 8000e66:	b902      	cbnz	r2, 8000e6a <__udivmoddi4+0xe6>
 8000e68:	deff      	udf	#255	; 0xff
 8000e6a:	fab2 f382 	clz	r3, r2
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	f040 8090 	bne.w	8000f94 <__udivmoddi4+0x210>
 8000e74:	1a8a      	subs	r2, r1, r2
 8000e76:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e7a:	fa1f fe8c 	uxth.w	lr, ip
 8000e7e:	2101      	movs	r1, #1
 8000e80:	fbb2 f5f7 	udiv	r5, r2, r7
 8000e84:	fb07 2015 	mls	r0, r7, r5, r2
 8000e88:	0c22      	lsrs	r2, r4, #16
 8000e8a:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000e8e:	fb0e f005 	mul.w	r0, lr, r5
 8000e92:	4290      	cmp	r0, r2
 8000e94:	d908      	bls.n	8000ea8 <__udivmoddi4+0x124>
 8000e96:	eb1c 0202 	adds.w	r2, ip, r2
 8000e9a:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x122>
 8000ea0:	4290      	cmp	r0, r2
 8000ea2:	f200 80cb 	bhi.w	800103c <__udivmoddi4+0x2b8>
 8000ea6:	4645      	mov	r5, r8
 8000ea8:	1a12      	subs	r2, r2, r0
 8000eaa:	b2a4      	uxth	r4, r4
 8000eac:	fbb2 f0f7 	udiv	r0, r2, r7
 8000eb0:	fb07 2210 	mls	r2, r7, r0, r2
 8000eb4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000eb8:	fb0e fe00 	mul.w	lr, lr, r0
 8000ebc:	45a6      	cmp	lr, r4
 8000ebe:	d908      	bls.n	8000ed2 <__udivmoddi4+0x14e>
 8000ec0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ec4:	f100 32ff 	add.w	r2, r0, #4294967295
 8000ec8:	d202      	bcs.n	8000ed0 <__udivmoddi4+0x14c>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f200 80bb 	bhi.w	8001046 <__udivmoddi4+0x2c2>
 8000ed0:	4610      	mov	r0, r2
 8000ed2:	eba4 040e 	sub.w	r4, r4, lr
 8000ed6:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000eda:	e79f      	b.n	8000e1c <__udivmoddi4+0x98>
 8000edc:	f1c1 0720 	rsb	r7, r1, #32
 8000ee0:	408b      	lsls	r3, r1
 8000ee2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000ee6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000eea:	fa05 f401 	lsl.w	r4, r5, r1
 8000eee:	fa20 f307 	lsr.w	r3, r0, r7
 8000ef2:	40fd      	lsrs	r5, r7
 8000ef4:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ef8:	4323      	orrs	r3, r4
 8000efa:	fbb5 f8f9 	udiv	r8, r5, r9
 8000efe:	fa1f fe8c 	uxth.w	lr, ip
 8000f02:	fb09 5518 	mls	r5, r9, r8, r5
 8000f06:	0c1c      	lsrs	r4, r3, #16
 8000f08:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000f0c:	fb08 f50e 	mul.w	r5, r8, lr
 8000f10:	42a5      	cmp	r5, r4
 8000f12:	fa02 f201 	lsl.w	r2, r2, r1
 8000f16:	fa00 f001 	lsl.w	r0, r0, r1
 8000f1a:	d90b      	bls.n	8000f34 <__udivmoddi4+0x1b0>
 8000f1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f20:	f108 3aff 	add.w	sl, r8, #4294967295
 8000f24:	f080 8088 	bcs.w	8001038 <__udivmoddi4+0x2b4>
 8000f28:	42a5      	cmp	r5, r4
 8000f2a:	f240 8085 	bls.w	8001038 <__udivmoddi4+0x2b4>
 8000f2e:	f1a8 0802 	sub.w	r8, r8, #2
 8000f32:	4464      	add	r4, ip
 8000f34:	1b64      	subs	r4, r4, r5
 8000f36:	b29d      	uxth	r5, r3
 8000f38:	fbb4 f3f9 	udiv	r3, r4, r9
 8000f3c:	fb09 4413 	mls	r4, r9, r3, r4
 8000f40:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000f44:	fb03 fe0e 	mul.w	lr, r3, lr
 8000f48:	45a6      	cmp	lr, r4
 8000f4a:	d908      	bls.n	8000f5e <__udivmoddi4+0x1da>
 8000f4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f50:	f103 35ff 	add.w	r5, r3, #4294967295
 8000f54:	d26c      	bcs.n	8001030 <__udivmoddi4+0x2ac>
 8000f56:	45a6      	cmp	lr, r4
 8000f58:	d96a      	bls.n	8001030 <__udivmoddi4+0x2ac>
 8000f5a:	3b02      	subs	r3, #2
 8000f5c:	4464      	add	r4, ip
 8000f5e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000f62:	fba3 9502 	umull	r9, r5, r3, r2
 8000f66:	eba4 040e 	sub.w	r4, r4, lr
 8000f6a:	42ac      	cmp	r4, r5
 8000f6c:	46c8      	mov	r8, r9
 8000f6e:	46ae      	mov	lr, r5
 8000f70:	d356      	bcc.n	8001020 <__udivmoddi4+0x29c>
 8000f72:	d053      	beq.n	800101c <__udivmoddi4+0x298>
 8000f74:	b156      	cbz	r6, 8000f8c <__udivmoddi4+0x208>
 8000f76:	ebb0 0208 	subs.w	r2, r0, r8
 8000f7a:	eb64 040e 	sbc.w	r4, r4, lr
 8000f7e:	fa04 f707 	lsl.w	r7, r4, r7
 8000f82:	40ca      	lsrs	r2, r1
 8000f84:	40cc      	lsrs	r4, r1
 8000f86:	4317      	orrs	r7, r2
 8000f88:	e9c6 7400 	strd	r7, r4, [r6]
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	2100      	movs	r1, #0
 8000f90:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f94:	f1c3 0120 	rsb	r1, r3, #32
 8000f98:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f9c:	fa20 f201 	lsr.w	r2, r0, r1
 8000fa0:	fa25 f101 	lsr.w	r1, r5, r1
 8000fa4:	409d      	lsls	r5, r3
 8000fa6:	432a      	orrs	r2, r5
 8000fa8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000fac:	fa1f fe8c 	uxth.w	lr, ip
 8000fb0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000fb4:	fb07 1510 	mls	r5, r7, r0, r1
 8000fb8:	0c11      	lsrs	r1, r2, #16
 8000fba:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000fbe:	fb00 f50e 	mul.w	r5, r0, lr
 8000fc2:	428d      	cmp	r5, r1
 8000fc4:	fa04 f403 	lsl.w	r4, r4, r3
 8000fc8:	d908      	bls.n	8000fdc <__udivmoddi4+0x258>
 8000fca:	eb1c 0101 	adds.w	r1, ip, r1
 8000fce:	f100 38ff 	add.w	r8, r0, #4294967295
 8000fd2:	d22f      	bcs.n	8001034 <__udivmoddi4+0x2b0>
 8000fd4:	428d      	cmp	r5, r1
 8000fd6:	d92d      	bls.n	8001034 <__udivmoddi4+0x2b0>
 8000fd8:	3802      	subs	r0, #2
 8000fda:	4461      	add	r1, ip
 8000fdc:	1b49      	subs	r1, r1, r5
 8000fde:	b292      	uxth	r2, r2
 8000fe0:	fbb1 f5f7 	udiv	r5, r1, r7
 8000fe4:	fb07 1115 	mls	r1, r7, r5, r1
 8000fe8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fec:	fb05 f10e 	mul.w	r1, r5, lr
 8000ff0:	4291      	cmp	r1, r2
 8000ff2:	d908      	bls.n	8001006 <__udivmoddi4+0x282>
 8000ff4:	eb1c 0202 	adds.w	r2, ip, r2
 8000ff8:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ffc:	d216      	bcs.n	800102c <__udivmoddi4+0x2a8>
 8000ffe:	4291      	cmp	r1, r2
 8001000:	d914      	bls.n	800102c <__udivmoddi4+0x2a8>
 8001002:	3d02      	subs	r5, #2
 8001004:	4462      	add	r2, ip
 8001006:	1a52      	subs	r2, r2, r1
 8001008:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 800100c:	e738      	b.n	8000e80 <__udivmoddi4+0xfc>
 800100e:	4631      	mov	r1, r6
 8001010:	4630      	mov	r0, r6
 8001012:	e708      	b.n	8000e26 <__udivmoddi4+0xa2>
 8001014:	4639      	mov	r1, r7
 8001016:	e6e6      	b.n	8000de6 <__udivmoddi4+0x62>
 8001018:	4610      	mov	r0, r2
 800101a:	e6fb      	b.n	8000e14 <__udivmoddi4+0x90>
 800101c:	4548      	cmp	r0, r9
 800101e:	d2a9      	bcs.n	8000f74 <__udivmoddi4+0x1f0>
 8001020:	ebb9 0802 	subs.w	r8, r9, r2
 8001024:	eb65 0e0c 	sbc.w	lr, r5, ip
 8001028:	3b01      	subs	r3, #1
 800102a:	e7a3      	b.n	8000f74 <__udivmoddi4+0x1f0>
 800102c:	4645      	mov	r5, r8
 800102e:	e7ea      	b.n	8001006 <__udivmoddi4+0x282>
 8001030:	462b      	mov	r3, r5
 8001032:	e794      	b.n	8000f5e <__udivmoddi4+0x1da>
 8001034:	4640      	mov	r0, r8
 8001036:	e7d1      	b.n	8000fdc <__udivmoddi4+0x258>
 8001038:	46d0      	mov	r8, sl
 800103a:	e77b      	b.n	8000f34 <__udivmoddi4+0x1b0>
 800103c:	3d02      	subs	r5, #2
 800103e:	4462      	add	r2, ip
 8001040:	e732      	b.n	8000ea8 <__udivmoddi4+0x124>
 8001042:	4608      	mov	r0, r1
 8001044:	e70a      	b.n	8000e5c <__udivmoddi4+0xd8>
 8001046:	4464      	add	r4, ip
 8001048:	3802      	subs	r0, #2
 800104a:	e742      	b.n	8000ed2 <__udivmoddi4+0x14e>

0800104c <__aeabi_idiv0>:
 800104c:	4770      	bx	lr
 800104e:	bf00      	nop

08001050 <AS5600_Init>:
 *      Author: Kurus
 */

#include "AS5600.h"

void AS5600_Init(struct AS5600* device){
 8001050:	b480      	push	{r7}
 8001052:	b083      	sub	sp, #12
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    device->ADDRESS = _AS5600_ADDRESS;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2236      	movs	r2, #54	; 0x36
 800105c:	701a      	strb	r2, [r3, #0]
    device->ZMCO = 0;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2200      	movs	r2, #0
 8001062:	705a      	strb	r2, [r3, #1]
    device->ZPOS1 = 0;
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	2200      	movs	r2, #0
 8001068:	709a      	strb	r2, [r3, #2]
    device->ZPOS2 = 0;
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	70da      	strb	r2, [r3, #3]
    device->MPOS1 = 0;
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	711a      	strb	r2, [r3, #4]
    device->MPOS2 = 0;
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	2200      	movs	r2, #0
 800107a:	715a      	strb	r2, [r3, #5]
    device->MANG1 = 0;
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	2200      	movs	r2, #0
 8001080:	719a      	strb	r2, [r3, #6]
    device->MANG2 = 0;
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	2200      	movs	r2, #0
 8001086:	71da      	strb	r2, [r3, #7]
    device->CONF1 = 0;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	2200      	movs	r2, #0
 800108c:	721a      	strb	r2, [r3, #8]
    device->CONF2 = 0;
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	2200      	movs	r2, #0
 8001092:	725a      	strb	r2, [r3, #9]
    device->RAW_ANGLE1 = 0;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2200      	movs	r2, #0
 8001098:	729a      	strb	r2, [r3, #10]
    device->RAW_ANGLE2 = 0;
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2200      	movs	r2, #0
 800109e:	72da      	strb	r2, [r3, #11]
    device->ANGLE1 = _ANGLE;
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	220e      	movs	r2, #14
 80010a4:	731a      	strb	r2, [r3, #12]
    device->ANGLE2 = 0;
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	2200      	movs	r2, #0
 80010aa:	735a      	strb	r2, [r3, #13]
    device->STATUS = _STATUS;
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	220b      	movs	r2, #11
 80010b0:	739a      	strb	r2, [r3, #14]
    device->AGC = 0;
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2200      	movs	r2, #0
 80010b6:	73da      	strb	r2, [r3, #15]
    device->MAGNITUDE1 = 0;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	2200      	movs	r2, #0
 80010bc:	741a      	strb	r2, [r3, #16]
    device->MAGNITUDE2 = 0;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	2200      	movs	r2, #0
 80010c2:	745a      	strb	r2, [r3, #17]
}
 80010c4:	bf00      	nop
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <AS5600_Angle>:
float AS5600_Angle(struct AS5600* device)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af04      	add	r7, sp, #16
 80010d6:	6078      	str	r0, [r7, #4]
    uint16_t angle;
    HAL_I2C_Mem_Read(&hi2c1, device->ADDRESS << 1, device->ANGLE1, 1, (uint8_t*)&angle, 2, HAL_MAX_DELAY);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	b29b      	uxth	r3, r3
 80010de:	005b      	lsls	r3, r3, #1
 80010e0:	b299      	uxth	r1, r3
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	7b1b      	ldrb	r3, [r3, #12]
 80010e6:	b29a      	uxth	r2, r3
 80010e8:	f04f 33ff 	mov.w	r3, #4294967295
 80010ec:	9302      	str	r3, [sp, #8]
 80010ee:	2302      	movs	r3, #2
 80010f0:	9301      	str	r3, [sp, #4]
 80010f2:	f107 030a 	add.w	r3, r7, #10
 80010f6:	9300      	str	r3, [sp, #0]
 80010f8:	2301      	movs	r3, #1
 80010fa:	4815      	ldr	r0, [pc, #84]	; (8001150 <AS5600_Angle+0x80>)
 80010fc:	f002 f908 	bl	8003310 <HAL_I2C_Mem_Read>
    angle = (angle >> 8) | (angle << 8); // zamiana bitow LH
 8001100:	897b      	ldrh	r3, [r7, #10]
 8001102:	0a1b      	lsrs	r3, r3, #8
 8001104:	b29b      	uxth	r3, r3
 8001106:	b21a      	sxth	r2, r3
 8001108:	897b      	ldrh	r3, [r7, #10]
 800110a:	021b      	lsls	r3, r3, #8
 800110c:	b21b      	sxth	r3, r3
 800110e:	4313      	orrs	r3, r2
 8001110:	b21b      	sxth	r3, r3
 8001112:	b29b      	uxth	r3, r3
 8001114:	817b      	strh	r3, [r7, #10]
    float angle_float = angle / 11.38;
 8001116:	897b      	ldrh	r3, [r7, #10]
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff fa33 	bl	8000584 <__aeabi_i2d>
 800111e:	a30a      	add	r3, pc, #40	; (adr r3, 8001148 <AS5600_Angle+0x78>)
 8001120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001124:	f7ff fbc2 	bl	80008ac <__aeabi_ddiv>
 8001128:	4602      	mov	r2, r0
 800112a:	460b      	mov	r3, r1
 800112c:	4610      	mov	r0, r2
 800112e:	4619      	mov	r1, r3
 8001130:	f7ff fd8a 	bl	8000c48 <__aeabi_d2f>
 8001134:	4603      	mov	r3, r0
 8001136:	60fb      	str	r3, [r7, #12]
    return angle_float;
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	ee07 3a90 	vmov	s15, r3
}
 800113e:	eeb0 0a67 	vmov.f32	s0, s15
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	5c28f5c3 	.word	0x5c28f5c3
 800114c:	4026c28f 	.word	0x4026c28f
 8001150:	20000478 	.word	0x20000478

08001154 <HAL_TIM_PeriodElapsedCallback>:
	handle->_DEBUG = "DEBUG";
	handle->_MANUAL = "MANUAL";
	handle->_REMOTE = "REMOTE";
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8001154:	b580      	push	{r7, lr}
 8001156:	b08c      	sub	sp, #48	; 0x30
 8001158:	af02      	add	r7, sp, #8
 800115a:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3) {
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	4a14      	ldr	r2, [pc, #80]	; (80011b4 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8001162:	4293      	cmp	r3, r2
 8001164:	d122      	bne.n	80011ac <HAL_TIM_PeriodElapsedCallback+0x58>
	  float zmienna = AS5600_Angle(&device);
 8001166:	4814      	ldr	r0, [pc, #80]	; (80011b8 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8001168:	f7ff ffb2 	bl	80010d0 <AS5600_Angle>
 800116c:	ed87 0a09 	vstr	s0, [r7, #36]	; 0x24
	  char buffer[20];  // Adjust the size as needed
	  int len = snprintf(buffer, sizeof(buffer), "%f", zmienna);
 8001170:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001172:	f7ff fa19 	bl	80005a8 <__aeabi_f2d>
 8001176:	4602      	mov	r2, r0
 8001178:	460b      	mov	r3, r1
 800117a:	f107 000c 	add.w	r0, r7, #12
 800117e:	e9cd 2300 	strd	r2, r3, [sp]
 8001182:	4a0e      	ldr	r2, [pc, #56]	; (80011bc <HAL_TIM_PeriodElapsedCallback+0x68>)
 8001184:	2114      	movs	r1, #20
 8001186:	f008 fe07 	bl	8009d98 <sniprintf>
 800118a:	6238      	str	r0, [r7, #32]
	  buffer[len++] = '\r';
 800118c:	6a3b      	ldr	r3, [r7, #32]
 800118e:	1c5a      	adds	r2, r3, #1
 8001190:	623a      	str	r2, [r7, #32]
 8001192:	3328      	adds	r3, #40	; 0x28
 8001194:	443b      	add	r3, r7
 8001196:	220d      	movs	r2, #13
 8001198:	f803 2c1c 	strb.w	r2, [r3, #-28]
	  buffer[len++] = '\n';
 800119c:	6a3b      	ldr	r3, [r7, #32]
 800119e:	1c5a      	adds	r2, r3, #1
 80011a0:	623a      	str	r2, [r7, #32]
 80011a2:	3328      	adds	r3, #40	; 0x28
 80011a4:	443b      	add	r3, r7
 80011a6:	220a      	movs	r2, #10
 80011a8:	f803 2c1c 	strb.w	r2, [r3, #-28]
	  //HAL_UART_Transmit(&huart3, (uint8_t *)buffer, len, 100);
	}
}
 80011ac:	bf00      	nop
 80011ae:	3728      	adds	r7, #40	; 0x28
 80011b0:	46bd      	mov	sp, r7
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40000400 	.word	0x40000400
 80011b8:	200004cc 	.word	0x200004cc
 80011bc:	0800d770 	.word	0x0800d770

080011c0 <HAL_UART_RxCpltCallback>:
uint8_t rxIndex = 0;

void processCommand(char *command);

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
//			}
//			_buffer.bufferIndex = 0;
//		}
//		HAL_UART_Receive_IT(&huart3, (uint8_t*)&msg, 1);
//	}
	if (huart == &huart3)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	4a22      	ldr	r2, [pc, #136]	; (8001254 <HAL_UART_RxCpltCallback+0x94>)
 80011cc:	4293      	cmp	r3, r2
 80011ce:	d13c      	bne.n	800124a <HAL_UART_RxCpltCallback+0x8a>
	  {
	    if (rxBuffer[rxIndex] == '\n' || rxBuffer[rxIndex] == '\r')
 80011d0:	4b21      	ldr	r3, [pc, #132]	; (8001258 <HAL_UART_RxCpltCallback+0x98>)
 80011d2:	781b      	ldrb	r3, [r3, #0]
 80011d4:	461a      	mov	r2, r3
 80011d6:	4b21      	ldr	r3, [pc, #132]	; (800125c <HAL_UART_RxCpltCallback+0x9c>)
 80011d8:	5c9b      	ldrb	r3, [r3, r2]
 80011da:	2b0a      	cmp	r3, #10
 80011dc:	d006      	beq.n	80011ec <HAL_UART_RxCpltCallback+0x2c>
 80011de:	4b1e      	ldr	r3, [pc, #120]	; (8001258 <HAL_UART_RxCpltCallback+0x98>)
 80011e0:	781b      	ldrb	r3, [r3, #0]
 80011e2:	461a      	mov	r2, r3
 80011e4:	4b1d      	ldr	r3, [pc, #116]	; (800125c <HAL_UART_RxCpltCallback+0x9c>)
 80011e6:	5c9b      	ldrb	r3, [r3, r2]
 80011e8:	2b0d      	cmp	r3, #13
 80011ea:	d111      	bne.n	8001210 <HAL_UART_RxCpltCallback+0x50>
	    {
	      // End of command received
	      rxBuffer[rxIndex] = '\0'; // Null-terminate the string
 80011ec:	4b1a      	ldr	r3, [pc, #104]	; (8001258 <HAL_UART_RxCpltCallback+0x98>)
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	4b1a      	ldr	r3, [pc, #104]	; (800125c <HAL_UART_RxCpltCallback+0x9c>)
 80011f4:	2100      	movs	r1, #0
 80011f6:	5499      	strb	r1, [r3, r2]
	      processCommand(rxBuffer);
 80011f8:	4818      	ldr	r0, [pc, #96]	; (800125c <HAL_UART_RxCpltCallback+0x9c>)
 80011fa:	f000 f831 	bl	8001260 <processCommand>

	      // Reset buffer index for the next command
	      rxIndex = 0;
 80011fe:	4b16      	ldr	r3, [pc, #88]	; (8001258 <HAL_UART_RxCpltCallback+0x98>)
 8001200:	2200      	movs	r2, #0
 8001202:	701a      	strb	r2, [r3, #0]

	      // Restart UART reception
	      HAL_UART_Receive_IT(&huart3, (uint8_t *)rxBuffer, 1);
 8001204:	2201      	movs	r2, #1
 8001206:	4915      	ldr	r1, [pc, #84]	; (800125c <HAL_UART_RxCpltCallback+0x9c>)
 8001208:	4812      	ldr	r0, [pc, #72]	; (8001254 <HAL_UART_RxCpltCallback+0x94>)
 800120a:	f006 f80d 	bl	8007228 <HAL_UART_Receive_IT>
	        rxIndex = 0;
	        HAL_UART_Receive_IT(&huart3, (uint8_t *)rxBuffer, 1);
	      }
	    }
	  }
}
 800120e:	e01c      	b.n	800124a <HAL_UART_RxCpltCallback+0x8a>
	      rxIndex++;
 8001210:	4b11      	ldr	r3, [pc, #68]	; (8001258 <HAL_UART_RxCpltCallback+0x98>)
 8001212:	781b      	ldrb	r3, [r3, #0]
 8001214:	3301      	adds	r3, #1
 8001216:	b2da      	uxtb	r2, r3
 8001218:	4b0f      	ldr	r3, [pc, #60]	; (8001258 <HAL_UART_RxCpltCallback+0x98>)
 800121a:	701a      	strb	r2, [r3, #0]
	      if (rxIndex < MAX_BUFFER_SIZE - 1)
 800121c:	4b0e      	ldr	r3, [pc, #56]	; (8001258 <HAL_UART_RxCpltCallback+0x98>)
 800121e:	781b      	ldrb	r3, [r3, #0]
 8001220:	2b3e      	cmp	r3, #62	; 0x3e
 8001222:	d80a      	bhi.n	800123a <HAL_UART_RxCpltCallback+0x7a>
	        HAL_UART_Receive_IT(&huart3, (uint8_t *)&rxBuffer[rxIndex], 1);
 8001224:	4b0c      	ldr	r3, [pc, #48]	; (8001258 <HAL_UART_RxCpltCallback+0x98>)
 8001226:	781b      	ldrb	r3, [r3, #0]
 8001228:	461a      	mov	r2, r3
 800122a:	4b0c      	ldr	r3, [pc, #48]	; (800125c <HAL_UART_RxCpltCallback+0x9c>)
 800122c:	4413      	add	r3, r2
 800122e:	2201      	movs	r2, #1
 8001230:	4619      	mov	r1, r3
 8001232:	4808      	ldr	r0, [pc, #32]	; (8001254 <HAL_UART_RxCpltCallback+0x94>)
 8001234:	f005 fff8 	bl	8007228 <HAL_UART_Receive_IT>
}
 8001238:	e007      	b.n	800124a <HAL_UART_RxCpltCallback+0x8a>
	        rxIndex = 0;
 800123a:	4b07      	ldr	r3, [pc, #28]	; (8001258 <HAL_UART_RxCpltCallback+0x98>)
 800123c:	2200      	movs	r2, #0
 800123e:	701a      	strb	r2, [r3, #0]
	        HAL_UART_Receive_IT(&huart3, (uint8_t *)rxBuffer, 1);
 8001240:	2201      	movs	r2, #1
 8001242:	4906      	ldr	r1, [pc, #24]	; (800125c <HAL_UART_RxCpltCallback+0x9c>)
 8001244:	4803      	ldr	r0, [pc, #12]	; (8001254 <HAL_UART_RxCpltCallback+0x94>)
 8001246:	f005 ffef 	bl	8007228 <HAL_UART_Receive_IT>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20000630 	.word	0x20000630
 8001258:	20000384 	.word	0x20000384
 800125c:	20000344 	.word	0x20000344

08001260 <processCommand>:
void processCommand(char *command)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b082      	sub	sp, #8
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  if (strcmp(command, "1") == 0)
 8001268:	4911      	ldr	r1, [pc, #68]	; (80012b0 <processCommand+0x50>)
 800126a:	6878      	ldr	r0, [r7, #4]
 800126c:	f7fe ffd0 	bl	8000210 <strcmp>
 8001270:	4603      	mov	r3, r0
 8001272:	2b00      	cmp	r3, #0
 8001274:	d105      	bne.n	8001282 <processCommand+0x22>
  {
    // Handle Option 1
    HAL_UART_Transmit_IT(&huart3, "Option 1 selected\r\n", strlen("Option 1 selected\r\n"));
 8001276:	2213      	movs	r2, #19
 8001278:	490e      	ldr	r1, [pc, #56]	; (80012b4 <processCommand+0x54>)
 800127a:	480f      	ldr	r0, [pc, #60]	; (80012b8 <processCommand+0x58>)
 800127c:	f005 ff76 	bl	800716c <HAL_UART_Transmit_IT>
  else
  {
    // Invalid command
    HAL_UART_Transmit_IT(&huart3, "Invalid command\r\n", strlen("Invalid command\r\n"));
  }
}
 8001280:	e011      	b.n	80012a6 <processCommand+0x46>
  else if (strcmp(command, "2") == 0)
 8001282:	490e      	ldr	r1, [pc, #56]	; (80012bc <processCommand+0x5c>)
 8001284:	6878      	ldr	r0, [r7, #4]
 8001286:	f7fe ffc3 	bl	8000210 <strcmp>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d105      	bne.n	800129c <processCommand+0x3c>
    HAL_UART_Transmit_IT(&huart3, "Option 2 selected\r\n", strlen("Option 2 selected\r\n"));
 8001290:	2213      	movs	r2, #19
 8001292:	490b      	ldr	r1, [pc, #44]	; (80012c0 <processCommand+0x60>)
 8001294:	4808      	ldr	r0, [pc, #32]	; (80012b8 <processCommand+0x58>)
 8001296:	f005 ff69 	bl	800716c <HAL_UART_Transmit_IT>
}
 800129a:	e004      	b.n	80012a6 <processCommand+0x46>
    HAL_UART_Transmit_IT(&huart3, "Invalid command\r\n", strlen("Invalid command\r\n"));
 800129c:	2211      	movs	r2, #17
 800129e:	4909      	ldr	r1, [pc, #36]	; (80012c4 <processCommand+0x64>)
 80012a0:	4805      	ldr	r0, [pc, #20]	; (80012b8 <processCommand+0x58>)
 80012a2:	f005 ff63 	bl	800716c <HAL_UART_Transmit_IT>
}
 80012a6:	bf00      	nop
 80012a8:	3708      	adds	r7, #8
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}
 80012ae:	bf00      	nop
 80012b0:	0800d774 	.word	0x0800d774
 80012b4:	0800d778 	.word	0x0800d778
 80012b8:	20000630 	.word	0x20000630
 80012bc:	0800d78c 	.word	0x0800d78c
 80012c0:	0800d790 	.word	0x0800d790
 80012c4:	0800d7a4 	.word	0x0800d7a4

080012c8 <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <MX_ETH_Init+0x84>)
 80012ce:	4a20      	ldr	r2, [pc, #128]	; (8001350 <MX_ETH_Init+0x88>)
 80012d0:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 80012d2:	4b20      	ldr	r3, [pc, #128]	; (8001354 <MX_ETH_Init+0x8c>)
 80012d4:	2200      	movs	r2, #0
 80012d6:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 80012d8:	4b1e      	ldr	r3, [pc, #120]	; (8001354 <MX_ETH_Init+0x8c>)
 80012da:	2280      	movs	r2, #128	; 0x80
 80012dc:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 80012de:	4b1d      	ldr	r3, [pc, #116]	; (8001354 <MX_ETH_Init+0x8c>)
 80012e0:	22e1      	movs	r2, #225	; 0xe1
 80012e2:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 80012e4:	4b1b      	ldr	r3, [pc, #108]	; (8001354 <MX_ETH_Init+0x8c>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 80012ea:	4b1a      	ldr	r3, [pc, #104]	; (8001354 <MX_ETH_Init+0x8c>)
 80012ec:	2200      	movs	r2, #0
 80012ee:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 80012f0:	4b18      	ldr	r3, [pc, #96]	; (8001354 <MX_ETH_Init+0x8c>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 80012f6:	4b15      	ldr	r3, [pc, #84]	; (800134c <MX_ETH_Init+0x84>)
 80012f8:	4a16      	ldr	r2, [pc, #88]	; (8001354 <MX_ETH_Init+0x8c>)
 80012fa:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 80012fc:	4b13      	ldr	r3, [pc, #76]	; (800134c <MX_ETH_Init+0x84>)
 80012fe:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001302:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8001304:	4b11      	ldr	r3, [pc, #68]	; (800134c <MX_ETH_Init+0x84>)
 8001306:	4a14      	ldr	r2, [pc, #80]	; (8001358 <MX_ETH_Init+0x90>)
 8001308:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800130a:	4b10      	ldr	r3, [pc, #64]	; (800134c <MX_ETH_Init+0x84>)
 800130c:	4a13      	ldr	r2, [pc, #76]	; (800135c <MX_ETH_Init+0x94>)
 800130e:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8001310:	4b0e      	ldr	r3, [pc, #56]	; (800134c <MX_ETH_Init+0x84>)
 8001312:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8001316:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8001318:	480c      	ldr	r0, [pc, #48]	; (800134c <MX_ETH_Init+0x84>)
 800131a:	f001 fa59 	bl	80027d0 <HAL_ETH_Init>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8001324:	f000 fafe 	bl	8001924 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8001328:	2238      	movs	r2, #56	; 0x38
 800132a:	2100      	movs	r1, #0
 800132c:	480c      	ldr	r0, [pc, #48]	; (8001360 <MX_ETH_Init+0x98>)
 800132e:	f008 fdca 	bl	8009ec6 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8001332:	4b0b      	ldr	r3, [pc, #44]	; (8001360 <MX_ETH_Init+0x98>)
 8001334:	2221      	movs	r2, #33	; 0x21
 8001336:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8001338:	4b09      	ldr	r3, [pc, #36]	; (8001360 <MX_ETH_Init+0x98>)
 800133a:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800133e:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8001340:	4b07      	ldr	r3, [pc, #28]	; (8001360 <MX_ETH_Init+0x98>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8001346:	bf00      	nop
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	200003c0 	.word	0x200003c0
 8001350:	40028000 	.word	0x40028000
 8001354:	20000470 	.word	0x20000470
 8001358:	20000288 	.word	0x20000288
 800135c:	200001e8 	.word	0x200001e8
 8001360:	20000388 	.word	0x20000388

08001364 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08e      	sub	sp, #56	; 0x38
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800136c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001370:	2200      	movs	r2, #0
 8001372:	601a      	str	r2, [r3, #0]
 8001374:	605a      	str	r2, [r3, #4]
 8001376:	609a      	str	r2, [r3, #8]
 8001378:	60da      	str	r2, [r3, #12]
 800137a:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	4a4e      	ldr	r2, [pc, #312]	; (80014bc <HAL_ETH_MspInit+0x158>)
 8001382:	4293      	cmp	r3, r2
 8001384:	f040 8096 	bne.w	80014b4 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001388:	4b4d      	ldr	r3, [pc, #308]	; (80014c0 <HAL_ETH_MspInit+0x15c>)
 800138a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138c:	4a4c      	ldr	r2, [pc, #304]	; (80014c0 <HAL_ETH_MspInit+0x15c>)
 800138e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001392:	6313      	str	r3, [r2, #48]	; 0x30
 8001394:	4b4a      	ldr	r3, [pc, #296]	; (80014c0 <HAL_ETH_MspInit+0x15c>)
 8001396:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001398:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800139c:	623b      	str	r3, [r7, #32]
 800139e:	6a3b      	ldr	r3, [r7, #32]
 80013a0:	4b47      	ldr	r3, [pc, #284]	; (80014c0 <HAL_ETH_MspInit+0x15c>)
 80013a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013a4:	4a46      	ldr	r2, [pc, #280]	; (80014c0 <HAL_ETH_MspInit+0x15c>)
 80013a6:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80013aa:	6313      	str	r3, [r2, #48]	; 0x30
 80013ac:	4b44      	ldr	r3, [pc, #272]	; (80014c0 <HAL_ETH_MspInit+0x15c>)
 80013ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013b0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80013b4:	61fb      	str	r3, [r7, #28]
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	4b41      	ldr	r3, [pc, #260]	; (80014c0 <HAL_ETH_MspInit+0x15c>)
 80013ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013bc:	4a40      	ldr	r2, [pc, #256]	; (80014c0 <HAL_ETH_MspInit+0x15c>)
 80013be:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80013c2:	6313      	str	r3, [r2, #48]	; 0x30
 80013c4:	4b3e      	ldr	r3, [pc, #248]	; (80014c0 <HAL_ETH_MspInit+0x15c>)
 80013c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80013cc:	61bb      	str	r3, [r7, #24]
 80013ce:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80013d0:	4b3b      	ldr	r3, [pc, #236]	; (80014c0 <HAL_ETH_MspInit+0x15c>)
 80013d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d4:	4a3a      	ldr	r2, [pc, #232]	; (80014c0 <HAL_ETH_MspInit+0x15c>)
 80013d6:	f043 0304 	orr.w	r3, r3, #4
 80013da:	6313      	str	r3, [r2, #48]	; 0x30
 80013dc:	4b38      	ldr	r3, [pc, #224]	; (80014c0 <HAL_ETH_MspInit+0x15c>)
 80013de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e0:	f003 0304 	and.w	r3, r3, #4
 80013e4:	617b      	str	r3, [r7, #20]
 80013e6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013e8:	4b35      	ldr	r3, [pc, #212]	; (80014c0 <HAL_ETH_MspInit+0x15c>)
 80013ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013ec:	4a34      	ldr	r2, [pc, #208]	; (80014c0 <HAL_ETH_MspInit+0x15c>)
 80013ee:	f043 0301 	orr.w	r3, r3, #1
 80013f2:	6313      	str	r3, [r2, #48]	; 0x30
 80013f4:	4b32      	ldr	r3, [pc, #200]	; (80014c0 <HAL_ETH_MspInit+0x15c>)
 80013f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f8:	f003 0301 	and.w	r3, r3, #1
 80013fc:	613b      	str	r3, [r7, #16]
 80013fe:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001400:	4b2f      	ldr	r3, [pc, #188]	; (80014c0 <HAL_ETH_MspInit+0x15c>)
 8001402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001404:	4a2e      	ldr	r2, [pc, #184]	; (80014c0 <HAL_ETH_MspInit+0x15c>)
 8001406:	f043 0302 	orr.w	r3, r3, #2
 800140a:	6313      	str	r3, [r2, #48]	; 0x30
 800140c:	4b2c      	ldr	r3, [pc, #176]	; (80014c0 <HAL_ETH_MspInit+0x15c>)
 800140e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001410:	f003 0302 	and.w	r3, r3, #2
 8001414:	60fb      	str	r3, [r7, #12]
 8001416:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001418:	4b29      	ldr	r3, [pc, #164]	; (80014c0 <HAL_ETH_MspInit+0x15c>)
 800141a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141c:	4a28      	ldr	r2, [pc, #160]	; (80014c0 <HAL_ETH_MspInit+0x15c>)
 800141e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001422:	6313      	str	r3, [r2, #48]	; 0x30
 8001424:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <HAL_ETH_MspInit+0x15c>)
 8001426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001428:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800142c:	60bb      	str	r3, [r7, #8]
 800142e:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001430:	2332      	movs	r3, #50	; 0x32
 8001432:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001434:	2302      	movs	r3, #2
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800143c:	2303      	movs	r3, #3
 800143e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001440:	230b      	movs	r3, #11
 8001442:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001444:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001448:	4619      	mov	r1, r3
 800144a:	481e      	ldr	r0, [pc, #120]	; (80014c4 <HAL_ETH_MspInit+0x160>)
 800144c:	f001 fce6 	bl	8002e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001450:	2386      	movs	r3, #134	; 0x86
 8001452:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001454:	2302      	movs	r3, #2
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001458:	2300      	movs	r3, #0
 800145a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800145c:	2303      	movs	r3, #3
 800145e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001460:	230b      	movs	r3, #11
 8001462:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001464:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001468:	4619      	mov	r1, r3
 800146a:	4817      	ldr	r0, [pc, #92]	; (80014c8 <HAL_ETH_MspInit+0x164>)
 800146c:	f001 fcd6 	bl	8002e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001470:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001474:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147a:	2300      	movs	r3, #0
 800147c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147e:	2303      	movs	r3, #3
 8001480:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001482:	230b      	movs	r3, #11
 8001484:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001486:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800148a:	4619      	mov	r1, r3
 800148c:	480f      	ldr	r0, [pc, #60]	; (80014cc <HAL_ETH_MspInit+0x168>)
 800148e:	f001 fcc5 	bl	8002e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8001492:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001496:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001498:	2302      	movs	r3, #2
 800149a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800149c:	2300      	movs	r3, #0
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014a0:	2303      	movs	r3, #3
 80014a2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80014a4:	230b      	movs	r3, #11
 80014a6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80014a8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80014ac:	4619      	mov	r1, r3
 80014ae:	4808      	ldr	r0, [pc, #32]	; (80014d0 <HAL_ETH_MspInit+0x16c>)
 80014b0:	f001 fcb4 	bl	8002e1c <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80014b4:	bf00      	nop
 80014b6:	3738      	adds	r7, #56	; 0x38
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	40028000 	.word	0x40028000
 80014c0:	40023800 	.word	0x40023800
 80014c4:	40020800 	.word	0x40020800
 80014c8:	40020000 	.word	0x40020000
 80014cc:	40020400 	.word	0x40020400
 80014d0:	40021800 	.word	0x40021800

080014d4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b08c      	sub	sp, #48	; 0x30
 80014d8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014da:	f107 031c 	add.w	r3, r7, #28
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]
 80014e2:	605a      	str	r2, [r3, #4]
 80014e4:	609a      	str	r2, [r3, #8]
 80014e6:	60da      	str	r2, [r3, #12]
 80014e8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014ea:	4b5f      	ldr	r3, [pc, #380]	; (8001668 <MX_GPIO_Init+0x194>)
 80014ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ee:	4a5e      	ldr	r2, [pc, #376]	; (8001668 <MX_GPIO_Init+0x194>)
 80014f0:	f043 0304 	orr.w	r3, r3, #4
 80014f4:	6313      	str	r3, [r2, #48]	; 0x30
 80014f6:	4b5c      	ldr	r3, [pc, #368]	; (8001668 <MX_GPIO_Init+0x194>)
 80014f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fa:	f003 0304 	and.w	r3, r3, #4
 80014fe:	61bb      	str	r3, [r7, #24]
 8001500:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001502:	4b59      	ldr	r3, [pc, #356]	; (8001668 <MX_GPIO_Init+0x194>)
 8001504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001506:	4a58      	ldr	r2, [pc, #352]	; (8001668 <MX_GPIO_Init+0x194>)
 8001508:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800150c:	6313      	str	r3, [r2, #48]	; 0x30
 800150e:	4b56      	ldr	r3, [pc, #344]	; (8001668 <MX_GPIO_Init+0x194>)
 8001510:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001512:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001516:	617b      	str	r3, [r7, #20]
 8001518:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800151a:	4b53      	ldr	r3, [pc, #332]	; (8001668 <MX_GPIO_Init+0x194>)
 800151c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151e:	4a52      	ldr	r2, [pc, #328]	; (8001668 <MX_GPIO_Init+0x194>)
 8001520:	f043 0301 	orr.w	r3, r3, #1
 8001524:	6313      	str	r3, [r2, #48]	; 0x30
 8001526:	4b50      	ldr	r3, [pc, #320]	; (8001668 <MX_GPIO_Init+0x194>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	f003 0301 	and.w	r3, r3, #1
 800152e:	613b      	str	r3, [r7, #16]
 8001530:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001532:	4b4d      	ldr	r3, [pc, #308]	; (8001668 <MX_GPIO_Init+0x194>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a4c      	ldr	r2, [pc, #304]	; (8001668 <MX_GPIO_Init+0x194>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b4a      	ldr	r3, [pc, #296]	; (8001668 <MX_GPIO_Init+0x194>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	60fb      	str	r3, [r7, #12]
 8001548:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800154a:	4b47      	ldr	r3, [pc, #284]	; (8001668 <MX_GPIO_Init+0x194>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a46      	ldr	r2, [pc, #280]	; (8001668 <MX_GPIO_Init+0x194>)
 8001550:	f043 0308 	orr.w	r3, r3, #8
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b44      	ldr	r3, [pc, #272]	; (8001668 <MX_GPIO_Init+0x194>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0308 	and.w	r3, r3, #8
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001562:	4b41      	ldr	r3, [pc, #260]	; (8001668 <MX_GPIO_Init+0x194>)
 8001564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001566:	4a40      	ldr	r2, [pc, #256]	; (8001668 <MX_GPIO_Init+0x194>)
 8001568:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800156c:	6313      	str	r3, [r2, #48]	; 0x30
 800156e:	4b3e      	ldr	r3, [pc, #248]	; (8001668 <MX_GPIO_Init+0x194>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001576:	607b      	str	r3, [r7, #4]
 8001578:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800157a:	2200      	movs	r2, #0
 800157c:	f244 0181 	movw	r1, #16513	; 0x4081
 8001580:	483a      	ldr	r0, [pc, #232]	; (800166c <MX_GPIO_Init+0x198>)
 8001582:	f001 fdf7 	bl	8003174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Dir_GPIO_Port, Dir_Pin, GPIO_PIN_RESET);
 8001586:	2200      	movs	r2, #0
 8001588:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800158c:	4838      	ldr	r0, [pc, #224]	; (8001670 <MX_GPIO_Init+0x19c>)
 800158e:	f001 fdf1 	bl	8003174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001592:	2200      	movs	r2, #0
 8001594:	2140      	movs	r1, #64	; 0x40
 8001596:	4837      	ldr	r0, [pc, #220]	; (8001674 <MX_GPIO_Init+0x1a0>)
 8001598:	f001 fdec 	bl	8003174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Debug_GPIO_Port, Debug_Pin, GPIO_PIN_RESET);
 800159c:	2200      	movs	r2, #0
 800159e:	2180      	movs	r1, #128	; 0x80
 80015a0:	4835      	ldr	r0, [pc, #212]	; (8001678 <MX_GPIO_Init+0x1a4>)
 80015a2:	f001 fde7 	bl	8003174 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 80015a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015ac:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80015b0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 80015b6:	f107 031c 	add.w	r3, r7, #28
 80015ba:	4619      	mov	r1, r3
 80015bc:	482e      	ldr	r0, [pc, #184]	; (8001678 <MX_GPIO_Init+0x1a4>)
 80015be:	f001 fc2d 	bl	8002e1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80015c2:	f244 0381 	movw	r3, #16513	; 0x4081
 80015c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c8:	2301      	movs	r3, #1
 80015ca:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015cc:	2300      	movs	r3, #0
 80015ce:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d0:	2300      	movs	r3, #0
 80015d2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015d4:	f107 031c 	add.w	r3, r7, #28
 80015d8:	4619      	mov	r1, r3
 80015da:	4824      	ldr	r0, [pc, #144]	; (800166c <MX_GPIO_Init+0x198>)
 80015dc:	f001 fc1e 	bl	8002e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Dir_Pin;
 80015e0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015e6:	2301      	movs	r3, #1
 80015e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ea:	2300      	movs	r3, #0
 80015ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ee:	2300      	movs	r3, #0
 80015f0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Dir_GPIO_Port, &GPIO_InitStruct);
 80015f2:	f107 031c 	add.w	r3, r7, #28
 80015f6:	4619      	mov	r1, r3
 80015f8:	481d      	ldr	r0, [pc, #116]	; (8001670 <MX_GPIO_Init+0x19c>)
 80015fa:	f001 fc0f 	bl	8002e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80015fe:	2340      	movs	r3, #64	; 0x40
 8001600:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001602:	2301      	movs	r3, #1
 8001604:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800160a:	2300      	movs	r3, #0
 800160c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 800160e:	f107 031c 	add.w	r3, r7, #28
 8001612:	4619      	mov	r1, r3
 8001614:	4817      	ldr	r0, [pc, #92]	; (8001674 <MX_GPIO_Init+0x1a0>)
 8001616:	f001 fc01 	bl	8002e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800161a:	2380      	movs	r3, #128	; 0x80
 800161c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800161e:	2300      	movs	r3, #0
 8001620:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001622:	2300      	movs	r3, #0
 8001624:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001626:	f107 031c 	add.w	r3, r7, #28
 800162a:	4619      	mov	r1, r3
 800162c:	4811      	ldr	r0, [pc, #68]	; (8001674 <MX_GPIO_Init+0x1a0>)
 800162e:	f001 fbf5 	bl	8002e1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Debug_Pin;
 8001632:	2380      	movs	r3, #128	; 0x80
 8001634:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001636:	2301      	movs	r3, #1
 8001638:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800163a:	2300      	movs	r3, #0
 800163c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800163e:	2300      	movs	r3, #0
 8001640:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(Debug_GPIO_Port, &GPIO_InitStruct);
 8001642:	f107 031c 	add.w	r3, r7, #28
 8001646:	4619      	mov	r1, r3
 8001648:	480b      	ldr	r0, [pc, #44]	; (8001678 <MX_GPIO_Init+0x1a4>)
 800164a:	f001 fbe7 	bl	8002e1c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800164e:	2200      	movs	r2, #0
 8001650:	2100      	movs	r1, #0
 8001652:	2028      	movs	r0, #40	; 0x28
 8001654:	f000 ffe5 	bl	8002622 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001658:	2028      	movs	r0, #40	; 0x28
 800165a:	f000 fffe 	bl	800265a <HAL_NVIC_EnableIRQ>

}
 800165e:	bf00      	nop
 8001660:	3730      	adds	r7, #48	; 0x30
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	40023800 	.word	0x40023800
 800166c:	40020400 	.word	0x40020400
 8001670:	40020c00 	.word	0x40020c00
 8001674:	40021800 	.word	0x40021800
 8001678:	40020800 	.word	0x40020800

0800167c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800167c:	b580      	push	{r7, lr}
 800167e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001680:	4b1b      	ldr	r3, [pc, #108]	; (80016f0 <MX_I2C1_Init+0x74>)
 8001682:	4a1c      	ldr	r2, [pc, #112]	; (80016f4 <MX_I2C1_Init+0x78>)
 8001684:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00808CD2;
 8001686:	4b1a      	ldr	r3, [pc, #104]	; (80016f0 <MX_I2C1_Init+0x74>)
 8001688:	4a1b      	ldr	r2, [pc, #108]	; (80016f8 <MX_I2C1_Init+0x7c>)
 800168a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 800168c:	4b18      	ldr	r3, [pc, #96]	; (80016f0 <MX_I2C1_Init+0x74>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001692:	4b17      	ldr	r3, [pc, #92]	; (80016f0 <MX_I2C1_Init+0x74>)
 8001694:	2201      	movs	r2, #1
 8001696:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001698:	4b15      	ldr	r3, [pc, #84]	; (80016f0 <MX_I2C1_Init+0x74>)
 800169a:	2200      	movs	r2, #0
 800169c:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800169e:	4b14      	ldr	r3, [pc, #80]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80016a4:	4b12      	ldr	r3, [pc, #72]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016a6:	2200      	movs	r2, #0
 80016a8:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80016aa:	4b11      	ldr	r3, [pc, #68]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016ac:	2200      	movs	r2, #0
 80016ae:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80016b0:	4b0f      	ldr	r3, [pc, #60]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016b2:	2200      	movs	r2, #0
 80016b4:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80016b6:	480e      	ldr	r0, [pc, #56]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016b8:	f001 fd9a 	bl	80031f0 <HAL_I2C_Init>
 80016bc:	4603      	mov	r3, r0
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d001      	beq.n	80016c6 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80016c2:	f000 f92f 	bl	8001924 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80016c6:	2100      	movs	r1, #0
 80016c8:	4809      	ldr	r0, [pc, #36]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016ca:	f002 fedd 	bl	8004488 <HAL_I2CEx_ConfigAnalogFilter>
 80016ce:	4603      	mov	r3, r0
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d001      	beq.n	80016d8 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80016d4:	f000 f926 	bl	8001924 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80016d8:	2100      	movs	r1, #0
 80016da:	4805      	ldr	r0, [pc, #20]	; (80016f0 <MX_I2C1_Init+0x74>)
 80016dc:	f002 ff1f 	bl	800451e <HAL_I2CEx_ConfigDigitalFilter>
 80016e0:	4603      	mov	r3, r0
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d001      	beq.n	80016ea <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80016e6:	f000 f91d 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80016ea:	bf00      	nop
 80016ec:	bd80      	pop	{r7, pc}
 80016ee:	bf00      	nop
 80016f0:	20000478 	.word	0x20000478
 80016f4:	40005400 	.word	0x40005400
 80016f8:	00808cd2 	.word	0x00808cd2

080016fc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	b0aa      	sub	sp, #168	; 0xa8
 8001700:	af00      	add	r7, sp, #0
 8001702:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001704:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001708:	2200      	movs	r2, #0
 800170a:	601a      	str	r2, [r3, #0]
 800170c:	605a      	str	r2, [r3, #4]
 800170e:	609a      	str	r2, [r3, #8]
 8001710:	60da      	str	r2, [r3, #12]
 8001712:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001714:	f107 0310 	add.w	r3, r7, #16
 8001718:	2284      	movs	r2, #132	; 0x84
 800171a:	2100      	movs	r1, #0
 800171c:	4618      	mov	r0, r3
 800171e:	f008 fbd2 	bl	8009ec6 <memset>
  if(i2cHandle->Instance==I2C1)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	4a2a      	ldr	r2, [pc, #168]	; (80017d0 <HAL_I2C_MspInit+0xd4>)
 8001728:	4293      	cmp	r3, r2
 800172a:	d14c      	bne.n	80017c6 <HAL_I2C_MspInit+0xca>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800172c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001730:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001732:	2300      	movs	r3, #0
 8001734:	677b      	str	r3, [r7, #116]	; 0x74
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001736:	f107 0310 	add.w	r3, r7, #16
 800173a:	4618      	mov	r0, r3
 800173c:	f003 fd5e 	bl	80051fc <HAL_RCCEx_PeriphCLKConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001746:	f000 f8ed 	bl	8001924 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	4b22      	ldr	r3, [pc, #136]	; (80017d4 <HAL_I2C_MspInit+0xd8>)
 800174c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800174e:	4a21      	ldr	r2, [pc, #132]	; (80017d4 <HAL_I2C_MspInit+0xd8>)
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	6313      	str	r3, [r2, #48]	; 0x30
 8001756:	4b1f      	ldr	r3, [pc, #124]	; (80017d4 <HAL_I2C_MspInit+0xd8>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	60fb      	str	r3, [r7, #12]
 8001760:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001762:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001766:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800176a:	2312      	movs	r3, #18
 800176c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001770:	2300      	movs	r3, #0
 8001772:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001776:	2303      	movs	r3, #3
 8001778:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800177c:	2304      	movs	r3, #4
 800177e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001782:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001786:	4619      	mov	r1, r3
 8001788:	4813      	ldr	r0, [pc, #76]	; (80017d8 <HAL_I2C_MspInit+0xdc>)
 800178a:	f001 fb47 	bl	8002e1c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800178e:	4b11      	ldr	r3, [pc, #68]	; (80017d4 <HAL_I2C_MspInit+0xd8>)
 8001790:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001792:	4a10      	ldr	r2, [pc, #64]	; (80017d4 <HAL_I2C_MspInit+0xd8>)
 8001794:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001798:	6413      	str	r3, [r2, #64]	; 0x40
 800179a:	4b0e      	ldr	r3, [pc, #56]	; (80017d4 <HAL_I2C_MspInit+0xd8>)
 800179c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800179e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80017a2:	60bb      	str	r3, [r7, #8]
 80017a4:	68bb      	ldr	r3, [r7, #8]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80017a6:	2200      	movs	r2, #0
 80017a8:	2100      	movs	r1, #0
 80017aa:	201f      	movs	r0, #31
 80017ac:	f000 ff39 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80017b0:	201f      	movs	r0, #31
 80017b2:	f000 ff52 	bl	800265a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80017b6:	2200      	movs	r2, #0
 80017b8:	2100      	movs	r1, #0
 80017ba:	2020      	movs	r0, #32
 80017bc:	f000 ff31 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80017c0:	2020      	movs	r0, #32
 80017c2:	f000 ff4a 	bl	800265a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80017c6:	bf00      	nop
 80017c8:	37a8      	adds	r7, #168	; 0xa8
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40005400 	.word	0x40005400
 80017d4:	40023800 	.word	0x40023800
 80017d8:	40020400 	.word	0x40020400

080017dc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017e0:	f000 fdc3 	bl	800236a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017e4:	f000 f836 	bl	8001854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017e8:	f7ff fe74 	bl	80014d4 <MX_GPIO_Init>
  MX_ETH_Init();
 80017ec:	f7ff fd6c 	bl	80012c8 <MX_ETH_Init>
  MX_USART3_UART_Init();
 80017f0:	f000 fc52 	bl	8002098 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80017f4:	f000 fce8 	bl	80021c8 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 80017f8:	f7ff ff40 	bl	800167c <MX_I2C1_Init>
  MX_TIM3_Init();
 80017fc:	f000 fab4 	bl	8001d68 <MX_TIM3_Init>
  MX_TIM9_Init();
 8001800:	f000 fb7a 	bl	8001ef8 <MX_TIM9_Init>
  MX_SPI1_Init();
 8001804:	f000 f894 	bl	8001930 <MX_SPI1_Init>
  MX_FATFS_Init();
 8001808:	f007 fac8 	bl	8008d9c <MX_FATFS_Init>
  MX_TIM4_Init();
 800180c:	f000 fafc 	bl	8001e08 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, (uint8_t*)&msg, 1);
 8001810:	2201      	movs	r2, #1
 8001812:	490a      	ldr	r1, [pc, #40]	; (800183c <main+0x60>)
 8001814:	480a      	ldr	r0, [pc, #40]	; (8001840 <main+0x64>)
 8001816:	f005 fd07 	bl	8007228 <HAL_UART_Receive_IT>
  AS5600_Init(&device);
 800181a:	480a      	ldr	r0, [pc, #40]	; (8001844 <main+0x68>)
 800181c:	f7ff fc18 	bl	8001050 <AS5600_Init>
  HAL_TIM_Base_Start_IT(&htim3);
 8001820:	4809      	ldr	r0, [pc, #36]	; (8001848 <main+0x6c>)
 8001822:	f004 faf1 	bl	8005e08 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8001826:	2100      	movs	r1, #0
 8001828:	4808      	ldr	r0, [pc, #32]	; (800184c <main+0x70>)
 800182a:	f004 fbc7 	bl	8005fbc <HAL_TIM_PWM_Start>
  HAL_GPIO_WritePin(Dir_GPIO_Port, Dir_Pin, GPIO_PIN_SET);
 800182e:	2201      	movs	r2, #1
 8001830:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001834:	4806      	ldr	r0, [pc, #24]	; (8001850 <main+0x74>)
 8001836:	f001 fc9d 	bl	8003174 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800183a:	e7fe      	b.n	800183a <main+0x5e>
 800183c:	200004e0 	.word	0x200004e0
 8001840:	20000630 	.word	0x20000630
 8001844:	200004cc 	.word	0x200004cc
 8001848:	2000054c 	.word	0x2000054c
 800184c:	20000598 	.word	0x20000598
 8001850:	40020c00 	.word	0x40020c00

08001854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b094      	sub	sp, #80	; 0x50
 8001858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800185a:	f107 0320 	add.w	r3, r7, #32
 800185e:	2230      	movs	r2, #48	; 0x30
 8001860:	2100      	movs	r1, #0
 8001862:	4618      	mov	r0, r3
 8001864:	f008 fb2f 	bl	8009ec6 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001868:	f107 030c 	add.w	r3, r7, #12
 800186c:	2200      	movs	r2, #0
 800186e:	601a      	str	r2, [r3, #0]
 8001870:	605a      	str	r2, [r3, #4]
 8001872:	609a      	str	r2, [r3, #8]
 8001874:	60da      	str	r2, [r3, #12]
 8001876:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001878:	f002 ffe6 	bl	8004848 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800187c:	4b27      	ldr	r3, [pc, #156]	; (800191c <SystemClock_Config+0xc8>)
 800187e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001880:	4a26      	ldr	r2, [pc, #152]	; (800191c <SystemClock_Config+0xc8>)
 8001882:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001886:	6413      	str	r3, [r2, #64]	; 0x40
 8001888:	4b24      	ldr	r3, [pc, #144]	; (800191c <SystemClock_Config+0xc8>)
 800188a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800188c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001890:	60bb      	str	r3, [r7, #8]
 8001892:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001894:	4b22      	ldr	r3, [pc, #136]	; (8001920 <SystemClock_Config+0xcc>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 800189c:	4a20      	ldr	r2, [pc, #128]	; (8001920 <SystemClock_Config+0xcc>)
 800189e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018a2:	6013      	str	r3, [r2, #0]
 80018a4:	4b1e      	ldr	r3, [pc, #120]	; (8001920 <SystemClock_Config+0xcc>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80018ac:	607b      	str	r3, [r7, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80018b0:	2301      	movs	r3, #1
 80018b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80018b4:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80018b8:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ba:	2302      	movs	r3, #2
 80018bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80018be:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80018c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80018c4:	2304      	movs	r3, #4
 80018c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 72;
 80018c8:	2348      	movs	r3, #72	; 0x48
 80018ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018cc:	2302      	movs	r3, #2
 80018ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80018d0:	2303      	movs	r3, #3
 80018d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018d4:	f107 0320 	add.w	r3, r7, #32
 80018d8:	4618      	mov	r0, r3
 80018da:	f002 ffc5 	bl	8004868 <HAL_RCC_OscConfig>
 80018de:	4603      	mov	r3, r0
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d001      	beq.n	80018e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018e4:	f000 f81e 	bl	8001924 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018e8:	230f      	movs	r3, #15
 80018ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018ec:	2302      	movs	r3, #2
 80018ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80018f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80018fa:	2300      	movs	r3, #0
 80018fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80018fe:	f107 030c 	add.w	r3, r7, #12
 8001902:	2102      	movs	r1, #2
 8001904:	4618      	mov	r0, r3
 8001906:	f003 fa53 	bl	8004db0 <HAL_RCC_ClockConfig>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001910:	f000 f808 	bl	8001924 <Error_Handler>
  }
}
 8001914:	bf00      	nop
 8001916:	3750      	adds	r7, #80	; 0x50
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	40023800 	.word	0x40023800
 8001920:	40007000 	.word	0x40007000

08001924 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001928:	b672      	cpsid	i
}
 800192a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800192c:	e7fe      	b.n	800192c <Error_Handler+0x8>
	...

08001930 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001930:	b580      	push	{r7, lr}
 8001932:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001934:	4b1b      	ldr	r3, [pc, #108]	; (80019a4 <MX_SPI1_Init+0x74>)
 8001936:	4a1c      	ldr	r2, [pc, #112]	; (80019a8 <MX_SPI1_Init+0x78>)
 8001938:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800193a:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <MX_SPI1_Init+0x74>)
 800193c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001940:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001942:	4b18      	ldr	r3, [pc, #96]	; (80019a4 <MX_SPI1_Init+0x74>)
 8001944:	2200      	movs	r2, #0
 8001946:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001948:	4b16      	ldr	r3, [pc, #88]	; (80019a4 <MX_SPI1_Init+0x74>)
 800194a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800194e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001950:	4b14      	ldr	r3, [pc, #80]	; (80019a4 <MX_SPI1_Init+0x74>)
 8001952:	2200      	movs	r2, #0
 8001954:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001956:	4b13      	ldr	r3, [pc, #76]	; (80019a4 <MX_SPI1_Init+0x74>)
 8001958:	2200      	movs	r2, #0
 800195a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800195c:	4b11      	ldr	r3, [pc, #68]	; (80019a4 <MX_SPI1_Init+0x74>)
 800195e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001962:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001964:	4b0f      	ldr	r3, [pc, #60]	; (80019a4 <MX_SPI1_Init+0x74>)
 8001966:	2230      	movs	r2, #48	; 0x30
 8001968:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800196a:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <MX_SPI1_Init+0x74>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001970:	4b0c      	ldr	r3, [pc, #48]	; (80019a4 <MX_SPI1_Init+0x74>)
 8001972:	2200      	movs	r2, #0
 8001974:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001976:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <MX_SPI1_Init+0x74>)
 8001978:	2200      	movs	r2, #0
 800197a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 800197c:	4b09      	ldr	r3, [pc, #36]	; (80019a4 <MX_SPI1_Init+0x74>)
 800197e:	2207      	movs	r2, #7
 8001980:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001982:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <MX_SPI1_Init+0x74>)
 8001984:	2200      	movs	r2, #0
 8001986:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001988:	4b06      	ldr	r3, [pc, #24]	; (80019a4 <MX_SPI1_Init+0x74>)
 800198a:	2208      	movs	r2, #8
 800198c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800198e:	4805      	ldr	r0, [pc, #20]	; (80019a4 <MX_SPI1_Init+0x74>)
 8001990:	f004 f824 	bl	80059dc <HAL_SPI_Init>
 8001994:	4603      	mov	r3, r0
 8001996:	2b00      	cmp	r3, #0
 8001998:	d001      	beq.n	800199e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800199a:	f7ff ffc3 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800199e:	bf00      	nop
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	200004e4 	.word	0x200004e4
 80019a8:	40013000 	.word	0x40013000

080019ac <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b08a      	sub	sp, #40	; 0x28
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019b4:	f107 0314 	add.w	r3, r7, #20
 80019b8:	2200      	movs	r2, #0
 80019ba:	601a      	str	r2, [r3, #0]
 80019bc:	605a      	str	r2, [r3, #4]
 80019be:	609a      	str	r2, [r3, #8]
 80019c0:	60da      	str	r2, [r3, #12]
 80019c2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4a29      	ldr	r2, [pc, #164]	; (8001a70 <HAL_SPI_MspInit+0xc4>)
 80019ca:	4293      	cmp	r3, r2
 80019cc:	d14b      	bne.n	8001a66 <HAL_SPI_MspInit+0xba>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80019ce:	4b29      	ldr	r3, [pc, #164]	; (8001a74 <HAL_SPI_MspInit+0xc8>)
 80019d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019d2:	4a28      	ldr	r2, [pc, #160]	; (8001a74 <HAL_SPI_MspInit+0xc8>)
 80019d4:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80019d8:	6453      	str	r3, [r2, #68]	; 0x44
 80019da:	4b26      	ldr	r3, [pc, #152]	; (8001a74 <HAL_SPI_MspInit+0xc8>)
 80019dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019de:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80019e2:	613b      	str	r3, [r7, #16]
 80019e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019e6:	4b23      	ldr	r3, [pc, #140]	; (8001a74 <HAL_SPI_MspInit+0xc8>)
 80019e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ea:	4a22      	ldr	r2, [pc, #136]	; (8001a74 <HAL_SPI_MspInit+0xc8>)
 80019ec:	f043 0301 	orr.w	r3, r3, #1
 80019f0:	6313      	str	r3, [r2, #48]	; 0x30
 80019f2:	4b20      	ldr	r3, [pc, #128]	; (8001a74 <HAL_SPI_MspInit+0xc8>)
 80019f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019f6:	f003 0301 	and.w	r3, r3, #1
 80019fa:	60fb      	str	r3, [r7, #12]
 80019fc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80019fe:	4b1d      	ldr	r3, [pc, #116]	; (8001a74 <HAL_SPI_MspInit+0xc8>)
 8001a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a02:	4a1c      	ldr	r2, [pc, #112]	; (8001a74 <HAL_SPI_MspInit+0xc8>)
 8001a04:	f043 0302 	orr.w	r3, r3, #2
 8001a08:	6313      	str	r3, [r2, #48]	; 0x30
 8001a0a:	4b1a      	ldr	r3, [pc, #104]	; (8001a74 <HAL_SPI_MspInit+0xc8>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	f003 0302 	and.w	r3, r3, #2
 8001a12:	60bb      	str	r3, [r7, #8]
 8001a14:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001a16:	2360      	movs	r3, #96	; 0x60
 8001a18:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a1a:	2302      	movs	r3, #2
 8001a1c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a1e:	2300      	movs	r3, #0
 8001a20:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a22:	2303      	movs	r3, #3
 8001a24:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a26:	2305      	movs	r3, #5
 8001a28:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a2a:	f107 0314 	add.w	r3, r7, #20
 8001a2e:	4619      	mov	r1, r3
 8001a30:	4811      	ldr	r0, [pc, #68]	; (8001a78 <HAL_SPI_MspInit+0xcc>)
 8001a32:	f001 f9f3 	bl	8002e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001a36:	2320      	movs	r3, #32
 8001a38:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a3a:	2302      	movs	r3, #2
 8001a3c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a42:	2303      	movs	r3, #3
 8001a44:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001a46:	2305      	movs	r3, #5
 8001a48:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a4a:	f107 0314 	add.w	r3, r7, #20
 8001a4e:	4619      	mov	r1, r3
 8001a50:	480a      	ldr	r0, [pc, #40]	; (8001a7c <HAL_SPI_MspInit+0xd0>)
 8001a52:	f001 f9e3 	bl	8002e1c <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 0, 0);
 8001a56:	2200      	movs	r2, #0
 8001a58:	2100      	movs	r1, #0
 8001a5a:	2023      	movs	r0, #35	; 0x23
 8001a5c:	f000 fde1 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001a60:	2023      	movs	r0, #35	; 0x23
 8001a62:	f000 fdfa 	bl	800265a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 8001a66:	bf00      	nop
 8001a68:	3728      	adds	r7, #40	; 0x28
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}
 8001a6e:	bf00      	nop
 8001a70:	40013000 	.word	0x40013000
 8001a74:	40023800 	.word	0x40023800
 8001a78:	40020000 	.word	0x40020000
 8001a7c:	40020400 	.word	0x40020400

08001a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a80:	b480      	push	{r7}
 8001a82:	b083      	sub	sp, #12
 8001a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001a86:	4b0f      	ldr	r3, [pc, #60]	; (8001ac4 <HAL_MspInit+0x44>)
 8001a88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a8a:	4a0e      	ldr	r2, [pc, #56]	; (8001ac4 <HAL_MspInit+0x44>)
 8001a8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a90:	6413      	str	r3, [r2, #64]	; 0x40
 8001a92:	4b0c      	ldr	r3, [pc, #48]	; (8001ac4 <HAL_MspInit+0x44>)
 8001a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a9a:	607b      	str	r3, [r7, #4]
 8001a9c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a9e:	4b09      	ldr	r3, [pc, #36]	; (8001ac4 <HAL_MspInit+0x44>)
 8001aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa2:	4a08      	ldr	r2, [pc, #32]	; (8001ac4 <HAL_MspInit+0x44>)
 8001aa4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa8:	6453      	str	r3, [r2, #68]	; 0x44
 8001aaa:	4b06      	ldr	r3, [pc, #24]	; (8001ac4 <HAL_MspInit+0x44>)
 8001aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001ab2:	603b      	str	r3, [r7, #0]
 8001ab4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ab6:	bf00      	nop
 8001ab8:	370c      	adds	r7, #12
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	40023800 	.word	0x40023800

08001ac8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001acc:	e7fe      	b.n	8001acc <NMI_Handler+0x4>

08001ace <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001ace:	b480      	push	{r7}
 8001ad0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ad2:	e7fe      	b.n	8001ad2 <HardFault_Handler+0x4>

08001ad4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ad8:	e7fe      	b.n	8001ad8 <MemManage_Handler+0x4>

08001ada <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ada:	b480      	push	{r7}
 8001adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ade:	e7fe      	b.n	8001ade <BusFault_Handler+0x4>

08001ae0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001ae4:	e7fe      	b.n	8001ae4 <UsageFault_Handler+0x4>

08001ae6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001ae6:	b480      	push	{r7}
 8001ae8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001aea:	bf00      	nop
 8001aec:	46bd      	mov	sp, r7
 8001aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af2:	4770      	bx	lr

08001af4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001af4:	b480      	push	{r7}
 8001af6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001af8:	bf00      	nop
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr

08001b02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001b02:	b480      	push	{r7}
 8001b04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001b06:	bf00      	nop
 8001b08:	46bd      	mov	sp, r7
 8001b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0e:	4770      	bx	lr

08001b10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001b14:	f000 fc66 	bl	80023e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001b18:	bf00      	nop
 8001b1a:	bd80      	pop	{r7, pc}

08001b1c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim9);
 8001b20:	4802      	ldr	r0, [pc, #8]	; (8001b2c <TIM1_BRK_TIM9_IRQHandler+0x10>)
 8001b22:	f004 fb45 	bl	80061b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001b26:	bf00      	nop
 8001b28:	bd80      	pop	{r7, pc}
 8001b2a:	bf00      	nop
 8001b2c:	200005e4 	.word	0x200005e4

08001b30 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001b34:	4802      	ldr	r0, [pc, #8]	; (8001b40 <TIM3_IRQHandler+0x10>)
 8001b36:	f004 fb3b 	bl	80061b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001b3a:	bf00      	nop
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	2000054c 	.word	0x2000054c

08001b44 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001b48:	4802      	ldr	r0, [pc, #8]	; (8001b54 <TIM4_IRQHandler+0x10>)
 8001b4a:	f004 fb31 	bl	80061b0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001b4e:	bf00      	nop
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20000598 	.word	0x20000598

08001b58 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001b5c:	4802      	ldr	r0, [pc, #8]	; (8001b68 <I2C1_EV_IRQHandler+0x10>)
 8001b5e:	f001 fcf1 	bl	8003544 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001b62:	bf00      	nop
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop
 8001b68:	20000478 	.word	0x20000478

08001b6c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001b70:	4802      	ldr	r0, [pc, #8]	; (8001b7c <I2C1_ER_IRQHandler+0x10>)
 8001b72:	f001 fd01 	bl	8003578 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001b76:	bf00      	nop
 8001b78:	bd80      	pop	{r7, pc}
 8001b7a:	bf00      	nop
 8001b7c:	20000478 	.word	0x20000478

08001b80 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001b80:	b580      	push	{r7, lr}
 8001b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001b84:	4802      	ldr	r0, [pc, #8]	; (8001b90 <SPI1_IRQHandler+0x10>)
 8001b86:	f003 ffd5 	bl	8005b34 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	200004e4 	.word	0x200004e4

08001b94 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001b98:	4802      	ldr	r0, [pc, #8]	; (8001ba4 <USART3_IRQHandler+0x10>)
 8001b9a:	f005 fb89 	bl	80072b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001b9e:	bf00      	nop
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	20000630 	.word	0x20000630

08001ba8 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USER_Btn_Pin);
 8001bac:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001bb0:	f001 fafa 	bl	80031a8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001bb4:	bf00      	nop
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	af00      	add	r7, sp, #0
  return 1;
 8001bbc:	2301      	movs	r3, #1
}
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr

08001bc8 <_kill>:

int _kill(int pid, int sig)
{
 8001bc8:	b580      	push	{r7, lr}
 8001bca:	b082      	sub	sp, #8
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001bd2:	f008 f9cb 	bl	8009f6c <__errno>
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	2216      	movs	r2, #22
 8001bda:	601a      	str	r2, [r3, #0]
  return -1;
 8001bdc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001be0:	4618      	mov	r0, r3
 8001be2:	3708      	adds	r7, #8
 8001be4:	46bd      	mov	sp, r7
 8001be6:	bd80      	pop	{r7, pc}

08001be8 <_exit>:

void _exit (int status)
{
 8001be8:	b580      	push	{r7, lr}
 8001bea:	b082      	sub	sp, #8
 8001bec:	af00      	add	r7, sp, #0
 8001bee:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001bf0:	f04f 31ff 	mov.w	r1, #4294967295
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff ffe7 	bl	8001bc8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001bfa:	e7fe      	b.n	8001bfa <_exit+0x12>

08001bfc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	b086      	sub	sp, #24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c08:	2300      	movs	r3, #0
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	e00a      	b.n	8001c24 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001c0e:	f3af 8000 	nop.w
 8001c12:	4601      	mov	r1, r0
 8001c14:	68bb      	ldr	r3, [r7, #8]
 8001c16:	1c5a      	adds	r2, r3, #1
 8001c18:	60ba      	str	r2, [r7, #8]
 8001c1a:	b2ca      	uxtb	r2, r1
 8001c1c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c1e:	697b      	ldr	r3, [r7, #20]
 8001c20:	3301      	adds	r3, #1
 8001c22:	617b      	str	r3, [r7, #20]
 8001c24:	697a      	ldr	r2, [r7, #20]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	dbf0      	blt.n	8001c0e <_read+0x12>
  }

  return len;
 8001c2c:	687b      	ldr	r3, [r7, #4]
}
 8001c2e:	4618      	mov	r0, r3
 8001c30:	3718      	adds	r7, #24
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}

08001c36 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001c36:	b580      	push	{r7, lr}
 8001c38:	b086      	sub	sp, #24
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	60f8      	str	r0, [r7, #12]
 8001c3e:	60b9      	str	r1, [r7, #8]
 8001c40:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c42:	2300      	movs	r3, #0
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	e009      	b.n	8001c5c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	1c5a      	adds	r2, r3, #1
 8001c4c:	60ba      	str	r2, [r7, #8]
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4618      	mov	r0, r3
 8001c52:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	3301      	adds	r3, #1
 8001c5a:	617b      	str	r3, [r7, #20]
 8001c5c:	697a      	ldr	r2, [r7, #20]
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	dbf1      	blt.n	8001c48 <_write+0x12>
  }
  return len;
 8001c64:	687b      	ldr	r3, [r7, #4]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3718      	adds	r7, #24
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}

08001c6e <_close>:

int _close(int file)
{
 8001c6e:	b480      	push	{r7}
 8001c70:	b083      	sub	sp, #12
 8001c72:	af00      	add	r7, sp, #0
 8001c74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001c76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	370c      	adds	r7, #12
 8001c7e:	46bd      	mov	sp, r7
 8001c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c84:	4770      	bx	lr

08001c86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001c86:	b480      	push	{r7}
 8001c88:	b083      	sub	sp, #12
 8001c8a:	af00      	add	r7, sp, #0
 8001c8c:	6078      	str	r0, [r7, #4]
 8001c8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001c90:	683b      	ldr	r3, [r7, #0]
 8001c92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001c96:	605a      	str	r2, [r3, #4]
  return 0;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr

08001ca6 <_isatty>:

int _isatty(int file)
{
 8001ca6:	b480      	push	{r7}
 8001ca8:	b083      	sub	sp, #12
 8001caa:	af00      	add	r7, sp, #0
 8001cac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001cae:	2301      	movs	r3, #1
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	370c      	adds	r7, #12
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cba:	4770      	bx	lr

08001cbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b085      	sub	sp, #20
 8001cc0:	af00      	add	r7, sp, #0
 8001cc2:	60f8      	str	r0, [r7, #12]
 8001cc4:	60b9      	str	r1, [r7, #8]
 8001cc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001cc8:	2300      	movs	r3, #0
}
 8001cca:	4618      	mov	r0, r3
 8001ccc:	3714      	adds	r7, #20
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd4:	4770      	bx	lr
	...

08001cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b086      	sub	sp, #24
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ce0:	4a14      	ldr	r2, [pc, #80]	; (8001d34 <_sbrk+0x5c>)
 8001ce2:	4b15      	ldr	r3, [pc, #84]	; (8001d38 <_sbrk+0x60>)
 8001ce4:	1ad3      	subs	r3, r2, r3
 8001ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001cec:	4b13      	ldr	r3, [pc, #76]	; (8001d3c <_sbrk+0x64>)
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d102      	bne.n	8001cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001cf4:	4b11      	ldr	r3, [pc, #68]	; (8001d3c <_sbrk+0x64>)
 8001cf6:	4a12      	ldr	r2, [pc, #72]	; (8001d40 <_sbrk+0x68>)
 8001cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001cfa:	4b10      	ldr	r3, [pc, #64]	; (8001d3c <_sbrk+0x64>)
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	4413      	add	r3, r2
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d207      	bcs.n	8001d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d08:	f008 f930 	bl	8009f6c <__errno>
 8001d0c:	4603      	mov	r3, r0
 8001d0e:	220c      	movs	r2, #12
 8001d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d12:	f04f 33ff 	mov.w	r3, #4294967295
 8001d16:	e009      	b.n	8001d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d18:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <_sbrk+0x64>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d1e:	4b07      	ldr	r3, [pc, #28]	; (8001d3c <_sbrk+0x64>)
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4413      	add	r3, r2
 8001d26:	4a05      	ldr	r2, [pc, #20]	; (8001d3c <_sbrk+0x64>)
 8001d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d2a:	68fb      	ldr	r3, [r7, #12]
}
 8001d2c:	4618      	mov	r0, r3
 8001d2e:	3718      	adds	r7, #24
 8001d30:	46bd      	mov	sp, r7
 8001d32:	bd80      	pop	{r7, pc}
 8001d34:	20050000 	.word	0x20050000
 8001d38:	00000400 	.word	0x00000400
 8001d3c:	20000548 	.word	0x20000548
 8001d40:	20000d28 	.word	0x20000d28

08001d44 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d44:	b480      	push	{r7}
 8001d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d48:	4b06      	ldr	r3, [pc, #24]	; (8001d64 <SystemInit+0x20>)
 8001d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d4e:	4a05      	ldr	r2, [pc, #20]	; (8001d64 <SystemInit+0x20>)
 8001d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	e000ed00 	.word	0xe000ed00

08001d68 <MX_TIM3_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim9;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b088      	sub	sp, #32
 8001d6c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001d6e:	f107 0310 	add.w	r3, r7, #16
 8001d72:	2200      	movs	r2, #0
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	605a      	str	r2, [r3, #4]
 8001d78:	609a      	str	r2, [r3, #8]
 8001d7a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d7c:	1d3b      	adds	r3, r7, #4
 8001d7e:	2200      	movs	r2, #0
 8001d80:	601a      	str	r2, [r3, #0]
 8001d82:	605a      	str	r2, [r3, #4]
 8001d84:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d86:	4b1e      	ldr	r3, [pc, #120]	; (8001e00 <MX_TIM3_Init+0x98>)
 8001d88:	4a1e      	ldr	r2, [pc, #120]	; (8001e04 <MX_TIM3_Init+0x9c>)
 8001d8a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 719;
 8001d8c:	4b1c      	ldr	r3, [pc, #112]	; (8001e00 <MX_TIM3_Init+0x98>)
 8001d8e:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001d92:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d94:	4b1a      	ldr	r3, [pc, #104]	; (8001e00 <MX_TIM3_Init+0x98>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 9999;
 8001d9a:	4b19      	ldr	r3, [pc, #100]	; (8001e00 <MX_TIM3_Init+0x98>)
 8001d9c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001da0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da2:	4b17      	ldr	r3, [pc, #92]	; (8001e00 <MX_TIM3_Init+0x98>)
 8001da4:	2200      	movs	r2, #0
 8001da6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001da8:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <MX_TIM3_Init+0x98>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001dae:	4814      	ldr	r0, [pc, #80]	; (8001e00 <MX_TIM3_Init+0x98>)
 8001db0:	f003 ffd3 	bl	8005d5a <HAL_TIM_Base_Init>
 8001db4:	4603      	mov	r3, r0
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d001      	beq.n	8001dbe <MX_TIM3_Init+0x56>
  {
    Error_Handler();
 8001dba:	f7ff fdb3 	bl	8001924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001dc2:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001dc4:	f107 0310 	add.w	r3, r7, #16
 8001dc8:	4619      	mov	r1, r3
 8001dca:	480d      	ldr	r0, [pc, #52]	; (8001e00 <MX_TIM3_Init+0x98>)
 8001dcc:	f004 fc24 	bl	8006618 <HAL_TIM_ConfigClockSource>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <MX_TIM3_Init+0x72>
  {
    Error_Handler();
 8001dd6:	f7ff fda5 	bl	8001924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dda:	2300      	movs	r3, #0
 8001ddc:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001dde:	2300      	movs	r3, #0
 8001de0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001de2:	1d3b      	adds	r3, r7, #4
 8001de4:	4619      	mov	r1, r3
 8001de6:	4806      	ldr	r0, [pc, #24]	; (8001e00 <MX_TIM3_Init+0x98>)
 8001de8:	f005 f8c6 	bl	8006f78 <HAL_TIMEx_MasterConfigSynchronization>
 8001dec:	4603      	mov	r3, r0
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d001      	beq.n	8001df6 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 8001df2:	f7ff fd97 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001df6:	bf00      	nop
 8001df8:	3720      	adds	r7, #32
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	2000054c 	.word	0x2000054c
 8001e04:	40000400 	.word	0x40000400

08001e08 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08e      	sub	sp, #56	; 0x38
 8001e0c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e0e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e12:	2200      	movs	r2, #0
 8001e14:	601a      	str	r2, [r3, #0]
 8001e16:	605a      	str	r2, [r3, #4]
 8001e18:	609a      	str	r2, [r3, #8]
 8001e1a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e1c:	f107 031c 	add.w	r3, r7, #28
 8001e20:	2200      	movs	r2, #0
 8001e22:	601a      	str	r2, [r3, #0]
 8001e24:	605a      	str	r2, [r3, #4]
 8001e26:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001e28:	463b      	mov	r3, r7
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	601a      	str	r2, [r3, #0]
 8001e2e:	605a      	str	r2, [r3, #4]
 8001e30:	609a      	str	r2, [r3, #8]
 8001e32:	60da      	str	r2, [r3, #12]
 8001e34:	611a      	str	r2, [r3, #16]
 8001e36:	615a      	str	r2, [r3, #20]
 8001e38:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e3a:	4b2d      	ldr	r3, [pc, #180]	; (8001ef0 <MX_TIM4_Init+0xe8>)
 8001e3c:	4a2d      	ldr	r2, [pc, #180]	; (8001ef4 <MX_TIM4_Init+0xec>)
 8001e3e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 719;
 8001e40:	4b2b      	ldr	r3, [pc, #172]	; (8001ef0 <MX_TIM4_Init+0xe8>)
 8001e42:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001e46:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e48:	4b29      	ldr	r3, [pc, #164]	; (8001ef0 <MX_TIM4_Init+0xe8>)
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8001e4e:	4b28      	ldr	r3, [pc, #160]	; (8001ef0 <MX_TIM4_Init+0xe8>)
 8001e50:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e54:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e56:	4b26      	ldr	r3, [pc, #152]	; (8001ef0 <MX_TIM4_Init+0xe8>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e5c:	4b24      	ldr	r3, [pc, #144]	; (8001ef0 <MX_TIM4_Init+0xe8>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e62:	4823      	ldr	r0, [pc, #140]	; (8001ef0 <MX_TIM4_Init+0xe8>)
 8001e64:	f003 ff79 	bl	8005d5a <HAL_TIM_Base_Init>
 8001e68:	4603      	mov	r3, r0
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d001      	beq.n	8001e72 <MX_TIM4_Init+0x6a>
  {
    Error_Handler();
 8001e6e:	f7ff fd59 	bl	8001924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e72:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e76:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e78:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001e7c:	4619      	mov	r1, r3
 8001e7e:	481c      	ldr	r0, [pc, #112]	; (8001ef0 <MX_TIM4_Init+0xe8>)
 8001e80:	f004 fbca 	bl	8006618 <HAL_TIM_ConfigClockSource>
 8001e84:	4603      	mov	r3, r0
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d001      	beq.n	8001e8e <MX_TIM4_Init+0x86>
  {
    Error_Handler();
 8001e8a:	f7ff fd4b 	bl	8001924 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001e8e:	4818      	ldr	r0, [pc, #96]	; (8001ef0 <MX_TIM4_Init+0xe8>)
 8001e90:	f004 f832 	bl	8005ef8 <HAL_TIM_PWM_Init>
 8001e94:	4603      	mov	r3, r0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d001      	beq.n	8001e9e <MX_TIM4_Init+0x96>
  {
    Error_Handler();
 8001e9a:	f7ff fd43 	bl	8001924 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001ea6:	f107 031c 	add.w	r3, r7, #28
 8001eaa:	4619      	mov	r1, r3
 8001eac:	4810      	ldr	r0, [pc, #64]	; (8001ef0 <MX_TIM4_Init+0xe8>)
 8001eae:	f005 f863 	bl	8006f78 <HAL_TIMEx_MasterConfigSynchronization>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d001      	beq.n	8001ebc <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 8001eb8:	f7ff fd34 	bl	8001924 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ebc:	2360      	movs	r3, #96	; 0x60
 8001ebe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 10;
 8001ec0:	230a      	movs	r3, #10
 8001ec2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001ecc:	463b      	mov	r3, r7
 8001ece:	2200      	movs	r2, #0
 8001ed0:	4619      	mov	r1, r3
 8001ed2:	4807      	ldr	r0, [pc, #28]	; (8001ef0 <MX_TIM4_Init+0xe8>)
 8001ed4:	f004 fa8c 	bl	80063f0 <HAL_TIM_PWM_ConfigChannel>
 8001ed8:	4603      	mov	r3, r0
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d001      	beq.n	8001ee2 <MX_TIM4_Init+0xda>
  {
    Error_Handler();
 8001ede:	f7ff fd21 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001ee2:	4803      	ldr	r0, [pc, #12]	; (8001ef0 <MX_TIM4_Init+0xe8>)
 8001ee4:	f000 f8a0 	bl	8002028 <HAL_TIM_MspPostInit>

}
 8001ee8:	bf00      	nop
 8001eea:	3738      	adds	r7, #56	; 0x38
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	20000598 	.word	0x20000598
 8001ef4:	40000800 	.word	0x40000800

08001ef8 <MX_TIM9_Init>:
/* TIM9 init function */
void MX_TIM9_Init(void)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b084      	sub	sp, #16
 8001efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001efe:	463b      	mov	r3, r7
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001f0a:	4b16      	ldr	r3, [pc, #88]	; (8001f64 <MX_TIM9_Init+0x6c>)
 8001f0c:	4a16      	ldr	r2, [pc, #88]	; (8001f68 <MX_TIM9_Init+0x70>)
 8001f0e:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 719;
 8001f10:	4b14      	ldr	r3, [pc, #80]	; (8001f64 <MX_TIM9_Init+0x6c>)
 8001f12:	f240 22cf 	movw	r2, #719	; 0x2cf
 8001f16:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001f18:	4b12      	ldr	r3, [pc, #72]	; (8001f64 <MX_TIM9_Init+0x6c>)
 8001f1a:	2200      	movs	r2, #0
 8001f1c:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 99;
 8001f1e:	4b11      	ldr	r3, [pc, #68]	; (8001f64 <MX_TIM9_Init+0x6c>)
 8001f20:	2263      	movs	r2, #99	; 0x63
 8001f22:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001f24:	4b0f      	ldr	r3, [pc, #60]	; (8001f64 <MX_TIM9_Init+0x6c>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f2a:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <MX_TIM9_Init+0x6c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001f30:	480c      	ldr	r0, [pc, #48]	; (8001f64 <MX_TIM9_Init+0x6c>)
 8001f32:	f003 ff12 	bl	8005d5a <HAL_TIM_Base_Init>
 8001f36:	4603      	mov	r3, r0
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d001      	beq.n	8001f40 <MX_TIM9_Init+0x48>
  {
    Error_Handler();
 8001f3c:	f7ff fcf2 	bl	8001924 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001f40:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001f44:	603b      	str	r3, [r7, #0]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001f46:	463b      	mov	r3, r7
 8001f48:	4619      	mov	r1, r3
 8001f4a:	4806      	ldr	r0, [pc, #24]	; (8001f64 <MX_TIM9_Init+0x6c>)
 8001f4c:	f004 fb64 	bl	8006618 <HAL_TIM_ConfigClockSource>
 8001f50:	4603      	mov	r3, r0
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d001      	beq.n	8001f5a <MX_TIM9_Init+0x62>
  {
    Error_Handler();
 8001f56:	f7ff fce5 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */

}
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	200005e4 	.word	0x200005e4
 8001f68:	40014000 	.word	0x40014000

08001f6c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001f6c:	b580      	push	{r7, lr}
 8001f6e:	b086      	sub	sp, #24
 8001f70:	af00      	add	r7, sp, #0
 8001f72:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4a27      	ldr	r2, [pc, #156]	; (8002018 <HAL_TIM_Base_MspInit+0xac>)
 8001f7a:	4293      	cmp	r3, r2
 8001f7c:	d114      	bne.n	8001fa8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f7e:	4b27      	ldr	r3, [pc, #156]	; (800201c <HAL_TIM_Base_MspInit+0xb0>)
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	4a26      	ldr	r2, [pc, #152]	; (800201c <HAL_TIM_Base_MspInit+0xb0>)
 8001f84:	f043 0302 	orr.w	r3, r3, #2
 8001f88:	6413      	str	r3, [r2, #64]	; 0x40
 8001f8a:	4b24      	ldr	r3, [pc, #144]	; (800201c <HAL_TIM_Base_MspInit+0xb0>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	617b      	str	r3, [r7, #20]
 8001f94:	697b      	ldr	r3, [r7, #20]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001f96:	2200      	movs	r2, #0
 8001f98:	2100      	movs	r1, #0
 8001f9a:	201d      	movs	r0, #29
 8001f9c:	f000 fb41 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001fa0:	201d      	movs	r0, #29
 8001fa2:	f000 fb5a 	bl	800265a <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }
}
 8001fa6:	e032      	b.n	800200e <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM4)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a1c      	ldr	r2, [pc, #112]	; (8002020 <HAL_TIM_Base_MspInit+0xb4>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d114      	bne.n	8001fdc <HAL_TIM_Base_MspInit+0x70>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fb2:	4b1a      	ldr	r3, [pc, #104]	; (800201c <HAL_TIM_Base_MspInit+0xb0>)
 8001fb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb6:	4a19      	ldr	r2, [pc, #100]	; (800201c <HAL_TIM_Base_MspInit+0xb0>)
 8001fb8:	f043 0304 	orr.w	r3, r3, #4
 8001fbc:	6413      	str	r3, [r2, #64]	; 0x40
 8001fbe:	4b17      	ldr	r3, [pc, #92]	; (800201c <HAL_TIM_Base_MspInit+0xb0>)
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f003 0304 	and.w	r3, r3, #4
 8001fc6:	613b      	str	r3, [r7, #16]
 8001fc8:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001fca:	2200      	movs	r2, #0
 8001fcc:	2100      	movs	r1, #0
 8001fce:	201e      	movs	r0, #30
 8001fd0:	f000 fb27 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001fd4:	201e      	movs	r0, #30
 8001fd6:	f000 fb40 	bl	800265a <HAL_NVIC_EnableIRQ>
}
 8001fda:	e018      	b.n	800200e <HAL_TIM_Base_MspInit+0xa2>
  else if(tim_baseHandle->Instance==TIM9)
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a10      	ldr	r2, [pc, #64]	; (8002024 <HAL_TIM_Base_MspInit+0xb8>)
 8001fe2:	4293      	cmp	r3, r2
 8001fe4:	d113      	bne.n	800200e <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8001fe6:	4b0d      	ldr	r3, [pc, #52]	; (800201c <HAL_TIM_Base_MspInit+0xb0>)
 8001fe8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001fea:	4a0c      	ldr	r2, [pc, #48]	; (800201c <HAL_TIM_Base_MspInit+0xb0>)
 8001fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001ff0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	; (800201c <HAL_TIM_Base_MspInit+0xb0>)
 8001ff4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ff6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001ffa:	60fb      	str	r3, [r7, #12]
 8001ffc:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001ffe:	2200      	movs	r2, #0
 8002000:	2100      	movs	r1, #0
 8002002:	2018      	movs	r0, #24
 8002004:	f000 fb0d 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8002008:	2018      	movs	r0, #24
 800200a:	f000 fb26 	bl	800265a <HAL_NVIC_EnableIRQ>
}
 800200e:	bf00      	nop
 8002010:	3718      	adds	r7, #24
 8002012:	46bd      	mov	sp, r7
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	40000400 	.word	0x40000400
 800201c:	40023800 	.word	0x40023800
 8002020:	40000800 	.word	0x40000800
 8002024:	40014000 	.word	0x40014000

08002028 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b088      	sub	sp, #32
 800202c:	af00      	add	r7, sp, #0
 800202e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002030:	f107 030c 	add.w	r3, r7, #12
 8002034:	2200      	movs	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
 8002038:	605a      	str	r2, [r3, #4]
 800203a:	609a      	str	r2, [r3, #8]
 800203c:	60da      	str	r2, [r3, #12]
 800203e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	4a11      	ldr	r2, [pc, #68]	; (800208c <HAL_TIM_MspPostInit+0x64>)
 8002046:	4293      	cmp	r3, r2
 8002048:	d11c      	bne.n	8002084 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800204a:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_TIM_MspPostInit+0x68>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	4a10      	ldr	r2, [pc, #64]	; (8002090 <HAL_TIM_MspPostInit+0x68>)
 8002050:	f043 0308 	orr.w	r3, r3, #8
 8002054:	6313      	str	r3, [r2, #48]	; 0x30
 8002056:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <HAL_TIM_MspPostInit+0x68>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	f003 0308 	and.w	r3, r3, #8
 800205e:	60bb      	str	r3, [r7, #8]
 8002060:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PD12     ------> TIM4_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002062:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002066:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002068:	2302      	movs	r3, #2
 800206a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206c:	2300      	movs	r3, #0
 800206e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002070:	2300      	movs	r3, #0
 8002072:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002074:	2302      	movs	r3, #2
 8002076:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002078:	f107 030c 	add.w	r3, r7, #12
 800207c:	4619      	mov	r1, r3
 800207e:	4805      	ldr	r0, [pc, #20]	; (8002094 <HAL_TIM_MspPostInit+0x6c>)
 8002080:	f000 fecc 	bl	8002e1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002084:	bf00      	nop
 8002086:	3720      	adds	r7, #32
 8002088:	46bd      	mov	sp, r7
 800208a:	bd80      	pop	{r7, pc}
 800208c:	40000800 	.word	0x40000800
 8002090:	40023800 	.word	0x40023800
 8002094:	40020c00 	.word	0x40020c00

08002098 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800209c:	4b14      	ldr	r3, [pc, #80]	; (80020f0 <MX_USART3_UART_Init+0x58>)
 800209e:	4a15      	ldr	r2, [pc, #84]	; (80020f4 <MX_USART3_UART_Init+0x5c>)
 80020a0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80020a2:	4b13      	ldr	r3, [pc, #76]	; (80020f0 <MX_USART3_UART_Init+0x58>)
 80020a4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020a8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80020aa:	4b11      	ldr	r3, [pc, #68]	; (80020f0 <MX_USART3_UART_Init+0x58>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80020b0:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <MX_USART3_UART_Init+0x58>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80020b6:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <MX_USART3_UART_Init+0x58>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80020bc:	4b0c      	ldr	r3, [pc, #48]	; (80020f0 <MX_USART3_UART_Init+0x58>)
 80020be:	220c      	movs	r2, #12
 80020c0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80020c2:	4b0b      	ldr	r3, [pc, #44]	; (80020f0 <MX_USART3_UART_Init+0x58>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80020c8:	4b09      	ldr	r3, [pc, #36]	; (80020f0 <MX_USART3_UART_Init+0x58>)
 80020ca:	2200      	movs	r2, #0
 80020cc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80020ce:	4b08      	ldr	r3, [pc, #32]	; (80020f0 <MX_USART3_UART_Init+0x58>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80020d4:	4b06      	ldr	r3, [pc, #24]	; (80020f0 <MX_USART3_UART_Init+0x58>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80020da:	4805      	ldr	r0, [pc, #20]	; (80020f0 <MX_USART3_UART_Init+0x58>)
 80020dc:	f004 fff8 	bl	80070d0 <HAL_UART_Init>
 80020e0:	4603      	mov	r3, r0
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d001      	beq.n	80020ea <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80020e6:	f7ff fc1d 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80020ea:	bf00      	nop
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	20000630 	.word	0x20000630
 80020f4:	40004800 	.word	0x40004800

080020f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b0aa      	sub	sp, #168	; 0xa8
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002100:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
 8002108:	605a      	str	r2, [r3, #4]
 800210a:	609a      	str	r2, [r3, #8]
 800210c:	60da      	str	r2, [r3, #12]
 800210e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002110:	f107 0310 	add.w	r3, r7, #16
 8002114:	2284      	movs	r2, #132	; 0x84
 8002116:	2100      	movs	r1, #0
 8002118:	4618      	mov	r0, r3
 800211a:	f007 fed4 	bl	8009ec6 <memset>
  if(uartHandle->Instance==USART3)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	4a26      	ldr	r2, [pc, #152]	; (80021bc <HAL_UART_MspInit+0xc4>)
 8002124:	4293      	cmp	r3, r2
 8002126:	d144      	bne.n	80021b2 <HAL_UART_MspInit+0xba>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002128:	f44f 7380 	mov.w	r3, #256	; 0x100
 800212c:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800212e:	2300      	movs	r3, #0
 8002130:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002132:	f107 0310 	add.w	r3, r7, #16
 8002136:	4618      	mov	r0, r3
 8002138:	f003 f860 	bl	80051fc <HAL_RCCEx_PeriphCLKConfig>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d001      	beq.n	8002146 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8002142:	f7ff fbef 	bl	8001924 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8002146:	4b1e      	ldr	r3, [pc, #120]	; (80021c0 <HAL_UART_MspInit+0xc8>)
 8002148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214a:	4a1d      	ldr	r2, [pc, #116]	; (80021c0 <HAL_UART_MspInit+0xc8>)
 800214c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002150:	6413      	str	r3, [r2, #64]	; 0x40
 8002152:	4b1b      	ldr	r3, [pc, #108]	; (80021c0 <HAL_UART_MspInit+0xc8>)
 8002154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002156:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800215a:	60fb      	str	r3, [r7, #12]
 800215c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800215e:	4b18      	ldr	r3, [pc, #96]	; (80021c0 <HAL_UART_MspInit+0xc8>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	4a17      	ldr	r2, [pc, #92]	; (80021c0 <HAL_UART_MspInit+0xc8>)
 8002164:	f043 0308 	orr.w	r3, r3, #8
 8002168:	6313      	str	r3, [r2, #48]	; 0x30
 800216a:	4b15      	ldr	r3, [pc, #84]	; (80021c0 <HAL_UART_MspInit+0xc8>)
 800216c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800216e:	f003 0308 	and.w	r3, r3, #8
 8002172:	60bb      	str	r3, [r7, #8]
 8002174:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002176:	f44f 7340 	mov.w	r3, #768	; 0x300
 800217a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800217e:	2302      	movs	r3, #2
 8002180:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002184:	2301      	movs	r3, #1
 8002186:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800218a:	2303      	movs	r3, #3
 800218c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002190:	2307      	movs	r3, #7
 8002192:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002196:	f107 0394 	add.w	r3, r7, #148	; 0x94
 800219a:	4619      	mov	r1, r3
 800219c:	4809      	ldr	r0, [pc, #36]	; (80021c4 <HAL_UART_MspInit+0xcc>)
 800219e:	f000 fe3d 	bl	8002e1c <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80021a2:	2200      	movs	r2, #0
 80021a4:	2100      	movs	r1, #0
 80021a6:	2027      	movs	r0, #39	; 0x27
 80021a8:	f000 fa3b 	bl	8002622 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80021ac:	2027      	movs	r0, #39	; 0x27
 80021ae:	f000 fa54 	bl	800265a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80021b2:	bf00      	nop
 80021b4:	37a8      	adds	r7, #168	; 0xa8
 80021b6:	46bd      	mov	sp, r7
 80021b8:	bd80      	pop	{r7, pc}
 80021ba:	bf00      	nop
 80021bc:	40004800 	.word	0x40004800
 80021c0:	40023800 	.word	0x40023800
 80021c4:	40020c00 	.word	0x40020c00

080021c8 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80021cc:	4b14      	ldr	r3, [pc, #80]	; (8002220 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021ce:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80021d2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80021d4:	4b12      	ldr	r3, [pc, #72]	; (8002220 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021d6:	2206      	movs	r2, #6
 80021d8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80021da:	4b11      	ldr	r3, [pc, #68]	; (8002220 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021dc:	2202      	movs	r2, #2
 80021de:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80021e0:	4b0f      	ldr	r3, [pc, #60]	; (8002220 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80021e6:	4b0e      	ldr	r3, [pc, #56]	; (8002220 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021e8:	2202      	movs	r2, #2
 80021ea:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80021ec:	4b0c      	ldr	r3, [pc, #48]	; (8002220 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021ee:	2201      	movs	r2, #1
 80021f0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80021f2:	4b0b      	ldr	r3, [pc, #44]	; (8002220 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80021f8:	4b09      	ldr	r3, [pc, #36]	; (8002220 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80021fa:	2200      	movs	r2, #0
 80021fc:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80021fe:	4b08      	ldr	r3, [pc, #32]	; (8002220 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002200:	2201      	movs	r2, #1
 8002202:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002206:	2200      	movs	r2, #0
 8002208:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800220a:	4805      	ldr	r0, [pc, #20]	; (8002220 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800220c:	f002 f9d3 	bl	80045b6 <HAL_PCD_Init>
 8002210:	4603      	mov	r3, r0
 8002212:	2b00      	cmp	r3, #0
 8002214:	d001      	beq.n	800221a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002216:	f7ff fb85 	bl	8001924 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800221a:	bf00      	nop
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	200006b8 	.word	0x200006b8

08002224 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b0ac      	sub	sp, #176	; 0xb0
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800222c:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002230:	2200      	movs	r2, #0
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	605a      	str	r2, [r3, #4]
 8002236:	609a      	str	r2, [r3, #8]
 8002238:	60da      	str	r2, [r3, #12]
 800223a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800223c:	f107 0318 	add.w	r3, r7, #24
 8002240:	2284      	movs	r2, #132	; 0x84
 8002242:	2100      	movs	r1, #0
 8002244:	4618      	mov	r0, r3
 8002246:	f007 fe3e 	bl	8009ec6 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002252:	d159      	bne.n	8002308 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002254:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002258:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 800225a:	2300      	movs	r3, #0
 800225c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002260:	f107 0318 	add.w	r3, r7, #24
 8002264:	4618      	mov	r0, r3
 8002266:	f002 ffc9 	bl	80051fc <HAL_RCCEx_PeriphCLKConfig>
 800226a:	4603      	mov	r3, r0
 800226c:	2b00      	cmp	r3, #0
 800226e:	d001      	beq.n	8002274 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 8002270:	f7ff fb58 	bl	8001924 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002274:	4b26      	ldr	r3, [pc, #152]	; (8002310 <HAL_PCD_MspInit+0xec>)
 8002276:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002278:	4a25      	ldr	r2, [pc, #148]	; (8002310 <HAL_PCD_MspInit+0xec>)
 800227a:	f043 0301 	orr.w	r3, r3, #1
 800227e:	6313      	str	r3, [r2, #48]	; 0x30
 8002280:	4b23      	ldr	r3, [pc, #140]	; (8002310 <HAL_PCD_MspInit+0xec>)
 8002282:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002284:	f003 0301 	and.w	r3, r3, #1
 8002288:	617b      	str	r3, [r7, #20]
 800228a:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800228c:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8002290:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800229a:	2300      	movs	r3, #0
 800229c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022a0:	2303      	movs	r3, #3
 80022a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80022a6:	230a      	movs	r3, #10
 80022a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022b0:	4619      	mov	r1, r3
 80022b2:	4818      	ldr	r0, [pc, #96]	; (8002314 <HAL_PCD_MspInit+0xf0>)
 80022b4:	f000 fdb2 	bl	8002e1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80022b8:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022bc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80022c0:	2300      	movs	r3, #0
 80022c2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022c6:	2300      	movs	r3, #0
 80022c8:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80022cc:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80022d0:	4619      	mov	r1, r3
 80022d2:	4810      	ldr	r0, [pc, #64]	; (8002314 <HAL_PCD_MspInit+0xf0>)
 80022d4:	f000 fda2 	bl	8002e1c <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80022d8:	4b0d      	ldr	r3, [pc, #52]	; (8002310 <HAL_PCD_MspInit+0xec>)
 80022da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022dc:	4a0c      	ldr	r2, [pc, #48]	; (8002310 <HAL_PCD_MspInit+0xec>)
 80022de:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80022e2:	6353      	str	r3, [r2, #52]	; 0x34
 80022e4:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <HAL_PCD_MspInit+0xec>)
 80022e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80022e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022ec:	613b      	str	r3, [r7, #16]
 80022ee:	693b      	ldr	r3, [r7, #16]
 80022f0:	4b07      	ldr	r3, [pc, #28]	; (8002310 <HAL_PCD_MspInit+0xec>)
 80022f2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022f4:	4a06      	ldr	r2, [pc, #24]	; (8002310 <HAL_PCD_MspInit+0xec>)
 80022f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022fa:	6453      	str	r3, [r2, #68]	; 0x44
 80022fc:	4b04      	ldr	r3, [pc, #16]	; (8002310 <HAL_PCD_MspInit+0xec>)
 80022fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002300:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002304:	60fb      	str	r3, [r7, #12]
 8002306:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002308:	bf00      	nop
 800230a:	37b0      	adds	r7, #176	; 0xb0
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}
 8002310:	40023800 	.word	0x40023800
 8002314:	40020000 	.word	0x40020000

08002318 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002318:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002350 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800231c:	480d      	ldr	r0, [pc, #52]	; (8002354 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800231e:	490e      	ldr	r1, [pc, #56]	; (8002358 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002320:	4a0e      	ldr	r2, [pc, #56]	; (800235c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002322:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002324:	e002      	b.n	800232c <LoopCopyDataInit>

08002326 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002326:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002328:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800232a:	3304      	adds	r3, #4

0800232c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800232c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800232e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002330:	d3f9      	bcc.n	8002326 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002332:	4a0b      	ldr	r2, [pc, #44]	; (8002360 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002334:	4c0b      	ldr	r4, [pc, #44]	; (8002364 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002336:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002338:	e001      	b.n	800233e <LoopFillZerobss>

0800233a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800233a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800233c:	3204      	adds	r2, #4

0800233e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800233e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002340:	d3fb      	bcc.n	800233a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002342:	f7ff fcff 	bl	8001d44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002346:	f007 fe17 	bl	8009f78 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800234a:	f7ff fa47 	bl	80017dc <main>
  bx  lr    
 800234e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002350:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002354:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002358:	200001e8 	.word	0x200001e8
  ldr r2, =_sidata
 800235c:	0800dc08 	.word	0x0800dc08
  ldr r2, =_sbss
 8002360:	20000328 	.word	0x20000328
  ldr r4, =_ebss
 8002364:	20000d24 	.word	0x20000d24

08002368 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002368:	e7fe      	b.n	8002368 <ADC_IRQHandler>

0800236a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800236e:	2003      	movs	r0, #3
 8002370:	f000 f94c 	bl	800260c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002374:	2000      	movs	r0, #0
 8002376:	f000 f805 	bl	8002384 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800237a:	f7ff fb81 	bl	8001a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800237e:	2300      	movs	r3, #0
}
 8002380:	4618      	mov	r0, r3
 8002382:	bd80      	pop	{r7, pc}

08002384 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800238c:	4b12      	ldr	r3, [pc, #72]	; (80023d8 <HAL_InitTick+0x54>)
 800238e:	681a      	ldr	r2, [r3, #0]
 8002390:	4b12      	ldr	r3, [pc, #72]	; (80023dc <HAL_InitTick+0x58>)
 8002392:	781b      	ldrb	r3, [r3, #0]
 8002394:	4619      	mov	r1, r3
 8002396:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800239a:	fbb3 f3f1 	udiv	r3, r3, r1
 800239e:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a2:	4618      	mov	r0, r3
 80023a4:	f000 f967 	bl	8002676 <HAL_SYSTICK_Config>
 80023a8:	4603      	mov	r3, r0
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d001      	beq.n	80023b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e00e      	b.n	80023d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2b0f      	cmp	r3, #15
 80023b6:	d80a      	bhi.n	80023ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80023b8:	2200      	movs	r2, #0
 80023ba:	6879      	ldr	r1, [r7, #4]
 80023bc:	f04f 30ff 	mov.w	r0, #4294967295
 80023c0:	f000 f92f 	bl	8002622 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80023c4:	4a06      	ldr	r2, [pc, #24]	; (80023e0 <HAL_InitTick+0x5c>)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80023ca:	2300      	movs	r3, #0
 80023cc:	e000      	b.n	80023d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80023ce:	2301      	movs	r3, #1
}
 80023d0:	4618      	mov	r0, r3
 80023d2:	3708      	adds	r7, #8
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000000 	.word	0x20000000
 80023dc:	20000008 	.word	0x20000008
 80023e0:	20000004 	.word	0x20000004

080023e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023e4:	b480      	push	{r7}
 80023e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023e8:	4b06      	ldr	r3, [pc, #24]	; (8002404 <HAL_IncTick+0x20>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	461a      	mov	r2, r3
 80023ee:	4b06      	ldr	r3, [pc, #24]	; (8002408 <HAL_IncTick+0x24>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	4413      	add	r3, r2
 80023f4:	4a04      	ldr	r2, [pc, #16]	; (8002408 <HAL_IncTick+0x24>)
 80023f6:	6013      	str	r3, [r2, #0]
}
 80023f8:	bf00      	nop
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr
 8002402:	bf00      	nop
 8002404:	20000008 	.word	0x20000008
 8002408:	20000bc0 	.word	0x20000bc0

0800240c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800240c:	b480      	push	{r7}
 800240e:	af00      	add	r7, sp, #0
  return uwTick;
 8002410:	4b03      	ldr	r3, [pc, #12]	; (8002420 <HAL_GetTick+0x14>)
 8002412:	681b      	ldr	r3, [r3, #0]
}
 8002414:	4618      	mov	r0, r3
 8002416:	46bd      	mov	sp, r7
 8002418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241c:	4770      	bx	lr
 800241e:	bf00      	nop
 8002420:	20000bc0 	.word	0x20000bc0

08002424 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b084      	sub	sp, #16
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800242c:	f7ff ffee 	bl	800240c <HAL_GetTick>
 8002430:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002436:	68fb      	ldr	r3, [r7, #12]
 8002438:	f1b3 3fff 	cmp.w	r3, #4294967295
 800243c:	d005      	beq.n	800244a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800243e:	4b0a      	ldr	r3, [pc, #40]	; (8002468 <HAL_Delay+0x44>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	461a      	mov	r2, r3
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	4413      	add	r3, r2
 8002448:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800244a:	bf00      	nop
 800244c:	f7ff ffde 	bl	800240c <HAL_GetTick>
 8002450:	4602      	mov	r2, r0
 8002452:	68bb      	ldr	r3, [r7, #8]
 8002454:	1ad3      	subs	r3, r2, r3
 8002456:	68fa      	ldr	r2, [r7, #12]
 8002458:	429a      	cmp	r2, r3
 800245a:	d8f7      	bhi.n	800244c <HAL_Delay+0x28>
  {
  }
}
 800245c:	bf00      	nop
 800245e:	bf00      	nop
 8002460:	3710      	adds	r7, #16
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	20000008 	.word	0x20000008

0800246c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800246c:	b480      	push	{r7}
 800246e:	b085      	sub	sp, #20
 8002470:	af00      	add	r7, sp, #0
 8002472:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	f003 0307 	and.w	r3, r3, #7
 800247a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800247c:	4b0b      	ldr	r3, [pc, #44]	; (80024ac <__NVIC_SetPriorityGrouping+0x40>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002482:	68ba      	ldr	r2, [r7, #8]
 8002484:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002488:	4013      	ands	r3, r2
 800248a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002494:	4b06      	ldr	r3, [pc, #24]	; (80024b0 <__NVIC_SetPriorityGrouping+0x44>)
 8002496:	4313      	orrs	r3, r2
 8002498:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800249a:	4a04      	ldr	r2, [pc, #16]	; (80024ac <__NVIC_SetPriorityGrouping+0x40>)
 800249c:	68bb      	ldr	r3, [r7, #8]
 800249e:	60d3      	str	r3, [r2, #12]
}
 80024a0:	bf00      	nop
 80024a2:	3714      	adds	r7, #20
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr
 80024ac:	e000ed00 	.word	0xe000ed00
 80024b0:	05fa0000 	.word	0x05fa0000

080024b4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80024b4:	b480      	push	{r7}
 80024b6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80024b8:	4b04      	ldr	r3, [pc, #16]	; (80024cc <__NVIC_GetPriorityGrouping+0x18>)
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	0a1b      	lsrs	r3, r3, #8
 80024be:	f003 0307 	and.w	r3, r3, #7
}
 80024c2:	4618      	mov	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ca:	4770      	bx	lr
 80024cc:	e000ed00 	.word	0xe000ed00

080024d0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	db0b      	blt.n	80024fa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024e2:	79fb      	ldrb	r3, [r7, #7]
 80024e4:	f003 021f 	and.w	r2, r3, #31
 80024e8:	4907      	ldr	r1, [pc, #28]	; (8002508 <__NVIC_EnableIRQ+0x38>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	095b      	lsrs	r3, r3, #5
 80024f0:	2001      	movs	r0, #1
 80024f2:	fa00 f202 	lsl.w	r2, r0, r2
 80024f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024fa:	bf00      	nop
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	e000e100 	.word	0xe000e100

0800250c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800250c:	b480      	push	{r7}
 800250e:	b083      	sub	sp, #12
 8002510:	af00      	add	r7, sp, #0
 8002512:	4603      	mov	r3, r0
 8002514:	6039      	str	r1, [r7, #0]
 8002516:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002518:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800251c:	2b00      	cmp	r3, #0
 800251e:	db0a      	blt.n	8002536 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002520:	683b      	ldr	r3, [r7, #0]
 8002522:	b2da      	uxtb	r2, r3
 8002524:	490c      	ldr	r1, [pc, #48]	; (8002558 <__NVIC_SetPriority+0x4c>)
 8002526:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800252a:	0112      	lsls	r2, r2, #4
 800252c:	b2d2      	uxtb	r2, r2
 800252e:	440b      	add	r3, r1
 8002530:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002534:	e00a      	b.n	800254c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	b2da      	uxtb	r2, r3
 800253a:	4908      	ldr	r1, [pc, #32]	; (800255c <__NVIC_SetPriority+0x50>)
 800253c:	79fb      	ldrb	r3, [r7, #7]
 800253e:	f003 030f 	and.w	r3, r3, #15
 8002542:	3b04      	subs	r3, #4
 8002544:	0112      	lsls	r2, r2, #4
 8002546:	b2d2      	uxtb	r2, r2
 8002548:	440b      	add	r3, r1
 800254a:	761a      	strb	r2, [r3, #24]
}
 800254c:	bf00      	nop
 800254e:	370c      	adds	r7, #12
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr
 8002558:	e000e100 	.word	0xe000e100
 800255c:	e000ed00 	.word	0xe000ed00

08002560 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002560:	b480      	push	{r7}
 8002562:	b089      	sub	sp, #36	; 0x24
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	60b9      	str	r1, [r7, #8]
 800256a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	f003 0307 	and.w	r3, r3, #7
 8002572:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002574:	69fb      	ldr	r3, [r7, #28]
 8002576:	f1c3 0307 	rsb	r3, r3, #7
 800257a:	2b04      	cmp	r3, #4
 800257c:	bf28      	it	cs
 800257e:	2304      	movcs	r3, #4
 8002580:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002582:	69fb      	ldr	r3, [r7, #28]
 8002584:	3304      	adds	r3, #4
 8002586:	2b06      	cmp	r3, #6
 8002588:	d902      	bls.n	8002590 <NVIC_EncodePriority+0x30>
 800258a:	69fb      	ldr	r3, [r7, #28]
 800258c:	3b03      	subs	r3, #3
 800258e:	e000      	b.n	8002592 <NVIC_EncodePriority+0x32>
 8002590:	2300      	movs	r3, #0
 8002592:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002594:	f04f 32ff 	mov.w	r2, #4294967295
 8002598:	69bb      	ldr	r3, [r7, #24]
 800259a:	fa02 f303 	lsl.w	r3, r2, r3
 800259e:	43da      	mvns	r2, r3
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	401a      	ands	r2, r3
 80025a4:	697b      	ldr	r3, [r7, #20]
 80025a6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80025a8:	f04f 31ff 	mov.w	r1, #4294967295
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	fa01 f303 	lsl.w	r3, r1, r3
 80025b2:	43d9      	mvns	r1, r3
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80025b8:	4313      	orrs	r3, r2
         );
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3724      	adds	r7, #36	; 0x24
 80025be:	46bd      	mov	sp, r7
 80025c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025c4:	4770      	bx	lr
	...

080025c8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80025c8:	b580      	push	{r7, lr}
 80025ca:	b082      	sub	sp, #8
 80025cc:	af00      	add	r7, sp, #0
 80025ce:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3b01      	subs	r3, #1
 80025d4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80025d8:	d301      	bcc.n	80025de <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80025da:	2301      	movs	r3, #1
 80025dc:	e00f      	b.n	80025fe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025de:	4a0a      	ldr	r2, [pc, #40]	; (8002608 <SysTick_Config+0x40>)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	3b01      	subs	r3, #1
 80025e4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025e6:	210f      	movs	r1, #15
 80025e8:	f04f 30ff 	mov.w	r0, #4294967295
 80025ec:	f7ff ff8e 	bl	800250c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <SysTick_Config+0x40>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025f6:	4b04      	ldr	r3, [pc, #16]	; (8002608 <SysTick_Config+0x40>)
 80025f8:	2207      	movs	r2, #7
 80025fa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}
 8002606:	bf00      	nop
 8002608:	e000e010 	.word	0xe000e010

0800260c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff ff29 	bl	800246c <__NVIC_SetPriorityGrouping>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}

08002622 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002622:	b580      	push	{r7, lr}
 8002624:	b086      	sub	sp, #24
 8002626:	af00      	add	r7, sp, #0
 8002628:	4603      	mov	r3, r0
 800262a:	60b9      	str	r1, [r7, #8]
 800262c:	607a      	str	r2, [r7, #4]
 800262e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002630:	2300      	movs	r3, #0
 8002632:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002634:	f7ff ff3e 	bl	80024b4 <__NVIC_GetPriorityGrouping>
 8002638:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800263a:	687a      	ldr	r2, [r7, #4]
 800263c:	68b9      	ldr	r1, [r7, #8]
 800263e:	6978      	ldr	r0, [r7, #20]
 8002640:	f7ff ff8e 	bl	8002560 <NVIC_EncodePriority>
 8002644:	4602      	mov	r2, r0
 8002646:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800264a:	4611      	mov	r1, r2
 800264c:	4618      	mov	r0, r3
 800264e:	f7ff ff5d 	bl	800250c <__NVIC_SetPriority>
}
 8002652:	bf00      	nop
 8002654:	3718      	adds	r7, #24
 8002656:	46bd      	mov	sp, r7
 8002658:	bd80      	pop	{r7, pc}

0800265a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800265a:	b580      	push	{r7, lr}
 800265c:	b082      	sub	sp, #8
 800265e:	af00      	add	r7, sp, #0
 8002660:	4603      	mov	r3, r0
 8002662:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002664:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002668:	4618      	mov	r0, r3
 800266a:	f7ff ff31 	bl	80024d0 <__NVIC_EnableIRQ>
}
 800266e:	bf00      	nop
 8002670:	3708      	adds	r7, #8
 8002672:	46bd      	mov	sp, r7
 8002674:	bd80      	pop	{r7, pc}

08002676 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002676:	b580      	push	{r7, lr}
 8002678:	b082      	sub	sp, #8
 800267a:	af00      	add	r7, sp, #0
 800267c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7ff ffa2 	bl	80025c8 <SysTick_Config>
 8002684:	4603      	mov	r3, r0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3708      	adds	r7, #8
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b084      	sub	sp, #16
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800269a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800269c:	f7ff feb6 	bl	800240c <HAL_GetTick>
 80026a0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80026a8:	b2db      	uxtb	r3, r3
 80026aa:	2b02      	cmp	r3, #2
 80026ac:	d008      	beq.n	80026c0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	2280      	movs	r2, #128	; 0x80
 80026b2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2200      	movs	r2, #0
 80026b8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e052      	b.n	8002766 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	681a      	ldr	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	f022 0216 	bic.w	r2, r2, #22
 80026ce:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	695a      	ldr	r2, [r3, #20]
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80026de:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d103      	bne.n	80026f0 <HAL_DMA_Abort+0x62>
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d007      	beq.n	8002700 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	681a      	ldr	r2, [r3, #0]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f022 0208 	bic.w	r2, r2, #8
 80026fe:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f022 0201 	bic.w	r2, r2, #1
 800270e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002710:	e013      	b.n	800273a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002712:	f7ff fe7b 	bl	800240c <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b05      	cmp	r3, #5
 800271e:	d90c      	bls.n	800273a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	2220      	movs	r2, #32
 8002724:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2203      	movs	r2, #3
 800272a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	2200      	movs	r2, #0
 8002732:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8002736:	2303      	movs	r3, #3
 8002738:	e015      	b.n	8002766 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f003 0301 	and.w	r3, r3, #1
 8002744:	2b00      	cmp	r3, #0
 8002746:	d1e4      	bne.n	8002712 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800274c:	223f      	movs	r2, #63	; 0x3f
 800274e:	409a      	lsls	r2, r3
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8002764:	2300      	movs	r3, #0
}
 8002766:	4618      	mov	r0, r3
 8002768:	3710      	adds	r7, #16
 800276a:	46bd      	mov	sp, r7
 800276c:	bd80      	pop	{r7, pc}

0800276e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800276e:	b480      	push	{r7}
 8002770:	b083      	sub	sp, #12
 8002772:	af00      	add	r7, sp, #0
 8002774:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800277c:	b2db      	uxtb	r3, r3
 800277e:	2b02      	cmp	r3, #2
 8002780:	d004      	beq.n	800278c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2280      	movs	r2, #128	; 0x80
 8002786:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e00c      	b.n	80027a6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2205      	movs	r2, #5
 8002790:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	681a      	ldr	r2, [r3, #0]
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f022 0201 	bic.w	r2, r2, #1
 80027a2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027a4:	2300      	movs	r3, #0
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	370c      	adds	r7, #12
 80027aa:	46bd      	mov	sp, r7
 80027ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b0:	4770      	bx	lr

080027b2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80027b2:	b480      	push	{r7}
 80027b4:	b083      	sub	sp, #12
 80027b6:	af00      	add	r7, sp, #0
 80027b8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80027c0:	b2db      	uxtb	r3, r3
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr
	...

080027d0 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b084      	sub	sp, #16
 80027d4:	af00      	add	r7, sp, #0
 80027d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d101      	bne.n	80027e2 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80027de:	2301      	movs	r3, #1
 80027e0:	e06a      	b.n	80028b8 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d106      	bne.n	80027fa <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2223      	movs	r2, #35	; 0x23
 80027f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80027f4:	6878      	ldr	r0, [r7, #4]
 80027f6:	f7fe fdb5 	bl	8001364 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027fa:	4b31      	ldr	r3, [pc, #196]	; (80028c0 <HAL_ETH_Init+0xf0>)
 80027fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027fe:	4a30      	ldr	r2, [pc, #192]	; (80028c0 <HAL_ETH_Init+0xf0>)
 8002800:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002804:	6453      	str	r3, [r2, #68]	; 0x44
 8002806:	4b2e      	ldr	r3, [pc, #184]	; (80028c0 <HAL_ETH_Init+0xf0>)
 8002808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8002812:	4b2c      	ldr	r3, [pc, #176]	; (80028c4 <HAL_ETH_Init+0xf4>)
 8002814:	685b      	ldr	r3, [r3, #4]
 8002816:	4a2b      	ldr	r2, [pc, #172]	; (80028c4 <HAL_ETH_Init+0xf4>)
 8002818:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800281c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800281e:	4b29      	ldr	r3, [pc, #164]	; (80028c4 <HAL_ETH_Init+0xf4>)
 8002820:	685a      	ldr	r2, [r3, #4]
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	4927      	ldr	r1, [pc, #156]	; (80028c4 <HAL_ETH_Init+0xf4>)
 8002828:	4313      	orrs	r3, r2
 800282a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800282c:	4b25      	ldr	r3, [pc, #148]	; (80028c4 <HAL_ETH_Init+0xf4>)
 800282e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	6812      	ldr	r2, [r2, #0]
 800283e:	f043 0301 	orr.w	r3, r3, #1
 8002842:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002846:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002848:	f7ff fde0 	bl	800240c <HAL_GetTick>
 800284c:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800284e:	e011      	b.n	8002874 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8002850:	f7ff fddc 	bl	800240c <HAL_GetTick>
 8002854:	4602      	mov	r2, r0
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	1ad3      	subs	r3, r2, r3
 800285a:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800285e:	d909      	bls.n	8002874 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	2204      	movs	r2, #4
 8002864:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	22e0      	movs	r2, #224	; 0xe0
 800286c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8002870:	2301      	movs	r3, #1
 8002872:	e021      	b.n	80028b8 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f003 0301 	and.w	r3, r3, #1
 8002882:	2b00      	cmp	r3, #0
 8002884:	d1e4      	bne.n	8002850 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002886:	6878      	ldr	r0, [r7, #4]
 8002888:	f000 f958 	bl	8002b3c <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 800288c:	6878      	ldr	r0, [r7, #4]
 800288e:	f000 f9ff 	bl	8002c90 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f000 fa55 	bl	8002d42 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	685b      	ldr	r3, [r3, #4]
 800289c:	461a      	mov	r2, r3
 800289e:	2100      	movs	r1, #0
 80028a0:	6878      	ldr	r0, [r7, #4]
 80028a2:	f000 f9bd 	bl	8002c20 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	2200      	movs	r2, #0
 80028aa:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	2210      	movs	r2, #16
 80028b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 80028b6:	2300      	movs	r3, #0
}
 80028b8:	4618      	mov	r0, r3
 80028ba:	3710      	adds	r7, #16
 80028bc:	46bd      	mov	sp, r7
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	40023800 	.word	0x40023800
 80028c4:	40013800 	.word	0x40013800

080028c8 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b084      	sub	sp, #16
 80028cc:	af00      	add	r7, sp, #0
 80028ce:	6078      	str	r0, [r7, #4]
 80028d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 80028da:	68fa      	ldr	r2, [r7, #12]
 80028dc:	4b51      	ldr	r3, [pc, #324]	; (8002a24 <ETH_SetMACConfig+0x15c>)
 80028de:	4013      	ands	r3, r2
 80028e0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	7c1b      	ldrb	r3, [r3, #16]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d102      	bne.n	80028f0 <ETH_SetMACConfig+0x28>
 80028ea:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80028ee:	e000      	b.n	80028f2 <ETH_SetMACConfig+0x2a>
 80028f0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	7c5b      	ldrb	r3, [r3, #17]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d102      	bne.n	8002900 <ETH_SetMACConfig+0x38>
 80028fa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028fe:	e000      	b.n	8002902 <ETH_SetMACConfig+0x3a>
 8002900:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8002902:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8002908:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 800290a:	683b      	ldr	r3, [r7, #0]
 800290c:	7fdb      	ldrb	r3, [r3, #31]
 800290e:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8002910:	431a      	orrs	r2, r3
                        macconf->Speed |
 8002912:	683b      	ldr	r3, [r7, #0]
 8002914:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8002916:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002918:	683a      	ldr	r2, [r7, #0]
 800291a:	7f92      	ldrb	r2, [r2, #30]
 800291c:	2a00      	cmp	r2, #0
 800291e:	d102      	bne.n	8002926 <ETH_SetMACConfig+0x5e>
 8002920:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002924:	e000      	b.n	8002928 <ETH_SetMACConfig+0x60>
 8002926:	2200      	movs	r2, #0
                        macconf->Speed |
 8002928:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	7f1b      	ldrb	r3, [r3, #28]
 800292e:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8002930:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8002936:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002938:	683b      	ldr	r3, [r7, #0]
 800293a:	791b      	ldrb	r3, [r3, #4]
 800293c:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800293e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002940:	683a      	ldr	r2, [r7, #0]
 8002942:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002946:	2a00      	cmp	r2, #0
 8002948:	d102      	bne.n	8002950 <ETH_SetMACConfig+0x88>
 800294a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800294e:	e000      	b.n	8002952 <ETH_SetMACConfig+0x8a>
 8002950:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002952:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002954:	683b      	ldr	r3, [r7, #0]
 8002956:	7bdb      	ldrb	r3, [r3, #15]
 8002958:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800295a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002960:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002968:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800296a:	4313      	orrs	r3, r2
 800296c:	68fa      	ldr	r2, [r7, #12]
 800296e:	4313      	orrs	r3, r2
 8002970:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	68fa      	ldr	r2, [r7, #12]
 8002978:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002982:	2001      	movs	r0, #1
 8002984:	f7ff fd4e 	bl	8002424 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	699b      	ldr	r3, [r3, #24]
 8002996:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002998:	68fa      	ldr	r2, [r7, #12]
 800299a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800299e:	4013      	ands	r3, r2
 80029a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80029a6:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80029a8:	683a      	ldr	r2, [r7, #0]
 80029aa:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 80029ae:	2a00      	cmp	r2, #0
 80029b0:	d101      	bne.n	80029b6 <ETH_SetMACConfig+0xee>
 80029b2:	2280      	movs	r2, #128	; 0x80
 80029b4:	e000      	b.n	80029b8 <ETH_SetMACConfig+0xf0>
 80029b6:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029b8:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 80029be:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80029c0:	683a      	ldr	r2, [r7, #0]
 80029c2:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 80029c6:	2a01      	cmp	r2, #1
 80029c8:	d101      	bne.n	80029ce <ETH_SetMACConfig+0x106>
 80029ca:	2208      	movs	r2, #8
 80029cc:	e000      	b.n	80029d0 <ETH_SetMACConfig+0x108>
 80029ce:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 80029d0:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 80029d2:	683a      	ldr	r2, [r7, #0]
 80029d4:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 80029d8:	2a01      	cmp	r2, #1
 80029da:	d101      	bne.n	80029e0 <ETH_SetMACConfig+0x118>
 80029dc:	2204      	movs	r2, #4
 80029de:	e000      	b.n	80029e2 <ETH_SetMACConfig+0x11a>
 80029e0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80029e2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80029ea:	2a01      	cmp	r2, #1
 80029ec:	d101      	bne.n	80029f2 <ETH_SetMACConfig+0x12a>
 80029ee:	2202      	movs	r2, #2
 80029f0:	e000      	b.n	80029f4 <ETH_SetMACConfig+0x12c>
 80029f2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80029f4:	4313      	orrs	r3, r2
 80029f6:	68fa      	ldr	r2, [r7, #12]
 80029f8:	4313      	orrs	r3, r2
 80029fa:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	68fa      	ldr	r2, [r7, #12]
 8002a02:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	699b      	ldr	r3, [r3, #24]
 8002a0a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002a0c:	2001      	movs	r0, #1
 8002a0e:	f7ff fd09 	bl	8002424 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	68fa      	ldr	r2, [r7, #12]
 8002a18:	619a      	str	r2, [r3, #24]
}
 8002a1a:	bf00      	nop
 8002a1c:	3710      	adds	r7, #16
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	bd80      	pop	{r7, pc}
 8002a22:	bf00      	nop
 8002a24:	ff20810f 	.word	0xff20810f

08002a28 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b084      	sub	sp, #16
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
 8002a30:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002a3a:	699b      	ldr	r3, [r3, #24]
 8002a3c:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8002a3e:	68fa      	ldr	r2, [r7, #12]
 8002a40:	4b3d      	ldr	r3, [pc, #244]	; (8002b38 <ETH_SetDMAConfig+0x110>)
 8002a42:	4013      	ands	r3, r2
 8002a44:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	7b1b      	ldrb	r3, [r3, #12]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d102      	bne.n	8002a54 <ETH_SetDMAConfig+0x2c>
 8002a4e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002a52:	e000      	b.n	8002a56 <ETH_SetDMAConfig+0x2e>
 8002a54:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	7b5b      	ldrb	r3, [r3, #13]
 8002a5a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a5c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a5e:	683a      	ldr	r2, [r7, #0]
 8002a60:	7f52      	ldrb	r2, [r2, #29]
 8002a62:	2a00      	cmp	r2, #0
 8002a64:	d102      	bne.n	8002a6c <ETH_SetDMAConfig+0x44>
 8002a66:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002a6a:	e000      	b.n	8002a6e <ETH_SetDMAConfig+0x46>
 8002a6c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002a6e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	7b9b      	ldrb	r3, [r3, #14]
 8002a74:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002a76:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002a7c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a7e:	683b      	ldr	r3, [r7, #0]
 8002a80:	7f1b      	ldrb	r3, [r3, #28]
 8002a82:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002a84:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	7f9b      	ldrb	r3, [r3, #30]
 8002a8a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8002a8c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002a92:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002a9a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002a9c:	4313      	orrs	r3, r2
 8002a9e:	68fa      	ldr	r2, [r7, #12]
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aac:	461a      	mov	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002abe:	2001      	movs	r0, #1
 8002ac0:	f7ff fcb0 	bl	8002424 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002acc:	461a      	mov	r2, r3
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	791b      	ldrb	r3, [r3, #4]
 8002ad6:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002adc:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8002ae2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8002ae8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002aea:	683b      	ldr	r3, [r7, #0]
 8002aec:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002af0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8002af2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002af4:	683b      	ldr	r3, [r7, #0]
 8002af6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002af8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8002afa:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8002b00:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002b02:	687a      	ldr	r2, [r7, #4]
 8002b04:	6812      	ldr	r2, [r2, #0]
 8002b06:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002b0a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002b0e:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002b1c:	2001      	movs	r0, #1
 8002b1e:	f7ff fc81 	bl	8002424 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002b2a:	461a      	mov	r2, r3
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6013      	str	r3, [r2, #0]
}
 8002b30:	bf00      	nop
 8002b32:	3710      	adds	r7, #16
 8002b34:	46bd      	mov	sp, r7
 8002b36:	bd80      	pop	{r7, pc}
 8002b38:	f8de3f23 	.word	0xf8de3f23

08002b3c <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b0a6      	sub	sp, #152	; 0x98
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002b44:	2301      	movs	r3, #1
 8002b46:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8002b4a:	2301      	movs	r3, #1
 8002b4c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002b50:	2300      	movs	r3, #0
 8002b52:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002b54:	2300      	movs	r3, #0
 8002b56:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002b60:	2300      	movs	r3, #0
 8002b62:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002b66:	2301      	movs	r3, #1
 8002b68:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002b72:	2300      	movs	r3, #0
 8002b74:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002b82:	2300      	movs	r3, #0
 8002b84:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002b86:	2300      	movs	r3, #0
 8002b88:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002b92:	2300      	movs	r3, #0
 8002b94:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002b98:	2300      	movs	r3, #0
 8002b9a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8002b9e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002ba2:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002ba4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002ba8:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002baa:	2300      	movs	r3, #0
 8002bac:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002bb0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	6878      	ldr	r0, [r7, #4]
 8002bb8:	f7ff fe86 	bl	80028c8 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8002bbc:	2301      	movs	r3, #1
 8002bbe:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002bc0:	2301      	movs	r3, #1
 8002bc2:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002bc4:	2301      	movs	r3, #1
 8002bc6:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8002bde:	2300      	movs	r3, #0
 8002be0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8002be2:	2301      	movs	r3, #1
 8002be4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002be8:	2301      	movs	r3, #1
 8002bea:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002bec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002bf0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8002bf2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8002bf6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002bf8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002bfc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8002bfe:	2301      	movs	r3, #1
 8002c00:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8002c04:	2300      	movs	r3, #0
 8002c06:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8002c08:	2300      	movs	r3, #0
 8002c0a:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002c0c:	f107 0308 	add.w	r3, r7, #8
 8002c10:	4619      	mov	r1, r3
 8002c12:	6878      	ldr	r0, [r7, #4]
 8002c14:	f7ff ff08 	bl	8002a28 <ETH_SetDMAConfig>
}
 8002c18:	bf00      	nop
 8002c1a:	3798      	adds	r7, #152	; 0x98
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}

08002c20 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8002c20:	b480      	push	{r7}
 8002c22:	b087      	sub	sp, #28
 8002c24:	af00      	add	r7, sp, #0
 8002c26:	60f8      	str	r0, [r7, #12]
 8002c28:	60b9      	str	r1, [r7, #8]
 8002c2a:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	3305      	adds	r3, #5
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	021b      	lsls	r3, r3, #8
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	3204      	adds	r2, #4
 8002c38:	7812      	ldrb	r2, [r2, #0]
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	4b11      	ldr	r3, [pc, #68]	; (8002c88 <ETH_MACAddressConfig+0x68>)
 8002c42:	4413      	add	r3, r2
 8002c44:	461a      	mov	r2, r3
 8002c46:	697b      	ldr	r3, [r7, #20]
 8002c48:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	3303      	adds	r3, #3
 8002c4e:	781b      	ldrb	r3, [r3, #0]
 8002c50:	061a      	lsls	r2, r3, #24
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	3302      	adds	r3, #2
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	041b      	lsls	r3, r3, #16
 8002c5a:	431a      	orrs	r2, r3
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	3301      	adds	r3, #1
 8002c60:	781b      	ldrb	r3, [r3, #0]
 8002c62:	021b      	lsls	r3, r3, #8
 8002c64:	4313      	orrs	r3, r2
 8002c66:	687a      	ldr	r2, [r7, #4]
 8002c68:	7812      	ldrb	r2, [r2, #0]
 8002c6a:	4313      	orrs	r3, r2
 8002c6c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8002c6e:	68ba      	ldr	r2, [r7, #8]
 8002c70:	4b06      	ldr	r3, [pc, #24]	; (8002c8c <ETH_MACAddressConfig+0x6c>)
 8002c72:	4413      	add	r3, r2
 8002c74:	461a      	mov	r2, r3
 8002c76:	697b      	ldr	r3, [r7, #20]
 8002c78:	6013      	str	r3, [r2, #0]
}
 8002c7a:	bf00      	nop
 8002c7c:	371c      	adds	r7, #28
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr
 8002c86:	bf00      	nop
 8002c88:	40028040 	.word	0x40028040
 8002c8c:	40028044 	.word	0x40028044

08002c90 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b085      	sub	sp, #20
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002c98:	2300      	movs	r3, #0
 8002c9a:	60fb      	str	r3, [r7, #12]
 8002c9c:	e03e      	b.n	8002d1c <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	68d9      	ldr	r1, [r3, #12]
 8002ca2:	68fa      	ldr	r2, [r7, #12]
 8002ca4:	4613      	mov	r3, r2
 8002ca6:	009b      	lsls	r3, r3, #2
 8002ca8:	4413      	add	r3, r2
 8002caa:	00db      	lsls	r3, r3, #3
 8002cac:	440b      	add	r3, r1
 8002cae:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	2200      	movs	r2, #0
 8002cb4:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002cb6:	68bb      	ldr	r3, [r7, #8]
 8002cb8:	2200      	movs	r2, #0
 8002cba:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002cbc:	68bb      	ldr	r3, [r7, #8]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002cc2:	68bb      	ldr	r3, [r7, #8]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002cc8:	68b9      	ldr	r1, [r7, #8]
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	3206      	adds	r2, #6
 8002cd0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002cd4:	68bb      	ldr	r3, [r7, #8]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002cdc:	68bb      	ldr	r3, [r7, #8]
 8002cde:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	2b02      	cmp	r3, #2
 8002ce4:	d80c      	bhi.n	8002d00 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	68d9      	ldr	r1, [r3, #12]
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	1c5a      	adds	r2, r3, #1
 8002cee:	4613      	mov	r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	4413      	add	r3, r2
 8002cf4:	00db      	lsls	r3, r3, #3
 8002cf6:	440b      	add	r3, r1
 8002cf8:	461a      	mov	r2, r3
 8002cfa:	68bb      	ldr	r3, [r7, #8]
 8002cfc:	60da      	str	r2, [r3, #12]
 8002cfe:	e004      	b.n	8002d0a <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	68db      	ldr	r3, [r3, #12]
 8002d04:	461a      	mov	r2, r3
 8002d06:	68bb      	ldr	r3, [r7, #8]
 8002d08:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8002d0a:	68bb      	ldr	r3, [r7, #8]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2b03      	cmp	r3, #3
 8002d20:	d9bd      	bls.n	8002c9e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	68da      	ldr	r2, [r3, #12]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002d34:	611a      	str	r2, [r3, #16]
}
 8002d36:	bf00      	nop
 8002d38:	3714      	adds	r7, #20
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b085      	sub	sp, #20
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002d4a:	2300      	movs	r3, #0
 8002d4c:	60fb      	str	r3, [r7, #12]
 8002d4e:	e046      	b.n	8002dde <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6919      	ldr	r1, [r3, #16]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	4613      	mov	r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	4413      	add	r3, r2
 8002d5c:	00db      	lsls	r3, r3, #3
 8002d5e:	440b      	add	r3, r1
 8002d60:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002d62:	68bb      	ldr	r3, [r7, #8]
 8002d64:	2200      	movs	r2, #0
 8002d66:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	2200      	movs	r2, #0
 8002d6c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2200      	movs	r2, #0
 8002d72:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002d74:	68bb      	ldr	r3, [r7, #8]
 8002d76:	2200      	movs	r2, #0
 8002d78:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002d7a:	68bb      	ldr	r3, [r7, #8]
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2200      	movs	r2, #0
 8002d84:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002d86:	68bb      	ldr	r3, [r7, #8]
 8002d88:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002d8c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002d8e:	68bb      	ldr	r3, [r7, #8]
 8002d90:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002d94:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002da2:	68b9      	ldr	r1, [r7, #8]
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	68fa      	ldr	r2, [r7, #12]
 8002da8:	3212      	adds	r2, #18
 8002daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2b02      	cmp	r3, #2
 8002db2:	d80c      	bhi.n	8002dce <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	6919      	ldr	r1, [r3, #16]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	1c5a      	adds	r2, r3, #1
 8002dbc:	4613      	mov	r3, r2
 8002dbe:	009b      	lsls	r3, r3, #2
 8002dc0:	4413      	add	r3, r2
 8002dc2:	00db      	lsls	r3, r3, #3
 8002dc4:	440b      	add	r3, r1
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	60da      	str	r2, [r3, #12]
 8002dcc:	e004      	b.n	8002dd8 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	691b      	ldr	r3, [r3, #16]
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	3301      	adds	r3, #1
 8002ddc:	60fb      	str	r3, [r7, #12]
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	2b03      	cmp	r3, #3
 8002de2:	d9b5      	bls.n	8002d50 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2200      	movs	r2, #0
 8002de8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	2200      	movs	r2, #0
 8002df4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	691a      	ldr	r2, [r3, #16]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002e0e:	60da      	str	r2, [r3, #12]
}
 8002e10:	bf00      	nop
 8002e12:	3714      	adds	r7, #20
 8002e14:	46bd      	mov	sp, r7
 8002e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1a:	4770      	bx	lr

08002e1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e1c:	b480      	push	{r7}
 8002e1e:	b089      	sub	sp, #36	; 0x24
 8002e20:	af00      	add	r7, sp, #0
 8002e22:	6078      	str	r0, [r7, #4]
 8002e24:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002e26:	2300      	movs	r3, #0
 8002e28:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002e2a:	2300      	movs	r3, #0
 8002e2c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8002e36:	2300      	movs	r3, #0
 8002e38:	61fb      	str	r3, [r7, #28]
 8002e3a:	e175      	b.n	8003128 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002e3c:	2201      	movs	r2, #1
 8002e3e:	69fb      	ldr	r3, [r7, #28]
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	697a      	ldr	r2, [r7, #20]
 8002e4c:	4013      	ands	r3, r2
 8002e4e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	429a      	cmp	r2, r3
 8002e56:	f040 8164 	bne.w	8003122 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	685b      	ldr	r3, [r3, #4]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d005      	beq.n	8002e72 <HAL_GPIO_Init+0x56>
 8002e66:	683b      	ldr	r3, [r7, #0]
 8002e68:	685b      	ldr	r3, [r3, #4]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d130      	bne.n	8002ed4 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002e78:	69fb      	ldr	r3, [r7, #28]
 8002e7a:	005b      	lsls	r3, r3, #1
 8002e7c:	2203      	movs	r2, #3
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	43db      	mvns	r3, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4013      	ands	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	68da      	ldr	r2, [r3, #12]
 8002e8e:	69fb      	ldr	r3, [r7, #28]
 8002e90:	005b      	lsls	r3, r3, #1
 8002e92:	fa02 f303 	lsl.w	r3, r2, r3
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	091b      	lsrs	r3, r3, #4
 8002ebe:	f003 0201 	and.w	r2, r3, #1
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 0303 	and.w	r3, r3, #3
 8002edc:	2b03      	cmp	r3, #3
 8002ede:	d017      	beq.n	8002f10 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	005b      	lsls	r3, r3, #1
 8002eea:	2203      	movs	r2, #3
 8002eec:	fa02 f303 	lsl.w	r3, r2, r3
 8002ef0:	43db      	mvns	r3, r3
 8002ef2:	69ba      	ldr	r2, [r7, #24]
 8002ef4:	4013      	ands	r3, r2
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	69fb      	ldr	r3, [r7, #28]
 8002efe:	005b      	lsls	r3, r3, #1
 8002f00:	fa02 f303 	lsl.w	r3, r2, r3
 8002f04:	69ba      	ldr	r2, [r7, #24]
 8002f06:	4313      	orrs	r3, r2
 8002f08:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69ba      	ldr	r2, [r7, #24]
 8002f0e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f10:	683b      	ldr	r3, [r7, #0]
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f003 0303 	and.w	r3, r3, #3
 8002f18:	2b02      	cmp	r3, #2
 8002f1a:	d123      	bne.n	8002f64 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002f1c:	69fb      	ldr	r3, [r7, #28]
 8002f1e:	08da      	lsrs	r2, r3, #3
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	3208      	adds	r2, #8
 8002f24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f28:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002f2a:	69fb      	ldr	r3, [r7, #28]
 8002f2c:	f003 0307 	and.w	r3, r3, #7
 8002f30:	009b      	lsls	r3, r3, #2
 8002f32:	220f      	movs	r2, #15
 8002f34:	fa02 f303 	lsl.w	r3, r2, r3
 8002f38:	43db      	mvns	r3, r3
 8002f3a:	69ba      	ldr	r2, [r7, #24]
 8002f3c:	4013      	ands	r3, r2
 8002f3e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002f40:	683b      	ldr	r3, [r7, #0]
 8002f42:	691a      	ldr	r2, [r3, #16]
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	f003 0307 	and.w	r3, r3, #7
 8002f4a:	009b      	lsls	r3, r3, #2
 8002f4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f50:	69ba      	ldr	r2, [r7, #24]
 8002f52:	4313      	orrs	r3, r2
 8002f54:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	08da      	lsrs	r2, r3, #3
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	3208      	adds	r2, #8
 8002f5e:	69b9      	ldr	r1, [r7, #24]
 8002f60:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	005b      	lsls	r3, r3, #1
 8002f6e:	2203      	movs	r2, #3
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	43db      	mvns	r3, r3
 8002f76:	69ba      	ldr	r2, [r7, #24]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	685b      	ldr	r3, [r3, #4]
 8002f80:	f003 0203 	and.w	r2, r3, #3
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	005b      	lsls	r3, r3, #1
 8002f88:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8c:	69ba      	ldr	r2, [r7, #24]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	69ba      	ldr	r2, [r7, #24]
 8002f96:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	f000 80be 	beq.w	8003122 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fa6:	4b66      	ldr	r3, [pc, #408]	; (8003140 <HAL_GPIO_Init+0x324>)
 8002fa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002faa:	4a65      	ldr	r2, [pc, #404]	; (8003140 <HAL_GPIO_Init+0x324>)
 8002fac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fb0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fb2:	4b63      	ldr	r3, [pc, #396]	; (8003140 <HAL_GPIO_Init+0x324>)
 8002fb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fba:	60fb      	str	r3, [r7, #12]
 8002fbc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002fbe:	4a61      	ldr	r2, [pc, #388]	; (8003144 <HAL_GPIO_Init+0x328>)
 8002fc0:	69fb      	ldr	r3, [r7, #28]
 8002fc2:	089b      	lsrs	r3, r3, #2
 8002fc4:	3302      	adds	r3, #2
 8002fc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002fca:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002fcc:	69fb      	ldr	r3, [r7, #28]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	009b      	lsls	r3, r3, #2
 8002fd4:	220f      	movs	r2, #15
 8002fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	4a58      	ldr	r2, [pc, #352]	; (8003148 <HAL_GPIO_Init+0x32c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d037      	beq.n	800305a <HAL_GPIO_Init+0x23e>
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	4a57      	ldr	r2, [pc, #348]	; (800314c <HAL_GPIO_Init+0x330>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d031      	beq.n	8003056 <HAL_GPIO_Init+0x23a>
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	4a56      	ldr	r2, [pc, #344]	; (8003150 <HAL_GPIO_Init+0x334>)
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d02b      	beq.n	8003052 <HAL_GPIO_Init+0x236>
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	4a55      	ldr	r2, [pc, #340]	; (8003154 <HAL_GPIO_Init+0x338>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d025      	beq.n	800304e <HAL_GPIO_Init+0x232>
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	4a54      	ldr	r2, [pc, #336]	; (8003158 <HAL_GPIO_Init+0x33c>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d01f      	beq.n	800304a <HAL_GPIO_Init+0x22e>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a53      	ldr	r2, [pc, #332]	; (800315c <HAL_GPIO_Init+0x340>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d019      	beq.n	8003046 <HAL_GPIO_Init+0x22a>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a52      	ldr	r2, [pc, #328]	; (8003160 <HAL_GPIO_Init+0x344>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d013      	beq.n	8003042 <HAL_GPIO_Init+0x226>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a51      	ldr	r2, [pc, #324]	; (8003164 <HAL_GPIO_Init+0x348>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00d      	beq.n	800303e <HAL_GPIO_Init+0x222>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a50      	ldr	r2, [pc, #320]	; (8003168 <HAL_GPIO_Init+0x34c>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d007      	beq.n	800303a <HAL_GPIO_Init+0x21e>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a4f      	ldr	r2, [pc, #316]	; (800316c <HAL_GPIO_Init+0x350>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d101      	bne.n	8003036 <HAL_GPIO_Init+0x21a>
 8003032:	2309      	movs	r3, #9
 8003034:	e012      	b.n	800305c <HAL_GPIO_Init+0x240>
 8003036:	230a      	movs	r3, #10
 8003038:	e010      	b.n	800305c <HAL_GPIO_Init+0x240>
 800303a:	2308      	movs	r3, #8
 800303c:	e00e      	b.n	800305c <HAL_GPIO_Init+0x240>
 800303e:	2307      	movs	r3, #7
 8003040:	e00c      	b.n	800305c <HAL_GPIO_Init+0x240>
 8003042:	2306      	movs	r3, #6
 8003044:	e00a      	b.n	800305c <HAL_GPIO_Init+0x240>
 8003046:	2305      	movs	r3, #5
 8003048:	e008      	b.n	800305c <HAL_GPIO_Init+0x240>
 800304a:	2304      	movs	r3, #4
 800304c:	e006      	b.n	800305c <HAL_GPIO_Init+0x240>
 800304e:	2303      	movs	r3, #3
 8003050:	e004      	b.n	800305c <HAL_GPIO_Init+0x240>
 8003052:	2302      	movs	r3, #2
 8003054:	e002      	b.n	800305c <HAL_GPIO_Init+0x240>
 8003056:	2301      	movs	r3, #1
 8003058:	e000      	b.n	800305c <HAL_GPIO_Init+0x240>
 800305a:	2300      	movs	r3, #0
 800305c:	69fa      	ldr	r2, [r7, #28]
 800305e:	f002 0203 	and.w	r2, r2, #3
 8003062:	0092      	lsls	r2, r2, #2
 8003064:	4093      	lsls	r3, r2
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4313      	orrs	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800306c:	4935      	ldr	r1, [pc, #212]	; (8003144 <HAL_GPIO_Init+0x328>)
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	089b      	lsrs	r3, r3, #2
 8003072:	3302      	adds	r3, #2
 8003074:	69ba      	ldr	r2, [r7, #24]
 8003076:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800307a:	4b3d      	ldr	r3, [pc, #244]	; (8003170 <HAL_GPIO_Init+0x354>)
 800307c:	689b      	ldr	r3, [r3, #8]
 800307e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003080:	693b      	ldr	r3, [r7, #16]
 8003082:	43db      	mvns	r3, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4013      	ands	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d003      	beq.n	800309e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8003096:	69ba      	ldr	r2, [r7, #24]
 8003098:	693b      	ldr	r3, [r7, #16]
 800309a:	4313      	orrs	r3, r2
 800309c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800309e:	4a34      	ldr	r2, [pc, #208]	; (8003170 <HAL_GPIO_Init+0x354>)
 80030a0:	69bb      	ldr	r3, [r7, #24]
 80030a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030a4:	4b32      	ldr	r3, [pc, #200]	; (8003170 <HAL_GPIO_Init+0x354>)
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030aa:	693b      	ldr	r3, [r7, #16]
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d003      	beq.n	80030c8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030c8:	4a29      	ldr	r2, [pc, #164]	; (8003170 <HAL_GPIO_Init+0x354>)
 80030ca:	69bb      	ldr	r3, [r7, #24]
 80030cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030ce:	4b28      	ldr	r3, [pc, #160]	; (8003170 <HAL_GPIO_Init+0x354>)
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	43db      	mvns	r3, r3
 80030d8:	69ba      	ldr	r2, [r7, #24]
 80030da:	4013      	ands	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030de:	683b      	ldr	r3, [r7, #0]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d003      	beq.n	80030f2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80030ea:	69ba      	ldr	r2, [r7, #24]
 80030ec:	693b      	ldr	r3, [r7, #16]
 80030ee:	4313      	orrs	r3, r2
 80030f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030f2:	4a1f      	ldr	r2, [pc, #124]	; (8003170 <HAL_GPIO_Init+0x354>)
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030f8:	4b1d      	ldr	r3, [pc, #116]	; (8003170 <HAL_GPIO_Init+0x354>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030fe:	693b      	ldr	r3, [r7, #16]
 8003100:	43db      	mvns	r3, r3
 8003102:	69ba      	ldr	r2, [r7, #24]
 8003104:	4013      	ands	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8003108:	683b      	ldr	r3, [r7, #0]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003110:	2b00      	cmp	r3, #0
 8003112:	d003      	beq.n	800311c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003114:	69ba      	ldr	r2, [r7, #24]
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	4313      	orrs	r3, r2
 800311a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800311c:	4a14      	ldr	r2, [pc, #80]	; (8003170 <HAL_GPIO_Init+0x354>)
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	3301      	adds	r3, #1
 8003126:	61fb      	str	r3, [r7, #28]
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	2b0f      	cmp	r3, #15
 800312c:	f67f ae86 	bls.w	8002e3c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8003130:	bf00      	nop
 8003132:	bf00      	nop
 8003134:	3724      	adds	r7, #36	; 0x24
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr
 800313e:	bf00      	nop
 8003140:	40023800 	.word	0x40023800
 8003144:	40013800 	.word	0x40013800
 8003148:	40020000 	.word	0x40020000
 800314c:	40020400 	.word	0x40020400
 8003150:	40020800 	.word	0x40020800
 8003154:	40020c00 	.word	0x40020c00
 8003158:	40021000 	.word	0x40021000
 800315c:	40021400 	.word	0x40021400
 8003160:	40021800 	.word	0x40021800
 8003164:	40021c00 	.word	0x40021c00
 8003168:	40022000 	.word	0x40022000
 800316c:	40022400 	.word	0x40022400
 8003170:	40013c00 	.word	0x40013c00

08003174 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003174:	b480      	push	{r7}
 8003176:	b083      	sub	sp, #12
 8003178:	af00      	add	r7, sp, #0
 800317a:	6078      	str	r0, [r7, #4]
 800317c:	460b      	mov	r3, r1
 800317e:	807b      	strh	r3, [r7, #2]
 8003180:	4613      	mov	r3, r2
 8003182:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003184:	787b      	ldrb	r3, [r7, #1]
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800318a:	887a      	ldrh	r2, [r7, #2]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8003190:	e003      	b.n	800319a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8003192:	887b      	ldrh	r3, [r7, #2]
 8003194:	041a      	lsls	r2, r3, #16
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	619a      	str	r2, [r3, #24]
}
 800319a:	bf00      	nop
 800319c:	370c      	adds	r7, #12
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
	...

080031a8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	4603      	mov	r3, r0
 80031b0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80031b2:	4b08      	ldr	r3, [pc, #32]	; (80031d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031b4:	695a      	ldr	r2, [r3, #20]
 80031b6:	88fb      	ldrh	r3, [r7, #6]
 80031b8:	4013      	ands	r3, r2
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d006      	beq.n	80031cc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031be:	4a05      	ldr	r2, [pc, #20]	; (80031d4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031c0:	88fb      	ldrh	r3, [r7, #6]
 80031c2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031c4:	88fb      	ldrh	r3, [r7, #6]
 80031c6:	4618      	mov	r0, r3
 80031c8:	f000 f806 	bl	80031d8 <HAL_GPIO_EXTI_Callback>
  }
}
 80031cc:	bf00      	nop
 80031ce:	3708      	adds	r7, #8
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40013c00 	.word	0x40013c00

080031d8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	4603      	mov	r3, r0
 80031e0:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);
  
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80031e2:	bf00      	nop
 80031e4:	370c      	adds	r7, #12
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr
	...

080031f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d101      	bne.n	8003202 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80031fe:	2301      	movs	r3, #1
 8003200:	e07f      	b.n	8003302 <HAL_I2C_Init+0x112>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003208:	b2db      	uxtb	r3, r3
 800320a:	2b00      	cmp	r3, #0
 800320c:	d106      	bne.n	800321c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	2200      	movs	r2, #0
 8003212:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8003216:	6878      	ldr	r0, [r7, #4]
 8003218:	f7fe fa70 	bl	80016fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2224      	movs	r2, #36	; 0x24
 8003220:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	681a      	ldr	r2, [r3, #0]
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f022 0201 	bic.w	r2, r2, #1
 8003232:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685a      	ldr	r2, [r3, #4]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003240:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	689a      	ldr	r2, [r3, #8]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003250:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	68db      	ldr	r3, [r3, #12]
 8003256:	2b01      	cmp	r3, #1
 8003258:	d107      	bne.n	800326a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	689a      	ldr	r2, [r3, #8]
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003266:	609a      	str	r2, [r3, #8]
 8003268:	e006      	b.n	8003278 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	689a      	ldr	r2, [r3, #8]
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003276:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	68db      	ldr	r3, [r3, #12]
 800327c:	2b02      	cmp	r3, #2
 800327e:	d104      	bne.n	800328a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003288:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	6859      	ldr	r1, [r3, #4]
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681a      	ldr	r2, [r3, #0]
 8003294:	4b1d      	ldr	r3, [pc, #116]	; (800330c <HAL_I2C_Init+0x11c>)
 8003296:	430b      	orrs	r3, r1
 8003298:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	68da      	ldr	r2, [r3, #12]
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032a8:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691a      	ldr	r2, [r3, #16]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	695b      	ldr	r3, [r3, #20]
 80032b2:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	69d9      	ldr	r1, [r3, #28]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	6a1a      	ldr	r2, [r3, #32]
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	430a      	orrs	r2, r1
 80032d2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f042 0201 	orr.w	r2, r2, #1
 80032e2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2200      	movs	r2, #0
 80032e8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	2220      	movs	r2, #32
 80032ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	2200      	movs	r2, #0
 80032f6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2200      	movs	r2, #0
 80032fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3708      	adds	r7, #8
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	02008000 	.word	0x02008000

08003310 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b088      	sub	sp, #32
 8003314:	af02      	add	r7, sp, #8
 8003316:	60f8      	str	r0, [r7, #12]
 8003318:	4608      	mov	r0, r1
 800331a:	4611      	mov	r1, r2
 800331c:	461a      	mov	r2, r3
 800331e:	4603      	mov	r3, r0
 8003320:	817b      	strh	r3, [r7, #10]
 8003322:	460b      	mov	r3, r1
 8003324:	813b      	strh	r3, [r7, #8]
 8003326:	4613      	mov	r3, r2
 8003328:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b20      	cmp	r3, #32
 8003334:	f040 80fd 	bne.w	8003532 <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8003338:	6a3b      	ldr	r3, [r7, #32]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d002      	beq.n	8003344 <HAL_I2C_Mem_Read+0x34>
 800333e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8003340:	2b00      	cmp	r3, #0
 8003342:	d105      	bne.n	8003350 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	f44f 7200 	mov.w	r2, #512	; 0x200
 800334a:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800334c:	2301      	movs	r3, #1
 800334e:	e0f1      	b.n	8003534 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003356:	2b01      	cmp	r3, #1
 8003358:	d101      	bne.n	800335e <HAL_I2C_Mem_Read+0x4e>
 800335a:	2302      	movs	r3, #2
 800335c:	e0ea      	b.n	8003534 <HAL_I2C_Mem_Read+0x224>
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2201      	movs	r2, #1
 8003362:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8003366:	f7ff f851 	bl	800240c <HAL_GetTick>
 800336a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800336c:	697b      	ldr	r3, [r7, #20]
 800336e:	9300      	str	r3, [sp, #0]
 8003370:	2319      	movs	r3, #25
 8003372:	2201      	movs	r2, #1
 8003374:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 fe58 	bl	800402e <I2C_WaitOnFlagUntilTimeout>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0d5      	b.n	8003534 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	2222      	movs	r2, #34	; 0x22
 800338c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2240      	movs	r2, #64	; 0x40
 8003394:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	2200      	movs	r2, #0
 800339c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a3a      	ldr	r2, [r7, #32]
 80033a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80033a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80033b0:	88f8      	ldrh	r0, [r7, #6]
 80033b2:	893a      	ldrh	r2, [r7, #8]
 80033b4:	8979      	ldrh	r1, [r7, #10]
 80033b6:	697b      	ldr	r3, [r7, #20]
 80033b8:	9301      	str	r3, [sp, #4]
 80033ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	4603      	mov	r3, r0
 80033c0:	68f8      	ldr	r0, [r7, #12]
 80033c2:	f000 fa6d 	bl	80038a0 <I2C_RequestMemoryRead>
 80033c6:	4603      	mov	r3, r0
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d005      	beq.n	80033d8 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2200      	movs	r2, #0
 80033d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      return HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	e0ad      	b.n	8003534 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80033dc:	b29b      	uxth	r3, r3
 80033de:	2bff      	cmp	r3, #255	; 0xff
 80033e0:	d90e      	bls.n	8003400 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	22ff      	movs	r2, #255	; 0xff
 80033e6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80033ec:	b2da      	uxtb	r2, r3
 80033ee:	8979      	ldrh	r1, [r7, #10]
 80033f0:	4b52      	ldr	r3, [pc, #328]	; (800353c <HAL_I2C_Mem_Read+0x22c>)
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80033f8:	68f8      	ldr	r0, [r7, #12]
 80033fa:	f000 ffb5 	bl	8004368 <I2C_TransferConfig>
 80033fe:	e00f      	b.n	8003420 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003404:	b29a      	uxth	r2, r3
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800340e:	b2da      	uxtb	r2, r3
 8003410:	8979      	ldrh	r1, [r7, #10]
 8003412:	4b4a      	ldr	r3, [pc, #296]	; (800353c <HAL_I2C_Mem_Read+0x22c>)
 8003414:	9300      	str	r3, [sp, #0]
 8003416:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800341a:	68f8      	ldr	r0, [r7, #12]
 800341c:	f000 ffa4 	bl	8004368 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8003420:	697b      	ldr	r3, [r7, #20]
 8003422:	9300      	str	r3, [sp, #0]
 8003424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003426:	2200      	movs	r2, #0
 8003428:	2104      	movs	r1, #4
 800342a:	68f8      	ldr	r0, [r7, #12]
 800342c:	f000 fdff 	bl	800402e <I2C_WaitOnFlagUntilTimeout>
 8003430:	4603      	mov	r3, r0
 8003432:	2b00      	cmp	r3, #0
 8003434:	d001      	beq.n	800343a <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8003436:	2301      	movs	r3, #1
 8003438:	e07c      	b.n	8003534 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003444:	b2d2      	uxtb	r2, r2
 8003446:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344c:	1c5a      	adds	r2, r3, #1
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003456:	3b01      	subs	r3, #1
 8003458:	b29a      	uxth	r2, r3
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003462:	b29b      	uxth	r3, r3
 8003464:	3b01      	subs	r3, #1
 8003466:	b29a      	uxth	r2, r3
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003470:	b29b      	uxth	r3, r3
 8003472:	2b00      	cmp	r3, #0
 8003474:	d034      	beq.n	80034e0 <HAL_I2C_Mem_Read+0x1d0>
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800347a:	2b00      	cmp	r3, #0
 800347c:	d130      	bne.n	80034e0 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800347e:	697b      	ldr	r3, [r7, #20]
 8003480:	9300      	str	r3, [sp, #0]
 8003482:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003484:	2200      	movs	r2, #0
 8003486:	2180      	movs	r1, #128	; 0x80
 8003488:	68f8      	ldr	r0, [r7, #12]
 800348a:	f000 fdd0 	bl	800402e <I2C_WaitOnFlagUntilTimeout>
 800348e:	4603      	mov	r3, r0
 8003490:	2b00      	cmp	r3, #0
 8003492:	d001      	beq.n	8003498 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8003494:	2301      	movs	r3, #1
 8003496:	e04d      	b.n	8003534 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800349c:	b29b      	uxth	r3, r3
 800349e:	2bff      	cmp	r3, #255	; 0xff
 80034a0:	d90e      	bls.n	80034c0 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	22ff      	movs	r2, #255	; 0xff
 80034a6:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ac:	b2da      	uxtb	r2, r3
 80034ae:	8979      	ldrh	r1, [r7, #10]
 80034b0:	2300      	movs	r3, #0
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80034b8:	68f8      	ldr	r0, [r7, #12]
 80034ba:	f000 ff55 	bl	8004368 <I2C_TransferConfig>
 80034be:	e00f      	b.n	80034e0 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034c4:	b29a      	uxth	r2, r3
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80034ce:	b2da      	uxtb	r2, r3
 80034d0:	8979      	ldrh	r1, [r7, #10]
 80034d2:	2300      	movs	r3, #0
 80034d4:	9300      	str	r3, [sp, #0]
 80034d6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80034da:	68f8      	ldr	r0, [r7, #12]
 80034dc:	f000 ff44 	bl	8004368 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80034e4:	b29b      	uxth	r3, r3
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d19a      	bne.n	8003420 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80034ea:	697a      	ldr	r2, [r7, #20]
 80034ec:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80034ee:	68f8      	ldr	r0, [r7, #12]
 80034f0:	f000 fe1d 	bl	800412e <I2C_WaitOnSTOPFlagUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e01a      	b.n	8003534 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	2220      	movs	r2, #32
 8003504:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6859      	ldr	r1, [r3, #4]
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	4b0b      	ldr	r3, [pc, #44]	; (8003540 <HAL_I2C_Mem_Read+0x230>)
 8003512:	400b      	ands	r3, r1
 8003514:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	2220      	movs	r2, #32
 800351a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	2200      	movs	r2, #0
 8003522:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800352e:	2300      	movs	r3, #0
 8003530:	e000      	b.n	8003534 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 8003532:	2302      	movs	r3, #2
  }
}
 8003534:	4618      	mov	r0, r3
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	80002400 	.word	0x80002400
 8003540:	fe00e800 	.word	0xfe00e800

08003544 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003544:	b580      	push	{r7, lr}
 8003546:	b084      	sub	sp, #16
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003560:	2b00      	cmp	r3, #0
 8003562:	d005      	beq.n	8003570 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003568:	68ba      	ldr	r2, [r7, #8]
 800356a:	68f9      	ldr	r1, [r7, #12]
 800356c:	6878      	ldr	r0, [r7, #4]
 800356e:	4798      	blx	r3
  }
}
 8003570:	bf00      	nop
 8003572:	3710      	adds	r7, #16
 8003574:	46bd      	mov	sp, r7
 8003576:	bd80      	pop	{r7, pc}

08003578 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	699b      	ldr	r3, [r3, #24]
 8003586:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00f      	beq.n	80035ba <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800359a:	693b      	ldr	r3, [r7, #16]
 800359c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d00a      	beq.n	80035ba <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a8:	f043 0201 	orr.w	r2, r3, #1
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80035b8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00f      	beq.n	80035e4 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80035c4:	693b      	ldr	r3, [r7, #16]
 80035c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d00a      	beq.n	80035e4 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035d2:	f043 0208 	orr.w	r2, r3, #8
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80035e2:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80035e4:	697b      	ldr	r3, [r7, #20]
 80035e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d00f      	beq.n	800360e <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d00a      	beq.n	800360e <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035fc:	f043 0202 	orr.w	r2, r3, #2
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f44f 7200 	mov.w	r2, #512	; 0x200
 800360c:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003612:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	f003 030b 	and.w	r3, r3, #11
 800361a:	2b00      	cmp	r3, #0
 800361c:	d003      	beq.n	8003626 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 800361e:	68f9      	ldr	r1, [r7, #12]
 8003620:	6878      	ldr	r0, [r7, #4]
 8003622:	f000 fbcb 	bl	8003dbc <I2C_ITError>
  }
}
 8003626:	bf00      	nop
 8003628:	3718      	adds	r7, #24
 800362a:	46bd      	mov	sp, r7
 800362c:	bd80      	pop	{r7, pc}

0800362e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800362e:	b480      	push	{r7}
 8003630:	b083      	sub	sp, #12
 8003632:	af00      	add	r7, sp, #0
 8003634:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003636:	bf00      	nop
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr

08003642 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003642:	b480      	push	{r7}
 8003644:	b083      	sub	sp, #12
 8003646:	af00      	add	r7, sp, #0
 8003648:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800364a:	bf00      	nop
 800364c:	370c      	adds	r7, #12
 800364e:	46bd      	mov	sp, r7
 8003650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003654:	4770      	bx	lr

08003656 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003656:	b480      	push	{r7}
 8003658:	b083      	sub	sp, #12
 800365a:	af00      	add	r7, sp, #0
 800365c:	6078      	str	r0, [r7, #4]
 800365e:	460b      	mov	r3, r1
 8003660:	70fb      	strb	r3, [r7, #3]
 8003662:	4613      	mov	r3, r2
 8003664:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003666:	bf00      	nop
 8003668:	370c      	adds	r7, #12
 800366a:	46bd      	mov	sp, r7
 800366c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003670:	4770      	bx	lr

08003672 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003672:	b480      	push	{r7}
 8003674:	b083      	sub	sp, #12
 8003676:	af00      	add	r7, sp, #0
 8003678:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800367a:	bf00      	nop
 800367c:	370c      	adds	r7, #12
 800367e:	46bd      	mov	sp, r7
 8003680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003684:	4770      	bx	lr

08003686 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003686:	b480      	push	{r7}
 8003688:	b083      	sub	sp, #12
 800368a:	af00      	add	r7, sp, #0
 800368c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800368e:	bf00      	nop
 8003690:	370c      	adds	r7, #12
 8003692:	46bd      	mov	sp, r7
 8003694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003698:	4770      	bx	lr

0800369a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800369a:	b480      	push	{r7}
 800369c:	b083      	sub	sp, #12
 800369e:	af00      	add	r7, sp, #0
 80036a0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80036a2:	bf00      	nop
 80036a4:	370c      	adds	r7, #12
 80036a6:	46bd      	mov	sp, r7
 80036a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ac:	4770      	bx	lr

080036ae <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b086      	sub	sp, #24
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	60f8      	str	r0, [r7, #12]
 80036b6:	60b9      	str	r1, [r7, #8]
 80036b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036be:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <I2C_Slave_ISR_IT+0x24>
 80036ce:	2302      	movs	r3, #2
 80036d0:	e0e1      	b.n	8003896 <I2C_Slave_ISR_IT+0x1e8>
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	2201      	movs	r2, #1
 80036d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80036da:	693b      	ldr	r3, [r7, #16]
 80036dc:	f003 0320 	and.w	r3, r3, #32
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d008      	beq.n	80036f6 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d003      	beq.n	80036f6 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 80036ee:	6939      	ldr	r1, [r7, #16]
 80036f0:	68f8      	ldr	r0, [r7, #12]
 80036f2:	f000 fa09 	bl	8003b08 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	f003 0310 	and.w	r3, r3, #16
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d04b      	beq.n	8003798 <I2C_Slave_ISR_IT+0xea>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8003706:	2b00      	cmp	r3, #0
 8003708:	d046      	beq.n	8003798 <I2C_Slave_ISR_IT+0xea>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800370e:	b29b      	uxth	r3, r3
 8003710:	2b00      	cmp	r3, #0
 8003712:	d128      	bne.n	8003766 <I2C_Slave_ISR_IT+0xb8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800371a:	b2db      	uxtb	r3, r3
 800371c:	2b28      	cmp	r3, #40	; 0x28
 800371e:	d108      	bne.n	8003732 <I2C_Slave_ISR_IT+0x84>
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8003726:	d104      	bne.n	8003732 <I2C_Slave_ISR_IT+0x84>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8003728:	6939      	ldr	r1, [r7, #16]
 800372a:	68f8      	ldr	r0, [r7, #12]
 800372c:	f000 faf2 	bl	8003d14 <I2C_ITListenCplt>
 8003730:	e031      	b.n	8003796 <I2C_Slave_ISR_IT+0xe8>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003738:	b2db      	uxtb	r3, r3
 800373a:	2b29      	cmp	r3, #41	; 0x29
 800373c:	d10e      	bne.n	800375c <I2C_Slave_ISR_IT+0xae>
 800373e:	697b      	ldr	r3, [r7, #20]
 8003740:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003744:	d00a      	beq.n	800375c <I2C_Slave_ISR_IT+0xae>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	2210      	movs	r2, #16
 800374c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800374e:	68f8      	ldr	r0, [r7, #12]
 8003750:	f000 fc2b 	bl	8003faa <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8003754:	68f8      	ldr	r0, [r7, #12]
 8003756:	f000 f97b 	bl	8003a50 <I2C_ITSlaveSeqCplt>
 800375a:	e01c      	b.n	8003796 <I2C_Slave_ISR_IT+0xe8>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	2210      	movs	r2, #16
 8003762:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8003764:	e08f      	b.n	8003886 <I2C_Slave_ISR_IT+0x1d8>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	2210      	movs	r2, #16
 800376c:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003772:	f043 0204 	orr.w	r2, r3, #4
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800377a:	697b      	ldr	r3, [r7, #20]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d003      	beq.n	8003788 <I2C_Slave_ISR_IT+0xda>
 8003780:	697b      	ldr	r3, [r7, #20]
 8003782:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003786:	d17e      	bne.n	8003886 <I2C_Slave_ISR_IT+0x1d8>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800378c:	4619      	mov	r1, r3
 800378e:	68f8      	ldr	r0, [r7, #12]
 8003790:	f000 fb14 	bl	8003dbc <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8003794:	e077      	b.n	8003886 <I2C_Slave_ISR_IT+0x1d8>
 8003796:	e076      	b.n	8003886 <I2C_Slave_ISR_IT+0x1d8>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8003798:	693b      	ldr	r3, [r7, #16]
 800379a:	f003 0304 	and.w	r3, r3, #4
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d02f      	beq.n	8003802 <I2C_Slave_ISR_IT+0x154>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d02a      	beq.n	8003802 <I2C_Slave_ISR_IT+0x154>
  {
    if (hi2c->XferCount > 0U)
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d018      	beq.n	80037e8 <I2C_Slave_ISR_IT+0x13a>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c0:	b2d2      	uxtb	r2, r2
 80037c2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037c8:	1c5a      	adds	r2, r3, #1
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80037d2:	3b01      	subs	r3, #1
 80037d4:	b29a      	uxth	r2, r3
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037de:	b29b      	uxth	r3, r3
 80037e0:	3b01      	subs	r3, #1
 80037e2:	b29a      	uxth	r2, r3
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80037ec:	b29b      	uxth	r3, r3
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d14b      	bne.n	800388a <I2C_Slave_ISR_IT+0x1dc>
 80037f2:	697b      	ldr	r3, [r7, #20]
 80037f4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80037f8:	d047      	beq.n	800388a <I2C_Slave_ISR_IT+0x1dc>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 f928 	bl	8003a50 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8003800:	e043      	b.n	800388a <I2C_Slave_ISR_IT+0x1dc>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003802:	693b      	ldr	r3, [r7, #16]
 8003804:	f003 0308 	and.w	r3, r3, #8
 8003808:	2b00      	cmp	r3, #0
 800380a:	d009      	beq.n	8003820 <I2C_Slave_ISR_IT+0x172>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8003812:	2b00      	cmp	r3, #0
 8003814:	d004      	beq.n	8003820 <I2C_Slave_ISR_IT+0x172>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8003816:	6939      	ldr	r1, [r7, #16]
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f000 f895 	bl	8003948 <I2C_ITAddrCplt>
 800381e:	e035      	b.n	800388c <I2C_Slave_ISR_IT+0x1de>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003820:	693b      	ldr	r3, [r7, #16]
 8003822:	f003 0302 	and.w	r3, r3, #2
 8003826:	2b00      	cmp	r3, #0
 8003828:	d030      	beq.n	800388c <I2C_Slave_ISR_IT+0x1de>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8003830:	2b00      	cmp	r3, #0
 8003832:	d02b      	beq.n	800388c <I2C_Slave_ISR_IT+0x1de>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003838:	b29b      	uxth	r3, r3
 800383a:	2b00      	cmp	r3, #0
 800383c:	d018      	beq.n	8003870 <I2C_Slave_ISR_IT+0x1c2>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003842:	781a      	ldrb	r2, [r3, #0]
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800384e:	1c5a      	adds	r2, r3, #1
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003858:	b29b      	uxth	r3, r3
 800385a:	3b01      	subs	r3, #1
 800385c:	b29a      	uxth	r2, r3
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003866:	3b01      	subs	r3, #1
 8003868:	b29a      	uxth	r2, r3
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	851a      	strh	r2, [r3, #40]	; 0x28
 800386e:	e00d      	b.n	800388c <I2C_Slave_ISR_IT+0x1de>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8003870:	697b      	ldr	r3, [r7, #20]
 8003872:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003876:	d002      	beq.n	800387e <I2C_Slave_ISR_IT+0x1d0>
 8003878:	697b      	ldr	r3, [r7, #20]
 800387a:	2b00      	cmp	r3, #0
 800387c:	d106      	bne.n	800388c <I2C_Slave_ISR_IT+0x1de>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f8e6 	bl	8003a50 <I2C_ITSlaveSeqCplt>
 8003884:	e002      	b.n	800388c <I2C_Slave_ISR_IT+0x1de>
    if (hi2c->XferCount == 0U)
 8003886:	bf00      	nop
 8003888:	e000      	b.n	800388c <I2C_Slave_ISR_IT+0x1de>
    if ((hi2c->XferCount == 0U) && \
 800388a:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	2200      	movs	r2, #0
 8003890:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3718      	adds	r7, #24
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}
	...

080038a0 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b086      	sub	sp, #24
 80038a4:	af02      	add	r7, sp, #8
 80038a6:	60f8      	str	r0, [r7, #12]
 80038a8:	4608      	mov	r0, r1
 80038aa:	4611      	mov	r1, r2
 80038ac:	461a      	mov	r2, r3
 80038ae:	4603      	mov	r3, r0
 80038b0:	817b      	strh	r3, [r7, #10]
 80038b2:	460b      	mov	r3, r1
 80038b4:	813b      	strh	r3, [r7, #8]
 80038b6:	4613      	mov	r3, r2
 80038b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80038ba:	88fb      	ldrh	r3, [r7, #6]
 80038bc:	b2da      	uxtb	r2, r3
 80038be:	8979      	ldrh	r1, [r7, #10]
 80038c0:	4b20      	ldr	r3, [pc, #128]	; (8003944 <I2C_RequestMemoryRead+0xa4>)
 80038c2:	9300      	str	r3, [sp, #0]
 80038c4:	2300      	movs	r3, #0
 80038c6:	68f8      	ldr	r0, [r7, #12]
 80038c8:	f000 fd4e 	bl	8004368 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	69b9      	ldr	r1, [r7, #24]
 80038d0:	68f8      	ldr	r0, [r7, #12]
 80038d2:	f000 fbec 	bl	80040ae <I2C_WaitOnTXISFlagUntilTimeout>
 80038d6:	4603      	mov	r3, r0
 80038d8:	2b00      	cmp	r3, #0
 80038da:	d001      	beq.n	80038e0 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e02c      	b.n	800393a <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80038e0:	88fb      	ldrh	r3, [r7, #6]
 80038e2:	2b01      	cmp	r3, #1
 80038e4:	d105      	bne.n	80038f2 <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80038e6:	893b      	ldrh	r3, [r7, #8]
 80038e8:	b2da      	uxtb	r2, r3
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	629a      	str	r2, [r3, #40]	; 0x28
 80038f0:	e015      	b.n	800391e <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80038f2:	893b      	ldrh	r3, [r7, #8]
 80038f4:	0a1b      	lsrs	r3, r3, #8
 80038f6:	b29b      	uxth	r3, r3
 80038f8:	b2da      	uxtb	r2, r3
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003900:	69fa      	ldr	r2, [r7, #28]
 8003902:	69b9      	ldr	r1, [r7, #24]
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f000 fbd2 	bl	80040ae <I2C_WaitOnTXISFlagUntilTimeout>
 800390a:	4603      	mov	r3, r0
 800390c:	2b00      	cmp	r3, #0
 800390e:	d001      	beq.n	8003914 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e012      	b.n	800393a <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8003914:	893b      	ldrh	r3, [r7, #8]
 8003916:	b2da      	uxtb	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800391e:	69fb      	ldr	r3, [r7, #28]
 8003920:	9300      	str	r3, [sp, #0]
 8003922:	69bb      	ldr	r3, [r7, #24]
 8003924:	2200      	movs	r2, #0
 8003926:	2140      	movs	r1, #64	; 0x40
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f000 fb80 	bl	800402e <I2C_WaitOnFlagUntilTimeout>
 800392e:	4603      	mov	r3, r0
 8003930:	2b00      	cmp	r3, #0
 8003932:	d001      	beq.n	8003938 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 8003934:	2301      	movs	r3, #1
 8003936:	e000      	b.n	800393a <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 8003938:	2300      	movs	r3, #0
}
 800393a:	4618      	mov	r0, r3
 800393c:	3710      	adds	r7, #16
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}
 8003942:	bf00      	nop
 8003944:	80002000 	.word	0x80002000

08003948 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b084      	sub	sp, #16
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
 8003950:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003958:	b2db      	uxtb	r3, r3
 800395a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800395e:	2b28      	cmp	r3, #40	; 0x28
 8003960:	d16a      	bne.n	8003a38 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	0c1b      	lsrs	r3, r3, #16
 800396a:	b2db      	uxtb	r3, r3
 800396c:	f003 0301 	and.w	r3, r3, #1
 8003970:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	699b      	ldr	r3, [r3, #24]
 8003978:	0c1b      	lsrs	r3, r3, #16
 800397a:	b29b      	uxth	r3, r3
 800397c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8003980:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	689b      	ldr	r3, [r3, #8]
 8003988:	b29b      	uxth	r3, r3
 800398a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800398e:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
 8003996:	b29b      	uxth	r3, r3
 8003998:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800399c:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d138      	bne.n	8003a18 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 80039a6:	897b      	ldrh	r3, [r7, #10]
 80039a8:	09db      	lsrs	r3, r3, #7
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	89bb      	ldrh	r3, [r7, #12]
 80039ae:	4053      	eors	r3, r2
 80039b0:	b29b      	uxth	r3, r3
 80039b2:	f003 0306 	and.w	r3, r3, #6
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d11c      	bne.n	80039f4 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 80039ba:	897b      	ldrh	r3, [r7, #10]
 80039bc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039c2:	1c5a      	adds	r2, r3, #1
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039cc:	2b02      	cmp	r3, #2
 80039ce:	d13b      	bne.n	8003a48 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	2208      	movs	r2, #8
 80039dc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80039e6:	89ba      	ldrh	r2, [r7, #12]
 80039e8:	7bfb      	ldrb	r3, [r7, #15]
 80039ea:	4619      	mov	r1, r3
 80039ec:	6878      	ldr	r0, [r7, #4]
 80039ee:	f7ff fe32 	bl	8003656 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80039f2:	e029      	b.n	8003a48 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 80039f4:	893b      	ldrh	r3, [r7, #8]
 80039f6:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80039f8:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	f000 fce5 	bl	80043cc <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	2200      	movs	r2, #0
 8003a06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a0a:	89ba      	ldrh	r2, [r7, #12]
 8003a0c:	7bfb      	ldrb	r3, [r7, #15]
 8003a0e:	4619      	mov	r1, r3
 8003a10:	6878      	ldr	r0, [r7, #4]
 8003a12:	f7ff fe20 	bl	8003656 <HAL_I2C_AddrCallback>
}
 8003a16:	e017      	b.n	8003a48 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8003a18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8003a1c:	6878      	ldr	r0, [r7, #4]
 8003a1e:	f000 fcd5 	bl	80043cc <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2200      	movs	r2, #0
 8003a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8003a2a:	89ba      	ldrh	r2, [r7, #12]
 8003a2c:	7bfb      	ldrb	r3, [r7, #15]
 8003a2e:	4619      	mov	r1, r3
 8003a30:	6878      	ldr	r0, [r7, #4]
 8003a32:	f7ff fe10 	bl	8003656 <HAL_I2C_AddrCallback>
}
 8003a36:	e007      	b.n	8003a48 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	2208      	movs	r2, #8
 8003a3e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8003a48:	bf00      	nop
 8003a4a:	3710      	adds	r7, #16
 8003a4c:	46bd      	mov	sp, r7
 8003a4e:	bd80      	pop	{r7, pc}

08003a50 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b084      	sub	sp, #16
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2200      	movs	r2, #0
 8003a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d008      	beq.n	8003a84 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	681a      	ldr	r2, [r3, #0]
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	e00c      	b.n	8003a9e <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d007      	beq.n	8003a9e <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	681a      	ldr	r2, [r3, #0]
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003a9c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003aa4:	b2db      	uxtb	r3, r3
 8003aa6:	2b29      	cmp	r3, #41	; 0x29
 8003aa8:	d112      	bne.n	8003ad0 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	2228      	movs	r2, #40	; 0x28
 8003aae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	2221      	movs	r2, #33	; 0x21
 8003ab6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8003ab8:	2101      	movs	r1, #1
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fc86 	bl	80043cc <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003ac8:	6878      	ldr	r0, [r7, #4]
 8003aca:	f7ff fdb0 	bl	800362e <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8003ace:	e017      	b.n	8003b00 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b2a      	cmp	r3, #42	; 0x2a
 8003ada:	d111      	bne.n	8003b00 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2228      	movs	r2, #40	; 0x28
 8003ae0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2222      	movs	r2, #34	; 0x22
 8003ae8:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8003aea:	2102      	movs	r1, #2
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 fc6d 	bl	80043cc <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7ff fda1 	bl	8003642 <HAL_I2C_SlaveRxCpltCallback>
}
 8003b00:	bf00      	nop
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}

08003b08 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
 8003b10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8003b1a:	683b      	ldr	r3, [r7, #0]
 8003b1c:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003b24:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	2220      	movs	r2, #32
 8003b2c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003b2e:	7bfb      	ldrb	r3, [r7, #15]
 8003b30:	2b21      	cmp	r3, #33	; 0x21
 8003b32:	d002      	beq.n	8003b3a <I2C_ITSlaveCplt+0x32>
 8003b34:	7bfb      	ldrb	r3, [r7, #15]
 8003b36:	2b29      	cmp	r3, #41	; 0x29
 8003b38:	d108      	bne.n	8003b4c <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8003b3a:	f248 0101 	movw	r1, #32769	; 0x8001
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fc44 	bl	80043cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2221      	movs	r2, #33	; 0x21
 8003b48:	631a      	str	r2, [r3, #48]	; 0x30
 8003b4a:	e00d      	b.n	8003b68 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8003b4c:	7bfb      	ldrb	r3, [r7, #15]
 8003b4e:	2b22      	cmp	r3, #34	; 0x22
 8003b50:	d002      	beq.n	8003b58 <I2C_ITSlaveCplt+0x50>
 8003b52:	7bfb      	ldrb	r3, [r7, #15]
 8003b54:	2b2a      	cmp	r3, #42	; 0x2a
 8003b56:	d107      	bne.n	8003b68 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8003b58:	f248 0102 	movw	r1, #32770	; 0x8002
 8003b5c:	6878      	ldr	r0, [r7, #4]
 8003b5e:	f000 fc35 	bl	80043cc <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	2222      	movs	r2, #34	; 0x22
 8003b66:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	685a      	ldr	r2, [r3, #4]
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003b76:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	6859      	ldr	r1, [r3, #4]
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	4b62      	ldr	r3, [pc, #392]	; (8003d0c <I2C_ITSlaveCplt+0x204>)
 8003b84:	400b      	ands	r3, r1
 8003b86:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8003b88:	6878      	ldr	r0, [r7, #4]
 8003b8a:	f000 fa0e 	bl	8003faa <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8003b8e:	693b      	ldr	r3, [r7, #16]
 8003b90:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d013      	beq.n	8003bc0 <I2C_ITSlaveCplt+0xb8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	681a      	ldr	r2, [r3, #0]
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003ba6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d01f      	beq.n	8003bf0 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	b29a      	uxth	r2, r3
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003bbe:	e017      	b.n	8003bf0 <I2C_ITSlaveCplt+0xe8>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d012      	beq.n	8003bf0 <I2C_ITSlaveCplt+0xe8>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003bd8:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d006      	beq.n	8003bf0 <I2C_ITSlaveCplt+0xe8>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	685b      	ldr	r3, [r3, #4]
 8003bea:	b29a      	uxth	r2, r3
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	f003 0304 	and.w	r3, r3, #4
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d020      	beq.n	8003c3c <I2C_ITSlaveCplt+0x134>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	f023 0304 	bic.w	r3, r3, #4
 8003c00:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c0c:	b2d2      	uxtb	r2, r2
 8003c0e:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c14:	1c5a      	adds	r2, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d00c      	beq.n	8003c3c <I2C_ITSlaveCplt+0x134>
    {
      hi2c->XferSize--;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c26:	3b01      	subs	r3, #1
 8003c28:	b29a      	uxth	r2, r3
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c32:	b29b      	uxth	r3, r3
 8003c34:	3b01      	subs	r3, #1
 8003c36:	b29a      	uxth	r2, r3
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003c40:	b29b      	uxth	r3, r3
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d005      	beq.n	8003c52 <I2C_ITSlaveCplt+0x14a>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c4a:	f043 0204 	orr.w	r2, r3, #4
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d010      	beq.n	8003c8a <I2C_ITSlaveCplt+0x182>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003c6c:	4619      	mov	r1, r3
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f8a4 	bl	8003dbc <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003c7a:	b2db      	uxtb	r3, r3
 8003c7c:	2b28      	cmp	r3, #40	; 0x28
 8003c7e:	d141      	bne.n	8003d04 <I2C_ITSlaveCplt+0x1fc>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8003c80:	6979      	ldr	r1, [r7, #20]
 8003c82:	6878      	ldr	r0, [r7, #4]
 8003c84:	f000 f846 	bl	8003d14 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003c88:	e03c      	b.n	8003d04 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c8e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c92:	d014      	beq.n	8003cbe <I2C_ITSlaveCplt+0x1b6>
    I2C_ITSlaveSeqCplt(hi2c);
 8003c94:	6878      	ldr	r0, [r7, #4]
 8003c96:	f7ff fedb 	bl	8003a50 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	4a1c      	ldr	r2, [pc, #112]	; (8003d10 <I2C_ITSlaveCplt+0x208>)
 8003c9e:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	2220      	movs	r2, #32
 8003ca4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2200      	movs	r2, #0
 8003cac:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7ff fcdb 	bl	8003672 <HAL_I2C_ListenCpltCallback>
}
 8003cbc:	e022      	b.n	8003d04 <I2C_ITSlaveCplt+0x1fc>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b22      	cmp	r3, #34	; 0x22
 8003cc8:	d10e      	bne.n	8003ce8 <I2C_ITSlaveCplt+0x1e0>
    hi2c->State = HAL_I2C_STATE_READY;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	2220      	movs	r2, #32
 8003cce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8003ce0:	6878      	ldr	r0, [r7, #4]
 8003ce2:	f7ff fcae 	bl	8003642 <HAL_I2C_SlaveRxCpltCallback>
}
 8003ce6:	e00d      	b.n	8003d04 <I2C_ITSlaveCplt+0x1fc>
    hi2c->State = HAL_I2C_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2220      	movs	r2, #32
 8003cec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2200      	movs	r2, #0
 8003cf4:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7ff fc95 	bl	800362e <HAL_I2C_SlaveTxCpltCallback>
}
 8003d04:	bf00      	nop
 8003d06:	3718      	adds	r7, #24
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}
 8003d0c:	fe00e800 	.word	0xfe00e800
 8003d10:	ffff0000 	.word	0xffff0000

08003d14 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b082      	sub	sp, #8
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
 8003d1c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a25      	ldr	r2, [pc, #148]	; (8003db8 <I2C_ITListenCplt+0xa4>)
 8003d22:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2200      	movs	r2, #0
 8003d28:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	2220      	movs	r2, #32
 8003d2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	2200      	movs	r2, #0
 8003d36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	f003 0304 	and.w	r3, r3, #4
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d022      	beq.n	8003d90 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d54:	b2d2      	uxtb	r2, r2
 8003d56:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	1c5a      	adds	r2, r3, #1
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d012      	beq.n	8003d90 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003d6e:	3b01      	subs	r3, #1
 8003d70:	b29a      	uxth	r2, r3
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d7a:	b29b      	uxth	r3, r3
 8003d7c:	3b01      	subs	r3, #1
 8003d7e:	b29a      	uxth	r2, r3
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d88:	f043 0204 	orr.w	r2, r3, #4
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003d90:	f248 0103 	movw	r1, #32771	; 0x8003
 8003d94:	6878      	ldr	r0, [r7, #4]
 8003d96:	f000 fb19 	bl	80043cc <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	2210      	movs	r2, #16
 8003da0:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2200      	movs	r2, #0
 8003da6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff fc61 	bl	8003672 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8003db0:	bf00      	nop
 8003db2:	3708      	adds	r7, #8
 8003db4:	46bd      	mov	sp, r7
 8003db6:	bd80      	pop	{r7, pc}
 8003db8:	ffff0000 	.word	0xffff0000

08003dbc <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8003dbc:	b580      	push	{r7, lr}
 8003dbe:	b084      	sub	sp, #16
 8003dc0:	af00      	add	r7, sp, #0
 8003dc2:	6078      	str	r0, [r7, #4]
 8003dc4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003dcc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	4a5d      	ldr	r2, [pc, #372]	; (8003f50 <I2C_ITError+0x194>)
 8003dda:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2200      	movs	r2, #0
 8003de0:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8003dee:	7bfb      	ldrb	r3, [r7, #15]
 8003df0:	2b28      	cmp	r3, #40	; 0x28
 8003df2:	d005      	beq.n	8003e00 <I2C_ITError+0x44>
 8003df4:	7bfb      	ldrb	r3, [r7, #15]
 8003df6:	2b29      	cmp	r3, #41	; 0x29
 8003df8:	d002      	beq.n	8003e00 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8003dfa:	7bfb      	ldrb	r3, [r7, #15]
 8003dfc:	2b2a      	cmp	r3, #42	; 0x2a
 8003dfe:	d10b      	bne.n	8003e18 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e00:	2103      	movs	r1, #3
 8003e02:	6878      	ldr	r0, [r7, #4]
 8003e04:	f000 fae2 	bl	80043cc <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2228      	movs	r2, #40	; 0x28
 8003e0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	4a50      	ldr	r2, [pc, #320]	; (8003f54 <I2C_ITError+0x198>)
 8003e14:	635a      	str	r2, [r3, #52]	; 0x34
 8003e16:	e011      	b.n	8003e3c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8003e18:	f248 0103 	movw	r1, #32771	; 0x8003
 8003e1c:	6878      	ldr	r0, [r7, #4]
 8003e1e:	f000 fad5 	bl	80043cc <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e28:	b2db      	uxtb	r3, r3
 8003e2a:	2b60      	cmp	r3, #96	; 0x60
 8003e2c:	d003      	beq.n	8003e36 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	2220      	movs	r2, #32
 8003e32:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e40:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d039      	beq.n	8003ebe <I2C_ITError+0x102>
 8003e4a:	68bb      	ldr	r3, [r7, #8]
 8003e4c:	2b11      	cmp	r3, #17
 8003e4e:	d002      	beq.n	8003e56 <I2C_ITError+0x9a>
 8003e50:	68bb      	ldr	r3, [r7, #8]
 8003e52:	2b21      	cmp	r3, #33	; 0x21
 8003e54:	d133      	bne.n	8003ebe <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003e64:	d107      	bne.n	8003e76 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e74:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fe fc99 	bl	80027b2 <HAL_DMA_GetState>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b01      	cmp	r3, #1
 8003e84:	d017      	beq.n	8003eb6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8a:	4a33      	ldr	r2, [pc, #204]	; (8003f58 <I2C_ITError+0x19c>)
 8003e8c:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f7fe fc67 	bl	800276e <HAL_DMA_Abort_IT>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d04d      	beq.n	8003f42 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003eaa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003eac:	687a      	ldr	r2, [r7, #4]
 8003eae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003eb0:	4610      	mov	r0, r2
 8003eb2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003eb4:	e045      	b.n	8003f42 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003eb6:	6878      	ldr	r0, [r7, #4]
 8003eb8:	f000 f850 	bl	8003f5c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003ebc:	e041      	b.n	8003f42 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d039      	beq.n	8003f3a <I2C_ITError+0x17e>
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	2b12      	cmp	r3, #18
 8003eca:	d002      	beq.n	8003ed2 <I2C_ITError+0x116>
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	2b22      	cmp	r3, #34	; 0x22
 8003ed0:	d133      	bne.n	8003f3a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003edc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ee0:	d107      	bne.n	8003ef2 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003ef0:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fe fc5b 	bl	80027b2 <HAL_DMA_GetState>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d017      	beq.n	8003f32 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f06:	4a14      	ldr	r2, [pc, #80]	; (8003f58 <I2C_ITError+0x19c>)
 8003f08:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	2200      	movs	r2, #0
 8003f0e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fe fc29 	bl	800276e <HAL_DMA_Abort_IT>
 8003f1c:	4603      	mov	r3, r0
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d011      	beq.n	8003f46 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f26:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f28:	687a      	ldr	r2, [r7, #4]
 8003f2a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003f2c:	4610      	mov	r0, r2
 8003f2e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f30:	e009      	b.n	8003f46 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8003f32:	6878      	ldr	r0, [r7, #4]
 8003f34:	f000 f812 	bl	8003f5c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f38:	e005      	b.n	8003f46 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8003f3a:	6878      	ldr	r0, [r7, #4]
 8003f3c:	f000 f80e 	bl	8003f5c <I2C_TreatErrorCallback>
  }
}
 8003f40:	e002      	b.n	8003f48 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8003f42:	bf00      	nop
 8003f44:	e000      	b.n	8003f48 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8003f46:	bf00      	nop
}
 8003f48:	bf00      	nop
 8003f4a:	3710      	adds	r7, #16
 8003f4c:	46bd      	mov	sp, r7
 8003f4e:	bd80      	pop	{r7, pc}
 8003f50:	ffff0000 	.word	0xffff0000
 8003f54:	080036af 	.word	0x080036af
 8003f58:	08003ff3 	.word	0x08003ff3

08003f5c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b082      	sub	sp, #8
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f6a:	b2db      	uxtb	r3, r3
 8003f6c:	2b60      	cmp	r3, #96	; 0x60
 8003f6e:	d10e      	bne.n	8003f8e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	2220      	movs	r2, #32
 8003f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7ff fb87 	bl	800369a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8003f8c:	e009      	b.n	8003fa2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	2200      	movs	r2, #0
 8003f98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8003f9c:	6878      	ldr	r0, [r7, #4]
 8003f9e:	f7ff fb72 	bl	8003686 <HAL_I2C_ErrorCallback>
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8003faa:	b480      	push	{r7}
 8003fac:	b083      	sub	sp, #12
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	f003 0302 	and.w	r3, r3, #2
 8003fbc:	2b02      	cmp	r3, #2
 8003fbe:	d103      	bne.n	8003fc8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	2200      	movs	r2, #0
 8003fc6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	699b      	ldr	r3, [r3, #24]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	2b01      	cmp	r3, #1
 8003fd4:	d007      	beq.n	8003fe6 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	699a      	ldr	r2, [r3, #24]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f042 0201 	orr.w	r2, r2, #1
 8003fe4:	619a      	str	r2, [r3, #24]
  }
}
 8003fe6:	bf00      	nop
 8003fe8:	370c      	adds	r7, #12
 8003fea:	46bd      	mov	sp, r7
 8003fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff0:	4770      	bx	lr

08003ff2 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8003ff2:	b580      	push	{r7, lr}
 8003ff4:	b084      	sub	sp, #16
 8003ff6:	af00      	add	r7, sp, #0
 8003ff8:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ffe:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004004:	2b00      	cmp	r3, #0
 8004006:	d003      	beq.n	8004010 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800400c:	2200      	movs	r2, #0
 800400e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004014:	2b00      	cmp	r3, #0
 8004016:	d003      	beq.n	8004020 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800401c:	2200      	movs	r2, #0
 800401e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8004020:	68f8      	ldr	r0, [r7, #12]
 8004022:	f7ff ff9b 	bl	8003f5c <I2C_TreatErrorCallback>
}
 8004026:	bf00      	nop
 8004028:	3710      	adds	r7, #16
 800402a:	46bd      	mov	sp, r7
 800402c:	bd80      	pop	{r7, pc}

0800402e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800402e:	b580      	push	{r7, lr}
 8004030:	b084      	sub	sp, #16
 8004032:	af00      	add	r7, sp, #0
 8004034:	60f8      	str	r0, [r7, #12]
 8004036:	60b9      	str	r1, [r7, #8]
 8004038:	603b      	str	r3, [r7, #0]
 800403a:	4613      	mov	r3, r2
 800403c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800403e:	e022      	b.n	8004086 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004040:	683b      	ldr	r3, [r7, #0]
 8004042:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004046:	d01e      	beq.n	8004086 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004048:	f7fe f9e0 	bl	800240c <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	69bb      	ldr	r3, [r7, #24]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	683a      	ldr	r2, [r7, #0]
 8004054:	429a      	cmp	r2, r3
 8004056:	d302      	bcc.n	800405e <I2C_WaitOnFlagUntilTimeout+0x30>
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	2b00      	cmp	r3, #0
 800405c:	d113      	bne.n	8004086 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004062:	f043 0220 	orr.w	r2, r3, #32
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2220      	movs	r2, #32
 800406e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	2200      	movs	r2, #0
 8004076:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	2200      	movs	r2, #0
 800407e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e00f      	b.n	80040a6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	699a      	ldr	r2, [r3, #24]
 800408c:	68bb      	ldr	r3, [r7, #8]
 800408e:	4013      	ands	r3, r2
 8004090:	68ba      	ldr	r2, [r7, #8]
 8004092:	429a      	cmp	r2, r3
 8004094:	bf0c      	ite	eq
 8004096:	2301      	moveq	r3, #1
 8004098:	2300      	movne	r3, #0
 800409a:	b2db      	uxtb	r3, r3
 800409c:	461a      	mov	r2, r3
 800409e:	79fb      	ldrb	r3, [r7, #7]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d0cd      	beq.n	8004040 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80040a4:	2300      	movs	r3, #0
}
 80040a6:	4618      	mov	r0, r3
 80040a8:	3710      	adds	r7, #16
 80040aa:	46bd      	mov	sp, r7
 80040ac:	bd80      	pop	{r7, pc}

080040ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80040ae:	b580      	push	{r7, lr}
 80040b0:	b084      	sub	sp, #16
 80040b2:	af00      	add	r7, sp, #0
 80040b4:	60f8      	str	r0, [r7, #12]
 80040b6:	60b9      	str	r1, [r7, #8]
 80040b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80040ba:	e02c      	b.n	8004116 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80040bc:	687a      	ldr	r2, [r7, #4]
 80040be:	68b9      	ldr	r1, [r7, #8]
 80040c0:	68f8      	ldr	r0, [r7, #12]
 80040c2:	f000 f871 	bl	80041a8 <I2C_IsErrorOccurred>
 80040c6:	4603      	mov	r3, r0
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d001      	beq.n	80040d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e02a      	b.n	8004126 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d6:	d01e      	beq.n	8004116 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d8:	f7fe f998 	bl	800240c <HAL_GetTick>
 80040dc:	4602      	mov	r2, r0
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	1ad3      	subs	r3, r2, r3
 80040e2:	68ba      	ldr	r2, [r7, #8]
 80040e4:	429a      	cmp	r2, r3
 80040e6:	d302      	bcc.n	80040ee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d113      	bne.n	8004116 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f2:	f043 0220 	orr.w	r2, r3, #32
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2220      	movs	r2, #32
 80040fe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	2200      	movs	r2, #0
 8004106:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	2200      	movs	r2, #0
 800410e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e007      	b.n	8004126 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	699b      	ldr	r3, [r3, #24]
 800411c:	f003 0302 	and.w	r3, r3, #2
 8004120:	2b02      	cmp	r3, #2
 8004122:	d1cb      	bne.n	80040bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004124:	2300      	movs	r3, #0
}
 8004126:	4618      	mov	r0, r3
 8004128:	3710      	adds	r7, #16
 800412a:	46bd      	mov	sp, r7
 800412c:	bd80      	pop	{r7, pc}

0800412e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800412e:	b580      	push	{r7, lr}
 8004130:	b084      	sub	sp, #16
 8004132:	af00      	add	r7, sp, #0
 8004134:	60f8      	str	r0, [r7, #12]
 8004136:	60b9      	str	r1, [r7, #8]
 8004138:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800413a:	e028      	b.n	800418e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800413c:	687a      	ldr	r2, [r7, #4]
 800413e:	68b9      	ldr	r1, [r7, #8]
 8004140:	68f8      	ldr	r0, [r7, #12]
 8004142:	f000 f831 	bl	80041a8 <I2C_IsErrorOccurred>
 8004146:	4603      	mov	r3, r0
 8004148:	2b00      	cmp	r3, #0
 800414a:	d001      	beq.n	8004150 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800414c:	2301      	movs	r3, #1
 800414e:	e026      	b.n	800419e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004150:	f7fe f95c 	bl	800240c <HAL_GetTick>
 8004154:	4602      	mov	r2, r0
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	1ad3      	subs	r3, r2, r3
 800415a:	68ba      	ldr	r2, [r7, #8]
 800415c:	429a      	cmp	r2, r3
 800415e:	d302      	bcc.n	8004166 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8004160:	68bb      	ldr	r3, [r7, #8]
 8004162:	2b00      	cmp	r3, #0
 8004164:	d113      	bne.n	800418e <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800416a:	f043 0220 	orr.w	r2, r3, #32
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2220      	movs	r2, #32
 8004176:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2200      	movs	r2, #0
 800417e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2200      	movs	r2, #0
 8004186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800418a:	2301      	movs	r3, #1
 800418c:	e007      	b.n	800419e <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	699b      	ldr	r3, [r3, #24]
 8004194:	f003 0320 	and.w	r3, r3, #32
 8004198:	2b20      	cmp	r3, #32
 800419a:	d1cf      	bne.n	800413c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800419c:	2300      	movs	r3, #0
}
 800419e:	4618      	mov	r0, r3
 80041a0:	3710      	adds	r7, #16
 80041a2:	46bd      	mov	sp, r7
 80041a4:	bd80      	pop	{r7, pc}
	...

080041a8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	b08a      	sub	sp, #40	; 0x28
 80041ac:	af00      	add	r7, sp, #0
 80041ae:	60f8      	str	r0, [r7, #12]
 80041b0:	60b9      	str	r1, [r7, #8]
 80041b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80041b4:	2300      	movs	r3, #0
 80041b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	699b      	ldr	r3, [r3, #24]
 80041c0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80041c2:	2300      	movs	r3, #0
 80041c4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80041ca:	69bb      	ldr	r3, [r7, #24]
 80041cc:	f003 0310 	and.w	r3, r3, #16
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d068      	beq.n	80042a6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	2210      	movs	r2, #16
 80041da:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80041dc:	e049      	b.n	8004272 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041e4:	d045      	beq.n	8004272 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80041e6:	f7fe f911 	bl	800240c <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	68ba      	ldr	r2, [r7, #8]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d302      	bcc.n	80041fc <I2C_IsErrorOccurred+0x54>
 80041f6:	68bb      	ldr	r3, [r7, #8]
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d13a      	bne.n	8004272 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	685b      	ldr	r3, [r3, #4]
 8004202:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004206:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800420e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699b      	ldr	r3, [r3, #24]
 8004216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800421a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800421e:	d121      	bne.n	8004264 <I2C_IsErrorOccurred+0xbc>
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004226:	d01d      	beq.n	8004264 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8004228:	7cfb      	ldrb	r3, [r7, #19]
 800422a:	2b20      	cmp	r3, #32
 800422c:	d01a      	beq.n	8004264 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	685a      	ldr	r2, [r3, #4]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800423c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800423e:	f7fe f8e5 	bl	800240c <HAL_GetTick>
 8004242:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004244:	e00e      	b.n	8004264 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8004246:	f7fe f8e1 	bl	800240c <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	2b19      	cmp	r3, #25
 8004252:	d907      	bls.n	8004264 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |=HAL_I2C_ERROR_TIMEOUT;
 8004254:	6a3b      	ldr	r3, [r7, #32]
 8004256:	f043 0320 	orr.w	r3, r3, #32
 800425a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800425c:	2301      	movs	r3, #1
 800425e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

              break;
 8004262:	e006      	b.n	8004272 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	f003 0320 	and.w	r3, r3, #32
 800426e:	2b20      	cmp	r3, #32
 8004270:	d1e9      	bne.n	8004246 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	f003 0320 	and.w	r3, r3, #32
 800427c:	2b20      	cmp	r3, #32
 800427e:	d003      	beq.n	8004288 <I2C_IsErrorOccurred+0xe0>
 8004280:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004284:	2b00      	cmp	r3, #0
 8004286:	d0aa      	beq.n	80041de <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8004288:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800428c:	2b00      	cmp	r3, #0
 800428e:	d103      	bne.n	8004298 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	2220      	movs	r2, #32
 8004296:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8004298:	6a3b      	ldr	r3, [r7, #32]
 800429a:	f043 0304 	orr.w	r3, r3, #4
 800429e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80042a0:	2301      	movs	r3, #1
 80042a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d00b      	beq.n	80042d0 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80042b8:	6a3b      	ldr	r3, [r7, #32]
 80042ba:	f043 0301 	orr.w	r3, r3, #1
 80042be:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80042c8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042ca:	2301      	movs	r3, #1
 80042cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80042d0:	69bb      	ldr	r3, [r7, #24]
 80042d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00b      	beq.n	80042f2 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80042da:	6a3b      	ldr	r3, [r7, #32]
 80042dc:	f043 0308 	orr.w	r3, r3, #8
 80042e0:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80042ea:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80042ec:	2301      	movs	r3, #1
 80042ee:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80042f2:	69bb      	ldr	r3, [r7, #24]
 80042f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00b      	beq.n	8004314 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80042fc:	6a3b      	ldr	r3, [r7, #32]
 80042fe:	f043 0302 	orr.w	r3, r3, #2
 8004302:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f44f 7200 	mov.w	r2, #512	; 0x200
 800430c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800430e:	2301      	movs	r3, #1
 8004310:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8004314:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004318:	2b00      	cmp	r3, #0
 800431a:	d01c      	beq.n	8004356 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800431c:	68f8      	ldr	r0, [r7, #12]
 800431e:	f7ff fe44 	bl	8003faa <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	6859      	ldr	r1, [r3, #4]
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	681a      	ldr	r2, [r3, #0]
 800432c:	4b0d      	ldr	r3, [pc, #52]	; (8004364 <I2C_IsErrorOccurred+0x1bc>)
 800432e:	400b      	ands	r3, r1
 8004330:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004336:	6a3b      	ldr	r3, [r7, #32]
 8004338:	431a      	orrs	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2220      	movs	r2, #32
 8004342:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	2200      	movs	r2, #0
 800434a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	2200      	movs	r2, #0
 8004352:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8004356:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800435a:	4618      	mov	r0, r3
 800435c:	3728      	adds	r7, #40	; 0x28
 800435e:	46bd      	mov	sp, r7
 8004360:	bd80      	pop	{r7, pc}
 8004362:	bf00      	nop
 8004364:	fe00e800 	.word	0xfe00e800

08004368 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8004368:	b480      	push	{r7}
 800436a:	b087      	sub	sp, #28
 800436c:	af00      	add	r7, sp, #0
 800436e:	60f8      	str	r0, [r7, #12]
 8004370:	607b      	str	r3, [r7, #4]
 8004372:	460b      	mov	r3, r1
 8004374:	817b      	strh	r3, [r7, #10]
 8004376:	4613      	mov	r3, r2
 8004378:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800437a:	897b      	ldrh	r3, [r7, #10]
 800437c:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8004380:	7a7b      	ldrb	r3, [r7, #9]
 8004382:	041b      	lsls	r3, r3, #16
 8004384:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8004388:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800438e:	6a3b      	ldr	r3, [r7, #32]
 8004390:	4313      	orrs	r3, r2
 8004392:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004396:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	6a3b      	ldr	r3, [r7, #32]
 80043a0:	0d5b      	lsrs	r3, r3, #21
 80043a2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80043a6:	4b08      	ldr	r3, [pc, #32]	; (80043c8 <I2C_TransferConfig+0x60>)
 80043a8:	430b      	orrs	r3, r1
 80043aa:	43db      	mvns	r3, r3
 80043ac:	ea02 0103 	and.w	r1, r2, r3
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	697a      	ldr	r2, [r7, #20]
 80043b6:	430a      	orrs	r2, r1
 80043b8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80043ba:	bf00      	nop
 80043bc:	371c      	adds	r7, #28
 80043be:	46bd      	mov	sp, r7
 80043c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c4:	4770      	bx	lr
 80043c6:	bf00      	nop
 80043c8:	03ff63ff 	.word	0x03ff63ff

080043cc <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 80043cc:	b480      	push	{r7}
 80043ce:	b085      	sub	sp, #20
 80043d0:	af00      	add	r7, sp, #0
 80043d2:	6078      	str	r0, [r7, #4]
 80043d4:	460b      	mov	r3, r1
 80043d6:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80043dc:	887b      	ldrh	r3, [r7, #2]
 80043de:	f003 0301 	and.w	r3, r3, #1
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d00f      	beq.n	8004406 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80043e6:	68fb      	ldr	r3, [r7, #12]
 80043e8:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80043ec:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80043f4:	b2db      	uxtb	r3, r3
 80043f6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80043fa:	2b28      	cmp	r3, #40	; 0x28
 80043fc:	d003      	beq.n	8004406 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8004404:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8004406:	887b      	ldrh	r3, [r7, #2]
 8004408:	f003 0302 	and.w	r3, r3, #2
 800440c:	2b00      	cmp	r3, #0
 800440e:	d00f      	beq.n	8004430 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8004416:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800441e:	b2db      	uxtb	r3, r3
 8004420:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004424:	2b28      	cmp	r3, #40	; 0x28
 8004426:	d003      	beq.n	8004430 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800442e:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8004430:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004434:	2b00      	cmp	r3, #0
 8004436:	da03      	bge.n	8004440 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800443e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8004440:	887b      	ldrh	r3, [r7, #2]
 8004442:	2b10      	cmp	r3, #16
 8004444:	d103      	bne.n	800444e <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 800444c:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800444e:	887b      	ldrh	r3, [r7, #2]
 8004450:	2b20      	cmp	r3, #32
 8004452:	d103      	bne.n	800445c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	f043 0320 	orr.w	r3, r3, #32
 800445a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800445c:	887b      	ldrh	r3, [r7, #2]
 800445e:	2b40      	cmp	r3, #64	; 0x40
 8004460:	d103      	bne.n	800446a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004468:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	6819      	ldr	r1, [r3, #0]
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	43da      	mvns	r2, r3
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	400a      	ands	r2, r1
 800447a:	601a      	str	r2, [r3, #0]
}
 800447c:	bf00      	nop
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004498:	b2db      	uxtb	r3, r3
 800449a:	2b20      	cmp	r3, #32
 800449c:	d138      	bne.n	8004510 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d101      	bne.n	80044ac <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80044a8:	2302      	movs	r3, #2
 80044aa:	e032      	b.n	8004512 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2224      	movs	r2, #36	; 0x24
 80044b8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0201 	bic.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80044da:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	6819      	ldr	r1, [r3, #0]
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	683a      	ldr	r2, [r7, #0]
 80044e8:	430a      	orrs	r2, r1
 80044ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f042 0201 	orr.w	r2, r2, #1
 80044fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2220      	movs	r2, #32
 8004500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	2200      	movs	r2, #0
 8004508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800450c:	2300      	movs	r3, #0
 800450e:	e000      	b.n	8004512 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8004510:	2302      	movs	r3, #2
  }
}
 8004512:	4618      	mov	r0, r3
 8004514:	370c      	adds	r7, #12
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr

0800451e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800451e:	b480      	push	{r7}
 8004520:	b085      	sub	sp, #20
 8004522:	af00      	add	r7, sp, #0
 8004524:	6078      	str	r0, [r7, #4]
 8004526:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800452e:	b2db      	uxtb	r3, r3
 8004530:	2b20      	cmp	r3, #32
 8004532:	d139      	bne.n	80045a8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800453a:	2b01      	cmp	r3, #1
 800453c:	d101      	bne.n	8004542 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800453e:	2302      	movs	r3, #2
 8004540:	e033      	b.n	80045aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	2201      	movs	r2, #1
 8004546:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2224      	movs	r2, #36	; 0x24
 800454e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f022 0201 	bic.w	r2, r2, #1
 8004560:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8004570:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004572:	683b      	ldr	r3, [r7, #0]
 8004574:	021b      	lsls	r3, r3, #8
 8004576:	68fa      	ldr	r2, [r7, #12]
 8004578:	4313      	orrs	r3, r2
 800457a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	68fa      	ldr	r2, [r7, #12]
 8004582:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681a      	ldr	r2, [r3, #0]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f042 0201 	orr.w	r2, r2, #1
 8004592:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2220      	movs	r2, #32
 8004598:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	2200      	movs	r2, #0
 80045a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80045a4:	2300      	movs	r3, #0
 80045a6:	e000      	b.n	80045aa <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80045a8:	2302      	movs	r3, #2
  }
}
 80045aa:	4618      	mov	r0, r3
 80045ac:	3714      	adds	r7, #20
 80045ae:	46bd      	mov	sp, r7
 80045b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045b4:	4770      	bx	lr

080045b6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80045b6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80045b8:	b08f      	sub	sp, #60	; 0x3c
 80045ba:	af0a      	add	r7, sp, #40	; 0x28
 80045bc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d101      	bne.n	80045c8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80045c4:	2301      	movs	r3, #1
 80045c6:	e116      	b.n	80047f6 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d106      	bne.n	80045e8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	2200      	movs	r2, #0
 80045de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f7fd fe1e 	bl	8002224 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2203      	movs	r2, #3
 80045ec:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80045f0:	68bb      	ldr	r3, [r7, #8]
 80045f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d102      	bne.n	8004602 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2200      	movs	r2, #0
 8004600:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f004 f92c 	bl	8008864 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	603b      	str	r3, [r7, #0]
 8004612:	687e      	ldr	r6, [r7, #4]
 8004614:	466d      	mov	r5, sp
 8004616:	f106 0410 	add.w	r4, r6, #16
 800461a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800461c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800461e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8004620:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8004622:	e894 0003 	ldmia.w	r4, {r0, r1}
 8004626:	e885 0003 	stmia.w	r5, {r0, r1}
 800462a:	1d33      	adds	r3, r6, #4
 800462c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800462e:	6838      	ldr	r0, [r7, #0]
 8004630:	f004 f8c0 	bl	80087b4 <USB_CoreInit>
 8004634:	4603      	mov	r3, r0
 8004636:	2b00      	cmp	r3, #0
 8004638:	d005      	beq.n	8004646 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	2202      	movs	r2, #2
 800463e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8004642:	2301      	movs	r3, #1
 8004644:	e0d7      	b.n	80047f6 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	2100      	movs	r1, #0
 800464c:	4618      	mov	r0, r3
 800464e:	f004 f91a 	bl	8008886 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004652:	2300      	movs	r3, #0
 8004654:	73fb      	strb	r3, [r7, #15]
 8004656:	e04a      	b.n	80046ee <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8004658:	7bfa      	ldrb	r2, [r7, #15]
 800465a:	6879      	ldr	r1, [r7, #4]
 800465c:	4613      	mov	r3, r2
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	4413      	add	r3, r2
 8004662:	009b      	lsls	r3, r3, #2
 8004664:	440b      	add	r3, r1
 8004666:	333d      	adds	r3, #61	; 0x3d
 8004668:	2201      	movs	r2, #1
 800466a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800466c:	7bfa      	ldrb	r2, [r7, #15]
 800466e:	6879      	ldr	r1, [r7, #4]
 8004670:	4613      	mov	r3, r2
 8004672:	00db      	lsls	r3, r3, #3
 8004674:	4413      	add	r3, r2
 8004676:	009b      	lsls	r3, r3, #2
 8004678:	440b      	add	r3, r1
 800467a:	333c      	adds	r3, #60	; 0x3c
 800467c:	7bfa      	ldrb	r2, [r7, #15]
 800467e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8004680:	7bfa      	ldrb	r2, [r7, #15]
 8004682:	7bfb      	ldrb	r3, [r7, #15]
 8004684:	b298      	uxth	r0, r3
 8004686:	6879      	ldr	r1, [r7, #4]
 8004688:	4613      	mov	r3, r2
 800468a:	00db      	lsls	r3, r3, #3
 800468c:	4413      	add	r3, r2
 800468e:	009b      	lsls	r3, r3, #2
 8004690:	440b      	add	r3, r1
 8004692:	3344      	adds	r3, #68	; 0x44
 8004694:	4602      	mov	r2, r0
 8004696:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8004698:	7bfa      	ldrb	r2, [r7, #15]
 800469a:	6879      	ldr	r1, [r7, #4]
 800469c:	4613      	mov	r3, r2
 800469e:	00db      	lsls	r3, r3, #3
 80046a0:	4413      	add	r3, r2
 80046a2:	009b      	lsls	r3, r3, #2
 80046a4:	440b      	add	r3, r1
 80046a6:	3340      	adds	r3, #64	; 0x40
 80046a8:	2200      	movs	r2, #0
 80046aa:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80046ac:	7bfa      	ldrb	r2, [r7, #15]
 80046ae:	6879      	ldr	r1, [r7, #4]
 80046b0:	4613      	mov	r3, r2
 80046b2:	00db      	lsls	r3, r3, #3
 80046b4:	4413      	add	r3, r2
 80046b6:	009b      	lsls	r3, r3, #2
 80046b8:	440b      	add	r3, r1
 80046ba:	3348      	adds	r3, #72	; 0x48
 80046bc:	2200      	movs	r2, #0
 80046be:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80046c0:	7bfa      	ldrb	r2, [r7, #15]
 80046c2:	6879      	ldr	r1, [r7, #4]
 80046c4:	4613      	mov	r3, r2
 80046c6:	00db      	lsls	r3, r3, #3
 80046c8:	4413      	add	r3, r2
 80046ca:	009b      	lsls	r3, r3, #2
 80046cc:	440b      	add	r3, r1
 80046ce:	334c      	adds	r3, #76	; 0x4c
 80046d0:	2200      	movs	r2, #0
 80046d2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80046d4:	7bfa      	ldrb	r2, [r7, #15]
 80046d6:	6879      	ldr	r1, [r7, #4]
 80046d8:	4613      	mov	r3, r2
 80046da:	00db      	lsls	r3, r3, #3
 80046dc:	4413      	add	r3, r2
 80046de:	009b      	lsls	r3, r3, #2
 80046e0:	440b      	add	r3, r1
 80046e2:	3354      	adds	r3, #84	; 0x54
 80046e4:	2200      	movs	r2, #0
 80046e6:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046e8:	7bfb      	ldrb	r3, [r7, #15]
 80046ea:	3301      	adds	r3, #1
 80046ec:	73fb      	strb	r3, [r7, #15]
 80046ee:	7bfa      	ldrb	r2, [r7, #15]
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	685b      	ldr	r3, [r3, #4]
 80046f4:	429a      	cmp	r2, r3
 80046f6:	d3af      	bcc.n	8004658 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80046f8:	2300      	movs	r3, #0
 80046fa:	73fb      	strb	r3, [r7, #15]
 80046fc:	e044      	b.n	8004788 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80046fe:	7bfa      	ldrb	r2, [r7, #15]
 8004700:	6879      	ldr	r1, [r7, #4]
 8004702:	4613      	mov	r3, r2
 8004704:	00db      	lsls	r3, r3, #3
 8004706:	4413      	add	r3, r2
 8004708:	009b      	lsls	r3, r3, #2
 800470a:	440b      	add	r3, r1
 800470c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8004710:	2200      	movs	r2, #0
 8004712:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8004714:	7bfa      	ldrb	r2, [r7, #15]
 8004716:	6879      	ldr	r1, [r7, #4]
 8004718:	4613      	mov	r3, r2
 800471a:	00db      	lsls	r3, r3, #3
 800471c:	4413      	add	r3, r2
 800471e:	009b      	lsls	r3, r3, #2
 8004720:	440b      	add	r3, r1
 8004722:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8004726:	7bfa      	ldrb	r2, [r7, #15]
 8004728:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800472a:	7bfa      	ldrb	r2, [r7, #15]
 800472c:	6879      	ldr	r1, [r7, #4]
 800472e:	4613      	mov	r3, r2
 8004730:	00db      	lsls	r3, r3, #3
 8004732:	4413      	add	r3, r2
 8004734:	009b      	lsls	r3, r3, #2
 8004736:	440b      	add	r3, r1
 8004738:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800473c:	2200      	movs	r2, #0
 800473e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8004740:	7bfa      	ldrb	r2, [r7, #15]
 8004742:	6879      	ldr	r1, [r7, #4]
 8004744:	4613      	mov	r3, r2
 8004746:	00db      	lsls	r3, r3, #3
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	440b      	add	r3, r1
 800474e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8004752:	2200      	movs	r2, #0
 8004754:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8004756:	7bfa      	ldrb	r2, [r7, #15]
 8004758:	6879      	ldr	r1, [r7, #4]
 800475a:	4613      	mov	r3, r2
 800475c:	00db      	lsls	r3, r3, #3
 800475e:	4413      	add	r3, r2
 8004760:	009b      	lsls	r3, r3, #2
 8004762:	440b      	add	r3, r1
 8004764:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8004768:	2200      	movs	r2, #0
 800476a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800476c:	7bfa      	ldrb	r2, [r7, #15]
 800476e:	6879      	ldr	r1, [r7, #4]
 8004770:	4613      	mov	r3, r2
 8004772:	00db      	lsls	r3, r3, #3
 8004774:	4413      	add	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800477e:	2200      	movs	r2, #0
 8004780:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8004782:	7bfb      	ldrb	r3, [r7, #15]
 8004784:	3301      	adds	r3, #1
 8004786:	73fb      	strb	r3, [r7, #15]
 8004788:	7bfa      	ldrb	r2, [r7, #15]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	685b      	ldr	r3, [r3, #4]
 800478e:	429a      	cmp	r2, r3
 8004790:	d3b5      	bcc.n	80046fe <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	603b      	str	r3, [r7, #0]
 8004798:	687e      	ldr	r6, [r7, #4]
 800479a:	466d      	mov	r5, sp
 800479c:	f106 0410 	add.w	r4, r6, #16
 80047a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80047a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80047a8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80047ac:	e885 0003 	stmia.w	r5, {r0, r1}
 80047b0:	1d33      	adds	r3, r6, #4
 80047b2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80047b4:	6838      	ldr	r0, [r7, #0]
 80047b6:	f004 f8b3 	bl	8008920 <USB_DevInit>
 80047ba:	4603      	mov	r3, r0
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d005      	beq.n	80047cc <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2202      	movs	r2, #2
 80047c4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80047c8:	2301      	movs	r3, #1
 80047ca:	e014      	b.n	80047f6 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2201      	movs	r2, #1
 80047d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047e0:	2b01      	cmp	r3, #1
 80047e2:	d102      	bne.n	80047ea <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f000 f80b 	bl	8004800 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f004 fa71 	bl	8008cd6 <USB_DevDisconnect>

  return HAL_OK;
 80047f4:	2300      	movs	r3, #0
}
 80047f6:	4618      	mov	r0, r3
 80047f8:	3714      	adds	r7, #20
 80047fa:	46bd      	mov	sp, r7
 80047fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004800 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8004800:	b480      	push	{r7}
 8004802:	b085      	sub	sp, #20
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	2201      	movs	r2, #1
 8004812:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	699b      	ldr	r3, [r3, #24]
 8004822:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8004826:	68fb      	ldr	r3, [r7, #12]
 8004828:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800482e:	4b05      	ldr	r3, [pc, #20]	; (8004844 <HAL_PCDEx_ActivateLPM+0x44>)
 8004830:	4313      	orrs	r3, r2
 8004832:	68fa      	ldr	r2, [r7, #12]
 8004834:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	10000003 	.word	0x10000003

08004848 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800484c:	4b05      	ldr	r3, [pc, #20]	; (8004864 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	4a04      	ldr	r2, [pc, #16]	; (8004864 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8004852:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004856:	6013      	str	r3, [r2, #0]
}
 8004858:	bf00      	nop
 800485a:	46bd      	mov	sp, r7
 800485c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004860:	4770      	bx	lr
 8004862:	bf00      	nop
 8004864:	40007000 	.word	0x40007000

08004868 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004870:	2300      	movs	r3, #0
 8004872:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	2b00      	cmp	r3, #0
 8004878:	d101      	bne.n	800487e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800487a:	2301      	movs	r3, #1
 800487c:	e291      	b.n	8004da2 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f003 0301 	and.w	r3, r3, #1
 8004886:	2b00      	cmp	r3, #0
 8004888:	f000 8087 	beq.w	800499a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800488c:	4b96      	ldr	r3, [pc, #600]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f003 030c 	and.w	r3, r3, #12
 8004894:	2b04      	cmp	r3, #4
 8004896:	d00c      	beq.n	80048b2 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004898:	4b93      	ldr	r3, [pc, #588]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 800489a:	689b      	ldr	r3, [r3, #8]
 800489c:	f003 030c 	and.w	r3, r3, #12
 80048a0:	2b08      	cmp	r3, #8
 80048a2:	d112      	bne.n	80048ca <HAL_RCC_OscConfig+0x62>
 80048a4:	4b90      	ldr	r3, [pc, #576]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80048ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80048b0:	d10b      	bne.n	80048ca <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80048b2:	4b8d      	ldr	r3, [pc, #564]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d06c      	beq.n	8004998 <HAL_RCC_OscConfig+0x130>
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d168      	bne.n	8004998 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80048c6:	2301      	movs	r3, #1
 80048c8:	e26b      	b.n	8004da2 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048d2:	d106      	bne.n	80048e2 <HAL_RCC_OscConfig+0x7a>
 80048d4:	4b84      	ldr	r3, [pc, #528]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	4a83      	ldr	r2, [pc, #524]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 80048da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80048de:	6013      	str	r3, [r2, #0]
 80048e0:	e02e      	b.n	8004940 <HAL_RCC_OscConfig+0xd8>
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	685b      	ldr	r3, [r3, #4]
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d10c      	bne.n	8004904 <HAL_RCC_OscConfig+0x9c>
 80048ea:	4b7f      	ldr	r3, [pc, #508]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	4a7e      	ldr	r2, [pc, #504]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 80048f0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80048f4:	6013      	str	r3, [r2, #0]
 80048f6:	4b7c      	ldr	r3, [pc, #496]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4a7b      	ldr	r2, [pc, #492]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 80048fc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004900:	6013      	str	r3, [r2, #0]
 8004902:	e01d      	b.n	8004940 <HAL_RCC_OscConfig+0xd8>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800490c:	d10c      	bne.n	8004928 <HAL_RCC_OscConfig+0xc0>
 800490e:	4b76      	ldr	r3, [pc, #472]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	4a75      	ldr	r2, [pc, #468]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 8004914:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004918:	6013      	str	r3, [r2, #0]
 800491a:	4b73      	ldr	r3, [pc, #460]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	4a72      	ldr	r2, [pc, #456]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 8004920:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004924:	6013      	str	r3, [r2, #0]
 8004926:	e00b      	b.n	8004940 <HAL_RCC_OscConfig+0xd8>
 8004928:	4b6f      	ldr	r3, [pc, #444]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	4a6e      	ldr	r2, [pc, #440]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 800492e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004932:	6013      	str	r3, [r2, #0]
 8004934:	4b6c      	ldr	r3, [pc, #432]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a6b      	ldr	r2, [pc, #428]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 800493a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800493e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	2b00      	cmp	r3, #0
 8004946:	d013      	beq.n	8004970 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004948:	f7fd fd60 	bl	800240c <HAL_GetTick>
 800494c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800494e:	e008      	b.n	8004962 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004950:	f7fd fd5c 	bl	800240c <HAL_GetTick>
 8004954:	4602      	mov	r2, r0
 8004956:	693b      	ldr	r3, [r7, #16]
 8004958:	1ad3      	subs	r3, r2, r3
 800495a:	2b64      	cmp	r3, #100	; 0x64
 800495c:	d901      	bls.n	8004962 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800495e:	2303      	movs	r3, #3
 8004960:	e21f      	b.n	8004da2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004962:	4b61      	ldr	r3, [pc, #388]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800496a:	2b00      	cmp	r3, #0
 800496c:	d0f0      	beq.n	8004950 <HAL_RCC_OscConfig+0xe8>
 800496e:	e014      	b.n	800499a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004970:	f7fd fd4c 	bl	800240c <HAL_GetTick>
 8004974:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004976:	e008      	b.n	800498a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004978:	f7fd fd48 	bl	800240c <HAL_GetTick>
 800497c:	4602      	mov	r2, r0
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	1ad3      	subs	r3, r2, r3
 8004982:	2b64      	cmp	r3, #100	; 0x64
 8004984:	d901      	bls.n	800498a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004986:	2303      	movs	r3, #3
 8004988:	e20b      	b.n	8004da2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800498a:	4b57      	ldr	r3, [pc, #348]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004992:	2b00      	cmp	r3, #0
 8004994:	d1f0      	bne.n	8004978 <HAL_RCC_OscConfig+0x110>
 8004996:	e000      	b.n	800499a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004998:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	f003 0302 	and.w	r3, r3, #2
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d069      	beq.n	8004a7a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80049a6:	4b50      	ldr	r3, [pc, #320]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 80049a8:	689b      	ldr	r3, [r3, #8]
 80049aa:	f003 030c 	and.w	r3, r3, #12
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d00b      	beq.n	80049ca <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049b2:	4b4d      	ldr	r3, [pc, #308]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 80049b4:	689b      	ldr	r3, [r3, #8]
 80049b6:	f003 030c 	and.w	r3, r3, #12
 80049ba:	2b08      	cmp	r3, #8
 80049bc:	d11c      	bne.n	80049f8 <HAL_RCC_OscConfig+0x190>
 80049be:	4b4a      	ldr	r3, [pc, #296]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 80049c0:	685b      	ldr	r3, [r3, #4]
 80049c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d116      	bne.n	80049f8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049ca:	4b47      	ldr	r3, [pc, #284]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d005      	beq.n	80049e2 <HAL_RCC_OscConfig+0x17a>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d001      	beq.n	80049e2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80049de:	2301      	movs	r3, #1
 80049e0:	e1df      	b.n	8004da2 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049e2:	4b41      	ldr	r3, [pc, #260]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	691b      	ldr	r3, [r3, #16]
 80049ee:	00db      	lsls	r3, r3, #3
 80049f0:	493d      	ldr	r1, [pc, #244]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 80049f2:	4313      	orrs	r3, r2
 80049f4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049f6:	e040      	b.n	8004a7a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d023      	beq.n	8004a48 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a00:	4b39      	ldr	r3, [pc, #228]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a38      	ldr	r2, [pc, #224]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 8004a06:	f043 0301 	orr.w	r3, r3, #1
 8004a0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a0c:	f7fd fcfe 	bl	800240c <HAL_GetTick>
 8004a10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a12:	e008      	b.n	8004a26 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a14:	f7fd fcfa 	bl	800240c <HAL_GetTick>
 8004a18:	4602      	mov	r2, r0
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	1ad3      	subs	r3, r2, r3
 8004a1e:	2b02      	cmp	r3, #2
 8004a20:	d901      	bls.n	8004a26 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004a22:	2303      	movs	r3, #3
 8004a24:	e1bd      	b.n	8004da2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a26:	4b30      	ldr	r3, [pc, #192]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d0f0      	beq.n	8004a14 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a32:	4b2d      	ldr	r3, [pc, #180]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	691b      	ldr	r3, [r3, #16]
 8004a3e:	00db      	lsls	r3, r3, #3
 8004a40:	4929      	ldr	r1, [pc, #164]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 8004a42:	4313      	orrs	r3, r2
 8004a44:	600b      	str	r3, [r1, #0]
 8004a46:	e018      	b.n	8004a7a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a48:	4b27      	ldr	r3, [pc, #156]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a26      	ldr	r2, [pc, #152]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 8004a4e:	f023 0301 	bic.w	r3, r3, #1
 8004a52:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a54:	f7fd fcda 	bl	800240c <HAL_GetTick>
 8004a58:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a5a:	e008      	b.n	8004a6e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a5c:	f7fd fcd6 	bl	800240c <HAL_GetTick>
 8004a60:	4602      	mov	r2, r0
 8004a62:	693b      	ldr	r3, [r7, #16]
 8004a64:	1ad3      	subs	r3, r2, r3
 8004a66:	2b02      	cmp	r3, #2
 8004a68:	d901      	bls.n	8004a6e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e199      	b.n	8004da2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a6e:	4b1e      	ldr	r3, [pc, #120]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f003 0302 	and.w	r3, r3, #2
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d1f0      	bne.n	8004a5c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f003 0308 	and.w	r3, r3, #8
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d038      	beq.n	8004af8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	695b      	ldr	r3, [r3, #20]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d019      	beq.n	8004ac2 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004a8e:	4b16      	ldr	r3, [pc, #88]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 8004a90:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004a92:	4a15      	ldr	r2, [pc, #84]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 8004a94:	f043 0301 	orr.w	r3, r3, #1
 8004a98:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004a9a:	f7fd fcb7 	bl	800240c <HAL_GetTick>
 8004a9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004aa0:	e008      	b.n	8004ab4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aa2:	f7fd fcb3 	bl	800240c <HAL_GetTick>
 8004aa6:	4602      	mov	r2, r0
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	1ad3      	subs	r3, r2, r3
 8004aac:	2b02      	cmp	r3, #2
 8004aae:	d901      	bls.n	8004ab4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ab0:	2303      	movs	r3, #3
 8004ab2:	e176      	b.n	8004da2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ab4:	4b0c      	ldr	r3, [pc, #48]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 8004ab6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ab8:	f003 0302 	and.w	r3, r3, #2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d0f0      	beq.n	8004aa2 <HAL_RCC_OscConfig+0x23a>
 8004ac0:	e01a      	b.n	8004af8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ac2:	4b09      	ldr	r3, [pc, #36]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 8004ac4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004ac6:	4a08      	ldr	r2, [pc, #32]	; (8004ae8 <HAL_RCC_OscConfig+0x280>)
 8004ac8:	f023 0301 	bic.w	r3, r3, #1
 8004acc:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ace:	f7fd fc9d 	bl	800240c <HAL_GetTick>
 8004ad2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ad4:	e00a      	b.n	8004aec <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ad6:	f7fd fc99 	bl	800240c <HAL_GetTick>
 8004ada:	4602      	mov	r2, r0
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	1ad3      	subs	r3, r2, r3
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	d903      	bls.n	8004aec <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004ae4:	2303      	movs	r3, #3
 8004ae6:	e15c      	b.n	8004da2 <HAL_RCC_OscConfig+0x53a>
 8004ae8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aec:	4b91      	ldr	r3, [pc, #580]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004aee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004af0:	f003 0302 	and.w	r3, r3, #2
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d1ee      	bne.n	8004ad6 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f003 0304 	and.w	r3, r3, #4
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	f000 80a4 	beq.w	8004c4e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b06:	4b8b      	ldr	r3, [pc, #556]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004b08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d10d      	bne.n	8004b2e <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b12:	4b88      	ldr	r3, [pc, #544]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b16:	4a87      	ldr	r2, [pc, #540]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004b18:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b1c:	6413      	str	r3, [r2, #64]	; 0x40
 8004b1e:	4b85      	ldr	r3, [pc, #532]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004b26:	60bb      	str	r3, [r7, #8]
 8004b28:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b2e:	4b82      	ldr	r3, [pc, #520]	; (8004d38 <HAL_RCC_OscConfig+0x4d0>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d118      	bne.n	8004b6c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004b3a:	4b7f      	ldr	r3, [pc, #508]	; (8004d38 <HAL_RCC_OscConfig+0x4d0>)
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a7e      	ldr	r2, [pc, #504]	; (8004d38 <HAL_RCC_OscConfig+0x4d0>)
 8004b40:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004b44:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b46:	f7fd fc61 	bl	800240c <HAL_GetTick>
 8004b4a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b4c:	e008      	b.n	8004b60 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b4e:	f7fd fc5d 	bl	800240c <HAL_GetTick>
 8004b52:	4602      	mov	r2, r0
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1ad3      	subs	r3, r2, r3
 8004b58:	2b64      	cmp	r3, #100	; 0x64
 8004b5a:	d901      	bls.n	8004b60 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004b5c:	2303      	movs	r3, #3
 8004b5e:	e120      	b.n	8004da2 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004b60:	4b75      	ldr	r3, [pc, #468]	; (8004d38 <HAL_RCC_OscConfig+0x4d0>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d0f0      	beq.n	8004b4e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	689b      	ldr	r3, [r3, #8]
 8004b70:	2b01      	cmp	r3, #1
 8004b72:	d106      	bne.n	8004b82 <HAL_RCC_OscConfig+0x31a>
 8004b74:	4b6f      	ldr	r3, [pc, #444]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004b76:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b78:	4a6e      	ldr	r2, [pc, #440]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004b7a:	f043 0301 	orr.w	r3, r3, #1
 8004b7e:	6713      	str	r3, [r2, #112]	; 0x70
 8004b80:	e02d      	b.n	8004bde <HAL_RCC_OscConfig+0x376>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	689b      	ldr	r3, [r3, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d10c      	bne.n	8004ba4 <HAL_RCC_OscConfig+0x33c>
 8004b8a:	4b6a      	ldr	r3, [pc, #424]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b8e:	4a69      	ldr	r2, [pc, #420]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004b90:	f023 0301 	bic.w	r3, r3, #1
 8004b94:	6713      	str	r3, [r2, #112]	; 0x70
 8004b96:	4b67      	ldr	r3, [pc, #412]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004b98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004b9a:	4a66      	ldr	r2, [pc, #408]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004b9c:	f023 0304 	bic.w	r3, r3, #4
 8004ba0:	6713      	str	r3, [r2, #112]	; 0x70
 8004ba2:	e01c      	b.n	8004bde <HAL_RCC_OscConfig+0x376>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	689b      	ldr	r3, [r3, #8]
 8004ba8:	2b05      	cmp	r3, #5
 8004baa:	d10c      	bne.n	8004bc6 <HAL_RCC_OscConfig+0x35e>
 8004bac:	4b61      	ldr	r3, [pc, #388]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004bae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bb0:	4a60      	ldr	r2, [pc, #384]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004bb2:	f043 0304 	orr.w	r3, r3, #4
 8004bb6:	6713      	str	r3, [r2, #112]	; 0x70
 8004bb8:	4b5e      	ldr	r3, [pc, #376]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bbc:	4a5d      	ldr	r2, [pc, #372]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004bbe:	f043 0301 	orr.w	r3, r3, #1
 8004bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8004bc4:	e00b      	b.n	8004bde <HAL_RCC_OscConfig+0x376>
 8004bc6:	4b5b      	ldr	r3, [pc, #364]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bca:	4a5a      	ldr	r2, [pc, #360]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004bcc:	f023 0301 	bic.w	r3, r3, #1
 8004bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8004bd2:	4b58      	ldr	r3, [pc, #352]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004bd6:	4a57      	ldr	r2, [pc, #348]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004bd8:	f023 0304 	bic.w	r3, r3, #4
 8004bdc:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d015      	beq.n	8004c12 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004be6:	f7fd fc11 	bl	800240c <HAL_GetTick>
 8004bea:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bec:	e00a      	b.n	8004c04 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bee:	f7fd fc0d 	bl	800240c <HAL_GetTick>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	693b      	ldr	r3, [r7, #16]
 8004bf6:	1ad3      	subs	r3, r2, r3
 8004bf8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004bfc:	4293      	cmp	r3, r2
 8004bfe:	d901      	bls.n	8004c04 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004c00:	2303      	movs	r3, #3
 8004c02:	e0ce      	b.n	8004da2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c04:	4b4b      	ldr	r3, [pc, #300]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004c06:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c08:	f003 0302 	and.w	r3, r3, #2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d0ee      	beq.n	8004bee <HAL_RCC_OscConfig+0x386>
 8004c10:	e014      	b.n	8004c3c <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004c12:	f7fd fbfb 	bl	800240c <HAL_GetTick>
 8004c16:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c18:	e00a      	b.n	8004c30 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c1a:	f7fd fbf7 	bl	800240c <HAL_GetTick>
 8004c1e:	4602      	mov	r2, r0
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	f241 3288 	movw	r2, #5000	; 0x1388
 8004c28:	4293      	cmp	r3, r2
 8004c2a:	d901      	bls.n	8004c30 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004c2c:	2303      	movs	r3, #3
 8004c2e:	e0b8      	b.n	8004da2 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c30:	4b40      	ldr	r3, [pc, #256]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004c32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c34:	f003 0302 	and.w	r3, r3, #2
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d1ee      	bne.n	8004c1a <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c3c:	7dfb      	ldrb	r3, [r7, #23]
 8004c3e:	2b01      	cmp	r3, #1
 8004c40:	d105      	bne.n	8004c4e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c42:	4b3c      	ldr	r3, [pc, #240]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c46:	4a3b      	ldr	r2, [pc, #236]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004c48:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004c4c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699b      	ldr	r3, [r3, #24]
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	f000 80a4 	beq.w	8004da0 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004c58:	4b36      	ldr	r3, [pc, #216]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	f003 030c 	and.w	r3, r3, #12
 8004c60:	2b08      	cmp	r3, #8
 8004c62:	d06b      	beq.n	8004d3c <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	699b      	ldr	r3, [r3, #24]
 8004c68:	2b02      	cmp	r3, #2
 8004c6a:	d149      	bne.n	8004d00 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c6c:	4b31      	ldr	r3, [pc, #196]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	4a30      	ldr	r2, [pc, #192]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004c72:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c78:	f7fd fbc8 	bl	800240c <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c80:	f7fd fbc4 	bl	800240c <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e087      	b.n	8004da2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c92:	4b28      	ldr	r3, [pc, #160]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1f0      	bne.n	8004c80 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	69da      	ldr	r2, [r3, #28]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	019b      	lsls	r3, r3, #6
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cb4:	085b      	lsrs	r3, r3, #1
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	041b      	lsls	r3, r3, #16
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cc0:	061b      	lsls	r3, r3, #24
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	4a1b      	ldr	r2, [pc, #108]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004cc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004cca:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004ccc:	4b19      	ldr	r3, [pc, #100]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	4a18      	ldr	r2, [pc, #96]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004cd6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cd8:	f7fd fb98 	bl	800240c <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cde:	e008      	b.n	8004cf2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004ce0:	f7fd fb94 	bl	800240c <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	2b02      	cmp	r3, #2
 8004cec:	d901      	bls.n	8004cf2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004cee:	2303      	movs	r3, #3
 8004cf0:	e057      	b.n	8004da2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cf2:	4b10      	ldr	r3, [pc, #64]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	d0f0      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x478>
 8004cfe:	e04f      	b.n	8004da0 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d00:	4b0c      	ldr	r3, [pc, #48]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a0b      	ldr	r2, [pc, #44]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004d06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004d0a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d0c:	f7fd fb7e 	bl	800240c <HAL_GetTick>
 8004d10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d12:	e008      	b.n	8004d26 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d14:	f7fd fb7a 	bl	800240c <HAL_GetTick>
 8004d18:	4602      	mov	r2, r0
 8004d1a:	693b      	ldr	r3, [r7, #16]
 8004d1c:	1ad3      	subs	r3, r2, r3
 8004d1e:	2b02      	cmp	r3, #2
 8004d20:	d901      	bls.n	8004d26 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004d22:	2303      	movs	r3, #3
 8004d24:	e03d      	b.n	8004da2 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d26:	4b03      	ldr	r3, [pc, #12]	; (8004d34 <HAL_RCC_OscConfig+0x4cc>)
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d1f0      	bne.n	8004d14 <HAL_RCC_OscConfig+0x4ac>
 8004d32:	e035      	b.n	8004da0 <HAL_RCC_OscConfig+0x538>
 8004d34:	40023800 	.word	0x40023800
 8004d38:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004d3c:	4b1b      	ldr	r3, [pc, #108]	; (8004dac <HAL_RCC_OscConfig+0x544>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d028      	beq.n	8004d9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d121      	bne.n	8004d9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d11a      	bne.n	8004d9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004d72:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d111      	bne.n	8004d9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d82:	085b      	lsrs	r3, r3, #1
 8004d84:	3b01      	subs	r3, #1
 8004d86:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d107      	bne.n	8004d9c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d96:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d001      	beq.n	8004da0 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e000      	b.n	8004da2 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40023800 	.word	0x40023800

08004db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d101      	bne.n	8004dc8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004dc4:	2301      	movs	r3, #1
 8004dc6:	e0d0      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dc8:	4b6a      	ldr	r3, [pc, #424]	; (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f003 030f 	and.w	r3, r3, #15
 8004dd0:	683a      	ldr	r2, [r7, #0]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d910      	bls.n	8004df8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd6:	4b67      	ldr	r3, [pc, #412]	; (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f023 020f 	bic.w	r2, r3, #15
 8004dde:	4965      	ldr	r1, [pc, #404]	; (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	4313      	orrs	r3, r2
 8004de4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004de6:	4b63      	ldr	r3, [pc, #396]	; (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f003 030f 	and.w	r3, r3, #15
 8004dee:	683a      	ldr	r2, [r7, #0]
 8004df0:	429a      	cmp	r2, r3
 8004df2:	d001      	beq.n	8004df8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004df4:	2301      	movs	r3, #1
 8004df6:	e0b8      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0302 	and.w	r3, r3, #2
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d020      	beq.n	8004e46 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f003 0304 	and.w	r3, r3, #4
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e10:	4b59      	ldr	r3, [pc, #356]	; (8004f78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	4a58      	ldr	r2, [pc, #352]	; (8004f78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e16:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004e1a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	f003 0308 	and.w	r3, r3, #8
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d005      	beq.n	8004e34 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e28:	4b53      	ldr	r3, [pc, #332]	; (8004f78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	4a52      	ldr	r2, [pc, #328]	; (8004f78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e2e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004e32:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e34:	4b50      	ldr	r3, [pc, #320]	; (8004f78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	689b      	ldr	r3, [r3, #8]
 8004e40:	494d      	ldr	r1, [pc, #308]	; (8004f78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e42:	4313      	orrs	r3, r2
 8004e44:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	f003 0301 	and.w	r3, r3, #1
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d040      	beq.n	8004ed4 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	685b      	ldr	r3, [r3, #4]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d107      	bne.n	8004e6a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e5a:	4b47      	ldr	r3, [pc, #284]	; (8004f78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d115      	bne.n	8004e92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e66:	2301      	movs	r3, #1
 8004e68:	e07f      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	d107      	bne.n	8004e82 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e72:	4b41      	ldr	r3, [pc, #260]	; (8004f78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d109      	bne.n	8004e92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e073      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e82:	4b3d      	ldr	r3, [pc, #244]	; (8004f78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f003 0302 	and.w	r3, r3, #2
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d101      	bne.n	8004e92 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	e06b      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e92:	4b39      	ldr	r3, [pc, #228]	; (8004f78 <HAL_RCC_ClockConfig+0x1c8>)
 8004e94:	689b      	ldr	r3, [r3, #8]
 8004e96:	f023 0203 	bic.w	r2, r3, #3
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	685b      	ldr	r3, [r3, #4]
 8004e9e:	4936      	ldr	r1, [pc, #216]	; (8004f78 <HAL_RCC_ClockConfig+0x1c8>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004ea4:	f7fd fab2 	bl	800240c <HAL_GetTick>
 8004ea8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004eaa:	e00a      	b.n	8004ec2 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004eac:	f7fd faae 	bl	800240c <HAL_GetTick>
 8004eb0:	4602      	mov	r2, r0
 8004eb2:	68fb      	ldr	r3, [r7, #12]
 8004eb4:	1ad3      	subs	r3, r2, r3
 8004eb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e053      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ec2:	4b2d      	ldr	r3, [pc, #180]	; (8004f78 <HAL_RCC_ClockConfig+0x1c8>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 020c 	and.w	r2, r3, #12
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	685b      	ldr	r3, [r3, #4]
 8004ece:	009b      	lsls	r3, r3, #2
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d1eb      	bne.n	8004eac <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ed4:	4b27      	ldr	r3, [pc, #156]	; (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	f003 030f 	and.w	r3, r3, #15
 8004edc:	683a      	ldr	r2, [r7, #0]
 8004ede:	429a      	cmp	r2, r3
 8004ee0:	d210      	bcs.n	8004f04 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ee2:	4b24      	ldr	r3, [pc, #144]	; (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	f023 020f 	bic.w	r2, r3, #15
 8004eea:	4922      	ldr	r1, [pc, #136]	; (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004eec:	683b      	ldr	r3, [r7, #0]
 8004eee:	4313      	orrs	r3, r2
 8004ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ef2:	4b20      	ldr	r3, [pc, #128]	; (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 030f 	and.w	r3, r3, #15
 8004efa:	683a      	ldr	r2, [r7, #0]
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d001      	beq.n	8004f04 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e032      	b.n	8004f6a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f003 0304 	and.w	r3, r3, #4
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d008      	beq.n	8004f22 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f10:	4b19      	ldr	r3, [pc, #100]	; (8004f78 <HAL_RCC_ClockConfig+0x1c8>)
 8004f12:	689b      	ldr	r3, [r3, #8]
 8004f14:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	68db      	ldr	r3, [r3, #12]
 8004f1c:	4916      	ldr	r1, [pc, #88]	; (8004f78 <HAL_RCC_ClockConfig+0x1c8>)
 8004f1e:	4313      	orrs	r3, r2
 8004f20:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 0308 	and.w	r3, r3, #8
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d009      	beq.n	8004f42 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004f2e:	4b12      	ldr	r3, [pc, #72]	; (8004f78 <HAL_RCC_ClockConfig+0x1c8>)
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	691b      	ldr	r3, [r3, #16]
 8004f3a:	00db      	lsls	r3, r3, #3
 8004f3c:	490e      	ldr	r1, [pc, #56]	; (8004f78 <HAL_RCC_ClockConfig+0x1c8>)
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f42:	f000 f821 	bl	8004f88 <HAL_RCC_GetSysClockFreq>
 8004f46:	4602      	mov	r2, r0
 8004f48:	4b0b      	ldr	r3, [pc, #44]	; (8004f78 <HAL_RCC_ClockConfig+0x1c8>)
 8004f4a:	689b      	ldr	r3, [r3, #8]
 8004f4c:	091b      	lsrs	r3, r3, #4
 8004f4e:	f003 030f 	and.w	r3, r3, #15
 8004f52:	490a      	ldr	r1, [pc, #40]	; (8004f7c <HAL_RCC_ClockConfig+0x1cc>)
 8004f54:	5ccb      	ldrb	r3, [r1, r3]
 8004f56:	fa22 f303 	lsr.w	r3, r2, r3
 8004f5a:	4a09      	ldr	r2, [pc, #36]	; (8004f80 <HAL_RCC_ClockConfig+0x1d0>)
 8004f5c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004f5e:	4b09      	ldr	r3, [pc, #36]	; (8004f84 <HAL_RCC_ClockConfig+0x1d4>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4618      	mov	r0, r3
 8004f64:	f7fd fa0e 	bl	8002384 <HAL_InitTick>

  return HAL_OK;
 8004f68:	2300      	movs	r3, #0
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}
 8004f72:	bf00      	nop
 8004f74:	40023c00 	.word	0x40023c00
 8004f78:	40023800 	.word	0x40023800
 8004f7c:	0800d7b8 	.word	0x0800d7b8
 8004f80:	20000000 	.word	0x20000000
 8004f84:	20000004 	.word	0x20000004

08004f88 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f88:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f8c:	b094      	sub	sp, #80	; 0x50
 8004f8e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8004f90:	2300      	movs	r3, #0
 8004f92:	647b      	str	r3, [r7, #68]	; 0x44
 8004f94:	2300      	movs	r3, #0
 8004f96:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004f98:	2300      	movs	r3, #0
 8004f9a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004fa0:	4b79      	ldr	r3, [pc, #484]	; (8005188 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fa2:	689b      	ldr	r3, [r3, #8]
 8004fa4:	f003 030c 	and.w	r3, r3, #12
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d00d      	beq.n	8004fc8 <HAL_RCC_GetSysClockFreq+0x40>
 8004fac:	2b08      	cmp	r3, #8
 8004fae:	f200 80e1 	bhi.w	8005174 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d002      	beq.n	8004fbc <HAL_RCC_GetSysClockFreq+0x34>
 8004fb6:	2b04      	cmp	r3, #4
 8004fb8:	d003      	beq.n	8004fc2 <HAL_RCC_GetSysClockFreq+0x3a>
 8004fba:	e0db      	b.n	8005174 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fbc:	4b73      	ldr	r3, [pc, #460]	; (800518c <HAL_RCC_GetSysClockFreq+0x204>)
 8004fbe:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fc0:	e0db      	b.n	800517a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fc2:	4b73      	ldr	r3, [pc, #460]	; (8005190 <HAL_RCC_GetSysClockFreq+0x208>)
 8004fc4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004fc6:	e0d8      	b.n	800517a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fc8:	4b6f      	ldr	r3, [pc, #444]	; (8005188 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fca:	685b      	ldr	r3, [r3, #4]
 8004fcc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004fd0:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8004fd2:	4b6d      	ldr	r3, [pc, #436]	; (8005188 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d063      	beq.n	80050a6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fde:	4b6a      	ldr	r3, [pc, #424]	; (8005188 <HAL_RCC_GetSysClockFreq+0x200>)
 8004fe0:	685b      	ldr	r3, [r3, #4]
 8004fe2:	099b      	lsrs	r3, r3, #6
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	63bb      	str	r3, [r7, #56]	; 0x38
 8004fe8:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004fea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004ff0:	633b      	str	r3, [r7, #48]	; 0x30
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	637b      	str	r3, [r7, #52]	; 0x34
 8004ff6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004ffa:	4622      	mov	r2, r4
 8004ffc:	462b      	mov	r3, r5
 8004ffe:	f04f 0000 	mov.w	r0, #0
 8005002:	f04f 0100 	mov.w	r1, #0
 8005006:	0159      	lsls	r1, r3, #5
 8005008:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800500c:	0150      	lsls	r0, r2, #5
 800500e:	4602      	mov	r2, r0
 8005010:	460b      	mov	r3, r1
 8005012:	4621      	mov	r1, r4
 8005014:	1a51      	subs	r1, r2, r1
 8005016:	6139      	str	r1, [r7, #16]
 8005018:	4629      	mov	r1, r5
 800501a:	eb63 0301 	sbc.w	r3, r3, r1
 800501e:	617b      	str	r3, [r7, #20]
 8005020:	f04f 0200 	mov.w	r2, #0
 8005024:	f04f 0300 	mov.w	r3, #0
 8005028:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800502c:	4659      	mov	r1, fp
 800502e:	018b      	lsls	r3, r1, #6
 8005030:	4651      	mov	r1, sl
 8005032:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005036:	4651      	mov	r1, sl
 8005038:	018a      	lsls	r2, r1, #6
 800503a:	4651      	mov	r1, sl
 800503c:	ebb2 0801 	subs.w	r8, r2, r1
 8005040:	4659      	mov	r1, fp
 8005042:	eb63 0901 	sbc.w	r9, r3, r1
 8005046:	f04f 0200 	mov.w	r2, #0
 800504a:	f04f 0300 	mov.w	r3, #0
 800504e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005052:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005056:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800505a:	4690      	mov	r8, r2
 800505c:	4699      	mov	r9, r3
 800505e:	4623      	mov	r3, r4
 8005060:	eb18 0303 	adds.w	r3, r8, r3
 8005064:	60bb      	str	r3, [r7, #8]
 8005066:	462b      	mov	r3, r5
 8005068:	eb49 0303 	adc.w	r3, r9, r3
 800506c:	60fb      	str	r3, [r7, #12]
 800506e:	f04f 0200 	mov.w	r2, #0
 8005072:	f04f 0300 	mov.w	r3, #0
 8005076:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800507a:	4629      	mov	r1, r5
 800507c:	024b      	lsls	r3, r1, #9
 800507e:	4621      	mov	r1, r4
 8005080:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005084:	4621      	mov	r1, r4
 8005086:	024a      	lsls	r2, r1, #9
 8005088:	4610      	mov	r0, r2
 800508a:	4619      	mov	r1, r3
 800508c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800508e:	2200      	movs	r2, #0
 8005090:	62bb      	str	r3, [r7, #40]	; 0x28
 8005092:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005094:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005098:	f7fb fe26 	bl	8000ce8 <__aeabi_uldivmod>
 800509c:	4602      	mov	r2, r0
 800509e:	460b      	mov	r3, r1
 80050a0:	4613      	mov	r3, r2
 80050a2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80050a4:	e058      	b.n	8005158 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050a6:	4b38      	ldr	r3, [pc, #224]	; (8005188 <HAL_RCC_GetSysClockFreq+0x200>)
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	099b      	lsrs	r3, r3, #6
 80050ac:	2200      	movs	r2, #0
 80050ae:	4618      	mov	r0, r3
 80050b0:	4611      	mov	r1, r2
 80050b2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050b6:	623b      	str	r3, [r7, #32]
 80050b8:	2300      	movs	r3, #0
 80050ba:	627b      	str	r3, [r7, #36]	; 0x24
 80050bc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050c0:	4642      	mov	r2, r8
 80050c2:	464b      	mov	r3, r9
 80050c4:	f04f 0000 	mov.w	r0, #0
 80050c8:	f04f 0100 	mov.w	r1, #0
 80050cc:	0159      	lsls	r1, r3, #5
 80050ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050d2:	0150      	lsls	r0, r2, #5
 80050d4:	4602      	mov	r2, r0
 80050d6:	460b      	mov	r3, r1
 80050d8:	4641      	mov	r1, r8
 80050da:	ebb2 0a01 	subs.w	sl, r2, r1
 80050de:	4649      	mov	r1, r9
 80050e0:	eb63 0b01 	sbc.w	fp, r3, r1
 80050e4:	f04f 0200 	mov.w	r2, #0
 80050e8:	f04f 0300 	mov.w	r3, #0
 80050ec:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050f0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050f4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050f8:	ebb2 040a 	subs.w	r4, r2, sl
 80050fc:	eb63 050b 	sbc.w	r5, r3, fp
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	f04f 0300 	mov.w	r3, #0
 8005108:	00eb      	lsls	r3, r5, #3
 800510a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800510e:	00e2      	lsls	r2, r4, #3
 8005110:	4614      	mov	r4, r2
 8005112:	461d      	mov	r5, r3
 8005114:	4643      	mov	r3, r8
 8005116:	18e3      	adds	r3, r4, r3
 8005118:	603b      	str	r3, [r7, #0]
 800511a:	464b      	mov	r3, r9
 800511c:	eb45 0303 	adc.w	r3, r5, r3
 8005120:	607b      	str	r3, [r7, #4]
 8005122:	f04f 0200 	mov.w	r2, #0
 8005126:	f04f 0300 	mov.w	r3, #0
 800512a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800512e:	4629      	mov	r1, r5
 8005130:	028b      	lsls	r3, r1, #10
 8005132:	4621      	mov	r1, r4
 8005134:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005138:	4621      	mov	r1, r4
 800513a:	028a      	lsls	r2, r1, #10
 800513c:	4610      	mov	r0, r2
 800513e:	4619      	mov	r1, r3
 8005140:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005142:	2200      	movs	r2, #0
 8005144:	61bb      	str	r3, [r7, #24]
 8005146:	61fa      	str	r2, [r7, #28]
 8005148:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800514c:	f7fb fdcc 	bl	8000ce8 <__aeabi_uldivmod>
 8005150:	4602      	mov	r2, r0
 8005152:	460b      	mov	r3, r1
 8005154:	4613      	mov	r3, r2
 8005156:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005158:	4b0b      	ldr	r3, [pc, #44]	; (8005188 <HAL_RCC_GetSysClockFreq+0x200>)
 800515a:	685b      	ldr	r3, [r3, #4]
 800515c:	0c1b      	lsrs	r3, r3, #16
 800515e:	f003 0303 	and.w	r3, r3, #3
 8005162:	3301      	adds	r3, #1
 8005164:	005b      	lsls	r3, r3, #1
 8005166:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8005168:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800516a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800516c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005170:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005172:	e002      	b.n	800517a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005174:	4b05      	ldr	r3, [pc, #20]	; (800518c <HAL_RCC_GetSysClockFreq+0x204>)
 8005176:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005178:	bf00      	nop
    }
  }
  return sysclockfreq;
 800517a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800517c:	4618      	mov	r0, r3
 800517e:	3750      	adds	r7, #80	; 0x50
 8005180:	46bd      	mov	sp, r7
 8005182:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005186:	bf00      	nop
 8005188:	40023800 	.word	0x40023800
 800518c:	00f42400 	.word	0x00f42400
 8005190:	007a1200 	.word	0x007a1200

08005194 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005198:	4b03      	ldr	r3, [pc, #12]	; (80051a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800519a:	681b      	ldr	r3, [r3, #0]
}
 800519c:	4618      	mov	r0, r3
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	20000000 	.word	0x20000000

080051ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051ac:	b580      	push	{r7, lr}
 80051ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051b0:	f7ff fff0 	bl	8005194 <HAL_RCC_GetHCLKFreq>
 80051b4:	4602      	mov	r2, r0
 80051b6:	4b05      	ldr	r3, [pc, #20]	; (80051cc <HAL_RCC_GetPCLK1Freq+0x20>)
 80051b8:	689b      	ldr	r3, [r3, #8]
 80051ba:	0a9b      	lsrs	r3, r3, #10
 80051bc:	f003 0307 	and.w	r3, r3, #7
 80051c0:	4903      	ldr	r1, [pc, #12]	; (80051d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051c2:	5ccb      	ldrb	r3, [r1, r3]
 80051c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051c8:	4618      	mov	r0, r3
 80051ca:	bd80      	pop	{r7, pc}
 80051cc:	40023800 	.word	0x40023800
 80051d0:	0800d7c8 	.word	0x0800d7c8

080051d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051d8:	f7ff ffdc 	bl	8005194 <HAL_RCC_GetHCLKFreq>
 80051dc:	4602      	mov	r2, r0
 80051de:	4b05      	ldr	r3, [pc, #20]	; (80051f4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051e0:	689b      	ldr	r3, [r3, #8]
 80051e2:	0b5b      	lsrs	r3, r3, #13
 80051e4:	f003 0307 	and.w	r3, r3, #7
 80051e8:	4903      	ldr	r1, [pc, #12]	; (80051f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80051ea:	5ccb      	ldrb	r3, [r1, r3]
 80051ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	bd80      	pop	{r7, pc}
 80051f4:	40023800 	.word	0x40023800
 80051f8:	0800d7c8 	.word	0x0800d7c8

080051fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b088      	sub	sp, #32
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005204:	2300      	movs	r3, #0
 8005206:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005208:	2300      	movs	r3, #0
 800520a:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 800520c:	2300      	movs	r3, #0
 800520e:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005210:	2300      	movs	r3, #0
 8005212:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8005214:	2300      	movs	r3, #0
 8005216:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	f003 0301 	and.w	r3, r3, #1
 8005220:	2b00      	cmp	r3, #0
 8005222:	d012      	beq.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005224:	4b69      	ldr	r3, [pc, #420]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	4a68      	ldr	r2, [pc, #416]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800522a:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800522e:	6093      	str	r3, [r2, #8]
 8005230:	4b66      	ldr	r3, [pc, #408]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005232:	689a      	ldr	r2, [r3, #8]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005238:	4964      	ldr	r1, [pc, #400]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800523a:	4313      	orrs	r3, r2
 800523c:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005242:	2b00      	cmp	r3, #0
 8005244:	d101      	bne.n	800524a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8005246:	2301      	movs	r3, #1
 8005248:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005252:	2b00      	cmp	r3, #0
 8005254:	d017      	beq.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005256:	4b5d      	ldr	r3, [pc, #372]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005258:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800525c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005264:	4959      	ldr	r1, [pc, #356]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005266:	4313      	orrs	r3, r2
 8005268:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005270:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005274:	d101      	bne.n	800527a <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8005276:	2301      	movs	r3, #1
 8005278:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800527e:	2b00      	cmp	r3, #0
 8005280:	d101      	bne.n	8005286 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8005282:	2301      	movs	r3, #1
 8005284:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800528e:	2b00      	cmp	r3, #0
 8005290:	d017      	beq.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8005292:	4b4e      	ldr	r3, [pc, #312]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005298:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052a0:	494a      	ldr	r1, [pc, #296]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052a2:	4313      	orrs	r3, r2
 80052a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80052b0:	d101      	bne.n	80052b6 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80052b2:	2301      	movs	r3, #1
 80052b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d101      	bne.n	80052c2 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80052be:	2301      	movs	r3, #1
 80052c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d001      	beq.n	80052d2 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80052ce:	2301      	movs	r3, #1
 80052d0:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 0320 	and.w	r3, r3, #32
 80052da:	2b00      	cmp	r3, #0
 80052dc:	f000 808b 	beq.w	80053f6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80052e0:	4b3a      	ldr	r3, [pc, #232]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052e4:	4a39      	ldr	r2, [pc, #228]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052ea:	6413      	str	r3, [r2, #64]	; 0x40
 80052ec:	4b37      	ldr	r3, [pc, #220]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80052ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052f4:	60bb      	str	r3, [r7, #8]
 80052f6:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80052f8:	4b35      	ldr	r3, [pc, #212]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	4a34      	ldr	r2, [pc, #208]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80052fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005302:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005304:	f7fd f882 	bl	800240c <HAL_GetTick>
 8005308:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800530a:	e008      	b.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800530c:	f7fd f87e 	bl	800240c <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	697b      	ldr	r3, [r7, #20]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b64      	cmp	r3, #100	; 0x64
 8005318:	d901      	bls.n	800531e <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e357      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800531e:	4b2c      	ldr	r3, [pc, #176]	; (80053d0 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005326:	2b00      	cmp	r3, #0
 8005328:	d0f0      	beq.n	800530c <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800532a:	4b28      	ldr	r3, [pc, #160]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800532c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800532e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005332:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8005334:	693b      	ldr	r3, [r7, #16]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d035      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800533e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005342:	693a      	ldr	r2, [r7, #16]
 8005344:	429a      	cmp	r2, r3
 8005346:	d02e      	beq.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005348:	4b20      	ldr	r3, [pc, #128]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800534a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005350:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8005352:	4b1e      	ldr	r3, [pc, #120]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005356:	4a1d      	ldr	r2, [pc, #116]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800535c:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800535e:	4b1b      	ldr	r3, [pc, #108]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005362:	4a1a      	ldr	r2, [pc, #104]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005368:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800536a:	4a18      	ldr	r2, [pc, #96]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8005370:	4b16      	ldr	r3, [pc, #88]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005372:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005374:	f003 0301 	and.w	r3, r3, #1
 8005378:	2b01      	cmp	r3, #1
 800537a:	d114      	bne.n	80053a6 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800537c:	f7fd f846 	bl	800240c <HAL_GetTick>
 8005380:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005382:	e00a      	b.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005384:	f7fd f842 	bl	800240c <HAL_GetTick>
 8005388:	4602      	mov	r2, r0
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	1ad3      	subs	r3, r2, r3
 800538e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005392:	4293      	cmp	r3, r2
 8005394:	d901      	bls.n	800539a <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8005396:	2303      	movs	r3, #3
 8005398:	e319      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800539a:	4b0c      	ldr	r3, [pc, #48]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800539c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800539e:	f003 0302 	and.w	r3, r3, #2
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d0ee      	beq.n	8005384 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80053ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80053b2:	d111      	bne.n	80053d8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80053b4:	4b05      	ldr	r3, [pc, #20]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80053c0:	4b04      	ldr	r3, [pc, #16]	; (80053d4 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80053c2:	400b      	ands	r3, r1
 80053c4:	4901      	ldr	r1, [pc, #4]	; (80053cc <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80053c6:	4313      	orrs	r3, r2
 80053c8:	608b      	str	r3, [r1, #8]
 80053ca:	e00b      	b.n	80053e4 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80053cc:	40023800 	.word	0x40023800
 80053d0:	40007000 	.word	0x40007000
 80053d4:	0ffffcff 	.word	0x0ffffcff
 80053d8:	4baa      	ldr	r3, [pc, #680]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053da:	689b      	ldr	r3, [r3, #8]
 80053dc:	4aa9      	ldr	r2, [pc, #676]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053de:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80053e2:	6093      	str	r3, [r2, #8]
 80053e4:	4ba7      	ldr	r3, [pc, #668]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053e6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f0:	49a4      	ldr	r1, [pc, #656]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80053f2:	4313      	orrs	r3, r2
 80053f4:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	f003 0310 	and.w	r3, r3, #16
 80053fe:	2b00      	cmp	r3, #0
 8005400:	d010      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8005402:	4ba0      	ldr	r3, [pc, #640]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005404:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005408:	4a9e      	ldr	r2, [pc, #632]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800540a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800540e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8005412:	4b9c      	ldr	r3, [pc, #624]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005414:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800541c:	4999      	ldr	r1, [pc, #612]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800541e:	4313      	orrs	r3, r2
 8005420:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800542c:	2b00      	cmp	r3, #0
 800542e:	d00a      	beq.n	8005446 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005430:	4b94      	ldr	r3, [pc, #592]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005432:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005436:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800543e:	4991      	ldr	r1, [pc, #580]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005440:	4313      	orrs	r3, r2
 8005442:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800544e:	2b00      	cmp	r3, #0
 8005450:	d00a      	beq.n	8005468 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005452:	4b8c      	ldr	r3, [pc, #560]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005454:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005458:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005460:	4988      	ldr	r1, [pc, #544]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005462:	4313      	orrs	r3, r2
 8005464:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005470:	2b00      	cmp	r3, #0
 8005472:	d00a      	beq.n	800548a <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005474:	4b83      	ldr	r3, [pc, #524]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800547a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005482:	4980      	ldr	r1, [pc, #512]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005484:	4313      	orrs	r3, r2
 8005486:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005492:	2b00      	cmp	r3, #0
 8005494:	d00a      	beq.n	80054ac <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005496:	4b7b      	ldr	r3, [pc, #492]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005498:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800549c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054a4:	4977      	ldr	r1, [pc, #476]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054a6:	4313      	orrs	r3, r2
 80054a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d00a      	beq.n	80054ce <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80054b8:	4b72      	ldr	r3, [pc, #456]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054be:	f023 0203 	bic.w	r2, r3, #3
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80054c6:	496f      	ldr	r1, [pc, #444]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054c8:	4313      	orrs	r3, r2
 80054ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d00a      	beq.n	80054f0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80054da:	4b6a      	ldr	r3, [pc, #424]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80054e0:	f023 020c 	bic.w	r2, r3, #12
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054e8:	4966      	ldr	r1, [pc, #408]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054ea:	4313      	orrs	r3, r2
 80054ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d00a      	beq.n	8005512 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80054fc:	4b61      	ldr	r3, [pc, #388]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80054fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005502:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800550a:	495e      	ldr	r1, [pc, #376]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800550c:	4313      	orrs	r3, r2
 800550e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00a      	beq.n	8005534 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800551e:	4b59      	ldr	r3, [pc, #356]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005520:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005524:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800552c:	4955      	ldr	r1, [pc, #340]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800552e:	4313      	orrs	r3, r2
 8005530:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800553c:	2b00      	cmp	r3, #0
 800553e:	d00a      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005540:	4b50      	ldr	r3, [pc, #320]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005542:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005546:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800554e:	494d      	ldr	r1, [pc, #308]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005550:	4313      	orrs	r3, r2
 8005552:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800555e:	2b00      	cmp	r3, #0
 8005560:	d00a      	beq.n	8005578 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8005562:	4b48      	ldr	r3, [pc, #288]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005564:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005568:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005570:	4944      	ldr	r1, [pc, #272]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005572:	4313      	orrs	r3, r2
 8005574:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005580:	2b00      	cmp	r3, #0
 8005582:	d00a      	beq.n	800559a <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8005584:	4b3f      	ldr	r3, [pc, #252]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800558a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005592:	493c      	ldr	r1, [pc, #240]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005594:	4313      	orrs	r3, r2
 8005596:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 800559a:	687b      	ldr	r3, [r7, #4]
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d00a      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80055a6:	4b37      	ldr	r3, [pc, #220]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ac:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80055b4:	4933      	ldr	r1, [pc, #204]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055b6:	4313      	orrs	r3, r2
 80055b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d00a      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80055c8:	4b2e      	ldr	r3, [pc, #184]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055ce:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80055d6:	492b      	ldr	r1, [pc, #172]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055d8:	4313      	orrs	r3, r2
 80055da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d011      	beq.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80055ea:	4b26      	ldr	r3, [pc, #152]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80055f0:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80055f8:	4922      	ldr	r1, [pc, #136]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80055fa:	4313      	orrs	r3, r2
 80055fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005604:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005608:	d101      	bne.n	800560e <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 800560a:	2301      	movs	r3, #1
 800560c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0308 	and.w	r3, r3, #8
 8005616:	2b00      	cmp	r3, #0
 8005618:	d001      	beq.n	800561e <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 800561a:	2301      	movs	r3, #1
 800561c:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005626:	2b00      	cmp	r3, #0
 8005628:	d00a      	beq.n	8005640 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800562a:	4b16      	ldr	r3, [pc, #88]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800562c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005630:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005638:	4912      	ldr	r1, [pc, #72]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800563a:	4313      	orrs	r3, r2
 800563c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	681b      	ldr	r3, [r3, #0]
 8005644:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005648:	2b00      	cmp	r3, #0
 800564a:	d00b      	beq.n	8005664 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800564c:	4b0d      	ldr	r3, [pc, #52]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800564e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005652:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800565c:	4909      	ldr	r1, [pc, #36]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800565e:	4313      	orrs	r3, r2
 8005660:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	2b01      	cmp	r3, #1
 8005668:	d006      	beq.n	8005678 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005672:	2b00      	cmp	r3, #0
 8005674:	f000 80d9 	beq.w	800582a <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8005678:	4b02      	ldr	r3, [pc, #8]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	4a01      	ldr	r2, [pc, #4]	; (8005684 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800567e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8005682:	e001      	b.n	8005688 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8005684:	40023800 	.word	0x40023800
 8005688:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800568a:	f7fc febf 	bl	800240c <HAL_GetTick>
 800568e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8005690:	e008      	b.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005692:	f7fc febb 	bl	800240c <HAL_GetTick>
 8005696:	4602      	mov	r2, r0
 8005698:	697b      	ldr	r3, [r7, #20]
 800569a:	1ad3      	subs	r3, r2, r3
 800569c:	2b64      	cmp	r3, #100	; 0x64
 800569e:	d901      	bls.n	80056a4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80056a0:	2303      	movs	r3, #3
 80056a2:	e194      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80056a4:	4b6c      	ldr	r3, [pc, #432]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d1f0      	bne.n	8005692 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	f003 0301 	and.w	r3, r3, #1
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d021      	beq.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d11d      	bne.n	8005700 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80056c4:	4b64      	ldr	r3, [pc, #400]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056ca:	0c1b      	lsrs	r3, r3, #16
 80056cc:	f003 0303 	and.w	r3, r3, #3
 80056d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80056d2:	4b61      	ldr	r3, [pc, #388]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80056d8:	0e1b      	lsrs	r3, r3, #24
 80056da:	f003 030f 	and.w	r3, r3, #15
 80056de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	685b      	ldr	r3, [r3, #4]
 80056e4:	019a      	lsls	r2, r3, #6
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	041b      	lsls	r3, r3, #16
 80056ea:	431a      	orrs	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	061b      	lsls	r3, r3, #24
 80056f0:	431a      	orrs	r2, r3
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	689b      	ldr	r3, [r3, #8]
 80056f6:	071b      	lsls	r3, r3, #28
 80056f8:	4957      	ldr	r1, [pc, #348]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005708:	2b00      	cmp	r3, #0
 800570a:	d004      	beq.n	8005716 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005710:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005714:	d00a      	beq.n	800572c <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800571e:	2b00      	cmp	r3, #0
 8005720:	d02e      	beq.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005726:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800572a:	d129      	bne.n	8005780 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800572c:	4b4a      	ldr	r3, [pc, #296]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800572e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005732:	0c1b      	lsrs	r3, r3, #16
 8005734:	f003 0303 	and.w	r3, r3, #3
 8005738:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800573a:	4b47      	ldr	r3, [pc, #284]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800573c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005740:	0f1b      	lsrs	r3, r3, #28
 8005742:	f003 0307 	and.w	r3, r3, #7
 8005746:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	685b      	ldr	r3, [r3, #4]
 800574c:	019a      	lsls	r2, r3, #6
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	041b      	lsls	r3, r3, #16
 8005752:	431a      	orrs	r2, r3
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	061b      	lsls	r3, r3, #24
 800575a:	431a      	orrs	r2, r3
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	071b      	lsls	r3, r3, #28
 8005760:	493d      	ldr	r1, [pc, #244]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005762:	4313      	orrs	r3, r2
 8005764:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8005768:	4b3b      	ldr	r3, [pc, #236]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800576a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800576e:	f023 021f 	bic.w	r2, r3, #31
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005776:	3b01      	subs	r3, #1
 8005778:	4937      	ldr	r1, [pc, #220]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800577a:	4313      	orrs	r3, r2
 800577c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005788:	2b00      	cmp	r3, #0
 800578a:	d01d      	beq.n	80057c8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800578c:	4b32      	ldr	r3, [pc, #200]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800578e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005792:	0e1b      	lsrs	r3, r3, #24
 8005794:	f003 030f 	and.w	r3, r3, #15
 8005798:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800579a:	4b2f      	ldr	r3, [pc, #188]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800579c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80057a0:	0f1b      	lsrs	r3, r3, #28
 80057a2:	f003 0307 	and.w	r3, r3, #7
 80057a6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	019a      	lsls	r2, r3, #6
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	691b      	ldr	r3, [r3, #16]
 80057b2:	041b      	lsls	r3, r3, #16
 80057b4:	431a      	orrs	r2, r3
 80057b6:	693b      	ldr	r3, [r7, #16]
 80057b8:	061b      	lsls	r3, r3, #24
 80057ba:	431a      	orrs	r2, r3
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	071b      	lsls	r3, r3, #28
 80057c0:	4925      	ldr	r1, [pc, #148]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057c2:	4313      	orrs	r3, r2
 80057c4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d011      	beq.n	80057f8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	685b      	ldr	r3, [r3, #4]
 80057d8:	019a      	lsls	r2, r3, #6
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	041b      	lsls	r3, r3, #16
 80057e0:	431a      	orrs	r2, r3
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	68db      	ldr	r3, [r3, #12]
 80057e6:	061b      	lsls	r3, r3, #24
 80057e8:	431a      	orrs	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	689b      	ldr	r3, [r3, #8]
 80057ee:	071b      	lsls	r3, r3, #28
 80057f0:	4919      	ldr	r1, [pc, #100]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057f2:	4313      	orrs	r3, r2
 80057f4:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80057f8:	4b17      	ldr	r3, [pc, #92]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a16      	ldr	r2, [pc, #88]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80057fe:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005802:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005804:	f7fc fe02 	bl	800240c <HAL_GetTick>
 8005808:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800580a:	e008      	b.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800580c:	f7fc fdfe 	bl	800240c <HAL_GetTick>
 8005810:	4602      	mov	r2, r0
 8005812:	697b      	ldr	r3, [r7, #20]
 8005814:	1ad3      	subs	r3, r2, r3
 8005816:	2b64      	cmp	r3, #100	; 0x64
 8005818:	d901      	bls.n	800581e <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800581a:	2303      	movs	r3, #3
 800581c:	e0d7      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800581e:	4b0e      	ldr	r3, [pc, #56]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005826:	2b00      	cmp	r3, #0
 8005828:	d0f0      	beq.n	800580c <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 800582a:	69bb      	ldr	r3, [r7, #24]
 800582c:	2b01      	cmp	r3, #1
 800582e:	f040 80cd 	bne.w	80059cc <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005832:	4b09      	ldr	r3, [pc, #36]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	4a08      	ldr	r2, [pc, #32]	; (8005858 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005838:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800583c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800583e:	f7fc fde5 	bl	800240c <HAL_GetTick>
 8005842:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005844:	e00a      	b.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005846:	f7fc fde1 	bl	800240c <HAL_GetTick>
 800584a:	4602      	mov	r2, r0
 800584c:	697b      	ldr	r3, [r7, #20]
 800584e:	1ad3      	subs	r3, r2, r3
 8005850:	2b64      	cmp	r3, #100	; 0x64
 8005852:	d903      	bls.n	800585c <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005854:	2303      	movs	r3, #3
 8005856:	e0ba      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005858:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800585c:	4b5e      	ldr	r3, [pc, #376]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005868:	d0ed      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005872:	2b00      	cmp	r3, #0
 8005874:	d003      	beq.n	800587e <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800587a:	2b00      	cmp	r3, #0
 800587c:	d009      	beq.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005886:	2b00      	cmp	r3, #0
 8005888:	d02e      	beq.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800588e:	2b00      	cmp	r3, #0
 8005890:	d12a      	bne.n	80058e8 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005892:	4b51      	ldr	r3, [pc, #324]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005894:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005898:	0c1b      	lsrs	r3, r3, #16
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80058a0:	4b4d      	ldr	r3, [pc, #308]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058a6:	0f1b      	lsrs	r3, r3, #28
 80058a8:	f003 0307 	and.w	r3, r3, #7
 80058ac:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	695b      	ldr	r3, [r3, #20]
 80058b2:	019a      	lsls	r2, r3, #6
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	041b      	lsls	r3, r3, #16
 80058b8:	431a      	orrs	r2, r3
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	699b      	ldr	r3, [r3, #24]
 80058be:	061b      	lsls	r3, r3, #24
 80058c0:	431a      	orrs	r2, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	071b      	lsls	r3, r3, #28
 80058c6:	4944      	ldr	r1, [pc, #272]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058c8:	4313      	orrs	r3, r2
 80058ca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80058ce:	4b42      	ldr	r3, [pc, #264]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058d4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058dc:	3b01      	subs	r3, #1
 80058de:	021b      	lsls	r3, r3, #8
 80058e0:	493d      	ldr	r1, [pc, #244]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80058e2:	4313      	orrs	r3, r2
 80058e4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d022      	beq.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80058f8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058fc:	d11d      	bne.n	800593a <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80058fe:	4b36      	ldr	r3, [pc, #216]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005900:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005904:	0e1b      	lsrs	r3, r3, #24
 8005906:	f003 030f 	and.w	r3, r3, #15
 800590a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800590c:	4b32      	ldr	r3, [pc, #200]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800590e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005912:	0f1b      	lsrs	r3, r3, #28
 8005914:	f003 0307 	and.w	r3, r3, #7
 8005918:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	695b      	ldr	r3, [r3, #20]
 800591e:	019a      	lsls	r2, r3, #6
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	6a1b      	ldr	r3, [r3, #32]
 8005924:	041b      	lsls	r3, r3, #16
 8005926:	431a      	orrs	r2, r3
 8005928:	693b      	ldr	r3, [r7, #16]
 800592a:	061b      	lsls	r3, r3, #24
 800592c:	431a      	orrs	r2, r3
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	071b      	lsls	r3, r3, #28
 8005932:	4929      	ldr	r1, [pc, #164]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005934:	4313      	orrs	r3, r2
 8005936:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f003 0308 	and.w	r3, r3, #8
 8005942:	2b00      	cmp	r3, #0
 8005944:	d028      	beq.n	8005998 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005946:	4b24      	ldr	r3, [pc, #144]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800594c:	0e1b      	lsrs	r3, r3, #24
 800594e:	f003 030f 	and.w	r3, r3, #15
 8005952:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005954:	4b20      	ldr	r3, [pc, #128]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595a:	0c1b      	lsrs	r3, r3, #16
 800595c:	f003 0303 	and.w	r3, r3, #3
 8005960:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	695b      	ldr	r3, [r3, #20]
 8005966:	019a      	lsls	r2, r3, #6
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	041b      	lsls	r3, r3, #16
 800596c:	431a      	orrs	r2, r3
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	061b      	lsls	r3, r3, #24
 8005972:	431a      	orrs	r2, r3
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	69db      	ldr	r3, [r3, #28]
 8005978:	071b      	lsls	r3, r3, #28
 800597a:	4917      	ldr	r1, [pc, #92]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800597c:	4313      	orrs	r3, r2
 800597e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005982:	4b15      	ldr	r3, [pc, #84]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005984:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005988:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005990:	4911      	ldr	r1, [pc, #68]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005992:	4313      	orrs	r3, r2
 8005994:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005998:	4b0f      	ldr	r3, [pc, #60]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	4a0e      	ldr	r2, [pc, #56]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800599e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059a2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80059a4:	f7fc fd32 	bl	800240c <HAL_GetTick>
 80059a8:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059aa:	e008      	b.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80059ac:	f7fc fd2e 	bl	800240c <HAL_GetTick>
 80059b0:	4602      	mov	r2, r0
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	1ad3      	subs	r3, r2, r3
 80059b6:	2b64      	cmp	r3, #100	; 0x64
 80059b8:	d901      	bls.n	80059be <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80059ba:	2303      	movs	r3, #3
 80059bc:	e007      	b.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80059be:	4b06      	ldr	r3, [pc, #24]	; (80059d8 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80059c6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059ca:	d1ef      	bne.n	80059ac <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3720      	adds	r7, #32
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
 80059d6:	bf00      	nop
 80059d8:	40023800 	.word	0x40023800

080059dc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b084      	sub	sp, #16
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d101      	bne.n	80059ee <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80059ea:	2301      	movs	r3, #1
 80059ec:	e09d      	b.n	8005b2a <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d108      	bne.n	8005a08 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	685b      	ldr	r3, [r3, #4]
 80059fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80059fe:	d009      	beq.n	8005a14 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	2200      	movs	r2, #0
 8005a04:	61da      	str	r2, [r3, #28]
 8005a06:	e005      	b.n	8005a14 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2200      	movs	r2, #0
 8005a12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005a20:	b2db      	uxtb	r3, r3
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d106      	bne.n	8005a34 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2200      	movs	r2, #0
 8005a2a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005a2e:	6878      	ldr	r0, [r7, #4]
 8005a30:	f7fb ffbc 	bl	80019ac <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	2202      	movs	r2, #2
 8005a38:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	681a      	ldr	r2, [r3, #0]
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005a4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	68db      	ldr	r3, [r3, #12]
 8005a50:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a54:	d902      	bls.n	8005a5c <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005a56:	2300      	movs	r3, #0
 8005a58:	60fb      	str	r3, [r7, #12]
 8005a5a:	e002      	b.n	8005a62 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005a5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005a60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	68db      	ldr	r3, [r3, #12]
 8005a66:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005a6a:	d007      	beq.n	8005a7c <HAL_SPI_Init+0xa0>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005a74:	d002      	beq.n	8005a7c <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	2200      	movs	r2, #0
 8005a7a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	689b      	ldr	r3, [r3, #8]
 8005a88:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	691b      	ldr	r3, [r3, #16]
 8005a92:	f003 0302 	and.w	r3, r3, #2
 8005a96:	431a      	orrs	r2, r3
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	695b      	ldr	r3, [r3, #20]
 8005a9c:	f003 0301 	and.w	r3, r3, #1
 8005aa0:	431a      	orrs	r2, r3
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	699b      	ldr	r3, [r3, #24]
 8005aa6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005aaa:	431a      	orrs	r2, r3
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	69db      	ldr	r3, [r3, #28]
 8005ab0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005ab4:	431a      	orrs	r2, r3
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a1b      	ldr	r3, [r3, #32]
 8005aba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005abe:	ea42 0103 	orr.w	r1, r2, r3
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ac6:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	430a      	orrs	r2, r1
 8005ad0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	699b      	ldr	r3, [r3, #24]
 8005ad6:	0c1b      	lsrs	r3, r3, #16
 8005ad8:	f003 0204 	and.w	r2, r3, #4
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ae0:	f003 0310 	and.w	r3, r3, #16
 8005ae4:	431a      	orrs	r2, r3
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aea:	f003 0308 	and.w	r3, r3, #8
 8005aee:	431a      	orrs	r2, r3
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	68db      	ldr	r3, [r3, #12]
 8005af4:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005af8:	ea42 0103 	orr.w	r1, r2, r3
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	430a      	orrs	r2, r1
 8005b08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	69da      	ldr	r2, [r3, #28]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005b18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2201      	movs	r2, #1
 8005b24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005b28:	2300      	movs	r3, #0
}
 8005b2a:	4618      	mov	r0, r3
 8005b2c:	3710      	adds	r7, #16
 8005b2e:	46bd      	mov	sp, r7
 8005b30:	bd80      	pop	{r7, pc}
	...

08005b34 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8005b34:	b580      	push	{r7, lr}
 8005b36:	b088      	sub	sp, #32
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	685b      	ldr	r3, [r3, #4]
 8005b42:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	689b      	ldr	r3, [r3, #8]
 8005b4a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d10e      	bne.n	8005b74 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b56:	69bb      	ldr	r3, [r7, #24]
 8005b58:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d009      	beq.n	8005b74 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8005b60:	69fb      	ldr	r3, [r7, #28]
 8005b62:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d004      	beq.n	8005b74 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	4798      	blx	r3
    return;
 8005b72:	e0ce      	b.n	8005d12 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8005b74:	69bb      	ldr	r3, [r7, #24]
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d009      	beq.n	8005b92 <HAL_SPI_IRQHandler+0x5e>
 8005b7e:	69fb      	ldr	r3, [r7, #28]
 8005b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d004      	beq.n	8005b92 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b8c:	6878      	ldr	r0, [r7, #4]
 8005b8e:	4798      	blx	r3
    return;
 8005b90:	e0bf      	b.n	8005d12 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005b92:	69bb      	ldr	r3, [r7, #24]
 8005b94:	f003 0320 	and.w	r3, r3, #32
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d10a      	bne.n	8005bb2 <HAL_SPI_IRQHandler+0x7e>
 8005b9c:	69bb      	ldr	r3, [r7, #24]
 8005b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d105      	bne.n	8005bb2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8005ba6:	69bb      	ldr	r3, [r7, #24]
 8005ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bac:	2b00      	cmp	r3, #0
 8005bae:	f000 80b0 	beq.w	8005d12 <HAL_SPI_IRQHandler+0x1de>
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	f003 0320 	and.w	r3, r3, #32
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	f000 80aa 	beq.w	8005d12 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8005bbe:	69bb      	ldr	r3, [r7, #24]
 8005bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d023      	beq.n	8005c10 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005bce:	b2db      	uxtb	r3, r3
 8005bd0:	2b03      	cmp	r3, #3
 8005bd2:	d011      	beq.n	8005bf8 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005bd8:	f043 0204 	orr.w	r2, r3, #4
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005be0:	2300      	movs	r3, #0
 8005be2:	617b      	str	r3, [r7, #20]
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68db      	ldr	r3, [r3, #12]
 8005bea:	617b      	str	r3, [r7, #20]
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	689b      	ldr	r3, [r3, #8]
 8005bf2:	617b      	str	r3, [r7, #20]
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	e00b      	b.n	8005c10 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	613b      	str	r3, [r7, #16]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	681b      	ldr	r3, [r3, #0]
 8005c00:	68db      	ldr	r3, [r3, #12]
 8005c02:	613b      	str	r3, [r7, #16]
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	681b      	ldr	r3, [r3, #0]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	613b      	str	r3, [r7, #16]
 8005c0c:	693b      	ldr	r3, [r7, #16]
        return;
 8005c0e:	e080      	b.n	8005d12 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8005c10:	69bb      	ldr	r3, [r7, #24]
 8005c12:	f003 0320 	and.w	r3, r3, #32
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d014      	beq.n	8005c44 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c1e:	f043 0201 	orr.w	r2, r3, #1
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8005c26:	2300      	movs	r3, #0
 8005c28:	60fb      	str	r3, [r7, #12]
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	681b      	ldr	r3, [r3, #0]
 8005c2e:	689b      	ldr	r3, [r3, #8]
 8005c30:	60fb      	str	r3, [r7, #12]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	681a      	ldr	r2, [r3, #0]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005c40:	601a      	str	r2, [r3, #0]
 8005c42:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8005c44:	69bb      	ldr	r3, [r7, #24]
 8005c46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d00c      	beq.n	8005c68 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c52:	f043 0208 	orr.w	r2, r3, #8
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	60bb      	str	r3, [r7, #8]
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	60bb      	str	r3, [r7, #8]
 8005c66:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d04f      	beq.n	8005d10 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	685a      	ldr	r2, [r3, #4]
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005c7e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8005c88:	69fb      	ldr	r3, [r7, #28]
 8005c8a:	f003 0302 	and.w	r3, r3, #2
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d104      	bne.n	8005c9c <HAL_SPI_IRQHandler+0x168>
 8005c92:	69fb      	ldr	r3, [r7, #28]
 8005c94:	f003 0301 	and.w	r3, r3, #1
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d034      	beq.n	8005d06 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	685a      	ldr	r2, [r3, #4]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f022 0203 	bic.w	r2, r2, #3
 8005caa:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d011      	beq.n	8005cd8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cb8:	4a17      	ldr	r2, [pc, #92]	; (8005d18 <HAL_SPI_IRQHandler+0x1e4>)
 8005cba:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005cc0:	4618      	mov	r0, r3
 8005cc2:	f7fc fd54 	bl	800276e <HAL_DMA_Abort_IT>
 8005cc6:	4603      	mov	r3, r0
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d005      	beq.n	8005cd8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cd0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d016      	beq.n	8005d0e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ce4:	4a0c      	ldr	r2, [pc, #48]	; (8005d18 <HAL_SPI_IRQHandler+0x1e4>)
 8005ce6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005cec:	4618      	mov	r0, r3
 8005cee:	f7fc fd3e 	bl	800276e <HAL_DMA_Abort_IT>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	d00a      	beq.n	8005d0e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005cfc:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 8005d04:	e003      	b.n	8005d0e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8005d06:	6878      	ldr	r0, [r7, #4]
 8005d08:	f000 f808 	bl	8005d1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8005d0c:	e000      	b.n	8005d10 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 8005d0e:	bf00      	nop
    return;
 8005d10:	bf00      	nop
  }
}
 8005d12:	3720      	adds	r7, #32
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}
 8005d18:	08005d31 	.word	0x08005d31

08005d1c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8005d1c:	b480      	push	{r7}
 8005d1e:	b083      	sub	sp, #12
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8005d24:	bf00      	nop
 8005d26:	370c      	adds	r7, #12
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d2e:	4770      	bx	lr

08005d30 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d3c:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	2200      	movs	r2, #0
 8005d42:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8005d4c:	68f8      	ldr	r0, [r7, #12]
 8005d4e:	f7ff ffe5 	bl	8005d1c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8005d52:	bf00      	nop
 8005d54:	3710      	adds	r7, #16
 8005d56:	46bd      	mov	sp, r7
 8005d58:	bd80      	pop	{r7, pc}

08005d5a <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005d5a:	b580      	push	{r7, lr}
 8005d5c:	b082      	sub	sp, #8
 8005d5e:	af00      	add	r7, sp, #0
 8005d60:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d101      	bne.n	8005d6c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005d68:	2301      	movs	r3, #1
 8005d6a:	e049      	b.n	8005e00 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d72:	b2db      	uxtb	r3, r3
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d106      	bne.n	8005d86 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005d80:	6878      	ldr	r0, [r7, #4]
 8005d82:	f7fc f8f3 	bl	8001f6c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2202      	movs	r2, #2
 8005d8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681a      	ldr	r2, [r3, #0]
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	3304      	adds	r3, #4
 8005d96:	4619      	mov	r1, r3
 8005d98:	4610      	mov	r0, r2
 8005d9a:	f000 fd2f 	bl	80067fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	2201      	movs	r2, #1
 8005da2:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	2201      	movs	r2, #1
 8005daa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	2201      	movs	r2, #1
 8005db2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	2201      	movs	r2, #1
 8005dc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	2201      	movs	r2, #1
 8005dca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	2201      	movs	r2, #1
 8005dd2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2201      	movs	r2, #1
 8005dda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2201      	movs	r2, #1
 8005de2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	2201      	movs	r2, #1
 8005dea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	2201      	movs	r2, #1
 8005df2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	2201      	movs	r2, #1
 8005dfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005dfe:	2300      	movs	r3, #0
}
 8005e00:	4618      	mov	r0, r3
 8005e02:	3708      	adds	r7, #8
 8005e04:	46bd      	mov	sp, r7
 8005e06:	bd80      	pop	{r7, pc}

08005e08 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005e08:	b480      	push	{r7}
 8005e0a:	b085      	sub	sp, #20
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	2b01      	cmp	r3, #1
 8005e1a:	d001      	beq.n	8005e20 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	e054      	b.n	8005eca <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2202      	movs	r2, #2
 8005e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	68da      	ldr	r2, [r3, #12]
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	f042 0201 	orr.w	r2, r2, #1
 8005e36:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	4a26      	ldr	r2, [pc, #152]	; (8005ed8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005e3e:	4293      	cmp	r3, r2
 8005e40:	d022      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x80>
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005e4a:	d01d      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x80>
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	4a22      	ldr	r2, [pc, #136]	; (8005edc <HAL_TIM_Base_Start_IT+0xd4>)
 8005e52:	4293      	cmp	r3, r2
 8005e54:	d018      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x80>
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	4a21      	ldr	r2, [pc, #132]	; (8005ee0 <HAL_TIM_Base_Start_IT+0xd8>)
 8005e5c:	4293      	cmp	r3, r2
 8005e5e:	d013      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x80>
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	4a1f      	ldr	r2, [pc, #124]	; (8005ee4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d00e      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x80>
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	681b      	ldr	r3, [r3, #0]
 8005e6e:	4a1e      	ldr	r2, [pc, #120]	; (8005ee8 <HAL_TIM_Base_Start_IT+0xe0>)
 8005e70:	4293      	cmp	r3, r2
 8005e72:	d009      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x80>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	4a1c      	ldr	r2, [pc, #112]	; (8005eec <HAL_TIM_Base_Start_IT+0xe4>)
 8005e7a:	4293      	cmp	r3, r2
 8005e7c:	d004      	beq.n	8005e88 <HAL_TIM_Base_Start_IT+0x80>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	4a1b      	ldr	r2, [pc, #108]	; (8005ef0 <HAL_TIM_Base_Start_IT+0xe8>)
 8005e84:	4293      	cmp	r3, r2
 8005e86:	d115      	bne.n	8005eb4 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	689a      	ldr	r2, [r3, #8]
 8005e8e:	4b19      	ldr	r3, [pc, #100]	; (8005ef4 <HAL_TIM_Base_Start_IT+0xec>)
 8005e90:	4013      	ands	r3, r2
 8005e92:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2b06      	cmp	r3, #6
 8005e98:	d015      	beq.n	8005ec6 <HAL_TIM_Base_Start_IT+0xbe>
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ea0:	d011      	beq.n	8005ec6 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	681a      	ldr	r2, [r3, #0]
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	f042 0201 	orr.w	r2, r2, #1
 8005eb0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005eb2:	e008      	b.n	8005ec6 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f042 0201 	orr.w	r2, r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]
 8005ec4:	e000      	b.n	8005ec8 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ec6:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005ec8:	2300      	movs	r3, #0
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3714      	adds	r7, #20
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed4:	4770      	bx	lr
 8005ed6:	bf00      	nop
 8005ed8:	40010000 	.word	0x40010000
 8005edc:	40000400 	.word	0x40000400
 8005ee0:	40000800 	.word	0x40000800
 8005ee4:	40000c00 	.word	0x40000c00
 8005ee8:	40010400 	.word	0x40010400
 8005eec:	40014000 	.word	0x40014000
 8005ef0:	40001800 	.word	0x40001800
 8005ef4:	00010007 	.word	0x00010007

08005ef8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005ef8:	b580      	push	{r7, lr}
 8005efa:	b082      	sub	sp, #8
 8005efc:	af00      	add	r7, sp, #0
 8005efe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d101      	bne.n	8005f0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005f06:	2301      	movs	r3, #1
 8005f08:	e049      	b.n	8005f9e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d106      	bne.n	8005f24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f000 f841 	bl	8005fa6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2202      	movs	r2, #2
 8005f28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	3304      	adds	r3, #4
 8005f34:	4619      	mov	r1, r3
 8005f36:	4610      	mov	r0, r2
 8005f38:	f000 fc60 	bl	80067fc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	2201      	movs	r2, #1
 8005f40:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	2201      	movs	r2, #1
 8005f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2201      	movs	r2, #1
 8005f50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	2201      	movs	r2, #1
 8005f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2201      	movs	r2, #1
 8005f68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	2201      	movs	r2, #1
 8005f70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2201      	movs	r2, #1
 8005f78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	2201      	movs	r2, #1
 8005f80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2201      	movs	r2, #1
 8005f88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2201      	movs	r2, #1
 8005f90:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2201      	movs	r2, #1
 8005f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
}
 8005f9e:	4618      	mov	r0, r3
 8005fa0:	3708      	adds	r7, #8
 8005fa2:	46bd      	mov	sp, r7
 8005fa4:	bd80      	pop	{r7, pc}

08005fa6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005fa6:	b480      	push	{r7}
 8005fa8:	b083      	sub	sp, #12
 8005faa:	af00      	add	r7, sp, #0
 8005fac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005fae:	bf00      	nop
 8005fb0:	370c      	adds	r7, #12
 8005fb2:	46bd      	mov	sp, r7
 8005fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb8:	4770      	bx	lr
	...

08005fbc <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	6078      	str	r0, [r7, #4]
 8005fc4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d109      	bne.n	8005fe0 <HAL_TIM_PWM_Start+0x24>
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005fd2:	b2db      	uxtb	r3, r3
 8005fd4:	2b01      	cmp	r3, #1
 8005fd6:	bf14      	ite	ne
 8005fd8:	2301      	movne	r3, #1
 8005fda:	2300      	moveq	r3, #0
 8005fdc:	b2db      	uxtb	r3, r3
 8005fde:	e03c      	b.n	800605a <HAL_TIM_PWM_Start+0x9e>
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	2b04      	cmp	r3, #4
 8005fe4:	d109      	bne.n	8005ffa <HAL_TIM_PWM_Start+0x3e>
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005fec:	b2db      	uxtb	r3, r3
 8005fee:	2b01      	cmp	r3, #1
 8005ff0:	bf14      	ite	ne
 8005ff2:	2301      	movne	r3, #1
 8005ff4:	2300      	moveq	r3, #0
 8005ff6:	b2db      	uxtb	r3, r3
 8005ff8:	e02f      	b.n	800605a <HAL_TIM_PWM_Start+0x9e>
 8005ffa:	683b      	ldr	r3, [r7, #0]
 8005ffc:	2b08      	cmp	r3, #8
 8005ffe:	d109      	bne.n	8006014 <HAL_TIM_PWM_Start+0x58>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006006:	b2db      	uxtb	r3, r3
 8006008:	2b01      	cmp	r3, #1
 800600a:	bf14      	ite	ne
 800600c:	2301      	movne	r3, #1
 800600e:	2300      	moveq	r3, #0
 8006010:	b2db      	uxtb	r3, r3
 8006012:	e022      	b.n	800605a <HAL_TIM_PWM_Start+0x9e>
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	2b0c      	cmp	r3, #12
 8006018:	d109      	bne.n	800602e <HAL_TIM_PWM_Start+0x72>
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006020:	b2db      	uxtb	r3, r3
 8006022:	2b01      	cmp	r3, #1
 8006024:	bf14      	ite	ne
 8006026:	2301      	movne	r3, #1
 8006028:	2300      	moveq	r3, #0
 800602a:	b2db      	uxtb	r3, r3
 800602c:	e015      	b.n	800605a <HAL_TIM_PWM_Start+0x9e>
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	2b10      	cmp	r3, #16
 8006032:	d109      	bne.n	8006048 <HAL_TIM_PWM_Start+0x8c>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800603a:	b2db      	uxtb	r3, r3
 800603c:	2b01      	cmp	r3, #1
 800603e:	bf14      	ite	ne
 8006040:	2301      	movne	r3, #1
 8006042:	2300      	moveq	r3, #0
 8006044:	b2db      	uxtb	r3, r3
 8006046:	e008      	b.n	800605a <HAL_TIM_PWM_Start+0x9e>
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800604e:	b2db      	uxtb	r3, r3
 8006050:	2b01      	cmp	r3, #1
 8006052:	bf14      	ite	ne
 8006054:	2301      	movne	r3, #1
 8006056:	2300      	moveq	r3, #0
 8006058:	b2db      	uxtb	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	d001      	beq.n	8006062 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800605e:	2301      	movs	r3, #1
 8006060:	e092      	b.n	8006188 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006062:	683b      	ldr	r3, [r7, #0]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d104      	bne.n	8006072 <HAL_TIM_PWM_Start+0xb6>
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	2202      	movs	r2, #2
 800606c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006070:	e023      	b.n	80060ba <HAL_TIM_PWM_Start+0xfe>
 8006072:	683b      	ldr	r3, [r7, #0]
 8006074:	2b04      	cmp	r3, #4
 8006076:	d104      	bne.n	8006082 <HAL_TIM_PWM_Start+0xc6>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2202      	movs	r2, #2
 800607c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006080:	e01b      	b.n	80060ba <HAL_TIM_PWM_Start+0xfe>
 8006082:	683b      	ldr	r3, [r7, #0]
 8006084:	2b08      	cmp	r3, #8
 8006086:	d104      	bne.n	8006092 <HAL_TIM_PWM_Start+0xd6>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2202      	movs	r2, #2
 800608c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006090:	e013      	b.n	80060ba <HAL_TIM_PWM_Start+0xfe>
 8006092:	683b      	ldr	r3, [r7, #0]
 8006094:	2b0c      	cmp	r3, #12
 8006096:	d104      	bne.n	80060a2 <HAL_TIM_PWM_Start+0xe6>
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	2202      	movs	r2, #2
 800609c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80060a0:	e00b      	b.n	80060ba <HAL_TIM_PWM_Start+0xfe>
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	2b10      	cmp	r3, #16
 80060a6:	d104      	bne.n	80060b2 <HAL_TIM_PWM_Start+0xf6>
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	2202      	movs	r2, #2
 80060ac:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80060b0:	e003      	b.n	80060ba <HAL_TIM_PWM_Start+0xfe>
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2202      	movs	r2, #2
 80060b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2201      	movs	r2, #1
 80060c0:	6839      	ldr	r1, [r7, #0]
 80060c2:	4618      	mov	r0, r3
 80060c4:	f000 ff32 	bl	8006f2c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	4a30      	ldr	r2, [pc, #192]	; (8006190 <HAL_TIM_PWM_Start+0x1d4>)
 80060ce:	4293      	cmp	r3, r2
 80060d0:	d004      	beq.n	80060dc <HAL_TIM_PWM_Start+0x120>
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	681b      	ldr	r3, [r3, #0]
 80060d6:	4a2f      	ldr	r2, [pc, #188]	; (8006194 <HAL_TIM_PWM_Start+0x1d8>)
 80060d8:	4293      	cmp	r3, r2
 80060da:	d101      	bne.n	80060e0 <HAL_TIM_PWM_Start+0x124>
 80060dc:	2301      	movs	r3, #1
 80060de:	e000      	b.n	80060e2 <HAL_TIM_PWM_Start+0x126>
 80060e0:	2300      	movs	r3, #0
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d007      	beq.n	80060f6 <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80060f4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a25      	ldr	r2, [pc, #148]	; (8006190 <HAL_TIM_PWM_Start+0x1d4>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d022      	beq.n	8006146 <HAL_TIM_PWM_Start+0x18a>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006108:	d01d      	beq.n	8006146 <HAL_TIM_PWM_Start+0x18a>
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a22      	ldr	r2, [pc, #136]	; (8006198 <HAL_TIM_PWM_Start+0x1dc>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d018      	beq.n	8006146 <HAL_TIM_PWM_Start+0x18a>
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	4a20      	ldr	r2, [pc, #128]	; (800619c <HAL_TIM_PWM_Start+0x1e0>)
 800611a:	4293      	cmp	r3, r2
 800611c:	d013      	beq.n	8006146 <HAL_TIM_PWM_Start+0x18a>
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	4a1f      	ldr	r2, [pc, #124]	; (80061a0 <HAL_TIM_PWM_Start+0x1e4>)
 8006124:	4293      	cmp	r3, r2
 8006126:	d00e      	beq.n	8006146 <HAL_TIM_PWM_Start+0x18a>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4a19      	ldr	r2, [pc, #100]	; (8006194 <HAL_TIM_PWM_Start+0x1d8>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d009      	beq.n	8006146 <HAL_TIM_PWM_Start+0x18a>
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	4a1b      	ldr	r2, [pc, #108]	; (80061a4 <HAL_TIM_PWM_Start+0x1e8>)
 8006138:	4293      	cmp	r3, r2
 800613a:	d004      	beq.n	8006146 <HAL_TIM_PWM_Start+0x18a>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4a19      	ldr	r2, [pc, #100]	; (80061a8 <HAL_TIM_PWM_Start+0x1ec>)
 8006142:	4293      	cmp	r3, r2
 8006144:	d115      	bne.n	8006172 <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	689a      	ldr	r2, [r3, #8]
 800614c:	4b17      	ldr	r3, [pc, #92]	; (80061ac <HAL_TIM_PWM_Start+0x1f0>)
 800614e:	4013      	ands	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	2b06      	cmp	r3, #6
 8006156:	d015      	beq.n	8006184 <HAL_TIM_PWM_Start+0x1c8>
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800615e:	d011      	beq.n	8006184 <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	681a      	ldr	r2, [r3, #0]
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	f042 0201 	orr.w	r2, r2, #1
 800616e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006170:	e008      	b.n	8006184 <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	681a      	ldr	r2, [r3, #0]
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	f042 0201 	orr.w	r2, r2, #1
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	e000      	b.n	8006186 <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006184:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006186:	2300      	movs	r3, #0
}
 8006188:	4618      	mov	r0, r3
 800618a:	3710      	adds	r7, #16
 800618c:	46bd      	mov	sp, r7
 800618e:	bd80      	pop	{r7, pc}
 8006190:	40010000 	.word	0x40010000
 8006194:	40010400 	.word	0x40010400
 8006198:	40000400 	.word	0x40000400
 800619c:	40000800 	.word	0x40000800
 80061a0:	40000c00 	.word	0x40000c00
 80061a4:	40014000 	.word	0x40014000
 80061a8:	40001800 	.word	0x40001800
 80061ac:	00010007 	.word	0x00010007

080061b0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061b0:	b580      	push	{r7, lr}
 80061b2:	b082      	sub	sp, #8
 80061b4:	af00      	add	r7, sp, #0
 80061b6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	f003 0302 	and.w	r3, r3, #2
 80061c2:	2b02      	cmp	r3, #2
 80061c4:	d122      	bne.n	800620c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	68db      	ldr	r3, [r3, #12]
 80061cc:	f003 0302 	and.w	r3, r3, #2
 80061d0:	2b02      	cmp	r3, #2
 80061d2:	d11b      	bne.n	800620c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f06f 0202 	mvn.w	r2, #2
 80061dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2201      	movs	r2, #1
 80061e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	681b      	ldr	r3, [r3, #0]
 80061e8:	699b      	ldr	r3, [r3, #24]
 80061ea:	f003 0303 	and.w	r3, r3, #3
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d003      	beq.n	80061fa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 fae4 	bl	80067c0 <HAL_TIM_IC_CaptureCallback>
 80061f8:	e005      	b.n	8006206 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f000 fad6 	bl	80067ac <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006200:	6878      	ldr	r0, [r7, #4]
 8006202:	f000 fae7 	bl	80067d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	2200      	movs	r2, #0
 800620a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	681b      	ldr	r3, [r3, #0]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	f003 0304 	and.w	r3, r3, #4
 8006216:	2b04      	cmp	r3, #4
 8006218:	d122      	bne.n	8006260 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	68db      	ldr	r3, [r3, #12]
 8006220:	f003 0304 	and.w	r3, r3, #4
 8006224:	2b04      	cmp	r3, #4
 8006226:	d11b      	bne.n	8006260 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f06f 0204 	mvn.w	r2, #4
 8006230:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	2202      	movs	r2, #2
 8006236:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	699b      	ldr	r3, [r3, #24]
 800623e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006242:	2b00      	cmp	r3, #0
 8006244:	d003      	beq.n	800624e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f000 faba 	bl	80067c0 <HAL_TIM_IC_CaptureCallback>
 800624c:	e005      	b.n	800625a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f000 faac 	bl	80067ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006254:	6878      	ldr	r0, [r7, #4]
 8006256:	f000 fabd 	bl	80067d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	2200      	movs	r2, #0
 800625e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	691b      	ldr	r3, [r3, #16]
 8006266:	f003 0308 	and.w	r3, r3, #8
 800626a:	2b08      	cmp	r3, #8
 800626c:	d122      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800626e:	687b      	ldr	r3, [r7, #4]
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	68db      	ldr	r3, [r3, #12]
 8006274:	f003 0308 	and.w	r3, r3, #8
 8006278:	2b08      	cmp	r3, #8
 800627a:	d11b      	bne.n	80062b4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	f06f 0208 	mvn.w	r2, #8
 8006284:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2204      	movs	r2, #4
 800628a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	69db      	ldr	r3, [r3, #28]
 8006292:	f003 0303 	and.w	r3, r3, #3
 8006296:	2b00      	cmp	r3, #0
 8006298:	d003      	beq.n	80062a2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 fa90 	bl	80067c0 <HAL_TIM_IC_CaptureCallback>
 80062a0:	e005      	b.n	80062ae <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062a2:	6878      	ldr	r0, [r7, #4]
 80062a4:	f000 fa82 	bl	80067ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f000 fa93 	bl	80067d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	2200      	movs	r2, #0
 80062b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	691b      	ldr	r3, [r3, #16]
 80062ba:	f003 0310 	and.w	r3, r3, #16
 80062be:	2b10      	cmp	r3, #16
 80062c0:	d122      	bne.n	8006308 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	f003 0310 	and.w	r3, r3, #16
 80062cc:	2b10      	cmp	r3, #16
 80062ce:	d11b      	bne.n	8006308 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	f06f 0210 	mvn.w	r2, #16
 80062d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2208      	movs	r2, #8
 80062de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	69db      	ldr	r3, [r3, #28]
 80062e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d003      	beq.n	80062f6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062ee:	6878      	ldr	r0, [r7, #4]
 80062f0:	f000 fa66 	bl	80067c0 <HAL_TIM_IC_CaptureCallback>
 80062f4:	e005      	b.n	8006302 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062f6:	6878      	ldr	r0, [r7, #4]
 80062f8:	f000 fa58 	bl	80067ac <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fa69 	bl	80067d4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	691b      	ldr	r3, [r3, #16]
 800630e:	f003 0301 	and.w	r3, r3, #1
 8006312:	2b01      	cmp	r3, #1
 8006314:	d10e      	bne.n	8006334 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	68db      	ldr	r3, [r3, #12]
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b01      	cmp	r3, #1
 8006322:	d107      	bne.n	8006334 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f06f 0201 	mvn.w	r2, #1
 800632c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f7fa ff10 	bl	8001154 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	691b      	ldr	r3, [r3, #16]
 800633a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800633e:	2b80      	cmp	r3, #128	; 0x80
 8006340:	d10e      	bne.n	8006360 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	68db      	ldr	r3, [r3, #12]
 8006348:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800634c:	2b80      	cmp	r3, #128	; 0x80
 800634e:	d107      	bne.n	8006360 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006358:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f000 fea4 	bl	80070a8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	691b      	ldr	r3, [r3, #16]
 8006366:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800636a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800636e:	d10e      	bne.n	800638e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	68db      	ldr	r3, [r3, #12]
 8006376:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800637a:	2b80      	cmp	r3, #128	; 0x80
 800637c:	d107      	bne.n	800638e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8006386:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8006388:	6878      	ldr	r0, [r7, #4]
 800638a:	f000 fe97 	bl	80070bc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	691b      	ldr	r3, [r3, #16]
 8006394:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006398:	2b40      	cmp	r3, #64	; 0x40
 800639a:	d10e      	bne.n	80063ba <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	68db      	ldr	r3, [r3, #12]
 80063a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063a6:	2b40      	cmp	r3, #64	; 0x40
 80063a8:	d107      	bne.n	80063ba <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f000 fa17 	bl	80067e8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	691b      	ldr	r3, [r3, #16]
 80063c0:	f003 0320 	and.w	r3, r3, #32
 80063c4:	2b20      	cmp	r3, #32
 80063c6:	d10e      	bne.n	80063e6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	68db      	ldr	r3, [r3, #12]
 80063ce:	f003 0320 	and.w	r3, r3, #32
 80063d2:	2b20      	cmp	r3, #32
 80063d4:	d107      	bne.n	80063e6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f06f 0220 	mvn.w	r2, #32
 80063de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fe57 	bl	8007094 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80063e6:	bf00      	nop
 80063e8:	3708      	adds	r7, #8
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
	...

080063f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80063f0:	b580      	push	{r7, lr}
 80063f2:	b086      	sub	sp, #24
 80063f4:	af00      	add	r7, sp, #0
 80063f6:	60f8      	str	r0, [r7, #12]
 80063f8:	60b9      	str	r1, [r7, #8]
 80063fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063fc:	2300      	movs	r3, #0
 80063fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006406:	2b01      	cmp	r3, #1
 8006408:	d101      	bne.n	800640e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800640a:	2302      	movs	r3, #2
 800640c:	e0ff      	b.n	800660e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	2201      	movs	r2, #1
 8006412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2b14      	cmp	r3, #20
 800641a:	f200 80f0 	bhi.w	80065fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800641e:	a201      	add	r2, pc, #4	; (adr r2, 8006424 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006424:	08006479 	.word	0x08006479
 8006428:	080065ff 	.word	0x080065ff
 800642c:	080065ff 	.word	0x080065ff
 8006430:	080065ff 	.word	0x080065ff
 8006434:	080064b9 	.word	0x080064b9
 8006438:	080065ff 	.word	0x080065ff
 800643c:	080065ff 	.word	0x080065ff
 8006440:	080065ff 	.word	0x080065ff
 8006444:	080064fb 	.word	0x080064fb
 8006448:	080065ff 	.word	0x080065ff
 800644c:	080065ff 	.word	0x080065ff
 8006450:	080065ff 	.word	0x080065ff
 8006454:	0800653b 	.word	0x0800653b
 8006458:	080065ff 	.word	0x080065ff
 800645c:	080065ff 	.word	0x080065ff
 8006460:	080065ff 	.word	0x080065ff
 8006464:	0800657d 	.word	0x0800657d
 8006468:	080065ff 	.word	0x080065ff
 800646c:	080065ff 	.word	0x080065ff
 8006470:	080065ff 	.word	0x080065ff
 8006474:	080065bd 	.word	0x080065bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006478:	68fb      	ldr	r3, [r7, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	68b9      	ldr	r1, [r7, #8]
 800647e:	4618      	mov	r0, r3
 8006480:	f000 fa5c 	bl	800693c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	699a      	ldr	r2, [r3, #24]
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	f042 0208 	orr.w	r2, r2, #8
 8006492:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	681b      	ldr	r3, [r3, #0]
 8006498:	699a      	ldr	r2, [r3, #24]
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	f022 0204 	bic.w	r2, r2, #4
 80064a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	6999      	ldr	r1, [r3, #24]
 80064aa:	68bb      	ldr	r3, [r7, #8]
 80064ac:	691a      	ldr	r2, [r3, #16]
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	430a      	orrs	r2, r1
 80064b4:	619a      	str	r2, [r3, #24]
      break;
 80064b6:	e0a5      	b.n	8006604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	68b9      	ldr	r1, [r7, #8]
 80064be:	4618      	mov	r0, r3
 80064c0:	f000 faae 	bl	8006a20 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80064c4:	68fb      	ldr	r3, [r7, #12]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	699a      	ldr	r2, [r3, #24]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80064d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80064d4:	68fb      	ldr	r3, [r7, #12]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	699a      	ldr	r2, [r3, #24]
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	681b      	ldr	r3, [r3, #0]
 80064de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80064e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	6999      	ldr	r1, [r3, #24]
 80064ea:	68bb      	ldr	r3, [r7, #8]
 80064ec:	691b      	ldr	r3, [r3, #16]
 80064ee:	021a      	lsls	r2, r3, #8
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	430a      	orrs	r2, r1
 80064f6:	619a      	str	r2, [r3, #24]
      break;
 80064f8:	e084      	b.n	8006604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	68b9      	ldr	r1, [r7, #8]
 8006500:	4618      	mov	r0, r3
 8006502:	f000 fb05 	bl	8006b10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	69da      	ldr	r2, [r3, #28]
 800650c:	68fb      	ldr	r3, [r7, #12]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f042 0208 	orr.w	r2, r2, #8
 8006514:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	69da      	ldr	r2, [r3, #28]
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f022 0204 	bic.w	r2, r2, #4
 8006524:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	69d9      	ldr	r1, [r3, #28]
 800652c:	68bb      	ldr	r3, [r7, #8]
 800652e:	691a      	ldr	r2, [r3, #16]
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	430a      	orrs	r2, r1
 8006536:	61da      	str	r2, [r3, #28]
      break;
 8006538:	e064      	b.n	8006604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	68b9      	ldr	r1, [r7, #8]
 8006540:	4618      	mov	r0, r3
 8006542:	f000 fb5b 	bl	8006bfc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	69da      	ldr	r2, [r3, #28]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006554:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	69da      	ldr	r2, [r3, #28]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006564:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	69d9      	ldr	r1, [r3, #28]
 800656c:	68bb      	ldr	r3, [r7, #8]
 800656e:	691b      	ldr	r3, [r3, #16]
 8006570:	021a      	lsls	r2, r3, #8
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	430a      	orrs	r2, r1
 8006578:	61da      	str	r2, [r3, #28]
      break;
 800657a:	e043      	b.n	8006604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	68b9      	ldr	r1, [r7, #8]
 8006582:	4618      	mov	r0, r3
 8006584:	f000 fb92 	bl	8006cac <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	681b      	ldr	r3, [r3, #0]
 800658c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800658e:	68fb      	ldr	r3, [r7, #12]
 8006590:	681b      	ldr	r3, [r3, #0]
 8006592:	f042 0208 	orr.w	r2, r2, #8
 8006596:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006598:	68fb      	ldr	r3, [r7, #12]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f022 0204 	bic.w	r2, r2, #4
 80065a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80065ae:	68bb      	ldr	r3, [r7, #8]
 80065b0:	691a      	ldr	r2, [r3, #16]
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	430a      	orrs	r2, r1
 80065b8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80065ba:	e023      	b.n	8006604 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	68b9      	ldr	r1, [r7, #8]
 80065c2:	4618      	mov	r0, r3
 80065c4:	f000 fbc4 	bl	8006d50 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80065c8:	68fb      	ldr	r3, [r7, #12]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065d6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065e6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80065ee:	68bb      	ldr	r3, [r7, #8]
 80065f0:	691b      	ldr	r3, [r3, #16]
 80065f2:	021a      	lsls	r2, r3, #8
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	430a      	orrs	r2, r1
 80065fa:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80065fc:	e002      	b.n	8006604 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80065fe:	2301      	movs	r3, #1
 8006600:	75fb      	strb	r3, [r7, #23]
      break;
 8006602:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800660c:	7dfb      	ldrb	r3, [r7, #23]
}
 800660e:	4618      	mov	r0, r3
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop

08006618 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006618:	b580      	push	{r7, lr}
 800661a:	b084      	sub	sp, #16
 800661c:	af00      	add	r7, sp, #0
 800661e:	6078      	str	r0, [r7, #4]
 8006620:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006622:	2300      	movs	r3, #0
 8006624:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800662c:	2b01      	cmp	r3, #1
 800662e:	d101      	bne.n	8006634 <HAL_TIM_ConfigClockSource+0x1c>
 8006630:	2302      	movs	r3, #2
 8006632:	e0b4      	b.n	800679e <HAL_TIM_ConfigClockSource+0x186>
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	2201      	movs	r2, #1
 8006638:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	2202      	movs	r2, #2
 8006640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	689b      	ldr	r3, [r3, #8]
 800664a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800664c:	68ba      	ldr	r2, [r7, #8]
 800664e:	4b56      	ldr	r3, [pc, #344]	; (80067a8 <HAL_TIM_ConfigClockSource+0x190>)
 8006650:	4013      	ands	r3, r2
 8006652:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006654:	68bb      	ldr	r3, [r7, #8]
 8006656:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800665a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006664:	683b      	ldr	r3, [r7, #0]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800666c:	d03e      	beq.n	80066ec <HAL_TIM_ConfigClockSource+0xd4>
 800666e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006672:	f200 8087 	bhi.w	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 8006676:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800667a:	f000 8086 	beq.w	800678a <HAL_TIM_ConfigClockSource+0x172>
 800667e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006682:	d87f      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 8006684:	2b70      	cmp	r3, #112	; 0x70
 8006686:	d01a      	beq.n	80066be <HAL_TIM_ConfigClockSource+0xa6>
 8006688:	2b70      	cmp	r3, #112	; 0x70
 800668a:	d87b      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 800668c:	2b60      	cmp	r3, #96	; 0x60
 800668e:	d050      	beq.n	8006732 <HAL_TIM_ConfigClockSource+0x11a>
 8006690:	2b60      	cmp	r3, #96	; 0x60
 8006692:	d877      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 8006694:	2b50      	cmp	r3, #80	; 0x50
 8006696:	d03c      	beq.n	8006712 <HAL_TIM_ConfigClockSource+0xfa>
 8006698:	2b50      	cmp	r3, #80	; 0x50
 800669a:	d873      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 800669c:	2b40      	cmp	r3, #64	; 0x40
 800669e:	d058      	beq.n	8006752 <HAL_TIM_ConfigClockSource+0x13a>
 80066a0:	2b40      	cmp	r3, #64	; 0x40
 80066a2:	d86f      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 80066a4:	2b30      	cmp	r3, #48	; 0x30
 80066a6:	d064      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x15a>
 80066a8:	2b30      	cmp	r3, #48	; 0x30
 80066aa:	d86b      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 80066ac:	2b20      	cmp	r3, #32
 80066ae:	d060      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x15a>
 80066b0:	2b20      	cmp	r3, #32
 80066b2:	d867      	bhi.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d05c      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x15a>
 80066b8:	2b10      	cmp	r3, #16
 80066ba:	d05a      	beq.n	8006772 <HAL_TIM_ConfigClockSource+0x15a>
 80066bc:	e062      	b.n	8006784 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066c6:	683b      	ldr	r3, [r7, #0]
 80066c8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066ce:	f000 fc0d 	bl	8006eec <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	681b      	ldr	r3, [r3, #0]
 80066d6:	689b      	ldr	r3, [r3, #8]
 80066d8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80066e0:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68ba      	ldr	r2, [r7, #8]
 80066e8:	609a      	str	r2, [r3, #8]
      break;
 80066ea:	e04f      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80066f0:	683b      	ldr	r3, [r7, #0]
 80066f2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80066f4:	683b      	ldr	r3, [r7, #0]
 80066f6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80066fc:	f000 fbf6 	bl	8006eec <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	689a      	ldr	r2, [r3, #8]
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800670e:	609a      	str	r2, [r3, #8]
      break;
 8006710:	e03c      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006716:	683b      	ldr	r3, [r7, #0]
 8006718:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800671e:	461a      	mov	r2, r3
 8006720:	f000 fb6a 	bl	8006df8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2150      	movs	r1, #80	; 0x50
 800672a:	4618      	mov	r0, r3
 800672c:	f000 fbc3 	bl	8006eb6 <TIM_ITRx_SetConfig>
      break;
 8006730:	e02c      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006736:	683b      	ldr	r3, [r7, #0]
 8006738:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800673a:	683b      	ldr	r3, [r7, #0]
 800673c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800673e:	461a      	mov	r2, r3
 8006740:	f000 fb89 	bl	8006e56 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	2160      	movs	r1, #96	; 0x60
 800674a:	4618      	mov	r0, r3
 800674c:	f000 fbb3 	bl	8006eb6 <TIM_ITRx_SetConfig>
      break;
 8006750:	e01c      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8006756:	683b      	ldr	r3, [r7, #0]
 8006758:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800675a:	683b      	ldr	r3, [r7, #0]
 800675c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800675e:	461a      	mov	r2, r3
 8006760:	f000 fb4a 	bl	8006df8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	2140      	movs	r1, #64	; 0x40
 800676a:	4618      	mov	r0, r3
 800676c:	f000 fba3 	bl	8006eb6 <TIM_ITRx_SetConfig>
      break;
 8006770:	e00c      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	683b      	ldr	r3, [r7, #0]
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	4619      	mov	r1, r3
 800677c:	4610      	mov	r0, r2
 800677e:	f000 fb9a 	bl	8006eb6 <TIM_ITRx_SetConfig>
      break;
 8006782:	e003      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	73fb      	strb	r3, [r7, #15]
      break;
 8006788:	e000      	b.n	800678c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800678a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	2201      	movs	r2, #1
 8006790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2200      	movs	r2, #0
 8006798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800679c:	7bfb      	ldrb	r3, [r7, #15]
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3710      	adds	r7, #16
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}
 80067a6:	bf00      	nop
 80067a8:	fffeff88 	.word	0xfffeff88

080067ac <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80067ac:	b480      	push	{r7}
 80067ae:	b083      	sub	sp, #12
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80067b4:	bf00      	nop
 80067b6:	370c      	adds	r7, #12
 80067b8:	46bd      	mov	sp, r7
 80067ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067be:	4770      	bx	lr

080067c0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80067c0:	b480      	push	{r7}
 80067c2:	b083      	sub	sp, #12
 80067c4:	af00      	add	r7, sp, #0
 80067c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80067c8:	bf00      	nop
 80067ca:	370c      	adds	r7, #12
 80067cc:	46bd      	mov	sp, r7
 80067ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d2:	4770      	bx	lr

080067d4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b083      	sub	sp, #12
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80067dc:	bf00      	nop
 80067de:	370c      	adds	r7, #12
 80067e0:	46bd      	mov	sp, r7
 80067e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e6:	4770      	bx	lr

080067e8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80067e8:	b480      	push	{r7}
 80067ea:	b083      	sub	sp, #12
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80067f0:	bf00      	nop
 80067f2:	370c      	adds	r7, #12
 80067f4:	46bd      	mov	sp, r7
 80067f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067fa:	4770      	bx	lr

080067fc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80067fc:	b480      	push	{r7}
 80067fe:	b085      	sub	sp, #20
 8006800:	af00      	add	r7, sp, #0
 8006802:	6078      	str	r0, [r7, #4]
 8006804:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	4a40      	ldr	r2, [pc, #256]	; (8006910 <TIM_Base_SetConfig+0x114>)
 8006810:	4293      	cmp	r3, r2
 8006812:	d013      	beq.n	800683c <TIM_Base_SetConfig+0x40>
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800681a:	d00f      	beq.n	800683c <TIM_Base_SetConfig+0x40>
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	4a3d      	ldr	r2, [pc, #244]	; (8006914 <TIM_Base_SetConfig+0x118>)
 8006820:	4293      	cmp	r3, r2
 8006822:	d00b      	beq.n	800683c <TIM_Base_SetConfig+0x40>
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	4a3c      	ldr	r2, [pc, #240]	; (8006918 <TIM_Base_SetConfig+0x11c>)
 8006828:	4293      	cmp	r3, r2
 800682a:	d007      	beq.n	800683c <TIM_Base_SetConfig+0x40>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	4a3b      	ldr	r2, [pc, #236]	; (800691c <TIM_Base_SetConfig+0x120>)
 8006830:	4293      	cmp	r3, r2
 8006832:	d003      	beq.n	800683c <TIM_Base_SetConfig+0x40>
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	4a3a      	ldr	r2, [pc, #232]	; (8006920 <TIM_Base_SetConfig+0x124>)
 8006838:	4293      	cmp	r3, r2
 800683a:	d108      	bne.n	800684e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006842:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	685b      	ldr	r3, [r3, #4]
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	4313      	orrs	r3, r2
 800684c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a2f      	ldr	r2, [pc, #188]	; (8006910 <TIM_Base_SetConfig+0x114>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d02b      	beq.n	80068ae <TIM_Base_SetConfig+0xb2>
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800685c:	d027      	beq.n	80068ae <TIM_Base_SetConfig+0xb2>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a2c      	ldr	r2, [pc, #176]	; (8006914 <TIM_Base_SetConfig+0x118>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d023      	beq.n	80068ae <TIM_Base_SetConfig+0xb2>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	4a2b      	ldr	r2, [pc, #172]	; (8006918 <TIM_Base_SetConfig+0x11c>)
 800686a:	4293      	cmp	r3, r2
 800686c:	d01f      	beq.n	80068ae <TIM_Base_SetConfig+0xb2>
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4a2a      	ldr	r2, [pc, #168]	; (800691c <TIM_Base_SetConfig+0x120>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d01b      	beq.n	80068ae <TIM_Base_SetConfig+0xb2>
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	4a29      	ldr	r2, [pc, #164]	; (8006920 <TIM_Base_SetConfig+0x124>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d017      	beq.n	80068ae <TIM_Base_SetConfig+0xb2>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	4a28      	ldr	r2, [pc, #160]	; (8006924 <TIM_Base_SetConfig+0x128>)
 8006882:	4293      	cmp	r3, r2
 8006884:	d013      	beq.n	80068ae <TIM_Base_SetConfig+0xb2>
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	4a27      	ldr	r2, [pc, #156]	; (8006928 <TIM_Base_SetConfig+0x12c>)
 800688a:	4293      	cmp	r3, r2
 800688c:	d00f      	beq.n	80068ae <TIM_Base_SetConfig+0xb2>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	4a26      	ldr	r2, [pc, #152]	; (800692c <TIM_Base_SetConfig+0x130>)
 8006892:	4293      	cmp	r3, r2
 8006894:	d00b      	beq.n	80068ae <TIM_Base_SetConfig+0xb2>
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	4a25      	ldr	r2, [pc, #148]	; (8006930 <TIM_Base_SetConfig+0x134>)
 800689a:	4293      	cmp	r3, r2
 800689c:	d007      	beq.n	80068ae <TIM_Base_SetConfig+0xb2>
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	4a24      	ldr	r2, [pc, #144]	; (8006934 <TIM_Base_SetConfig+0x138>)
 80068a2:	4293      	cmp	r3, r2
 80068a4:	d003      	beq.n	80068ae <TIM_Base_SetConfig+0xb2>
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	4a23      	ldr	r2, [pc, #140]	; (8006938 <TIM_Base_SetConfig+0x13c>)
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d108      	bne.n	80068c0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80068ae:	68fb      	ldr	r3, [r7, #12]
 80068b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80068b6:	683b      	ldr	r3, [r7, #0]
 80068b8:	68db      	ldr	r3, [r3, #12]
 80068ba:	68fa      	ldr	r2, [r7, #12]
 80068bc:	4313      	orrs	r3, r2
 80068be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80068c6:	683b      	ldr	r3, [r7, #0]
 80068c8:	695b      	ldr	r3, [r3, #20]
 80068ca:	4313      	orrs	r3, r2
 80068cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	68fa      	ldr	r2, [r7, #12]
 80068d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80068d4:	683b      	ldr	r3, [r7, #0]
 80068d6:	689a      	ldr	r2, [r3, #8]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80068dc:	683b      	ldr	r3, [r7, #0]
 80068de:	681a      	ldr	r2, [r3, #0]
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a0a      	ldr	r2, [pc, #40]	; (8006910 <TIM_Base_SetConfig+0x114>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d003      	beq.n	80068f4 <TIM_Base_SetConfig+0xf8>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a0c      	ldr	r2, [pc, #48]	; (8006920 <TIM_Base_SetConfig+0x124>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d103      	bne.n	80068fc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	691a      	ldr	r2, [r3, #16]
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2201      	movs	r2, #1
 8006900:	615a      	str	r2, [r3, #20]
}
 8006902:	bf00      	nop
 8006904:	3714      	adds	r7, #20
 8006906:	46bd      	mov	sp, r7
 8006908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800690c:	4770      	bx	lr
 800690e:	bf00      	nop
 8006910:	40010000 	.word	0x40010000
 8006914:	40000400 	.word	0x40000400
 8006918:	40000800 	.word	0x40000800
 800691c:	40000c00 	.word	0x40000c00
 8006920:	40010400 	.word	0x40010400
 8006924:	40014000 	.word	0x40014000
 8006928:	40014400 	.word	0x40014400
 800692c:	40014800 	.word	0x40014800
 8006930:	40001800 	.word	0x40001800
 8006934:	40001c00 	.word	0x40001c00
 8006938:	40002000 	.word	0x40002000

0800693c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800693c:	b480      	push	{r7}
 800693e:	b087      	sub	sp, #28
 8006940:	af00      	add	r7, sp, #0
 8006942:	6078      	str	r0, [r7, #4]
 8006944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6a1b      	ldr	r3, [r3, #32]
 800694a:	f023 0201 	bic.w	r2, r3, #1
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6a1b      	ldr	r3, [r3, #32]
 8006956:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	685b      	ldr	r3, [r3, #4]
 800695c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	699b      	ldr	r3, [r3, #24]
 8006962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006964:	68fa      	ldr	r2, [r7, #12]
 8006966:	4b2b      	ldr	r3, [pc, #172]	; (8006a14 <TIM_OC1_SetConfig+0xd8>)
 8006968:	4013      	ands	r3, r2
 800696a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	f023 0303 	bic.w	r3, r3, #3
 8006972:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	68fa      	ldr	r2, [r7, #12]
 800697a:	4313      	orrs	r3, r2
 800697c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f023 0302 	bic.w	r3, r3, #2
 8006984:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	689b      	ldr	r3, [r3, #8]
 800698a:	697a      	ldr	r2, [r7, #20]
 800698c:	4313      	orrs	r3, r2
 800698e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	4a21      	ldr	r2, [pc, #132]	; (8006a18 <TIM_OC1_SetConfig+0xdc>)
 8006994:	4293      	cmp	r3, r2
 8006996:	d003      	beq.n	80069a0 <TIM_OC1_SetConfig+0x64>
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	4a20      	ldr	r2, [pc, #128]	; (8006a1c <TIM_OC1_SetConfig+0xe0>)
 800699c:	4293      	cmp	r3, r2
 800699e:	d10c      	bne.n	80069ba <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80069a0:	697b      	ldr	r3, [r7, #20]
 80069a2:	f023 0308 	bic.w	r3, r3, #8
 80069a6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80069a8:	683b      	ldr	r3, [r7, #0]
 80069aa:	68db      	ldr	r3, [r3, #12]
 80069ac:	697a      	ldr	r2, [r7, #20]
 80069ae:	4313      	orrs	r3, r2
 80069b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	f023 0304 	bic.w	r3, r3, #4
 80069b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	4a16      	ldr	r2, [pc, #88]	; (8006a18 <TIM_OC1_SetConfig+0xdc>)
 80069be:	4293      	cmp	r3, r2
 80069c0:	d003      	beq.n	80069ca <TIM_OC1_SetConfig+0x8e>
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	4a15      	ldr	r2, [pc, #84]	; (8006a1c <TIM_OC1_SetConfig+0xe0>)
 80069c6:	4293      	cmp	r3, r2
 80069c8:	d111      	bne.n	80069ee <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80069ca:	693b      	ldr	r3, [r7, #16]
 80069cc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80069d2:	693b      	ldr	r3, [r7, #16]
 80069d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80069d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80069da:	683b      	ldr	r3, [r7, #0]
 80069dc:	695b      	ldr	r3, [r3, #20]
 80069de:	693a      	ldr	r2, [r7, #16]
 80069e0:	4313      	orrs	r3, r2
 80069e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069e4:	683b      	ldr	r3, [r7, #0]
 80069e6:	699b      	ldr	r3, [r3, #24]
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	693a      	ldr	r2, [r7, #16]
 80069f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	68fa      	ldr	r2, [r7, #12]
 80069f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069fa:	683b      	ldr	r3, [r7, #0]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	697a      	ldr	r2, [r7, #20]
 8006a06:	621a      	str	r2, [r3, #32]
}
 8006a08:	bf00      	nop
 8006a0a:	371c      	adds	r7, #28
 8006a0c:	46bd      	mov	sp, r7
 8006a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a12:	4770      	bx	lr
 8006a14:	fffeff8f 	.word	0xfffeff8f
 8006a18:	40010000 	.word	0x40010000
 8006a1c:	40010400 	.word	0x40010400

08006a20 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006a20:	b480      	push	{r7}
 8006a22:	b087      	sub	sp, #28
 8006a24:	af00      	add	r7, sp, #0
 8006a26:	6078      	str	r0, [r7, #4]
 8006a28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	f023 0210 	bic.w	r2, r3, #16
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6a1b      	ldr	r3, [r3, #32]
 8006a3a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	685b      	ldr	r3, [r3, #4]
 8006a40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	699b      	ldr	r3, [r3, #24]
 8006a46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	4b2e      	ldr	r3, [pc, #184]	; (8006b04 <TIM_OC2_SetConfig+0xe4>)
 8006a4c:	4013      	ands	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a56:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	021b      	lsls	r3, r3, #8
 8006a5e:	68fa      	ldr	r2, [r7, #12]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a64:	697b      	ldr	r3, [r7, #20]
 8006a66:	f023 0320 	bic.w	r3, r3, #32
 8006a6a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a6c:	683b      	ldr	r3, [r7, #0]
 8006a6e:	689b      	ldr	r3, [r3, #8]
 8006a70:	011b      	lsls	r3, r3, #4
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	4313      	orrs	r3, r2
 8006a76:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4a23      	ldr	r2, [pc, #140]	; (8006b08 <TIM_OC2_SetConfig+0xe8>)
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	d003      	beq.n	8006a88 <TIM_OC2_SetConfig+0x68>
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	4a22      	ldr	r2, [pc, #136]	; (8006b0c <TIM_OC2_SetConfig+0xec>)
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d10d      	bne.n	8006aa4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a88:	697b      	ldr	r3, [r7, #20]
 8006a8a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a8e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a90:	683b      	ldr	r3, [r7, #0]
 8006a92:	68db      	ldr	r3, [r3, #12]
 8006a94:	011b      	lsls	r3, r3, #4
 8006a96:	697a      	ldr	r2, [r7, #20]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006aa2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a18      	ldr	r2, [pc, #96]	; (8006b08 <TIM_OC2_SetConfig+0xe8>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d003      	beq.n	8006ab4 <TIM_OC2_SetConfig+0x94>
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	4a17      	ldr	r2, [pc, #92]	; (8006b0c <TIM_OC2_SetConfig+0xec>)
 8006ab0:	4293      	cmp	r3, r2
 8006ab2:	d113      	bne.n	8006adc <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006aba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006abc:	693b      	ldr	r3, [r7, #16]
 8006abe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006ac2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006ac4:	683b      	ldr	r3, [r7, #0]
 8006ac6:	695b      	ldr	r3, [r3, #20]
 8006ac8:	009b      	lsls	r3, r3, #2
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	4313      	orrs	r3, r2
 8006ace:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	699b      	ldr	r3, [r3, #24]
 8006ad4:	009b      	lsls	r3, r3, #2
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	693a      	ldr	r2, [r7, #16]
 8006ae0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	68fa      	ldr	r2, [r7, #12]
 8006ae6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	685a      	ldr	r2, [r3, #4]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	697a      	ldr	r2, [r7, #20]
 8006af4:	621a      	str	r2, [r3, #32]
}
 8006af6:	bf00      	nop
 8006af8:	371c      	adds	r7, #28
 8006afa:	46bd      	mov	sp, r7
 8006afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b00:	4770      	bx	lr
 8006b02:	bf00      	nop
 8006b04:	feff8fff 	.word	0xfeff8fff
 8006b08:	40010000 	.word	0x40010000
 8006b0c:	40010400 	.word	0x40010400

08006b10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006b10:	b480      	push	{r7}
 8006b12:	b087      	sub	sp, #28
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6a1b      	ldr	r3, [r3, #32]
 8006b1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	685b      	ldr	r3, [r3, #4]
 8006b30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	69db      	ldr	r3, [r3, #28]
 8006b36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b38:	68fa      	ldr	r2, [r7, #12]
 8006b3a:	4b2d      	ldr	r3, [pc, #180]	; (8006bf0 <TIM_OC3_SetConfig+0xe0>)
 8006b3c:	4013      	ands	r3, r2
 8006b3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f023 0303 	bic.w	r3, r3, #3
 8006b46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b48:	683b      	ldr	r3, [r7, #0]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b52:	697b      	ldr	r3, [r7, #20]
 8006b54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b5a:	683b      	ldr	r3, [r7, #0]
 8006b5c:	689b      	ldr	r3, [r3, #8]
 8006b5e:	021b      	lsls	r3, r3, #8
 8006b60:	697a      	ldr	r2, [r7, #20]
 8006b62:	4313      	orrs	r3, r2
 8006b64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	4a22      	ldr	r2, [pc, #136]	; (8006bf4 <TIM_OC3_SetConfig+0xe4>)
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d003      	beq.n	8006b76 <TIM_OC3_SetConfig+0x66>
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a21      	ldr	r2, [pc, #132]	; (8006bf8 <TIM_OC3_SetConfig+0xe8>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d10d      	bne.n	8006b92 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b76:	697b      	ldr	r3, [r7, #20]
 8006b78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b7c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	68db      	ldr	r3, [r3, #12]
 8006b82:	021b      	lsls	r3, r3, #8
 8006b84:	697a      	ldr	r2, [r7, #20]
 8006b86:	4313      	orrs	r3, r2
 8006b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b8a:	697b      	ldr	r3, [r7, #20]
 8006b8c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	4a17      	ldr	r2, [pc, #92]	; (8006bf4 <TIM_OC3_SetConfig+0xe4>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d003      	beq.n	8006ba2 <TIM_OC3_SetConfig+0x92>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	4a16      	ldr	r2, [pc, #88]	; (8006bf8 <TIM_OC3_SetConfig+0xe8>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	d113      	bne.n	8006bca <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006ba2:	693b      	ldr	r3, [r7, #16]
 8006ba4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006ba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006baa:	693b      	ldr	r3, [r7, #16]
 8006bac:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	695b      	ldr	r3, [r3, #20]
 8006bb6:	011b      	lsls	r3, r3, #4
 8006bb8:	693a      	ldr	r2, [r7, #16]
 8006bba:	4313      	orrs	r3, r2
 8006bbc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bbe:	683b      	ldr	r3, [r7, #0]
 8006bc0:	699b      	ldr	r3, [r3, #24]
 8006bc2:	011b      	lsls	r3, r3, #4
 8006bc4:	693a      	ldr	r2, [r7, #16]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	693a      	ldr	r2, [r7, #16]
 8006bce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	68fa      	ldr	r2, [r7, #12]
 8006bd4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006bd6:	683b      	ldr	r3, [r7, #0]
 8006bd8:	685a      	ldr	r2, [r3, #4]
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	621a      	str	r2, [r3, #32]
}
 8006be4:	bf00      	nop
 8006be6:	371c      	adds	r7, #28
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr
 8006bf0:	fffeff8f 	.word	0xfffeff8f
 8006bf4:	40010000 	.word	0x40010000
 8006bf8:	40010400 	.word	0x40010400

08006bfc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8006bfc:	b480      	push	{r7}
 8006bfe:	b087      	sub	sp, #28
 8006c00:	af00      	add	r7, sp, #0
 8006c02:	6078      	str	r0, [r7, #4]
 8006c04:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	6a1b      	ldr	r3, [r3, #32]
 8006c0a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	69db      	ldr	r3, [r3, #28]
 8006c22:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c24:	68fa      	ldr	r2, [r7, #12]
 8006c26:	4b1e      	ldr	r3, [pc, #120]	; (8006ca0 <TIM_OC4_SetConfig+0xa4>)
 8006c28:	4013      	ands	r3, r2
 8006c2a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c32:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	021b      	lsls	r3, r3, #8
 8006c3a:	68fa      	ldr	r2, [r7, #12]
 8006c3c:	4313      	orrs	r3, r2
 8006c3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c40:	693b      	ldr	r3, [r7, #16]
 8006c42:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c46:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c48:	683b      	ldr	r3, [r7, #0]
 8006c4a:	689b      	ldr	r3, [r3, #8]
 8006c4c:	031b      	lsls	r3, r3, #12
 8006c4e:	693a      	ldr	r2, [r7, #16]
 8006c50:	4313      	orrs	r3, r2
 8006c52:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	4a13      	ldr	r2, [pc, #76]	; (8006ca4 <TIM_OC4_SetConfig+0xa8>)
 8006c58:	4293      	cmp	r3, r2
 8006c5a:	d003      	beq.n	8006c64 <TIM_OC4_SetConfig+0x68>
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	4a12      	ldr	r2, [pc, #72]	; (8006ca8 <TIM_OC4_SetConfig+0xac>)
 8006c60:	4293      	cmp	r3, r2
 8006c62:	d109      	bne.n	8006c78 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c64:	697b      	ldr	r3, [r7, #20]
 8006c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	695b      	ldr	r3, [r3, #20]
 8006c70:	019b      	lsls	r3, r3, #6
 8006c72:	697a      	ldr	r2, [r7, #20]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	697a      	ldr	r2, [r7, #20]
 8006c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006c84:	683b      	ldr	r3, [r7, #0]
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	693a      	ldr	r2, [r7, #16]
 8006c90:	621a      	str	r2, [r3, #32]
}
 8006c92:	bf00      	nop
 8006c94:	371c      	adds	r7, #28
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	feff8fff 	.word	0xfeff8fff
 8006ca4:	40010000 	.word	0x40010000
 8006ca8:	40010400 	.word	0x40010400

08006cac <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006cac:	b480      	push	{r7}
 8006cae:	b087      	sub	sp, #28
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a1b      	ldr	r3, [r3, #32]
 8006cba:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006cbe:	687b      	ldr	r3, [r7, #4]
 8006cc0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6a1b      	ldr	r3, [r3, #32]
 8006cc6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	685b      	ldr	r3, [r3, #4]
 8006ccc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006cd2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006cd4:	68fa      	ldr	r2, [r7, #12]
 8006cd6:	4b1b      	ldr	r3, [pc, #108]	; (8006d44 <TIM_OC5_SetConfig+0x98>)
 8006cd8:	4013      	ands	r3, r2
 8006cda:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006cdc:	683b      	ldr	r3, [r7, #0]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	68fa      	ldr	r2, [r7, #12]
 8006ce2:	4313      	orrs	r3, r2
 8006ce4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006ce6:	693b      	ldr	r3, [r7, #16]
 8006ce8:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006cec:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	689b      	ldr	r3, [r3, #8]
 8006cf2:	041b      	lsls	r3, r3, #16
 8006cf4:	693a      	ldr	r2, [r7, #16]
 8006cf6:	4313      	orrs	r3, r2
 8006cf8:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	4a12      	ldr	r2, [pc, #72]	; (8006d48 <TIM_OC5_SetConfig+0x9c>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d003      	beq.n	8006d0a <TIM_OC5_SetConfig+0x5e>
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	4a11      	ldr	r2, [pc, #68]	; (8006d4c <TIM_OC5_SetConfig+0xa0>)
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d109      	bne.n	8006d1e <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d10:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	695b      	ldr	r3, [r3, #20]
 8006d16:	021b      	lsls	r3, r3, #8
 8006d18:	697a      	ldr	r2, [r7, #20]
 8006d1a:	4313      	orrs	r3, r2
 8006d1c:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d1e:	687b      	ldr	r3, [r7, #4]
 8006d20:	697a      	ldr	r2, [r7, #20]
 8006d22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	68fa      	ldr	r2, [r7, #12]
 8006d28:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	685a      	ldr	r2, [r3, #4]
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	693a      	ldr	r2, [r7, #16]
 8006d36:	621a      	str	r2, [r3, #32]
}
 8006d38:	bf00      	nop
 8006d3a:	371c      	adds	r7, #28
 8006d3c:	46bd      	mov	sp, r7
 8006d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d42:	4770      	bx	lr
 8006d44:	fffeff8f 	.word	0xfffeff8f
 8006d48:	40010000 	.word	0x40010000
 8006d4c:	40010400 	.word	0x40010400

08006d50 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b087      	sub	sp, #28
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	6078      	str	r0, [r7, #4]
 8006d58:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	6a1b      	ldr	r3, [r3, #32]
 8006d6a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006d76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006d78:	68fa      	ldr	r2, [r7, #12]
 8006d7a:	4b1c      	ldr	r3, [pc, #112]	; (8006dec <TIM_OC6_SetConfig+0x9c>)
 8006d7c:	4013      	ands	r3, r2
 8006d7e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006d80:	683b      	ldr	r3, [r7, #0]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	021b      	lsls	r3, r3, #8
 8006d86:	68fa      	ldr	r2, [r7, #12]
 8006d88:	4313      	orrs	r3, r2
 8006d8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006d92:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	689b      	ldr	r3, [r3, #8]
 8006d98:	051b      	lsls	r3, r3, #20
 8006d9a:	693a      	ldr	r2, [r7, #16]
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	4a13      	ldr	r2, [pc, #76]	; (8006df0 <TIM_OC6_SetConfig+0xa0>)
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d003      	beq.n	8006db0 <TIM_OC6_SetConfig+0x60>
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	4a12      	ldr	r2, [pc, #72]	; (8006df4 <TIM_OC6_SetConfig+0xa4>)
 8006dac:	4293      	cmp	r3, r2
 8006dae:	d109      	bne.n	8006dc4 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006db0:	697b      	ldr	r3, [r7, #20]
 8006db2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006db6:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	695b      	ldr	r3, [r3, #20]
 8006dbc:	029b      	lsls	r3, r3, #10
 8006dbe:	697a      	ldr	r2, [r7, #20]
 8006dc0:	4313      	orrs	r3, r2
 8006dc2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	697a      	ldr	r2, [r7, #20]
 8006dc8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	68fa      	ldr	r2, [r7, #12]
 8006dce:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006dd0:	683b      	ldr	r3, [r7, #0]
 8006dd2:	685a      	ldr	r2, [r3, #4]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	621a      	str	r2, [r3, #32]
}
 8006dde:	bf00      	nop
 8006de0:	371c      	adds	r7, #28
 8006de2:	46bd      	mov	sp, r7
 8006de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de8:	4770      	bx	lr
 8006dea:	bf00      	nop
 8006dec:	feff8fff 	.word	0xfeff8fff
 8006df0:	40010000 	.word	0x40010000
 8006df4:	40010400 	.word	0x40010400

08006df8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006df8:	b480      	push	{r7}
 8006dfa:	b087      	sub	sp, #28
 8006dfc:	af00      	add	r7, sp, #0
 8006dfe:	60f8      	str	r0, [r7, #12]
 8006e00:	60b9      	str	r1, [r7, #8]
 8006e02:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	6a1b      	ldr	r3, [r3, #32]
 8006e08:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	6a1b      	ldr	r3, [r3, #32]
 8006e0e:	f023 0201 	bic.w	r2, r3, #1
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	699b      	ldr	r3, [r3, #24]
 8006e1a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e1c:	693b      	ldr	r3, [r7, #16]
 8006e1e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e22:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	011b      	lsls	r3, r3, #4
 8006e28:	693a      	ldr	r2, [r7, #16]
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f023 030a 	bic.w	r3, r3, #10
 8006e34:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e36:	697a      	ldr	r2, [r7, #20]
 8006e38:	68bb      	ldr	r3, [r7, #8]
 8006e3a:	4313      	orrs	r3, r2
 8006e3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	693a      	ldr	r2, [r7, #16]
 8006e42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	697a      	ldr	r2, [r7, #20]
 8006e48:	621a      	str	r2, [r3, #32]
}
 8006e4a:	bf00      	nop
 8006e4c:	371c      	adds	r7, #28
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e54:	4770      	bx	lr

08006e56 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e56:	b480      	push	{r7}
 8006e58:	b087      	sub	sp, #28
 8006e5a:	af00      	add	r7, sp, #0
 8006e5c:	60f8      	str	r0, [r7, #12]
 8006e5e:	60b9      	str	r1, [r7, #8]
 8006e60:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6a1b      	ldr	r3, [r3, #32]
 8006e66:	f023 0210 	bic.w	r2, r3, #16
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	699b      	ldr	r3, [r3, #24]
 8006e72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	6a1b      	ldr	r3, [r3, #32]
 8006e78:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e80:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	031b      	lsls	r3, r3, #12
 8006e86:	697a      	ldr	r2, [r7, #20]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e8c:	693b      	ldr	r3, [r7, #16]
 8006e8e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e92:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006e94:	68bb      	ldr	r3, [r7, #8]
 8006e96:	011b      	lsls	r3, r3, #4
 8006e98:	693a      	ldr	r2, [r7, #16]
 8006e9a:	4313      	orrs	r3, r2
 8006e9c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	697a      	ldr	r2, [r7, #20]
 8006ea2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	693a      	ldr	r2, [r7, #16]
 8006ea8:	621a      	str	r2, [r3, #32]
}
 8006eaa:	bf00      	nop
 8006eac:	371c      	adds	r7, #28
 8006eae:	46bd      	mov	sp, r7
 8006eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb4:	4770      	bx	lr

08006eb6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006eb6:	b480      	push	{r7}
 8006eb8:	b085      	sub	sp, #20
 8006eba:	af00      	add	r7, sp, #0
 8006ebc:	6078      	str	r0, [r7, #4]
 8006ebe:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	689b      	ldr	r3, [r3, #8]
 8006ec4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006ecc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006ece:	683a      	ldr	r2, [r7, #0]
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	f043 0307 	orr.w	r3, r3, #7
 8006ed8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	68fa      	ldr	r2, [r7, #12]
 8006ede:	609a      	str	r2, [r3, #8]
}
 8006ee0:	bf00      	nop
 8006ee2:	3714      	adds	r7, #20
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eea:	4770      	bx	lr

08006eec <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006eec:	b480      	push	{r7}
 8006eee:	b087      	sub	sp, #28
 8006ef0:	af00      	add	r7, sp, #0
 8006ef2:	60f8      	str	r0, [r7, #12]
 8006ef4:	60b9      	str	r1, [r7, #8]
 8006ef6:	607a      	str	r2, [r7, #4]
 8006ef8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	689b      	ldr	r3, [r3, #8]
 8006efe:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f06:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	021a      	lsls	r2, r3, #8
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	431a      	orrs	r2, r3
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	4313      	orrs	r3, r2
 8006f14:	697a      	ldr	r2, [r7, #20]
 8006f16:	4313      	orrs	r3, r2
 8006f18:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	697a      	ldr	r2, [r7, #20]
 8006f1e:	609a      	str	r2, [r3, #8]
}
 8006f20:	bf00      	nop
 8006f22:	371c      	adds	r7, #28
 8006f24:	46bd      	mov	sp, r7
 8006f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f2a:	4770      	bx	lr

08006f2c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f2c:	b480      	push	{r7}
 8006f2e:	b087      	sub	sp, #28
 8006f30:	af00      	add	r7, sp, #0
 8006f32:	60f8      	str	r0, [r7, #12]
 8006f34:	60b9      	str	r1, [r7, #8]
 8006f36:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f38:	68bb      	ldr	r3, [r7, #8]
 8006f3a:	f003 031f 	and.w	r3, r3, #31
 8006f3e:	2201      	movs	r2, #1
 8006f40:	fa02 f303 	lsl.w	r3, r2, r3
 8006f44:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6a1a      	ldr	r2, [r3, #32]
 8006f4a:	697b      	ldr	r3, [r7, #20]
 8006f4c:	43db      	mvns	r3, r3
 8006f4e:	401a      	ands	r2, r3
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	6a1a      	ldr	r2, [r3, #32]
 8006f58:	68bb      	ldr	r3, [r7, #8]
 8006f5a:	f003 031f 	and.w	r3, r3, #31
 8006f5e:	6879      	ldr	r1, [r7, #4]
 8006f60:	fa01 f303 	lsl.w	r3, r1, r3
 8006f64:	431a      	orrs	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	621a      	str	r2, [r3, #32]
}
 8006f6a:	bf00      	nop
 8006f6c:	371c      	adds	r7, #28
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr
	...

08006f78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f78:	b480      	push	{r7}
 8006f7a:	b085      	sub	sp, #20
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d101      	bne.n	8006f90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006f8c:	2302      	movs	r3, #2
 8006f8e:	e06d      	b.n	800706c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2201      	movs	r2, #1
 8006f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	2202      	movs	r2, #2
 8006f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	685b      	ldr	r3, [r3, #4]
 8006fa6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	689b      	ldr	r3, [r3, #8]
 8006fae:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	4a30      	ldr	r2, [pc, #192]	; (8007078 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006fb6:	4293      	cmp	r3, r2
 8006fb8:	d004      	beq.n	8006fc4 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	681b      	ldr	r3, [r3, #0]
 8006fbe:	4a2f      	ldr	r2, [pc, #188]	; (800707c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006fc0:	4293      	cmp	r3, r2
 8006fc2:	d108      	bne.n	8006fd6 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006fca:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	685b      	ldr	r3, [r3, #4]
 8006fd0:	68fa      	ldr	r2, [r7, #12]
 8006fd2:	4313      	orrs	r3, r2
 8006fd4:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fdc:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fde:	683b      	ldr	r3, [r7, #0]
 8006fe0:	681b      	ldr	r3, [r3, #0]
 8006fe2:	68fa      	ldr	r2, [r7, #12]
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68fa      	ldr	r2, [r7, #12]
 8006fee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	4a20      	ldr	r2, [pc, #128]	; (8007078 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006ff6:	4293      	cmp	r3, r2
 8006ff8:	d022      	beq.n	8007040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007002:	d01d      	beq.n	8007040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	4a1d      	ldr	r2, [pc, #116]	; (8007080 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800700a:	4293      	cmp	r3, r2
 800700c:	d018      	beq.n	8007040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800700e:	687b      	ldr	r3, [r7, #4]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	4a1c      	ldr	r2, [pc, #112]	; (8007084 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8007014:	4293      	cmp	r3, r2
 8007016:	d013      	beq.n	8007040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	4a1a      	ldr	r2, [pc, #104]	; (8007088 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800701e:	4293      	cmp	r3, r2
 8007020:	d00e      	beq.n	8007040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	4a15      	ldr	r2, [pc, #84]	; (800707c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8007028:	4293      	cmp	r3, r2
 800702a:	d009      	beq.n	8007040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	4a16      	ldr	r2, [pc, #88]	; (800708c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007032:	4293      	cmp	r3, r2
 8007034:	d004      	beq.n	8007040 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	4a15      	ldr	r2, [pc, #84]	; (8007090 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800703c:	4293      	cmp	r3, r2
 800703e:	d10c      	bne.n	800705a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007040:	68bb      	ldr	r3, [r7, #8]
 8007042:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007046:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007048:	683b      	ldr	r3, [r7, #0]
 800704a:	689b      	ldr	r3, [r3, #8]
 800704c:	68ba      	ldr	r2, [r7, #8]
 800704e:	4313      	orrs	r3, r2
 8007050:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	2201      	movs	r2, #1
 800705e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2200      	movs	r2, #0
 8007066:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800706a:	2300      	movs	r3, #0
}
 800706c:	4618      	mov	r0, r3
 800706e:	3714      	adds	r7, #20
 8007070:	46bd      	mov	sp, r7
 8007072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007076:	4770      	bx	lr
 8007078:	40010000 	.word	0x40010000
 800707c:	40010400 	.word	0x40010400
 8007080:	40000400 	.word	0x40000400
 8007084:	40000800 	.word	0x40000800
 8007088:	40000c00 	.word	0x40000c00
 800708c:	40014000 	.word	0x40014000
 8007090:	40001800 	.word	0x40001800

08007094 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007094:	b480      	push	{r7}
 8007096:	b083      	sub	sp, #12
 8007098:	af00      	add	r7, sp, #0
 800709a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800709c:	bf00      	nop
 800709e:	370c      	adds	r7, #12
 80070a0:	46bd      	mov	sp, r7
 80070a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a6:	4770      	bx	lr

080070a8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b083      	sub	sp, #12
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80070b0:	bf00      	nop
 80070b2:	370c      	adds	r7, #12
 80070b4:	46bd      	mov	sp, r7
 80070b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ba:	4770      	bx	lr

080070bc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80070c4:	bf00      	nop
 80070c6:	370c      	adds	r7, #12
 80070c8:	46bd      	mov	sp, r7
 80070ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ce:	4770      	bx	lr

080070d0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80070d0:	b580      	push	{r7, lr}
 80070d2:	b082      	sub	sp, #8
 80070d4:	af00      	add	r7, sp, #0
 80070d6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2b00      	cmp	r3, #0
 80070dc:	d101      	bne.n	80070e2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80070de:	2301      	movs	r3, #1
 80070e0:	e040      	b.n	8007164 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80070e6:	2b00      	cmp	r3, #0
 80070e8:	d106      	bne.n	80070f8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2200      	movs	r2, #0
 80070ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80070f2:	6878      	ldr	r0, [r7, #4]
 80070f4:	f7fb f800 	bl	80020f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2224      	movs	r2, #36	; 0x24
 80070fc:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	681a      	ldr	r2, [r3, #0]
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	681b      	ldr	r3, [r3, #0]
 8007108:	f022 0201 	bic.w	r2, r2, #1
 800710c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fbc0 	bl	8007894 <UART_SetConfig>
 8007114:	4603      	mov	r3, r0
 8007116:	2b01      	cmp	r3, #1
 8007118:	d101      	bne.n	800711e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800711a:	2301      	movs	r3, #1
 800711c:	e022      	b.n	8007164 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007122:	2b00      	cmp	r3, #0
 8007124:	d002      	beq.n	800712c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8007126:	6878      	ldr	r0, [r7, #4]
 8007128:	f000 fe18 	bl	8007d5c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	685a      	ldr	r2, [r3, #4]
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800713a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	689a      	ldr	r2, [r3, #8]
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800714a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	681a      	ldr	r2, [r3, #0]
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	f042 0201 	orr.w	r2, r2, #1
 800715a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 fe9f 	bl	8007ea0 <UART_CheckIdleState>
 8007162:	4603      	mov	r3, r0
}
 8007164:	4618      	mov	r0, r3
 8007166:	3708      	adds	r7, #8
 8007168:	46bd      	mov	sp, r7
 800716a:	bd80      	pop	{r7, pc}

0800716c <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800716c:	b480      	push	{r7}
 800716e:	b08b      	sub	sp, #44	; 0x2c
 8007170:	af00      	add	r7, sp, #0
 8007172:	60f8      	str	r0, [r7, #12]
 8007174:	60b9      	str	r1, [r7, #8]
 8007176:	4613      	mov	r3, r2
 8007178:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800717e:	2b20      	cmp	r3, #32
 8007180:	d147      	bne.n	8007212 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 8007182:	68bb      	ldr	r3, [r7, #8]
 8007184:	2b00      	cmp	r3, #0
 8007186:	d002      	beq.n	800718e <HAL_UART_Transmit_IT+0x22>
 8007188:	88fb      	ldrh	r3, [r7, #6]
 800718a:	2b00      	cmp	r3, #0
 800718c:	d101      	bne.n	8007192 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800718e:	2301      	movs	r3, #1
 8007190:	e040      	b.n	8007214 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 8007192:	68fb      	ldr	r3, [r7, #12]
 8007194:	68ba      	ldr	r2, [r7, #8]
 8007196:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	88fa      	ldrh	r2, [r7, #6]
 800719c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	88fa      	ldrh	r2, [r7, #6]
 80071a4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	2200      	movs	r2, #0
 80071b2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80071b6:	68fb      	ldr	r3, [r7, #12]
 80071b8:	2221      	movs	r2, #33	; 0x21
 80071ba:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	689b      	ldr	r3, [r3, #8]
 80071c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80071c4:	d107      	bne.n	80071d6 <HAL_UART_Transmit_IT+0x6a>
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	691b      	ldr	r3, [r3, #16]
 80071ca:	2b00      	cmp	r3, #0
 80071cc:	d103      	bne.n	80071d6 <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	4a13      	ldr	r2, [pc, #76]	; (8007220 <HAL_UART_Transmit_IT+0xb4>)
 80071d2:	66da      	str	r2, [r3, #108]	; 0x6c
 80071d4:	e002      	b.n	80071dc <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 80071d6:	68fb      	ldr	r3, [r7, #12]
 80071d8:	4a12      	ldr	r2, [pc, #72]	; (8007224 <HAL_UART_Transmit_IT+0xb8>)
 80071da:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	e853 3f00 	ldrex	r3, [r3]
 80071e8:	613b      	str	r3, [r7, #16]
   return(result);
 80071ea:	693b      	ldr	r3, [r7, #16]
 80071ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80071f0:	627b      	str	r3, [r7, #36]	; 0x24
 80071f2:	68fb      	ldr	r3, [r7, #12]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	461a      	mov	r2, r3
 80071f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071fa:	623b      	str	r3, [r7, #32]
 80071fc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071fe:	69f9      	ldr	r1, [r7, #28]
 8007200:	6a3a      	ldr	r2, [r7, #32]
 8007202:	e841 2300 	strex	r3, r2, [r1]
 8007206:	61bb      	str	r3, [r7, #24]
   return(result);
 8007208:	69bb      	ldr	r3, [r7, #24]
 800720a:	2b00      	cmp	r3, #0
 800720c:	d1e6      	bne.n	80071dc <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800720e:	2300      	movs	r3, #0
 8007210:	e000      	b.n	8007214 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 8007212:	2302      	movs	r3, #2
  }
}
 8007214:	4618      	mov	r0, r3
 8007216:	372c      	adds	r7, #44	; 0x2c
 8007218:	46bd      	mov	sp, r7
 800721a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721e:	4770      	bx	lr
 8007220:	080083d3 	.word	0x080083d3
 8007224:	0800831d 	.word	0x0800831d

08007228 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b08a      	sub	sp, #40	; 0x28
 800722c:	af00      	add	r7, sp, #0
 800722e:	60f8      	str	r0, [r7, #12]
 8007230:	60b9      	str	r1, [r7, #8]
 8007232:	4613      	mov	r3, r2
 8007234:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800723c:	2b20      	cmp	r3, #32
 800723e:	d132      	bne.n	80072a6 <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d002      	beq.n	800724c <HAL_UART_Receive_IT+0x24>
 8007246:	88fb      	ldrh	r3, [r7, #6]
 8007248:	2b00      	cmp	r3, #0
 800724a:	d101      	bne.n	8007250 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800724c:	2301      	movs	r3, #1
 800724e:	e02b      	b.n	80072a8 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	2200      	movs	r2, #0
 8007254:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	685b      	ldr	r3, [r3, #4]
 800725c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007260:	2b00      	cmp	r3, #0
 8007262:	d018      	beq.n	8007296 <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	e853 3f00 	ldrex	r3, [r3]
 8007270:	613b      	str	r3, [r7, #16]
   return(result);
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007278:	627b      	str	r3, [r7, #36]	; 0x24
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	461a      	mov	r2, r3
 8007280:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007282:	623b      	str	r3, [r7, #32]
 8007284:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007286:	69f9      	ldr	r1, [r7, #28]
 8007288:	6a3a      	ldr	r2, [r7, #32]
 800728a:	e841 2300 	strex	r3, r2, [r1]
 800728e:	61bb      	str	r3, [r7, #24]
   return(result);
 8007290:	69bb      	ldr	r3, [r7, #24]
 8007292:	2b00      	cmp	r3, #0
 8007294:	d1e6      	bne.n	8007264 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007296:	88fb      	ldrh	r3, [r7, #6]
 8007298:	461a      	mov	r2, r3
 800729a:	68b9      	ldr	r1, [r7, #8]
 800729c:	68f8      	ldr	r0, [r7, #12]
 800729e:	f000 fefd 	bl	800809c <UART_Start_Receive_IT>
 80072a2:	4603      	mov	r3, r0
 80072a4:	e000      	b.n	80072a8 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 80072a6:	2302      	movs	r3, #2
  }
}
 80072a8:	4618      	mov	r0, r3
 80072aa:	3728      	adds	r7, #40	; 0x28
 80072ac:	46bd      	mov	sp, r7
 80072ae:	bd80      	pop	{r7, pc}

080072b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b0ba      	sub	sp, #232	; 0xe8
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	69db      	ldr	r3, [r3, #28]
 80072be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	689b      	ldr	r3, [r3, #8]
 80072d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80072d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80072da:	f640 030f 	movw	r3, #2063	; 0x80f
 80072de:	4013      	ands	r3, r2
 80072e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80072e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d115      	bne.n	8007318 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80072ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072f0:	f003 0320 	and.w	r3, r3, #32
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d00f      	beq.n	8007318 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80072f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072fc:	f003 0320 	and.w	r3, r3, #32
 8007300:	2b00      	cmp	r3, #0
 8007302:	d009      	beq.n	8007318 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 8297 	beq.w	800783c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	4798      	blx	r3
      }
      return;
 8007316:	e291      	b.n	800783c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007318:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800731c:	2b00      	cmp	r3, #0
 800731e:	f000 8117 	beq.w	8007550 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8007322:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007326:	f003 0301 	and.w	r3, r3, #1
 800732a:	2b00      	cmp	r3, #0
 800732c:	d106      	bne.n	800733c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800732e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007332:	4b85      	ldr	r3, [pc, #532]	; (8007548 <HAL_UART_IRQHandler+0x298>)
 8007334:	4013      	ands	r3, r2
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 810a 	beq.w	8007550 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800733c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007340:	f003 0301 	and.w	r3, r3, #1
 8007344:	2b00      	cmp	r3, #0
 8007346:	d011      	beq.n	800736c <HAL_UART_IRQHandler+0xbc>
 8007348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800734c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007350:	2b00      	cmp	r3, #0
 8007352:	d00b      	beq.n	800736c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	2201      	movs	r2, #1
 800735a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007362:	f043 0201 	orr.w	r2, r3, #1
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800736c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007370:	f003 0302 	and.w	r3, r3, #2
 8007374:	2b00      	cmp	r3, #0
 8007376:	d011      	beq.n	800739c <HAL_UART_IRQHandler+0xec>
 8007378:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800737c:	f003 0301 	and.w	r3, r3, #1
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00b      	beq.n	800739c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	2202      	movs	r2, #2
 800738a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007392:	f043 0204 	orr.w	r2, r3, #4
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800739c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073a0:	f003 0304 	and.w	r3, r3, #4
 80073a4:	2b00      	cmp	r3, #0
 80073a6:	d011      	beq.n	80073cc <HAL_UART_IRQHandler+0x11c>
 80073a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073ac:	f003 0301 	and.w	r3, r3, #1
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00b      	beq.n	80073cc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2204      	movs	r2, #4
 80073ba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073c2:	f043 0202 	orr.w	r2, r3, #2
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80073cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80073d0:	f003 0308 	and.w	r3, r3, #8
 80073d4:	2b00      	cmp	r3, #0
 80073d6:	d017      	beq.n	8007408 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80073d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80073dc:	f003 0320 	and.w	r3, r3, #32
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d105      	bne.n	80073f0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80073e4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80073e8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d00b      	beq.n	8007408 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	2208      	movs	r2, #8
 80073f6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80073fe:	f043 0208 	orr.w	r2, r3, #8
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007408:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800740c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007410:	2b00      	cmp	r3, #0
 8007412:	d012      	beq.n	800743a <HAL_UART_IRQHandler+0x18a>
 8007414:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007418:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800741c:	2b00      	cmp	r3, #0
 800741e:	d00c      	beq.n	800743a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007428:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007430:	f043 0220 	orr.w	r2, r3, #32
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 81fd 	beq.w	8007840 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8007446:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800744a:	f003 0320 	and.w	r3, r3, #32
 800744e:	2b00      	cmp	r3, #0
 8007450:	d00d      	beq.n	800746e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8007452:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007456:	f003 0320 	and.w	r3, r3, #32
 800745a:	2b00      	cmp	r3, #0
 800745c:	d007      	beq.n	800746e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007462:	2b00      	cmp	r3, #0
 8007464:	d003      	beq.n	800746e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800746a:	6878      	ldr	r0, [r7, #4]
 800746c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007474:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	689b      	ldr	r3, [r3, #8]
 800747e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007482:	2b40      	cmp	r3, #64	; 0x40
 8007484:	d005      	beq.n	8007492 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007486:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800748a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800748e:	2b00      	cmp	r3, #0
 8007490:	d04f      	beq.n	8007532 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007492:	6878      	ldr	r0, [r7, #4]
 8007494:	f000 fec8 	bl	8008228 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	689b      	ldr	r3, [r3, #8]
 800749e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80074a2:	2b40      	cmp	r3, #64	; 0x40
 80074a4:	d141      	bne.n	800752a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	3308      	adds	r3, #8
 80074ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80074b4:	e853 3f00 	ldrex	r3, [r3]
 80074b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80074bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80074c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80074c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	681b      	ldr	r3, [r3, #0]
 80074cc:	3308      	adds	r3, #8
 80074ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80074d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80074d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80074de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80074e2:	e841 2300 	strex	r3, r2, [r1]
 80074e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80074ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d1d9      	bne.n	80074a6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074f6:	2b00      	cmp	r3, #0
 80074f8:	d013      	beq.n	8007522 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80074fe:	4a13      	ldr	r2, [pc, #76]	; (800754c <HAL_UART_IRQHandler+0x29c>)
 8007500:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007506:	4618      	mov	r0, r3
 8007508:	f7fb f931 	bl	800276e <HAL_DMA_Abort_IT>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d017      	beq.n	8007542 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007516:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007518:	687a      	ldr	r2, [r7, #4]
 800751a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800751c:	4610      	mov	r0, r2
 800751e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007520:	e00f      	b.n	8007542 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007522:	6878      	ldr	r0, [r7, #4]
 8007524:	f000 f9a0 	bl	8007868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007528:	e00b      	b.n	8007542 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800752a:	6878      	ldr	r0, [r7, #4]
 800752c:	f000 f99c 	bl	8007868 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007530:	e007      	b.n	8007542 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f998 	bl	8007868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	2200      	movs	r2, #0
 800753c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 8007540:	e17e      	b.n	8007840 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007542:	bf00      	nop
    return;
 8007544:	e17c      	b.n	8007840 <HAL_UART_IRQHandler+0x590>
 8007546:	bf00      	nop
 8007548:	04000120 	.word	0x04000120
 800754c:	080082f1 	.word	0x080082f1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007554:	2b01      	cmp	r3, #1
 8007556:	f040 814c 	bne.w	80077f2 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800755a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800755e:	f003 0310 	and.w	r3, r3, #16
 8007562:	2b00      	cmp	r3, #0
 8007564:	f000 8145 	beq.w	80077f2 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007568:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800756c:	f003 0310 	and.w	r3, r3, #16
 8007570:	2b00      	cmp	r3, #0
 8007572:	f000 813e 	beq.w	80077f2 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	2210      	movs	r2, #16
 800757c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	689b      	ldr	r3, [r3, #8]
 8007584:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007588:	2b40      	cmp	r3, #64	; 0x40
 800758a:	f040 80b6 	bne.w	80076fa <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	685b      	ldr	r3, [r3, #4]
 8007596:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800759a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800759e:	2b00      	cmp	r3, #0
 80075a0:	f000 8150 	beq.w	8007844 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80075aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075ae:	429a      	cmp	r2, r3
 80075b0:	f080 8148 	bcs.w	8007844 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80075ba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075c2:	69db      	ldr	r3, [r3, #28]
 80075c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075c8:	f000 8086 	beq.w	80076d8 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075d8:	e853 3f00 	ldrex	r3, [r3]
 80075dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80075e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80075e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80075e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	461a      	mov	r2, r3
 80075f2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80075f6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80075fa:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007602:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007606:	e841 2300 	strex	r3, r2, [r1]
 800760a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800760e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007612:	2b00      	cmp	r3, #0
 8007614:	d1da      	bne.n	80075cc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	3308      	adds	r3, #8
 800761c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007620:	e853 3f00 	ldrex	r3, [r3]
 8007624:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007626:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007628:	f023 0301 	bic.w	r3, r3, #1
 800762c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	3308      	adds	r3, #8
 8007636:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800763a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800763e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007640:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007642:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007646:	e841 2300 	strex	r3, r2, [r1]
 800764a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800764c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800764e:	2b00      	cmp	r3, #0
 8007650:	d1e1      	bne.n	8007616 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	3308      	adds	r3, #8
 8007658:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800765a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800765c:	e853 3f00 	ldrex	r3, [r3]
 8007660:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007662:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007664:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007668:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	3308      	adds	r3, #8
 8007672:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007676:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007678:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800767a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800767c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800767e:	e841 2300 	strex	r3, r2, [r1]
 8007682:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007684:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007686:	2b00      	cmp	r3, #0
 8007688:	d1e3      	bne.n	8007652 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2220      	movs	r2, #32
 800768e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2200      	movs	r2, #0
 8007696:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800769e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80076a0:	e853 3f00 	ldrex	r3, [r3]
 80076a4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80076a6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80076a8:	f023 0310 	bic.w	r3, r3, #16
 80076ac:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	461a      	mov	r2, r3
 80076b6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80076ba:	65bb      	str	r3, [r7, #88]	; 0x58
 80076bc:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076be:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80076c0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80076c2:	e841 2300 	strex	r3, r2, [r1]
 80076c6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80076c8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d1e4      	bne.n	8007698 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80076d2:	4618      	mov	r0, r3
 80076d4:	f7fa ffdb 	bl	800268e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	2202      	movs	r2, #2
 80076dc:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80076e4:	687b      	ldr	r3, [r7, #4]
 80076e6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80076ea:	b29b      	uxth	r3, r3
 80076ec:	1ad3      	subs	r3, r2, r3
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	4619      	mov	r1, r3
 80076f2:	6878      	ldr	r0, [r7, #4]
 80076f4:	f000 f8c2 	bl	800787c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80076f8:	e0a4      	b.n	8007844 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007706:	b29b      	uxth	r3, r3
 8007708:	1ad3      	subs	r3, r2, r3
 800770a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007714:	b29b      	uxth	r3, r3
 8007716:	2b00      	cmp	r3, #0
 8007718:	f000 8096 	beq.w	8007848 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800771c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007720:	2b00      	cmp	r3, #0
 8007722:	f000 8091 	beq.w	8007848 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007726:	687b      	ldr	r3, [r7, #4]
 8007728:	681b      	ldr	r3, [r3, #0]
 800772a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800772e:	e853 3f00 	ldrex	r3, [r3]
 8007732:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007736:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800773a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	461a      	mov	r2, r3
 8007744:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007748:	647b      	str	r3, [r7, #68]	; 0x44
 800774a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800774c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800774e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007750:	e841 2300 	strex	r3, r2, [r1]
 8007754:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007756:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007758:	2b00      	cmp	r3, #0
 800775a:	d1e4      	bne.n	8007726 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	3308      	adds	r3, #8
 8007762:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007766:	e853 3f00 	ldrex	r3, [r3]
 800776a:	623b      	str	r3, [r7, #32]
   return(result);
 800776c:	6a3b      	ldr	r3, [r7, #32]
 800776e:	f023 0301 	bic.w	r3, r3, #1
 8007772:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	3308      	adds	r3, #8
 800777c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007780:	633a      	str	r2, [r7, #48]	; 0x30
 8007782:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007784:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007786:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007788:	e841 2300 	strex	r3, r2, [r1]
 800778c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800778e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007790:	2b00      	cmp	r3, #0
 8007792:	d1e3      	bne.n	800775c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2220      	movs	r2, #32
 8007798:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	2200      	movs	r2, #0
 80077a6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077ae:	693b      	ldr	r3, [r7, #16]
 80077b0:	e853 3f00 	ldrex	r3, [r3]
 80077b4:	60fb      	str	r3, [r7, #12]
   return(result);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	f023 0310 	bic.w	r3, r3, #16
 80077bc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	461a      	mov	r2, r3
 80077c6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80077ca:	61fb      	str	r3, [r7, #28]
 80077cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80077ce:	69b9      	ldr	r1, [r7, #24]
 80077d0:	69fa      	ldr	r2, [r7, #28]
 80077d2:	e841 2300 	strex	r3, r2, [r1]
 80077d6:	617b      	str	r3, [r7, #20]
   return(result);
 80077d8:	697b      	ldr	r3, [r7, #20]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d1e4      	bne.n	80077a8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2202      	movs	r2, #2
 80077e2:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80077e4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80077e8:	4619      	mov	r1, r3
 80077ea:	6878      	ldr	r0, [r7, #4]
 80077ec:	f000 f846 	bl	800787c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80077f0:	e02a      	b.n	8007848 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80077f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80077f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d00e      	beq.n	800781c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80077fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007802:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007806:	2b00      	cmp	r3, #0
 8007808:	d008      	beq.n	800781c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800780e:	2b00      	cmp	r3, #0
 8007810:	d01c      	beq.n	800784c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007816:	6878      	ldr	r0, [r7, #4]
 8007818:	4798      	blx	r3
    }
    return;
 800781a:	e017      	b.n	800784c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800781c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007820:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007824:	2b00      	cmp	r3, #0
 8007826:	d012      	beq.n	800784e <HAL_UART_IRQHandler+0x59e>
 8007828:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800782c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007830:	2b00      	cmp	r3, #0
 8007832:	d00c      	beq.n	800784e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 8007834:	6878      	ldr	r0, [r7, #4]
 8007836:	f000 fe2c 	bl	8008492 <UART_EndTransmit_IT>
    return;
 800783a:	e008      	b.n	800784e <HAL_UART_IRQHandler+0x59e>
      return;
 800783c:	bf00      	nop
 800783e:	e006      	b.n	800784e <HAL_UART_IRQHandler+0x59e>
    return;
 8007840:	bf00      	nop
 8007842:	e004      	b.n	800784e <HAL_UART_IRQHandler+0x59e>
      return;
 8007844:	bf00      	nop
 8007846:	e002      	b.n	800784e <HAL_UART_IRQHandler+0x59e>
      return;
 8007848:	bf00      	nop
 800784a:	e000      	b.n	800784e <HAL_UART_IRQHandler+0x59e>
    return;
 800784c:	bf00      	nop
  }

}
 800784e:	37e8      	adds	r7, #232	; 0xe8
 8007850:	46bd      	mov	sp, r7
 8007852:	bd80      	pop	{r7, pc}

08007854 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007854:	b480      	push	{r7}
 8007856:	b083      	sub	sp, #12
 8007858:	af00      	add	r7, sp, #0
 800785a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800785c:	bf00      	nop
 800785e:	370c      	adds	r7, #12
 8007860:	46bd      	mov	sp, r7
 8007862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007866:	4770      	bx	lr

08007868 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007870:	bf00      	nop
 8007872:	370c      	adds	r7, #12
 8007874:	46bd      	mov	sp, r7
 8007876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800787a:	4770      	bx	lr

0800787c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800787c:	b480      	push	{r7}
 800787e:	b083      	sub	sp, #12
 8007880:	af00      	add	r7, sp, #0
 8007882:	6078      	str	r0, [r7, #4]
 8007884:	460b      	mov	r3, r1
 8007886:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007888:	bf00      	nop
 800788a:	370c      	adds	r7, #12
 800788c:	46bd      	mov	sp, r7
 800788e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007892:	4770      	bx	lr

08007894 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007894:	b580      	push	{r7, lr}
 8007896:	b088      	sub	sp, #32
 8007898:	af00      	add	r7, sp, #0
 800789a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	689a      	ldr	r2, [r3, #8]
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	691b      	ldr	r3, [r3, #16]
 80078a8:	431a      	orrs	r2, r3
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	695b      	ldr	r3, [r3, #20]
 80078ae:	431a      	orrs	r2, r3
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	69db      	ldr	r3, [r3, #28]
 80078b4:	4313      	orrs	r3, r2
 80078b6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	681a      	ldr	r2, [r3, #0]
 80078be:	4ba6      	ldr	r3, [pc, #664]	; (8007b58 <UART_SetConfig+0x2c4>)
 80078c0:	4013      	ands	r3, r2
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	6812      	ldr	r2, [r2, #0]
 80078c6:	6979      	ldr	r1, [r7, #20]
 80078c8:	430b      	orrs	r3, r1
 80078ca:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	685b      	ldr	r3, [r3, #4]
 80078d2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	68da      	ldr	r2, [r3, #12]
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	430a      	orrs	r2, r1
 80078e0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	699b      	ldr	r3, [r3, #24]
 80078e6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	6a1b      	ldr	r3, [r3, #32]
 80078ec:	697a      	ldr	r2, [r7, #20]
 80078ee:	4313      	orrs	r3, r2
 80078f0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	689b      	ldr	r3, [r3, #8]
 80078f8:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	697a      	ldr	r2, [r7, #20]
 8007902:	430a      	orrs	r2, r1
 8007904:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	4a94      	ldr	r2, [pc, #592]	; (8007b5c <UART_SetConfig+0x2c8>)
 800790c:	4293      	cmp	r3, r2
 800790e:	d120      	bne.n	8007952 <UART_SetConfig+0xbe>
 8007910:	4b93      	ldr	r3, [pc, #588]	; (8007b60 <UART_SetConfig+0x2cc>)
 8007912:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007916:	f003 0303 	and.w	r3, r3, #3
 800791a:	2b03      	cmp	r3, #3
 800791c:	d816      	bhi.n	800794c <UART_SetConfig+0xb8>
 800791e:	a201      	add	r2, pc, #4	; (adr r2, 8007924 <UART_SetConfig+0x90>)
 8007920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007924:	08007935 	.word	0x08007935
 8007928:	08007941 	.word	0x08007941
 800792c:	0800793b 	.word	0x0800793b
 8007930:	08007947 	.word	0x08007947
 8007934:	2301      	movs	r3, #1
 8007936:	77fb      	strb	r3, [r7, #31]
 8007938:	e150      	b.n	8007bdc <UART_SetConfig+0x348>
 800793a:	2302      	movs	r3, #2
 800793c:	77fb      	strb	r3, [r7, #31]
 800793e:	e14d      	b.n	8007bdc <UART_SetConfig+0x348>
 8007940:	2304      	movs	r3, #4
 8007942:	77fb      	strb	r3, [r7, #31]
 8007944:	e14a      	b.n	8007bdc <UART_SetConfig+0x348>
 8007946:	2308      	movs	r3, #8
 8007948:	77fb      	strb	r3, [r7, #31]
 800794a:	e147      	b.n	8007bdc <UART_SetConfig+0x348>
 800794c:	2310      	movs	r3, #16
 800794e:	77fb      	strb	r3, [r7, #31]
 8007950:	e144      	b.n	8007bdc <UART_SetConfig+0x348>
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	681b      	ldr	r3, [r3, #0]
 8007956:	4a83      	ldr	r2, [pc, #524]	; (8007b64 <UART_SetConfig+0x2d0>)
 8007958:	4293      	cmp	r3, r2
 800795a:	d132      	bne.n	80079c2 <UART_SetConfig+0x12e>
 800795c:	4b80      	ldr	r3, [pc, #512]	; (8007b60 <UART_SetConfig+0x2cc>)
 800795e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007962:	f003 030c 	and.w	r3, r3, #12
 8007966:	2b0c      	cmp	r3, #12
 8007968:	d828      	bhi.n	80079bc <UART_SetConfig+0x128>
 800796a:	a201      	add	r2, pc, #4	; (adr r2, 8007970 <UART_SetConfig+0xdc>)
 800796c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007970:	080079a5 	.word	0x080079a5
 8007974:	080079bd 	.word	0x080079bd
 8007978:	080079bd 	.word	0x080079bd
 800797c:	080079bd 	.word	0x080079bd
 8007980:	080079b1 	.word	0x080079b1
 8007984:	080079bd 	.word	0x080079bd
 8007988:	080079bd 	.word	0x080079bd
 800798c:	080079bd 	.word	0x080079bd
 8007990:	080079ab 	.word	0x080079ab
 8007994:	080079bd 	.word	0x080079bd
 8007998:	080079bd 	.word	0x080079bd
 800799c:	080079bd 	.word	0x080079bd
 80079a0:	080079b7 	.word	0x080079b7
 80079a4:	2300      	movs	r3, #0
 80079a6:	77fb      	strb	r3, [r7, #31]
 80079a8:	e118      	b.n	8007bdc <UART_SetConfig+0x348>
 80079aa:	2302      	movs	r3, #2
 80079ac:	77fb      	strb	r3, [r7, #31]
 80079ae:	e115      	b.n	8007bdc <UART_SetConfig+0x348>
 80079b0:	2304      	movs	r3, #4
 80079b2:	77fb      	strb	r3, [r7, #31]
 80079b4:	e112      	b.n	8007bdc <UART_SetConfig+0x348>
 80079b6:	2308      	movs	r3, #8
 80079b8:	77fb      	strb	r3, [r7, #31]
 80079ba:	e10f      	b.n	8007bdc <UART_SetConfig+0x348>
 80079bc:	2310      	movs	r3, #16
 80079be:	77fb      	strb	r3, [r7, #31]
 80079c0:	e10c      	b.n	8007bdc <UART_SetConfig+0x348>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	4a68      	ldr	r2, [pc, #416]	; (8007b68 <UART_SetConfig+0x2d4>)
 80079c8:	4293      	cmp	r3, r2
 80079ca:	d120      	bne.n	8007a0e <UART_SetConfig+0x17a>
 80079cc:	4b64      	ldr	r3, [pc, #400]	; (8007b60 <UART_SetConfig+0x2cc>)
 80079ce:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80079d2:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80079d6:	2b30      	cmp	r3, #48	; 0x30
 80079d8:	d013      	beq.n	8007a02 <UART_SetConfig+0x16e>
 80079da:	2b30      	cmp	r3, #48	; 0x30
 80079dc:	d814      	bhi.n	8007a08 <UART_SetConfig+0x174>
 80079de:	2b20      	cmp	r3, #32
 80079e0:	d009      	beq.n	80079f6 <UART_SetConfig+0x162>
 80079e2:	2b20      	cmp	r3, #32
 80079e4:	d810      	bhi.n	8007a08 <UART_SetConfig+0x174>
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d002      	beq.n	80079f0 <UART_SetConfig+0x15c>
 80079ea:	2b10      	cmp	r3, #16
 80079ec:	d006      	beq.n	80079fc <UART_SetConfig+0x168>
 80079ee:	e00b      	b.n	8007a08 <UART_SetConfig+0x174>
 80079f0:	2300      	movs	r3, #0
 80079f2:	77fb      	strb	r3, [r7, #31]
 80079f4:	e0f2      	b.n	8007bdc <UART_SetConfig+0x348>
 80079f6:	2302      	movs	r3, #2
 80079f8:	77fb      	strb	r3, [r7, #31]
 80079fa:	e0ef      	b.n	8007bdc <UART_SetConfig+0x348>
 80079fc:	2304      	movs	r3, #4
 80079fe:	77fb      	strb	r3, [r7, #31]
 8007a00:	e0ec      	b.n	8007bdc <UART_SetConfig+0x348>
 8007a02:	2308      	movs	r3, #8
 8007a04:	77fb      	strb	r3, [r7, #31]
 8007a06:	e0e9      	b.n	8007bdc <UART_SetConfig+0x348>
 8007a08:	2310      	movs	r3, #16
 8007a0a:	77fb      	strb	r3, [r7, #31]
 8007a0c:	e0e6      	b.n	8007bdc <UART_SetConfig+0x348>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a56      	ldr	r2, [pc, #344]	; (8007b6c <UART_SetConfig+0x2d8>)
 8007a14:	4293      	cmp	r3, r2
 8007a16:	d120      	bne.n	8007a5a <UART_SetConfig+0x1c6>
 8007a18:	4b51      	ldr	r3, [pc, #324]	; (8007b60 <UART_SetConfig+0x2cc>)
 8007a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a1e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007a22:	2bc0      	cmp	r3, #192	; 0xc0
 8007a24:	d013      	beq.n	8007a4e <UART_SetConfig+0x1ba>
 8007a26:	2bc0      	cmp	r3, #192	; 0xc0
 8007a28:	d814      	bhi.n	8007a54 <UART_SetConfig+0x1c0>
 8007a2a:	2b80      	cmp	r3, #128	; 0x80
 8007a2c:	d009      	beq.n	8007a42 <UART_SetConfig+0x1ae>
 8007a2e:	2b80      	cmp	r3, #128	; 0x80
 8007a30:	d810      	bhi.n	8007a54 <UART_SetConfig+0x1c0>
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d002      	beq.n	8007a3c <UART_SetConfig+0x1a8>
 8007a36:	2b40      	cmp	r3, #64	; 0x40
 8007a38:	d006      	beq.n	8007a48 <UART_SetConfig+0x1b4>
 8007a3a:	e00b      	b.n	8007a54 <UART_SetConfig+0x1c0>
 8007a3c:	2300      	movs	r3, #0
 8007a3e:	77fb      	strb	r3, [r7, #31]
 8007a40:	e0cc      	b.n	8007bdc <UART_SetConfig+0x348>
 8007a42:	2302      	movs	r3, #2
 8007a44:	77fb      	strb	r3, [r7, #31]
 8007a46:	e0c9      	b.n	8007bdc <UART_SetConfig+0x348>
 8007a48:	2304      	movs	r3, #4
 8007a4a:	77fb      	strb	r3, [r7, #31]
 8007a4c:	e0c6      	b.n	8007bdc <UART_SetConfig+0x348>
 8007a4e:	2308      	movs	r3, #8
 8007a50:	77fb      	strb	r3, [r7, #31]
 8007a52:	e0c3      	b.n	8007bdc <UART_SetConfig+0x348>
 8007a54:	2310      	movs	r3, #16
 8007a56:	77fb      	strb	r3, [r7, #31]
 8007a58:	e0c0      	b.n	8007bdc <UART_SetConfig+0x348>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a44      	ldr	r2, [pc, #272]	; (8007b70 <UART_SetConfig+0x2dc>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d125      	bne.n	8007ab0 <UART_SetConfig+0x21c>
 8007a64:	4b3e      	ldr	r3, [pc, #248]	; (8007b60 <UART_SetConfig+0x2cc>)
 8007a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a6a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a6e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a72:	d017      	beq.n	8007aa4 <UART_SetConfig+0x210>
 8007a74:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007a78:	d817      	bhi.n	8007aaa <UART_SetConfig+0x216>
 8007a7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a7e:	d00b      	beq.n	8007a98 <UART_SetConfig+0x204>
 8007a80:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007a84:	d811      	bhi.n	8007aaa <UART_SetConfig+0x216>
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d003      	beq.n	8007a92 <UART_SetConfig+0x1fe>
 8007a8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007a8e:	d006      	beq.n	8007a9e <UART_SetConfig+0x20a>
 8007a90:	e00b      	b.n	8007aaa <UART_SetConfig+0x216>
 8007a92:	2300      	movs	r3, #0
 8007a94:	77fb      	strb	r3, [r7, #31]
 8007a96:	e0a1      	b.n	8007bdc <UART_SetConfig+0x348>
 8007a98:	2302      	movs	r3, #2
 8007a9a:	77fb      	strb	r3, [r7, #31]
 8007a9c:	e09e      	b.n	8007bdc <UART_SetConfig+0x348>
 8007a9e:	2304      	movs	r3, #4
 8007aa0:	77fb      	strb	r3, [r7, #31]
 8007aa2:	e09b      	b.n	8007bdc <UART_SetConfig+0x348>
 8007aa4:	2308      	movs	r3, #8
 8007aa6:	77fb      	strb	r3, [r7, #31]
 8007aa8:	e098      	b.n	8007bdc <UART_SetConfig+0x348>
 8007aaa:	2310      	movs	r3, #16
 8007aac:	77fb      	strb	r3, [r7, #31]
 8007aae:	e095      	b.n	8007bdc <UART_SetConfig+0x348>
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	4a2f      	ldr	r2, [pc, #188]	; (8007b74 <UART_SetConfig+0x2e0>)
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d125      	bne.n	8007b06 <UART_SetConfig+0x272>
 8007aba:	4b29      	ldr	r3, [pc, #164]	; (8007b60 <UART_SetConfig+0x2cc>)
 8007abc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007ac0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8007ac4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ac8:	d017      	beq.n	8007afa <UART_SetConfig+0x266>
 8007aca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8007ace:	d817      	bhi.n	8007b00 <UART_SetConfig+0x26c>
 8007ad0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ad4:	d00b      	beq.n	8007aee <UART_SetConfig+0x25a>
 8007ad6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007ada:	d811      	bhi.n	8007b00 <UART_SetConfig+0x26c>
 8007adc:	2b00      	cmp	r3, #0
 8007ade:	d003      	beq.n	8007ae8 <UART_SetConfig+0x254>
 8007ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007ae4:	d006      	beq.n	8007af4 <UART_SetConfig+0x260>
 8007ae6:	e00b      	b.n	8007b00 <UART_SetConfig+0x26c>
 8007ae8:	2301      	movs	r3, #1
 8007aea:	77fb      	strb	r3, [r7, #31]
 8007aec:	e076      	b.n	8007bdc <UART_SetConfig+0x348>
 8007aee:	2302      	movs	r3, #2
 8007af0:	77fb      	strb	r3, [r7, #31]
 8007af2:	e073      	b.n	8007bdc <UART_SetConfig+0x348>
 8007af4:	2304      	movs	r3, #4
 8007af6:	77fb      	strb	r3, [r7, #31]
 8007af8:	e070      	b.n	8007bdc <UART_SetConfig+0x348>
 8007afa:	2308      	movs	r3, #8
 8007afc:	77fb      	strb	r3, [r7, #31]
 8007afe:	e06d      	b.n	8007bdc <UART_SetConfig+0x348>
 8007b00:	2310      	movs	r3, #16
 8007b02:	77fb      	strb	r3, [r7, #31]
 8007b04:	e06a      	b.n	8007bdc <UART_SetConfig+0x348>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	4a1b      	ldr	r2, [pc, #108]	; (8007b78 <UART_SetConfig+0x2e4>)
 8007b0c:	4293      	cmp	r3, r2
 8007b0e:	d138      	bne.n	8007b82 <UART_SetConfig+0x2ee>
 8007b10:	4b13      	ldr	r3, [pc, #76]	; (8007b60 <UART_SetConfig+0x2cc>)
 8007b12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b16:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8007b1a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b1e:	d017      	beq.n	8007b50 <UART_SetConfig+0x2bc>
 8007b20:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007b24:	d82a      	bhi.n	8007b7c <UART_SetConfig+0x2e8>
 8007b26:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b2a:	d00b      	beq.n	8007b44 <UART_SetConfig+0x2b0>
 8007b2c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007b30:	d824      	bhi.n	8007b7c <UART_SetConfig+0x2e8>
 8007b32:	2b00      	cmp	r3, #0
 8007b34:	d003      	beq.n	8007b3e <UART_SetConfig+0x2aa>
 8007b36:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007b3a:	d006      	beq.n	8007b4a <UART_SetConfig+0x2b6>
 8007b3c:	e01e      	b.n	8007b7c <UART_SetConfig+0x2e8>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	77fb      	strb	r3, [r7, #31]
 8007b42:	e04b      	b.n	8007bdc <UART_SetConfig+0x348>
 8007b44:	2302      	movs	r3, #2
 8007b46:	77fb      	strb	r3, [r7, #31]
 8007b48:	e048      	b.n	8007bdc <UART_SetConfig+0x348>
 8007b4a:	2304      	movs	r3, #4
 8007b4c:	77fb      	strb	r3, [r7, #31]
 8007b4e:	e045      	b.n	8007bdc <UART_SetConfig+0x348>
 8007b50:	2308      	movs	r3, #8
 8007b52:	77fb      	strb	r3, [r7, #31]
 8007b54:	e042      	b.n	8007bdc <UART_SetConfig+0x348>
 8007b56:	bf00      	nop
 8007b58:	efff69f3 	.word	0xefff69f3
 8007b5c:	40011000 	.word	0x40011000
 8007b60:	40023800 	.word	0x40023800
 8007b64:	40004400 	.word	0x40004400
 8007b68:	40004800 	.word	0x40004800
 8007b6c:	40004c00 	.word	0x40004c00
 8007b70:	40005000 	.word	0x40005000
 8007b74:	40011400 	.word	0x40011400
 8007b78:	40007800 	.word	0x40007800
 8007b7c:	2310      	movs	r3, #16
 8007b7e:	77fb      	strb	r3, [r7, #31]
 8007b80:	e02c      	b.n	8007bdc <UART_SetConfig+0x348>
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	4a72      	ldr	r2, [pc, #456]	; (8007d50 <UART_SetConfig+0x4bc>)
 8007b88:	4293      	cmp	r3, r2
 8007b8a:	d125      	bne.n	8007bd8 <UART_SetConfig+0x344>
 8007b8c:	4b71      	ldr	r3, [pc, #452]	; (8007d54 <UART_SetConfig+0x4c0>)
 8007b8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b92:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007b96:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007b9a:	d017      	beq.n	8007bcc <UART_SetConfig+0x338>
 8007b9c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8007ba0:	d817      	bhi.n	8007bd2 <UART_SetConfig+0x33e>
 8007ba2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007ba6:	d00b      	beq.n	8007bc0 <UART_SetConfig+0x32c>
 8007ba8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bac:	d811      	bhi.n	8007bd2 <UART_SetConfig+0x33e>
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d003      	beq.n	8007bba <UART_SetConfig+0x326>
 8007bb2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007bb6:	d006      	beq.n	8007bc6 <UART_SetConfig+0x332>
 8007bb8:	e00b      	b.n	8007bd2 <UART_SetConfig+0x33e>
 8007bba:	2300      	movs	r3, #0
 8007bbc:	77fb      	strb	r3, [r7, #31]
 8007bbe:	e00d      	b.n	8007bdc <UART_SetConfig+0x348>
 8007bc0:	2302      	movs	r3, #2
 8007bc2:	77fb      	strb	r3, [r7, #31]
 8007bc4:	e00a      	b.n	8007bdc <UART_SetConfig+0x348>
 8007bc6:	2304      	movs	r3, #4
 8007bc8:	77fb      	strb	r3, [r7, #31]
 8007bca:	e007      	b.n	8007bdc <UART_SetConfig+0x348>
 8007bcc:	2308      	movs	r3, #8
 8007bce:	77fb      	strb	r3, [r7, #31]
 8007bd0:	e004      	b.n	8007bdc <UART_SetConfig+0x348>
 8007bd2:	2310      	movs	r3, #16
 8007bd4:	77fb      	strb	r3, [r7, #31]
 8007bd6:	e001      	b.n	8007bdc <UART_SetConfig+0x348>
 8007bd8:	2310      	movs	r3, #16
 8007bda:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	69db      	ldr	r3, [r3, #28]
 8007be0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007be4:	d15b      	bne.n	8007c9e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8007be6:	7ffb      	ldrb	r3, [r7, #31]
 8007be8:	2b08      	cmp	r3, #8
 8007bea:	d828      	bhi.n	8007c3e <UART_SetConfig+0x3aa>
 8007bec:	a201      	add	r2, pc, #4	; (adr r2, 8007bf4 <UART_SetConfig+0x360>)
 8007bee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007bf2:	bf00      	nop
 8007bf4:	08007c19 	.word	0x08007c19
 8007bf8:	08007c21 	.word	0x08007c21
 8007bfc:	08007c29 	.word	0x08007c29
 8007c00:	08007c3f 	.word	0x08007c3f
 8007c04:	08007c2f 	.word	0x08007c2f
 8007c08:	08007c3f 	.word	0x08007c3f
 8007c0c:	08007c3f 	.word	0x08007c3f
 8007c10:	08007c3f 	.word	0x08007c3f
 8007c14:	08007c37 	.word	0x08007c37
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007c18:	f7fd fac8 	bl	80051ac <HAL_RCC_GetPCLK1Freq>
 8007c1c:	61b8      	str	r0, [r7, #24]
        break;
 8007c1e:	e013      	b.n	8007c48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007c20:	f7fd fad8 	bl	80051d4 <HAL_RCC_GetPCLK2Freq>
 8007c24:	61b8      	str	r0, [r7, #24]
        break;
 8007c26:	e00f      	b.n	8007c48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007c28:	4b4b      	ldr	r3, [pc, #300]	; (8007d58 <UART_SetConfig+0x4c4>)
 8007c2a:	61bb      	str	r3, [r7, #24]
        break;
 8007c2c:	e00c      	b.n	8007c48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007c2e:	f7fd f9ab 	bl	8004f88 <HAL_RCC_GetSysClockFreq>
 8007c32:	61b8      	str	r0, [r7, #24]
        break;
 8007c34:	e008      	b.n	8007c48 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007c36:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007c3a:	61bb      	str	r3, [r7, #24]
        break;
 8007c3c:	e004      	b.n	8007c48 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007c42:	2301      	movs	r3, #1
 8007c44:	77bb      	strb	r3, [r7, #30]
        break;
 8007c46:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007c48:	69bb      	ldr	r3, [r7, #24]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d074      	beq.n	8007d38 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007c4e:	69bb      	ldr	r3, [r7, #24]
 8007c50:	005a      	lsls	r2, r3, #1
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	685b      	ldr	r3, [r3, #4]
 8007c56:	085b      	lsrs	r3, r3, #1
 8007c58:	441a      	add	r2, r3
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c62:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007c64:	693b      	ldr	r3, [r7, #16]
 8007c66:	2b0f      	cmp	r3, #15
 8007c68:	d916      	bls.n	8007c98 <UART_SetConfig+0x404>
 8007c6a:	693b      	ldr	r3, [r7, #16]
 8007c6c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c70:	d212      	bcs.n	8007c98 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	b29b      	uxth	r3, r3
 8007c76:	f023 030f 	bic.w	r3, r3, #15
 8007c7a:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007c7c:	693b      	ldr	r3, [r7, #16]
 8007c7e:	085b      	lsrs	r3, r3, #1
 8007c80:	b29b      	uxth	r3, r3
 8007c82:	f003 0307 	and.w	r3, r3, #7
 8007c86:	b29a      	uxth	r2, r3
 8007c88:	89fb      	ldrh	r3, [r7, #14]
 8007c8a:	4313      	orrs	r3, r2
 8007c8c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	89fa      	ldrh	r2, [r7, #14]
 8007c94:	60da      	str	r2, [r3, #12]
 8007c96:	e04f      	b.n	8007d38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007c98:	2301      	movs	r3, #1
 8007c9a:	77bb      	strb	r3, [r7, #30]
 8007c9c:	e04c      	b.n	8007d38 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 8007c9e:	7ffb      	ldrb	r3, [r7, #31]
 8007ca0:	2b08      	cmp	r3, #8
 8007ca2:	d828      	bhi.n	8007cf6 <UART_SetConfig+0x462>
 8007ca4:	a201      	add	r2, pc, #4	; (adr r2, 8007cac <UART_SetConfig+0x418>)
 8007ca6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007caa:	bf00      	nop
 8007cac:	08007cd1 	.word	0x08007cd1
 8007cb0:	08007cd9 	.word	0x08007cd9
 8007cb4:	08007ce1 	.word	0x08007ce1
 8007cb8:	08007cf7 	.word	0x08007cf7
 8007cbc:	08007ce7 	.word	0x08007ce7
 8007cc0:	08007cf7 	.word	0x08007cf7
 8007cc4:	08007cf7 	.word	0x08007cf7
 8007cc8:	08007cf7 	.word	0x08007cf7
 8007ccc:	08007cef 	.word	0x08007cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007cd0:	f7fd fa6c 	bl	80051ac <HAL_RCC_GetPCLK1Freq>
 8007cd4:	61b8      	str	r0, [r7, #24]
        break;
 8007cd6:	e013      	b.n	8007d00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007cd8:	f7fd fa7c 	bl	80051d4 <HAL_RCC_GetPCLK2Freq>
 8007cdc:	61b8      	str	r0, [r7, #24]
        break;
 8007cde:	e00f      	b.n	8007d00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007ce0:	4b1d      	ldr	r3, [pc, #116]	; (8007d58 <UART_SetConfig+0x4c4>)
 8007ce2:	61bb      	str	r3, [r7, #24]
        break;
 8007ce4:	e00c      	b.n	8007d00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007ce6:	f7fd f94f 	bl	8004f88 <HAL_RCC_GetSysClockFreq>
 8007cea:	61b8      	str	r0, [r7, #24]
        break;
 8007cec:	e008      	b.n	8007d00 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007cee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007cf2:	61bb      	str	r3, [r7, #24]
        break;
 8007cf4:	e004      	b.n	8007d00 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8007cf6:	2300      	movs	r3, #0
 8007cf8:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	77bb      	strb	r3, [r7, #30]
        break;
 8007cfe:	bf00      	nop
    }

    if (pclk != 0U)
 8007d00:	69bb      	ldr	r3, [r7, #24]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d018      	beq.n	8007d38 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	685b      	ldr	r3, [r3, #4]
 8007d0a:	085a      	lsrs	r2, r3, #1
 8007d0c:	69bb      	ldr	r3, [r7, #24]
 8007d0e:	441a      	add	r2, r3
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	685b      	ldr	r3, [r3, #4]
 8007d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8007d18:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	2b0f      	cmp	r3, #15
 8007d1e:	d909      	bls.n	8007d34 <UART_SetConfig+0x4a0>
 8007d20:	693b      	ldr	r3, [r7, #16]
 8007d22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007d26:	d205      	bcs.n	8007d34 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	b29a      	uxth	r2, r3
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	60da      	str	r2, [r3, #12]
 8007d32:	e001      	b.n	8007d38 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007d34:	2301      	movs	r3, #1
 8007d36:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8007d44:	7fbb      	ldrb	r3, [r7, #30]
}
 8007d46:	4618      	mov	r0, r3
 8007d48:	3720      	adds	r7, #32
 8007d4a:	46bd      	mov	sp, r7
 8007d4c:	bd80      	pop	{r7, pc}
 8007d4e:	bf00      	nop
 8007d50:	40007c00 	.word	0x40007c00
 8007d54:	40023800 	.word	0x40023800
 8007d58:	00f42400 	.word	0x00f42400

08007d5c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b083      	sub	sp, #12
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d68:	f003 0301 	and.w	r3, r3, #1
 8007d6c:	2b00      	cmp	r3, #0
 8007d6e:	d00a      	beq.n	8007d86 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	685b      	ldr	r3, [r3, #4]
 8007d76:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	430a      	orrs	r2, r1
 8007d84:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007d8a:	f003 0302 	and.w	r3, r3, #2
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d00a      	beq.n	8007da8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8007d92:	687b      	ldr	r3, [r7, #4]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	685b      	ldr	r3, [r3, #4]
 8007d98:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	430a      	orrs	r2, r1
 8007da6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8007da8:	687b      	ldr	r3, [r7, #4]
 8007daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dac:	f003 0304 	and.w	r3, r3, #4
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d00a      	beq.n	8007dca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	685b      	ldr	r3, [r3, #4]
 8007dba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	430a      	orrs	r2, r1
 8007dc8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007dce:	f003 0308 	and.w	r3, r3, #8
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	d00a      	beq.n	8007dec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	681b      	ldr	r3, [r3, #0]
 8007dda:	685b      	ldr	r3, [r3, #4]
 8007ddc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	430a      	orrs	r2, r1
 8007dea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007df0:	f003 0310 	and.w	r3, r3, #16
 8007df4:	2b00      	cmp	r3, #0
 8007df6:	d00a      	beq.n	8007e0e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007df8:	687b      	ldr	r3, [r7, #4]
 8007dfa:	681b      	ldr	r3, [r3, #0]
 8007dfc:	689b      	ldr	r3, [r3, #8]
 8007dfe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	430a      	orrs	r2, r1
 8007e0c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e12:	f003 0320 	and.w	r3, r3, #32
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d00a      	beq.n	8007e30 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	430a      	orrs	r2, r1
 8007e2e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e34:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e38:	2b00      	cmp	r3, #0
 8007e3a:	d01a      	beq.n	8007e72 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	685b      	ldr	r3, [r3, #4]
 8007e42:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	430a      	orrs	r2, r1
 8007e50:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e56:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007e5a:	d10a      	bne.n	8007e72 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	681b      	ldr	r3, [r3, #0]
 8007e60:	685b      	ldr	r3, [r3, #4]
 8007e62:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	430a      	orrs	r2, r1
 8007e70:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e76:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d00a      	beq.n	8007e94 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	685b      	ldr	r3, [r3, #4]
 8007e84:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	430a      	orrs	r2, r1
 8007e92:	605a      	str	r2, [r3, #4]
  }
}
 8007e94:	bf00      	nop
 8007e96:	370c      	adds	r7, #12
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e9e:	4770      	bx	lr

08007ea0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8007ea0:	b580      	push	{r7, lr}
 8007ea2:	b086      	sub	sp, #24
 8007ea4:	af02      	add	r7, sp, #8
 8007ea6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8007eb0:	f7fa faac 	bl	800240c <HAL_GetTick>
 8007eb4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	f003 0308 	and.w	r3, r3, #8
 8007ec0:	2b08      	cmp	r3, #8
 8007ec2:	d10e      	bne.n	8007ee2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007ec4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007ec8:	9300      	str	r3, [sp, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	2200      	movs	r2, #0
 8007ece:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 f81b 	bl	8007f0e <UART_WaitOnFlagUntilTimeout>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	2b00      	cmp	r3, #0
 8007edc:	d001      	beq.n	8007ee2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ede:	2303      	movs	r3, #3
 8007ee0:	e011      	b.n	8007f06 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	2220      	movs	r2, #32
 8007ee6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	2220      	movs	r2, #32
 8007eec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	2200      	movs	r2, #0
 8007ef4:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	2200      	movs	r2, #0
 8007f00:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8007f04:	2300      	movs	r3, #0
}
 8007f06:	4618      	mov	r0, r3
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b09c      	sub	sp, #112	; 0x70
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	60f8      	str	r0, [r7, #12]
 8007f16:	60b9      	str	r1, [r7, #8]
 8007f18:	603b      	str	r3, [r7, #0]
 8007f1a:	4613      	mov	r3, r2
 8007f1c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007f1e:	e0a7      	b.n	8008070 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007f20:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007f26:	f000 80a3 	beq.w	8008070 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007f2a:	f7fa fa6f 	bl	800240c <HAL_GetTick>
 8007f2e:	4602      	mov	r2, r0
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	1ad3      	subs	r3, r2, r3
 8007f34:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007f36:	429a      	cmp	r2, r3
 8007f38:	d302      	bcc.n	8007f40 <UART_WaitOnFlagUntilTimeout+0x32>
 8007f3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d13f      	bne.n	8007fc0 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f46:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f48:	e853 3f00 	ldrex	r3, [r3]
 8007f4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007f4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f50:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007f54:	667b      	str	r3, [r7, #100]	; 0x64
 8007f56:	68fb      	ldr	r3, [r7, #12]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	461a      	mov	r2, r3
 8007f5c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f5e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007f60:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f62:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007f64:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007f66:	e841 2300 	strex	r3, r2, [r1]
 8007f6a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007f6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007f6e:	2b00      	cmp	r3, #0
 8007f70:	d1e6      	bne.n	8007f40 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	3308      	adds	r3, #8
 8007f78:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007f7c:	e853 3f00 	ldrex	r3, [r3]
 8007f80:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007f82:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007f84:	f023 0301 	bic.w	r3, r3, #1
 8007f88:	663b      	str	r3, [r7, #96]	; 0x60
 8007f8a:	68fb      	ldr	r3, [r7, #12]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	3308      	adds	r3, #8
 8007f90:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007f92:	64ba      	str	r2, [r7, #72]	; 0x48
 8007f94:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f96:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007f98:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007f9a:	e841 2300 	strex	r3, r2, [r1]
 8007f9e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007fa0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d1e5      	bne.n	8007f72 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	2220      	movs	r2, #32
 8007faa:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 8007fac:	68fb      	ldr	r3, [r7, #12]
 8007fae:	2220      	movs	r2, #32
 8007fb0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 8007fbc:	2303      	movs	r3, #3
 8007fbe:	e068      	b.n	8008092 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	681b      	ldr	r3, [r3, #0]
 8007fc4:	681b      	ldr	r3, [r3, #0]
 8007fc6:	f003 0304 	and.w	r3, r3, #4
 8007fca:	2b00      	cmp	r3, #0
 8007fcc:	d050      	beq.n	8008070 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	69db      	ldr	r3, [r3, #28]
 8007fd4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007fd8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007fdc:	d148      	bne.n	8008070 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	681b      	ldr	r3, [r3, #0]
 8007fe2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007fe6:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007fe8:	68fb      	ldr	r3, [r7, #12]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007fee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007ff0:	e853 3f00 	ldrex	r3, [r3]
 8007ff4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ff8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007ffc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007ffe:	68fb      	ldr	r3, [r7, #12]
 8008000:	681b      	ldr	r3, [r3, #0]
 8008002:	461a      	mov	r2, r3
 8008004:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008006:	637b      	str	r3, [r7, #52]	; 0x34
 8008008:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800800a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800800c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800800e:	e841 2300 	strex	r3, r2, [r1]
 8008012:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008016:	2b00      	cmp	r3, #0
 8008018:	d1e6      	bne.n	8007fe8 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800801a:	68fb      	ldr	r3, [r7, #12]
 800801c:	681b      	ldr	r3, [r3, #0]
 800801e:	3308      	adds	r3, #8
 8008020:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008022:	697b      	ldr	r3, [r7, #20]
 8008024:	e853 3f00 	ldrex	r3, [r3]
 8008028:	613b      	str	r3, [r7, #16]
   return(result);
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	f023 0301 	bic.w	r3, r3, #1
 8008030:	66bb      	str	r3, [r7, #104]	; 0x68
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	3308      	adds	r3, #8
 8008038:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800803a:	623a      	str	r2, [r7, #32]
 800803c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800803e:	69f9      	ldr	r1, [r7, #28]
 8008040:	6a3a      	ldr	r2, [r7, #32]
 8008042:	e841 2300 	strex	r3, r2, [r1]
 8008046:	61bb      	str	r3, [r7, #24]
   return(result);
 8008048:	69bb      	ldr	r3, [r7, #24]
 800804a:	2b00      	cmp	r3, #0
 800804c:	d1e5      	bne.n	800801a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	2220      	movs	r2, #32
 8008052:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2220      	movs	r2, #32
 8008058:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	2220      	movs	r2, #32
 8008060:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	2200      	movs	r2, #0
 8008068:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800806c:	2303      	movs	r3, #3
 800806e:	e010      	b.n	8008092 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	69da      	ldr	r2, [r3, #28]
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	4013      	ands	r3, r2
 800807a:	68ba      	ldr	r2, [r7, #8]
 800807c:	429a      	cmp	r2, r3
 800807e:	bf0c      	ite	eq
 8008080:	2301      	moveq	r3, #1
 8008082:	2300      	movne	r3, #0
 8008084:	b2db      	uxtb	r3, r3
 8008086:	461a      	mov	r2, r3
 8008088:	79fb      	ldrb	r3, [r7, #7]
 800808a:	429a      	cmp	r2, r3
 800808c:	f43f af48 	beq.w	8007f20 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008090:	2300      	movs	r3, #0
}
 8008092:	4618      	mov	r0, r3
 8008094:	3770      	adds	r7, #112	; 0x70
 8008096:	46bd      	mov	sp, r7
 8008098:	bd80      	pop	{r7, pc}
	...

0800809c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800809c:	b480      	push	{r7}
 800809e:	b097      	sub	sp, #92	; 0x5c
 80080a0:	af00      	add	r7, sp, #0
 80080a2:	60f8      	str	r0, [r7, #12]
 80080a4:	60b9      	str	r1, [r7, #8]
 80080a6:	4613      	mov	r3, r2
 80080a8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80080aa:	68fb      	ldr	r3, [r7, #12]
 80080ac:	68ba      	ldr	r2, [r7, #8]
 80080ae:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	88fa      	ldrh	r2, [r7, #6]
 80080b4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	88fa      	ldrh	r2, [r7, #6]
 80080bc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	689b      	ldr	r3, [r3, #8]
 80080ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80080ce:	d10e      	bne.n	80080ee <UART_Start_Receive_IT+0x52>
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	691b      	ldr	r3, [r3, #16]
 80080d4:	2b00      	cmp	r3, #0
 80080d6:	d105      	bne.n	80080e4 <UART_Start_Receive_IT+0x48>
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80080de:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080e2:	e02d      	b.n	8008140 <UART_Start_Receive_IT+0xa4>
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	22ff      	movs	r2, #255	; 0xff
 80080e8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80080ec:	e028      	b.n	8008140 <UART_Start_Receive_IT+0xa4>
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	2b00      	cmp	r3, #0
 80080f4:	d10d      	bne.n	8008112 <UART_Start_Receive_IT+0x76>
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	691b      	ldr	r3, [r3, #16]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d104      	bne.n	8008108 <UART_Start_Receive_IT+0x6c>
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	22ff      	movs	r2, #255	; 0xff
 8008102:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008106:	e01b      	b.n	8008140 <UART_Start_Receive_IT+0xa4>
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	227f      	movs	r2, #127	; 0x7f
 800810c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008110:	e016      	b.n	8008140 <UART_Start_Receive_IT+0xa4>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	689b      	ldr	r3, [r3, #8]
 8008116:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800811a:	d10d      	bne.n	8008138 <UART_Start_Receive_IT+0x9c>
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	691b      	ldr	r3, [r3, #16]
 8008120:	2b00      	cmp	r3, #0
 8008122:	d104      	bne.n	800812e <UART_Start_Receive_IT+0x92>
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	227f      	movs	r2, #127	; 0x7f
 8008128:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800812c:	e008      	b.n	8008140 <UART_Start_Receive_IT+0xa4>
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	223f      	movs	r2, #63	; 0x3f
 8008132:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8008136:	e003      	b.n	8008140 <UART_Start_Receive_IT+0xa4>
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	2200      	movs	r2, #0
 800813c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	2200      	movs	r2, #0
 8008144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	2222      	movs	r2, #34	; 0x22
 800814c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	3308      	adds	r3, #8
 8008156:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008158:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800815a:	e853 3f00 	ldrex	r3, [r3]
 800815e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008160:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008162:	f043 0301 	orr.w	r3, r3, #1
 8008166:	657b      	str	r3, [r7, #84]	; 0x54
 8008168:	68fb      	ldr	r3, [r7, #12]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	3308      	adds	r3, #8
 800816e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008170:	64ba      	str	r2, [r7, #72]	; 0x48
 8008172:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008174:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008176:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008178:	e841 2300 	strex	r3, r2, [r1]
 800817c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800817e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008180:	2b00      	cmp	r3, #0
 8008182:	d1e5      	bne.n	8008150 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008184:	68fb      	ldr	r3, [r7, #12]
 8008186:	689b      	ldr	r3, [r3, #8]
 8008188:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800818c:	d107      	bne.n	800819e <UART_Start_Receive_IT+0x102>
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	2b00      	cmp	r3, #0
 8008194:	d103      	bne.n	800819e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8008196:	68fb      	ldr	r3, [r7, #12]
 8008198:	4a21      	ldr	r2, [pc, #132]	; (8008220 <UART_Start_Receive_IT+0x184>)
 800819a:	669a      	str	r2, [r3, #104]	; 0x68
 800819c:	e002      	b.n	80081a4 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	4a20      	ldr	r2, [pc, #128]	; (8008224 <UART_Start_Receive_IT+0x188>)
 80081a2:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	691b      	ldr	r3, [r3, #16]
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d019      	beq.n	80081e0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80081b4:	e853 3f00 	ldrex	r3, [r3]
 80081b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081bc:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80081c0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	461a      	mov	r2, r3
 80081c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80081ca:	637b      	str	r3, [r7, #52]	; 0x34
 80081cc:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80081d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80081d2:	e841 2300 	strex	r3, r2, [r1]
 80081d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80081d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081da:	2b00      	cmp	r3, #0
 80081dc:	d1e6      	bne.n	80081ac <UART_Start_Receive_IT+0x110>
 80081de:	e018      	b.n	8008212 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	681b      	ldr	r3, [r3, #0]
 80081e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081e6:	697b      	ldr	r3, [r7, #20]
 80081e8:	e853 3f00 	ldrex	r3, [r3]
 80081ec:	613b      	str	r3, [r7, #16]
   return(result);
 80081ee:	693b      	ldr	r3, [r7, #16]
 80081f0:	f043 0320 	orr.w	r3, r3, #32
 80081f4:	653b      	str	r3, [r7, #80]	; 0x50
 80081f6:	68fb      	ldr	r3, [r7, #12]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	461a      	mov	r2, r3
 80081fc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80081fe:	623b      	str	r3, [r7, #32]
 8008200:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008202:	69f9      	ldr	r1, [r7, #28]
 8008204:	6a3a      	ldr	r2, [r7, #32]
 8008206:	e841 2300 	strex	r3, r2, [r1]
 800820a:	61bb      	str	r3, [r7, #24]
   return(result);
 800820c:	69bb      	ldr	r3, [r7, #24]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d1e6      	bne.n	80081e0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	375c      	adds	r7, #92	; 0x5c
 8008218:	46bd      	mov	sp, r7
 800821a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821e:	4770      	bx	lr
 8008220:	0800864d 	.word	0x0800864d
 8008224:	080084e7 	.word	0x080084e7

08008228 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008228:	b480      	push	{r7}
 800822a:	b095      	sub	sp, #84	; 0x54
 800822c:	af00      	add	r7, sp, #0
 800822e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	681b      	ldr	r3, [r3, #0]
 8008234:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008236:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008238:	e853 3f00 	ldrex	r3, [r3]
 800823c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800823e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008240:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008244:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	461a      	mov	r2, r3
 800824c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800824e:	643b      	str	r3, [r7, #64]	; 0x40
 8008250:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008252:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008254:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008256:	e841 2300 	strex	r3, r2, [r1]
 800825a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800825c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800825e:	2b00      	cmp	r3, #0
 8008260:	d1e6      	bne.n	8008230 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	681b      	ldr	r3, [r3, #0]
 8008266:	3308      	adds	r3, #8
 8008268:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800826a:	6a3b      	ldr	r3, [r7, #32]
 800826c:	e853 3f00 	ldrex	r3, [r3]
 8008270:	61fb      	str	r3, [r7, #28]
   return(result);
 8008272:	69fb      	ldr	r3, [r7, #28]
 8008274:	f023 0301 	bic.w	r3, r3, #1
 8008278:	64bb      	str	r3, [r7, #72]	; 0x48
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	3308      	adds	r3, #8
 8008280:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008282:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008284:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008286:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008288:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800828a:	e841 2300 	strex	r3, r2, [r1]
 800828e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008292:	2b00      	cmp	r3, #0
 8008294:	d1e5      	bne.n	8008262 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800829a:	2b01      	cmp	r3, #1
 800829c:	d118      	bne.n	80082d0 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	e853 3f00 	ldrex	r3, [r3]
 80082aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80082ac:	68bb      	ldr	r3, [r7, #8]
 80082ae:	f023 0310 	bic.w	r3, r3, #16
 80082b2:	647b      	str	r3, [r7, #68]	; 0x44
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	461a      	mov	r2, r3
 80082ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80082bc:	61bb      	str	r3, [r7, #24]
 80082be:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c0:	6979      	ldr	r1, [r7, #20]
 80082c2:	69ba      	ldr	r2, [r7, #24]
 80082c4:	e841 2300 	strex	r3, r2, [r1]
 80082c8:	613b      	str	r3, [r7, #16]
   return(result);
 80082ca:	693b      	ldr	r3, [r7, #16]
 80082cc:	2b00      	cmp	r3, #0
 80082ce:	d1e6      	bne.n	800829e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	2220      	movs	r2, #32
 80082d4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	2200      	movs	r2, #0
 80082dc:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	669a      	str	r2, [r3, #104]	; 0x68
}
 80082e4:	bf00      	nop
 80082e6:	3754      	adds	r7, #84	; 0x54
 80082e8:	46bd      	mov	sp, r7
 80082ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ee:	4770      	bx	lr

080082f0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80082f0:	b580      	push	{r7, lr}
 80082f2:	b084      	sub	sp, #16
 80082f4:	af00      	add	r7, sp, #0
 80082f6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082fc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	2200      	movs	r2, #0
 8008302:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	2200      	movs	r2, #0
 800830a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f7ff faaa 	bl	8007868 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008314:	bf00      	nop
 8008316:	3710      	adds	r7, #16
 8008318:	46bd      	mov	sp, r7
 800831a:	bd80      	pop	{r7, pc}

0800831c <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800831c:	b480      	push	{r7}
 800831e:	b08f      	sub	sp, #60	; 0x3c
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008328:	2b21      	cmp	r3, #33	; 0x21
 800832a:	d14c      	bne.n	80083c6 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008332:	b29b      	uxth	r3, r3
 8008334:	2b00      	cmp	r3, #0
 8008336:	d132      	bne.n	800839e <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800833e:	6a3b      	ldr	r3, [r7, #32]
 8008340:	e853 3f00 	ldrex	r3, [r3]
 8008344:	61fb      	str	r3, [r7, #28]
   return(result);
 8008346:	69fb      	ldr	r3, [r7, #28]
 8008348:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800834c:	637b      	str	r3, [r7, #52]	; 0x34
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	461a      	mov	r2, r3
 8008354:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008356:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008358:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800835a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800835c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800835e:	e841 2300 	strex	r3, r2, [r1]
 8008362:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008366:	2b00      	cmp	r3, #0
 8008368:	d1e6      	bne.n	8008338 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	e853 3f00 	ldrex	r3, [r3]
 8008376:	60bb      	str	r3, [r7, #8]
   return(result);
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800837e:	633b      	str	r3, [r7, #48]	; 0x30
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	461a      	mov	r2, r3
 8008386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008388:	61bb      	str	r3, [r7, #24]
 800838a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800838c:	6979      	ldr	r1, [r7, #20]
 800838e:	69ba      	ldr	r2, [r7, #24]
 8008390:	e841 2300 	strex	r3, r2, [r1]
 8008394:	613b      	str	r3, [r7, #16]
   return(result);
 8008396:	693b      	ldr	r3, [r7, #16]
 8008398:	2b00      	cmp	r3, #0
 800839a:	d1e6      	bne.n	800836a <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800839c:	e013      	b.n	80083c6 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083a2:	781a      	ldrb	r2, [r3, #0]
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80083ae:	1c5a      	adds	r2, r3, #1
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083ba:	b29b      	uxth	r3, r3
 80083bc:	3b01      	subs	r3, #1
 80083be:	b29a      	uxth	r2, r3
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 80083c6:	bf00      	nop
 80083c8:	373c      	adds	r7, #60	; 0x3c
 80083ca:	46bd      	mov	sp, r7
 80083cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d0:	4770      	bx	lr

080083d2 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 80083d2:	b480      	push	{r7}
 80083d4:	b091      	sub	sp, #68	; 0x44
 80083d6:	af00      	add	r7, sp, #0
 80083d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80083de:	2b21      	cmp	r3, #33	; 0x21
 80083e0:	d151      	bne.n	8008486 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	2b00      	cmp	r3, #0
 80083ec:	d132      	bne.n	8008454 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083f6:	e853 3f00 	ldrex	r3, [r3]
 80083fa:	623b      	str	r3, [r7, #32]
   return(result);
 80083fc:	6a3b      	ldr	r3, [r7, #32]
 80083fe:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008402:	63bb      	str	r3, [r7, #56]	; 0x38
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	461a      	mov	r2, r3
 800840a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800840c:	633b      	str	r3, [r7, #48]	; 0x30
 800840e:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008410:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008412:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008414:	e841 2300 	strex	r3, r2, [r1]
 8008418:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800841a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800841c:	2b00      	cmp	r3, #0
 800841e:	d1e6      	bne.n	80083ee <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008426:	693b      	ldr	r3, [r7, #16]
 8008428:	e853 3f00 	ldrex	r3, [r3]
 800842c:	60fb      	str	r3, [r7, #12]
   return(result);
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008434:	637b      	str	r3, [r7, #52]	; 0x34
 8008436:	687b      	ldr	r3, [r7, #4]
 8008438:	681b      	ldr	r3, [r3, #0]
 800843a:	461a      	mov	r2, r3
 800843c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800843e:	61fb      	str	r3, [r7, #28]
 8008440:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008442:	69b9      	ldr	r1, [r7, #24]
 8008444:	69fa      	ldr	r2, [r7, #28]
 8008446:	e841 2300 	strex	r3, r2, [r1]
 800844a:	617b      	str	r3, [r7, #20]
   return(result);
 800844c:	697b      	ldr	r3, [r7, #20]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d1e6      	bne.n	8008420 <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 8008452:	e018      	b.n	8008486 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008458:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800845a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800845c:	881b      	ldrh	r3, [r3, #0]
 800845e:	461a      	mov	r2, r3
 8008460:	687b      	ldr	r3, [r7, #4]
 8008462:	681b      	ldr	r3, [r3, #0]
 8008464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008468:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800846e:	1c9a      	adds	r2, r3, #2
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800847a:	b29b      	uxth	r3, r3
 800847c:	3b01      	subs	r3, #1
 800847e:	b29a      	uxth	r2, r3
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 8008486:	bf00      	nop
 8008488:	3744      	adds	r7, #68	; 0x44
 800848a:	46bd      	mov	sp, r7
 800848c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008490:	4770      	bx	lr

08008492 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008492:	b580      	push	{r7, lr}
 8008494:	b088      	sub	sp, #32
 8008496:	af00      	add	r7, sp, #0
 8008498:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	e853 3f00 	ldrex	r3, [r3]
 80084a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80084a8:	68bb      	ldr	r3, [r7, #8]
 80084aa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80084ae:	61fb      	str	r3, [r7, #28]
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	461a      	mov	r2, r3
 80084b6:	69fb      	ldr	r3, [r7, #28]
 80084b8:	61bb      	str	r3, [r7, #24]
 80084ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80084bc:	6979      	ldr	r1, [r7, #20]
 80084be:	69ba      	ldr	r2, [r7, #24]
 80084c0:	e841 2300 	strex	r3, r2, [r1]
 80084c4:	613b      	str	r3, [r7, #16]
   return(result);
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	2b00      	cmp	r3, #0
 80084ca:	d1e6      	bne.n	800849a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	2220      	movs	r2, #32
 80084d0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	2200      	movs	r2, #0
 80084d6:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80084d8:	6878      	ldr	r0, [r7, #4]
 80084da:	f7ff f9bb 	bl	8007854 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80084de:	bf00      	nop
 80084e0:	3720      	adds	r7, #32
 80084e2:	46bd      	mov	sp, r7
 80084e4:	bd80      	pop	{r7, pc}

080084e6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80084e6:	b580      	push	{r7, lr}
 80084e8:	b096      	sub	sp, #88	; 0x58
 80084ea:	af00      	add	r7, sp, #0
 80084ec:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80084f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80084fe:	2b22      	cmp	r3, #34	; 0x22
 8008500:	f040 8098 	bne.w	8008634 <UART_RxISR_8BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	681b      	ldr	r3, [r3, #0]
 8008508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800850a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800850e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008512:	b2d9      	uxtb	r1, r3
 8008514:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008518:	b2da      	uxtb	r2, r3
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800851e:	400a      	ands	r2, r1
 8008520:	b2d2      	uxtb	r2, r2
 8008522:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008528:	1c5a      	adds	r2, r3, #1
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008534:	b29b      	uxth	r3, r3
 8008536:	3b01      	subs	r3, #1
 8008538:	b29a      	uxth	r2, r3
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8008546:	b29b      	uxth	r3, r3
 8008548:	2b00      	cmp	r3, #0
 800854a:	d17b      	bne.n	8008644 <UART_RxISR_8BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008552:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008554:	e853 3f00 	ldrex	r3, [r3]
 8008558:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800855a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800855c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008560:	653b      	str	r3, [r7, #80]	; 0x50
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	461a      	mov	r2, r3
 8008568:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800856a:	647b      	str	r3, [r7, #68]	; 0x44
 800856c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800856e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008570:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008572:	e841 2300 	strex	r3, r2, [r1]
 8008576:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008578:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800857a:	2b00      	cmp	r3, #0
 800857c:	d1e6      	bne.n	800854c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	3308      	adds	r3, #8
 8008584:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008586:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008588:	e853 3f00 	ldrex	r3, [r3]
 800858c:	623b      	str	r3, [r7, #32]
   return(result);
 800858e:	6a3b      	ldr	r3, [r7, #32]
 8008590:	f023 0301 	bic.w	r3, r3, #1
 8008594:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	3308      	adds	r3, #8
 800859c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800859e:	633a      	str	r2, [r7, #48]	; 0x30
 80085a0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80085a6:	e841 2300 	strex	r3, r2, [r1]
 80085aa:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80085ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80085ae:	2b00      	cmp	r3, #0
 80085b0:	d1e5      	bne.n	800857e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	2220      	movs	r2, #32
 80085b6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	2200      	movs	r2, #0
 80085be:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	2200      	movs	r2, #0
 80085c4:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d12e      	bne.n	800862c <UART_RxISR_8BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	2200      	movs	r2, #0
 80085d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	e853 3f00 	ldrex	r3, [r3]
 80085e0:	60fb      	str	r3, [r7, #12]
   return(result);
 80085e2:	68fb      	ldr	r3, [r7, #12]
 80085e4:	f023 0310 	bic.w	r3, r3, #16
 80085e8:	64bb      	str	r3, [r7, #72]	; 0x48
 80085ea:	687b      	ldr	r3, [r7, #4]
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	461a      	mov	r2, r3
 80085f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80085f2:	61fb      	str	r3, [r7, #28]
 80085f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80085f6:	69b9      	ldr	r1, [r7, #24]
 80085f8:	69fa      	ldr	r2, [r7, #28]
 80085fa:	e841 2300 	strex	r3, r2, [r1]
 80085fe:	617b      	str	r3, [r7, #20]
   return(result);
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	2b00      	cmp	r3, #0
 8008604:	d1e6      	bne.n	80085d4 <UART_RxISR_8BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008606:	687b      	ldr	r3, [r7, #4]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	69db      	ldr	r3, [r3, #28]
 800860c:	f003 0310 	and.w	r3, r3, #16
 8008610:	2b10      	cmp	r3, #16
 8008612:	d103      	bne.n	800861c <UART_RxISR_8BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	2210      	movs	r2, #16
 800861a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008622:	4619      	mov	r1, r3
 8008624:	6878      	ldr	r0, [r7, #4]
 8008626:	f7ff f929 	bl	800787c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800862a:	e00b      	b.n	8008644 <UART_RxISR_8BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 800862c:	6878      	ldr	r0, [r7, #4]
 800862e:	f7f8 fdc7 	bl	80011c0 <HAL_UART_RxCpltCallback>
}
 8008632:	e007      	b.n	8008644 <UART_RxISR_8BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	699a      	ldr	r2, [r3, #24]
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f042 0208 	orr.w	r2, r2, #8
 8008642:	619a      	str	r2, [r3, #24]
}
 8008644:	bf00      	nop
 8008646:	3758      	adds	r7, #88	; 0x58
 8008648:	46bd      	mov	sp, r7
 800864a:	bd80      	pop	{r7, pc}

0800864c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b096      	sub	sp, #88	; 0x58
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800865a:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8008664:	2b22      	cmp	r3, #34	; 0x22
 8008666:	f040 8098 	bne.w	800879a <UART_RxISR_16BIT+0x14e>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008670:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8008678:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800867a:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 800867e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008682:	4013      	ands	r3, r2
 8008684:	b29a      	uxth	r2, r3
 8008686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008688:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800868e:	1c9a      	adds	r2, r3, #2
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800869a:	b29b      	uxth	r3, r3
 800869c:	3b01      	subs	r3, #1
 800869e:	b29a      	uxth	r2, r3
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80086a6:	687b      	ldr	r3, [r7, #4]
 80086a8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80086ac:	b29b      	uxth	r3, r3
 80086ae:	2b00      	cmp	r3, #0
 80086b0:	d17b      	bne.n	80087aa <UART_RxISR_16BIT+0x15e>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80086ba:	e853 3f00 	ldrex	r3, [r3]
 80086be:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80086c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80086c2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80086c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	681b      	ldr	r3, [r3, #0]
 80086cc:	461a      	mov	r2, r3
 80086ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80086d0:	643b      	str	r3, [r7, #64]	; 0x40
 80086d2:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80086d4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80086d6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80086d8:	e841 2300 	strex	r3, r2, [r1]
 80086dc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80086de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80086e0:	2b00      	cmp	r3, #0
 80086e2:	d1e6      	bne.n	80086b2 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	681b      	ldr	r3, [r3, #0]
 80086e8:	3308      	adds	r3, #8
 80086ea:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80086ec:	6a3b      	ldr	r3, [r7, #32]
 80086ee:	e853 3f00 	ldrex	r3, [r3]
 80086f2:	61fb      	str	r3, [r7, #28]
   return(result);
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	f023 0301 	bic.w	r3, r3, #1
 80086fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	3308      	adds	r3, #8
 8008702:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008704:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008706:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008708:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800870a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800870c:	e841 2300 	strex	r3, r2, [r1]
 8008710:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008712:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008714:	2b00      	cmp	r3, #0
 8008716:	d1e5      	bne.n	80086e4 <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008718:	687b      	ldr	r3, [r7, #4]
 800871a:	2220      	movs	r2, #32
 800871c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	2200      	movs	r2, #0
 8008724:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	2200      	movs	r2, #0
 800872a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008730:	2b01      	cmp	r3, #1
 8008732:	d12e      	bne.n	8008792 <UART_RxISR_16BIT+0x146>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008740:	68fb      	ldr	r3, [r7, #12]
 8008742:	e853 3f00 	ldrex	r3, [r3]
 8008746:	60bb      	str	r3, [r7, #8]
   return(result);
 8008748:	68bb      	ldr	r3, [r7, #8]
 800874a:	f023 0310 	bic.w	r3, r3, #16
 800874e:	647b      	str	r3, [r7, #68]	; 0x44
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	461a      	mov	r2, r3
 8008756:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008758:	61bb      	str	r3, [r7, #24]
 800875a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800875c:	6979      	ldr	r1, [r7, #20]
 800875e:	69ba      	ldr	r2, [r7, #24]
 8008760:	e841 2300 	strex	r3, r2, [r1]
 8008764:	613b      	str	r3, [r7, #16]
   return(result);
 8008766:	693b      	ldr	r3, [r7, #16]
 8008768:	2b00      	cmp	r3, #0
 800876a:	d1e6      	bne.n	800873a <UART_RxISR_16BIT+0xee>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	69db      	ldr	r3, [r3, #28]
 8008772:	f003 0310 	and.w	r3, r3, #16
 8008776:	2b10      	cmp	r3, #16
 8008778:	d103      	bne.n	8008782 <UART_RxISR_16BIT+0x136>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	2210      	movs	r2, #16
 8008780:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8008788:	4619      	mov	r1, r3
 800878a:	6878      	ldr	r0, [r7, #4]
 800878c:	f7ff f876 	bl	800787c <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008790:	e00b      	b.n	80087aa <UART_RxISR_16BIT+0x15e>
        HAL_UART_RxCpltCallback(huart);
 8008792:	6878      	ldr	r0, [r7, #4]
 8008794:	f7f8 fd14 	bl	80011c0 <HAL_UART_RxCpltCallback>
}
 8008798:	e007      	b.n	80087aa <UART_RxISR_16BIT+0x15e>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	681b      	ldr	r3, [r3, #0]
 800879e:	699a      	ldr	r2, [r3, #24]
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	f042 0208 	orr.w	r2, r2, #8
 80087a8:	619a      	str	r2, [r3, #24]
}
 80087aa:	bf00      	nop
 80087ac:	3758      	adds	r7, #88	; 0x58
 80087ae:	46bd      	mov	sp, r7
 80087b0:	bd80      	pop	{r7, pc}
	...

080087b4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80087b4:	b084      	sub	sp, #16
 80087b6:	b580      	push	{r7, lr}
 80087b8:	b084      	sub	sp, #16
 80087ba:	af00      	add	r7, sp, #0
 80087bc:	6078      	str	r0, [r7, #4]
 80087be:	f107 001c 	add.w	r0, r7, #28
 80087c2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80087c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d120      	bne.n	800880e <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087d0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	68da      	ldr	r2, [r3, #12]
 80087dc:	4b20      	ldr	r3, [pc, #128]	; (8008860 <USB_CoreInit+0xac>)
 80087de:	4013      	ands	r3, r2
 80087e0:	687a      	ldr	r2, [r7, #4]
 80087e2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	68db      	ldr	r3, [r3, #12]
 80087e8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80087f0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80087f2:	2b01      	cmp	r3, #1
 80087f4:	d105      	bne.n	8008802 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	68db      	ldr	r3, [r3, #12]
 80087fa:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8008802:	6878      	ldr	r0, [r7, #4]
 8008804:	f000 fa96 	bl	8008d34 <USB_CoreReset>
 8008808:	4603      	mov	r3, r0
 800880a:	73fb      	strb	r3, [r7, #15]
 800880c:	e010      	b.n	8008830 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	68db      	ldr	r3, [r3, #12]
 8008812:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800881a:	6878      	ldr	r0, [r7, #4]
 800881c:	f000 fa8a 	bl	8008d34 <USB_CoreReset>
 8008820:	4603      	mov	r3, r0
 8008822:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008828:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8008830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008832:	2b01      	cmp	r3, #1
 8008834:	d10b      	bne.n	800884e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	689b      	ldr	r3, [r3, #8]
 800883a:	f043 0206 	orr.w	r2, r3, #6
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	689b      	ldr	r3, [r3, #8]
 8008846:	f043 0220 	orr.w	r2, r3, #32
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800884e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008850:	4618      	mov	r0, r3
 8008852:	3710      	adds	r7, #16
 8008854:	46bd      	mov	sp, r7
 8008856:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800885a:	b004      	add	sp, #16
 800885c:	4770      	bx	lr
 800885e:	bf00      	nop
 8008860:	ffbdffbf 	.word	0xffbdffbf

08008864 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8008864:	b480      	push	{r7}
 8008866:	b083      	sub	sp, #12
 8008868:	af00      	add	r7, sp, #0
 800886a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	689b      	ldr	r3, [r3, #8]
 8008870:	f023 0201 	bic.w	r2, r3, #1
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8008878:	2300      	movs	r3, #0
}
 800887a:	4618      	mov	r0, r3
 800887c:	370c      	adds	r7, #12
 800887e:	46bd      	mov	sp, r7
 8008880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008884:	4770      	bx	lr

08008886 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8008886:	b580      	push	{r7, lr}
 8008888:	b084      	sub	sp, #16
 800888a:	af00      	add	r7, sp, #0
 800888c:	6078      	str	r0, [r7, #4]
 800888e:	460b      	mov	r3, r1
 8008890:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8008892:	2300      	movs	r3, #0
 8008894:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	68db      	ldr	r3, [r3, #12]
 800889a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80088a2:	78fb      	ldrb	r3, [r7, #3]
 80088a4:	2b01      	cmp	r3, #1
 80088a6:	d115      	bne.n	80088d4 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	68db      	ldr	r3, [r3, #12]
 80088ac:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80088b4:	2001      	movs	r0, #1
 80088b6:	f7f9 fdb5 	bl	8002424 <HAL_Delay>
      ms++;
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	3301      	adds	r3, #1
 80088be:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80088c0:	6878      	ldr	r0, [r7, #4]
 80088c2:	f000 fa29 	bl	8008d18 <USB_GetMode>
 80088c6:	4603      	mov	r3, r0
 80088c8:	2b01      	cmp	r3, #1
 80088ca:	d01e      	beq.n	800890a <USB_SetCurrentMode+0x84>
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2b31      	cmp	r3, #49	; 0x31
 80088d0:	d9f0      	bls.n	80088b4 <USB_SetCurrentMode+0x2e>
 80088d2:	e01a      	b.n	800890a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80088d4:	78fb      	ldrb	r3, [r7, #3]
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d115      	bne.n	8008906 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	68db      	ldr	r3, [r3, #12]
 80088de:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80088e6:	2001      	movs	r0, #1
 80088e8:	f7f9 fd9c 	bl	8002424 <HAL_Delay>
      ms++;
 80088ec:	68fb      	ldr	r3, [r7, #12]
 80088ee:	3301      	adds	r3, #1
 80088f0:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80088f2:	6878      	ldr	r0, [r7, #4]
 80088f4:	f000 fa10 	bl	8008d18 <USB_GetMode>
 80088f8:	4603      	mov	r3, r0
 80088fa:	2b00      	cmp	r3, #0
 80088fc:	d005      	beq.n	800890a <USB_SetCurrentMode+0x84>
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	2b31      	cmp	r3, #49	; 0x31
 8008902:	d9f0      	bls.n	80088e6 <USB_SetCurrentMode+0x60>
 8008904:	e001      	b.n	800890a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8008906:	2301      	movs	r3, #1
 8008908:	e005      	b.n	8008916 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	2b32      	cmp	r3, #50	; 0x32
 800890e:	d101      	bne.n	8008914 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8008910:	2301      	movs	r3, #1
 8008912:	e000      	b.n	8008916 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8008914:	2300      	movs	r3, #0
}
 8008916:	4618      	mov	r0, r3
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}
	...

08008920 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8008920:	b084      	sub	sp, #16
 8008922:	b580      	push	{r7, lr}
 8008924:	b086      	sub	sp, #24
 8008926:	af00      	add	r7, sp, #0
 8008928:	6078      	str	r0, [r7, #4]
 800892a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800892e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8008932:	2300      	movs	r3, #0
 8008934:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008936:	687b      	ldr	r3, [r7, #4]
 8008938:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800893a:	2300      	movs	r3, #0
 800893c:	613b      	str	r3, [r7, #16]
 800893e:	e009      	b.n	8008954 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8008940:	687a      	ldr	r2, [r7, #4]
 8008942:	693b      	ldr	r3, [r7, #16]
 8008944:	3340      	adds	r3, #64	; 0x40
 8008946:	009b      	lsls	r3, r3, #2
 8008948:	4413      	add	r3, r2
 800894a:	2200      	movs	r2, #0
 800894c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800894e:	693b      	ldr	r3, [r7, #16]
 8008950:	3301      	adds	r3, #1
 8008952:	613b      	str	r3, [r7, #16]
 8008954:	693b      	ldr	r3, [r7, #16]
 8008956:	2b0e      	cmp	r3, #14
 8008958:	d9f2      	bls.n	8008940 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800895a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800895c:	2b00      	cmp	r3, #0
 800895e:	d11c      	bne.n	800899a <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008966:	685b      	ldr	r3, [r3, #4]
 8008968:	68fa      	ldr	r2, [r7, #12]
 800896a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800896e:	f043 0302 	orr.w	r3, r3, #2
 8008972:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008978:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800898c:	687b      	ldr	r3, [r7, #4]
 800898e:	681b      	ldr	r3, [r3, #0]
 8008990:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	601a      	str	r2, [r3, #0]
 8008998:	e005      	b.n	80089a6 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800899e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80089a2:	687b      	ldr	r3, [r7, #4]
 80089a4:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80089ac:	461a      	mov	r2, r3
 80089ae:	2300      	movs	r3, #0
 80089b0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80089b2:	68fb      	ldr	r3, [r7, #12]
 80089b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089b8:	4619      	mov	r1, r3
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80089c0:	461a      	mov	r2, r3
 80089c2:	680b      	ldr	r3, [r1, #0]
 80089c4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80089c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089c8:	2b01      	cmp	r3, #1
 80089ca:	d10c      	bne.n	80089e6 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80089cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d104      	bne.n	80089dc <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80089d2:	2100      	movs	r1, #0
 80089d4:	6878      	ldr	r0, [r7, #4]
 80089d6:	f000 f965 	bl	8008ca4 <USB_SetDevSpeed>
 80089da:	e008      	b.n	80089ee <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80089dc:	2101      	movs	r1, #1
 80089de:	6878      	ldr	r0, [r7, #4]
 80089e0:	f000 f960 	bl	8008ca4 <USB_SetDevSpeed>
 80089e4:	e003      	b.n	80089ee <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80089e6:	2103      	movs	r1, #3
 80089e8:	6878      	ldr	r0, [r7, #4]
 80089ea:	f000 f95b 	bl	8008ca4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80089ee:	2110      	movs	r1, #16
 80089f0:	6878      	ldr	r0, [r7, #4]
 80089f2:	f000 f8f3 	bl	8008bdc <USB_FlushTxFifo>
 80089f6:	4603      	mov	r3, r0
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	d001      	beq.n	8008a00 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80089fc:	2301      	movs	r3, #1
 80089fe:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8008a00:	6878      	ldr	r0, [r7, #4]
 8008a02:	f000 f91f 	bl	8008c44 <USB_FlushRxFifo>
 8008a06:	4603      	mov	r3, r0
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d001      	beq.n	8008a10 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a16:	461a      	mov	r2, r3
 8008a18:	2300      	movs	r3, #0
 8008a1a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a22:	461a      	mov	r2, r3
 8008a24:	2300      	movs	r3, #0
 8008a26:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008a2e:	461a      	mov	r2, r3
 8008a30:	2300      	movs	r3, #0
 8008a32:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008a34:	2300      	movs	r3, #0
 8008a36:	613b      	str	r3, [r7, #16]
 8008a38:	e043      	b.n	8008ac2 <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8008a3a:	693b      	ldr	r3, [r7, #16]
 8008a3c:	015a      	lsls	r2, r3, #5
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	4413      	add	r3, r2
 8008a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008a4c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008a50:	d118      	bne.n	8008a84 <USB_DevInit+0x164>
    {
      if (i == 0U)
 8008a52:	693b      	ldr	r3, [r7, #16]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d10a      	bne.n	8008a6e <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8008a58:	693b      	ldr	r3, [r7, #16]
 8008a5a:	015a      	lsls	r2, r3, #5
 8008a5c:	68fb      	ldr	r3, [r7, #12]
 8008a5e:	4413      	add	r3, r2
 8008a60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a64:	461a      	mov	r2, r3
 8008a66:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008a6a:	6013      	str	r3, [r2, #0]
 8008a6c:	e013      	b.n	8008a96 <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8008a6e:	693b      	ldr	r3, [r7, #16]
 8008a70:	015a      	lsls	r2, r3, #5
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	4413      	add	r3, r2
 8008a76:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a7a:	461a      	mov	r2, r3
 8008a7c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008a80:	6013      	str	r3, [r2, #0]
 8008a82:	e008      	b.n	8008a96 <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	015a      	lsls	r2, r3, #5
 8008a88:	68fb      	ldr	r3, [r7, #12]
 8008a8a:	4413      	add	r3, r2
 8008a8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008a90:	461a      	mov	r2, r3
 8008a92:	2300      	movs	r3, #0
 8008a94:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8008a96:	693b      	ldr	r3, [r7, #16]
 8008a98:	015a      	lsls	r2, r3, #5
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	4413      	add	r3, r2
 8008a9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008aa2:	461a      	mov	r2, r3
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8008aa8:	693b      	ldr	r3, [r7, #16]
 8008aaa:	015a      	lsls	r2, r3, #5
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	4413      	add	r3, r2
 8008ab0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8008ab4:	461a      	mov	r2, r3
 8008ab6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008aba:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008abc:	693b      	ldr	r3, [r7, #16]
 8008abe:	3301      	adds	r3, #1
 8008ac0:	613b      	str	r3, [r7, #16]
 8008ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ac4:	693a      	ldr	r2, [r7, #16]
 8008ac6:	429a      	cmp	r2, r3
 8008ac8:	d3b7      	bcc.n	8008a3a <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008aca:	2300      	movs	r3, #0
 8008acc:	613b      	str	r3, [r7, #16]
 8008ace:	e043      	b.n	8008b58 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8008ad0:	693b      	ldr	r3, [r7, #16]
 8008ad2:	015a      	lsls	r2, r3, #5
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	4413      	add	r3, r2
 8008ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8008ae2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8008ae6:	d118      	bne.n	8008b1a <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8008ae8:	693b      	ldr	r3, [r7, #16]
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d10a      	bne.n	8008b04 <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8008aee:	693b      	ldr	r3, [r7, #16]
 8008af0:	015a      	lsls	r2, r3, #5
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	4413      	add	r3, r2
 8008af6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008afa:	461a      	mov	r2, r3
 8008afc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8008b00:	6013      	str	r3, [r2, #0]
 8008b02:	e013      	b.n	8008b2c <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8008b04:	693b      	ldr	r3, [r7, #16]
 8008b06:	015a      	lsls	r2, r3, #5
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	4413      	add	r3, r2
 8008b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b10:	461a      	mov	r2, r3
 8008b12:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8008b16:	6013      	str	r3, [r2, #0]
 8008b18:	e008      	b.n	8008b2c <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8008b1a:	693b      	ldr	r3, [r7, #16]
 8008b1c:	015a      	lsls	r2, r3, #5
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	4413      	add	r3, r2
 8008b22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b26:	461a      	mov	r2, r3
 8008b28:	2300      	movs	r3, #0
 8008b2a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8008b2c:	693b      	ldr	r3, [r7, #16]
 8008b2e:	015a      	lsls	r2, r3, #5
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	4413      	add	r3, r2
 8008b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b38:	461a      	mov	r2, r3
 8008b3a:	2300      	movs	r3, #0
 8008b3c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8008b3e:	693b      	ldr	r3, [r7, #16]
 8008b40:	015a      	lsls	r2, r3, #5
 8008b42:	68fb      	ldr	r3, [r7, #12]
 8008b44:	4413      	add	r3, r2
 8008b46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8008b4a:	461a      	mov	r2, r3
 8008b4c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8008b50:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8008b52:	693b      	ldr	r3, [r7, #16]
 8008b54:	3301      	adds	r3, #1
 8008b56:	613b      	str	r3, [r7, #16]
 8008b58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b5a:	693a      	ldr	r2, [r7, #16]
 8008b5c:	429a      	cmp	r2, r3
 8008b5e:	d3b7      	bcc.n	8008ad0 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8008b60:	68fb      	ldr	r3, [r7, #12]
 8008b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	68fa      	ldr	r2, [r7, #12]
 8008b6a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008b6e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b72:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	2200      	movs	r2, #0
 8008b78:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8008b80:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8008b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d105      	bne.n	8008b94 <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	699b      	ldr	r3, [r3, #24]
 8008b8c:	f043 0210 	orr.w	r2, r3, #16
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	699a      	ldr	r2, [r3, #24]
 8008b98:	4b0e      	ldr	r3, [pc, #56]	; (8008bd4 <USB_DevInit+0x2b4>)
 8008b9a:	4313      	orrs	r3, r2
 8008b9c:	687a      	ldr	r2, [r7, #4]
 8008b9e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8008ba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d005      	beq.n	8008bb2 <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	699b      	ldr	r3, [r3, #24]
 8008baa:	f043 0208 	orr.w	r2, r3, #8
 8008bae:	687b      	ldr	r3, [r7, #4]
 8008bb0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8008bb2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008bb4:	2b01      	cmp	r3, #1
 8008bb6:	d105      	bne.n	8008bc4 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	699a      	ldr	r2, [r3, #24]
 8008bbc:	4b06      	ldr	r3, [pc, #24]	; (8008bd8 <USB_DevInit+0x2b8>)
 8008bbe:	4313      	orrs	r3, r2
 8008bc0:	687a      	ldr	r2, [r7, #4]
 8008bc2:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8008bc4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3718      	adds	r7, #24
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8008bd0:	b004      	add	sp, #16
 8008bd2:	4770      	bx	lr
 8008bd4:	803c3800 	.word	0x803c3800
 8008bd8:	40000004 	.word	0x40000004

08008bdc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b085      	sub	sp, #20
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
 8008be4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8008be6:	2300      	movs	r3, #0
 8008be8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	3301      	adds	r3, #1
 8008bee:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	4a13      	ldr	r2, [pc, #76]	; (8008c40 <USB_FlushTxFifo+0x64>)
 8008bf4:	4293      	cmp	r3, r2
 8008bf6:	d901      	bls.n	8008bfc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8008bf8:	2303      	movs	r3, #3
 8008bfa:	e01b      	b.n	8008c34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	691b      	ldr	r3, [r3, #16]
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	daf2      	bge.n	8008bea <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8008c04:	2300      	movs	r3, #0
 8008c06:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8008c08:	683b      	ldr	r3, [r7, #0]
 8008c0a:	019b      	lsls	r3, r3, #6
 8008c0c:	f043 0220 	orr.w	r2, r3, #32
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c14:	68fb      	ldr	r3, [r7, #12]
 8008c16:	3301      	adds	r3, #1
 8008c18:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	4a08      	ldr	r2, [pc, #32]	; (8008c40 <USB_FlushTxFifo+0x64>)
 8008c1e:	4293      	cmp	r3, r2
 8008c20:	d901      	bls.n	8008c26 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8008c22:	2303      	movs	r3, #3
 8008c24:	e006      	b.n	8008c34 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	691b      	ldr	r3, [r3, #16]
 8008c2a:	f003 0320 	and.w	r3, r3, #32
 8008c2e:	2b20      	cmp	r3, #32
 8008c30:	d0f0      	beq.n	8008c14 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8008c32:	2300      	movs	r3, #0
}
 8008c34:	4618      	mov	r0, r3
 8008c36:	3714      	adds	r7, #20
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c3e:	4770      	bx	lr
 8008c40:	00030d40 	.word	0x00030d40

08008c44 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8008c44:	b480      	push	{r7}
 8008c46:	b085      	sub	sp, #20
 8008c48:	af00      	add	r7, sp, #0
 8008c4a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008c50:	68fb      	ldr	r3, [r7, #12]
 8008c52:	3301      	adds	r3, #1
 8008c54:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	4a11      	ldr	r2, [pc, #68]	; (8008ca0 <USB_FlushRxFifo+0x5c>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d901      	bls.n	8008c62 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8008c5e:	2303      	movs	r3, #3
 8008c60:	e018      	b.n	8008c94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	daf2      	bge.n	8008c50 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8008c6a:	2300      	movs	r3, #0
 8008c6c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	2210      	movs	r2, #16
 8008c72:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	3301      	adds	r3, #1
 8008c78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008c7a:	68fb      	ldr	r3, [r7, #12]
 8008c7c:	4a08      	ldr	r2, [pc, #32]	; (8008ca0 <USB_FlushRxFifo+0x5c>)
 8008c7e:	4293      	cmp	r3, r2
 8008c80:	d901      	bls.n	8008c86 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8008c82:	2303      	movs	r3, #3
 8008c84:	e006      	b.n	8008c94 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	691b      	ldr	r3, [r3, #16]
 8008c8a:	f003 0310 	and.w	r3, r3, #16
 8008c8e:	2b10      	cmp	r3, #16
 8008c90:	d0f0      	beq.n	8008c74 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8008c92:	2300      	movs	r3, #0
}
 8008c94:	4618      	mov	r0, r3
 8008c96:	3714      	adds	r7, #20
 8008c98:	46bd      	mov	sp, r7
 8008c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c9e:	4770      	bx	lr
 8008ca0:	00030d40 	.word	0x00030d40

08008ca4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8008ca4:	b480      	push	{r7}
 8008ca6:	b085      	sub	sp, #20
 8008ca8:	af00      	add	r7, sp, #0
 8008caa:	6078      	str	r0, [r7, #4]
 8008cac:	460b      	mov	r3, r1
 8008cae:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cba:	681a      	ldr	r2, [r3, #0]
 8008cbc:	78fb      	ldrb	r3, [r7, #3]
 8008cbe:	68f9      	ldr	r1, [r7, #12]
 8008cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8008cc4:	4313      	orrs	r3, r2
 8008cc6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8008cc8:	2300      	movs	r3, #0
}
 8008cca:	4618      	mov	r0, r3
 8008ccc:	3714      	adds	r7, #20
 8008cce:	46bd      	mov	sp, r7
 8008cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cd4:	4770      	bx	lr

08008cd6 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8008cd6:	b480      	push	{r7}
 8008cd8:	b085      	sub	sp, #20
 8008cda:	af00      	add	r7, sp, #0
 8008cdc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8008ce8:	681b      	ldr	r3, [r3, #0]
 8008cea:	68fa      	ldr	r2, [r7, #12]
 8008cec:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8008cf0:	f023 0303 	bic.w	r3, r3, #3
 8008cf4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	68fa      	ldr	r2, [r7, #12]
 8008d00:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8008d04:	f043 0302 	orr.w	r3, r3, #2
 8008d08:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8008d0a:	2300      	movs	r3, #0
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3714      	adds	r7, #20
 8008d10:	46bd      	mov	sp, r7
 8008d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d16:	4770      	bx	lr

08008d18 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8008d18:	b480      	push	{r7}
 8008d1a:	b083      	sub	sp, #12
 8008d1c:	af00      	add	r7, sp, #0
 8008d1e:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	695b      	ldr	r3, [r3, #20]
 8008d24:	f003 0301 	and.w	r3, r3, #1
}
 8008d28:	4618      	mov	r0, r3
 8008d2a:	370c      	adds	r7, #12
 8008d2c:	46bd      	mov	sp, r7
 8008d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d32:	4770      	bx	lr

08008d34 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8008d34:	b480      	push	{r7}
 8008d36:	b085      	sub	sp, #20
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8008d3c:	2300      	movs	r3, #0
 8008d3e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8008d40:	68fb      	ldr	r3, [r7, #12]
 8008d42:	3301      	adds	r3, #1
 8008d44:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	4a13      	ldr	r2, [pc, #76]	; (8008d98 <USB_CoreReset+0x64>)
 8008d4a:	4293      	cmp	r3, r2
 8008d4c:	d901      	bls.n	8008d52 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8008d4e:	2303      	movs	r3, #3
 8008d50:	e01b      	b.n	8008d8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	691b      	ldr	r3, [r3, #16]
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	daf2      	bge.n	8008d40 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8008d5a:	2300      	movs	r3, #0
 8008d5c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	691b      	ldr	r3, [r3, #16]
 8008d62:	f043 0201 	orr.w	r2, r3, #1
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8008d6a:	68fb      	ldr	r3, [r7, #12]
 8008d6c:	3301      	adds	r3, #1
 8008d6e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8008d70:	68fb      	ldr	r3, [r7, #12]
 8008d72:	4a09      	ldr	r2, [pc, #36]	; (8008d98 <USB_CoreReset+0x64>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d901      	bls.n	8008d7c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8008d78:	2303      	movs	r3, #3
 8008d7a:	e006      	b.n	8008d8a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	691b      	ldr	r3, [r3, #16]
 8008d80:	f003 0301 	and.w	r3, r3, #1
 8008d84:	2b01      	cmp	r3, #1
 8008d86:	d0f0      	beq.n	8008d6a <USB_CoreReset+0x36>

  return HAL_OK;
 8008d88:	2300      	movs	r3, #0
}
 8008d8a:	4618      	mov	r0, r3
 8008d8c:	3714      	adds	r7, #20
 8008d8e:	46bd      	mov	sp, r7
 8008d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d94:	4770      	bx	lr
 8008d96:	bf00      	nop
 8008d98:	00030d40 	.word	0x00030d40

08008d9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8008d9c:	b580      	push	{r7, lr}
 8008d9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8008da0:	4904      	ldr	r1, [pc, #16]	; (8008db4 <MX_FATFS_Init+0x18>)
 8008da2:	4805      	ldr	r0, [pc, #20]	; (8008db8 <MX_FATFS_Init+0x1c>)
 8008da4:	f000 f8b0 	bl	8008f08 <FATFS_LinkDriver>
 8008da8:	4603      	mov	r3, r0
 8008daa:	461a      	mov	r2, r3
 8008dac:	4b03      	ldr	r3, [pc, #12]	; (8008dbc <MX_FATFS_Init+0x20>)
 8008dae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8008db0:	bf00      	nop
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	20000bc8 	.word	0x20000bc8
 8008db8:	2000000c 	.word	0x2000000c
 8008dbc:	20000bc4 	.word	0x20000bc4

08008dc0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8008dc0:	b480      	push	{r7}
 8008dc2:	b083      	sub	sp, #12
 8008dc4:	af00      	add	r7, sp, #0
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8008dca:	4b06      	ldr	r3, [pc, #24]	; (8008de4 <USER_initialize+0x24>)
 8008dcc:	2201      	movs	r2, #1
 8008dce:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008dd0:	4b04      	ldr	r3, [pc, #16]	; (8008de4 <USER_initialize+0x24>)
 8008dd2:	781b      	ldrb	r3, [r3, #0]
 8008dd4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8008dd6:	4618      	mov	r0, r3
 8008dd8:	370c      	adds	r7, #12
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	20000009 	.word	0x20000009

08008de8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8008de8:	b480      	push	{r7}
 8008dea:	b083      	sub	sp, #12
 8008dec:	af00      	add	r7, sp, #0
 8008dee:	4603      	mov	r3, r0
 8008df0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8008df2:	4b06      	ldr	r3, [pc, #24]	; (8008e0c <USER_status+0x24>)
 8008df4:	2201      	movs	r2, #1
 8008df6:	701a      	strb	r2, [r3, #0]
    return Stat;
 8008df8:	4b04      	ldr	r3, [pc, #16]	; (8008e0c <USER_status+0x24>)
 8008dfa:	781b      	ldrb	r3, [r3, #0]
 8008dfc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8008dfe:	4618      	mov	r0, r3
 8008e00:	370c      	adds	r7, #12
 8008e02:	46bd      	mov	sp, r7
 8008e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e08:	4770      	bx	lr
 8008e0a:	bf00      	nop
 8008e0c:	20000009 	.word	0x20000009

08008e10 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8008e10:	b480      	push	{r7}
 8008e12:	b085      	sub	sp, #20
 8008e14:	af00      	add	r7, sp, #0
 8008e16:	60b9      	str	r1, [r7, #8]
 8008e18:	607a      	str	r2, [r7, #4]
 8008e1a:	603b      	str	r3, [r7, #0]
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8008e20:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8008e22:	4618      	mov	r0, r3
 8008e24:	3714      	adds	r7, #20
 8008e26:	46bd      	mov	sp, r7
 8008e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e2c:	4770      	bx	lr

08008e2e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8008e2e:	b480      	push	{r7}
 8008e30:	b085      	sub	sp, #20
 8008e32:	af00      	add	r7, sp, #0
 8008e34:	60b9      	str	r1, [r7, #8]
 8008e36:	607a      	str	r2, [r7, #4]
 8008e38:	603b      	str	r3, [r7, #0]
 8008e3a:	4603      	mov	r3, r0
 8008e3c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8008e3e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	3714      	adds	r7, #20
 8008e44:	46bd      	mov	sp, r7
 8008e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e4a:	4770      	bx	lr

08008e4c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8008e4c:	b480      	push	{r7}
 8008e4e:	b085      	sub	sp, #20
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	4603      	mov	r3, r0
 8008e54:	603a      	str	r2, [r7, #0]
 8008e56:	71fb      	strb	r3, [r7, #7]
 8008e58:	460b      	mov	r3, r1
 8008e5a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8008e5c:	2301      	movs	r3, #1
 8008e5e:	73fb      	strb	r3, [r7, #15]
    return res;
 8008e60:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8008e62:	4618      	mov	r0, r3
 8008e64:	3714      	adds	r7, #20
 8008e66:	46bd      	mov	sp, r7
 8008e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e6c:	4770      	bx	lr
	...

08008e70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8008e70:	b480      	push	{r7}
 8008e72:	b087      	sub	sp, #28
 8008e74:	af00      	add	r7, sp, #0
 8008e76:	60f8      	str	r0, [r7, #12]
 8008e78:	60b9      	str	r1, [r7, #8]
 8008e7a:	4613      	mov	r3, r2
 8008e7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8008e7e:	2301      	movs	r3, #1
 8008e80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8008e82:	2300      	movs	r3, #0
 8008e84:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8008e86:	4b1f      	ldr	r3, [pc, #124]	; (8008f04 <FATFS_LinkDriverEx+0x94>)
 8008e88:	7a5b      	ldrb	r3, [r3, #9]
 8008e8a:	b2db      	uxtb	r3, r3
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d131      	bne.n	8008ef4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8008e90:	4b1c      	ldr	r3, [pc, #112]	; (8008f04 <FATFS_LinkDriverEx+0x94>)
 8008e92:	7a5b      	ldrb	r3, [r3, #9]
 8008e94:	b2db      	uxtb	r3, r3
 8008e96:	461a      	mov	r2, r3
 8008e98:	4b1a      	ldr	r3, [pc, #104]	; (8008f04 <FATFS_LinkDriverEx+0x94>)
 8008e9a:	2100      	movs	r1, #0
 8008e9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8008e9e:	4b19      	ldr	r3, [pc, #100]	; (8008f04 <FATFS_LinkDriverEx+0x94>)
 8008ea0:	7a5b      	ldrb	r3, [r3, #9]
 8008ea2:	b2db      	uxtb	r3, r3
 8008ea4:	4a17      	ldr	r2, [pc, #92]	; (8008f04 <FATFS_LinkDriverEx+0x94>)
 8008ea6:	009b      	lsls	r3, r3, #2
 8008ea8:	4413      	add	r3, r2
 8008eaa:	68fa      	ldr	r2, [r7, #12]
 8008eac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8008eae:	4b15      	ldr	r3, [pc, #84]	; (8008f04 <FATFS_LinkDriverEx+0x94>)
 8008eb0:	7a5b      	ldrb	r3, [r3, #9]
 8008eb2:	b2db      	uxtb	r3, r3
 8008eb4:	461a      	mov	r2, r3
 8008eb6:	4b13      	ldr	r3, [pc, #76]	; (8008f04 <FATFS_LinkDriverEx+0x94>)
 8008eb8:	4413      	add	r3, r2
 8008eba:	79fa      	ldrb	r2, [r7, #7]
 8008ebc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8008ebe:	4b11      	ldr	r3, [pc, #68]	; (8008f04 <FATFS_LinkDriverEx+0x94>)
 8008ec0:	7a5b      	ldrb	r3, [r3, #9]
 8008ec2:	b2db      	uxtb	r3, r3
 8008ec4:	1c5a      	adds	r2, r3, #1
 8008ec6:	b2d1      	uxtb	r1, r2
 8008ec8:	4a0e      	ldr	r2, [pc, #56]	; (8008f04 <FATFS_LinkDriverEx+0x94>)
 8008eca:	7251      	strb	r1, [r2, #9]
 8008ecc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8008ece:	7dbb      	ldrb	r3, [r7, #22]
 8008ed0:	3330      	adds	r3, #48	; 0x30
 8008ed2:	b2da      	uxtb	r2, r3
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8008ed8:	68bb      	ldr	r3, [r7, #8]
 8008eda:	3301      	adds	r3, #1
 8008edc:	223a      	movs	r2, #58	; 0x3a
 8008ede:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8008ee0:	68bb      	ldr	r3, [r7, #8]
 8008ee2:	3302      	adds	r3, #2
 8008ee4:	222f      	movs	r2, #47	; 0x2f
 8008ee6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8008ee8:	68bb      	ldr	r3, [r7, #8]
 8008eea:	3303      	adds	r3, #3
 8008eec:	2200      	movs	r2, #0
 8008eee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8008ef0:	2300      	movs	r3, #0
 8008ef2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8008ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8008ef6:	4618      	mov	r0, r3
 8008ef8:	371c      	adds	r7, #28
 8008efa:	46bd      	mov	sp, r7
 8008efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f00:	4770      	bx	lr
 8008f02:	bf00      	nop
 8008f04:	20000bcc 	.word	0x20000bcc

08008f08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8008f08:	b580      	push	{r7, lr}
 8008f0a:	b082      	sub	sp, #8
 8008f0c:	af00      	add	r7, sp, #0
 8008f0e:	6078      	str	r0, [r7, #4]
 8008f10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8008f12:	2200      	movs	r2, #0
 8008f14:	6839      	ldr	r1, [r7, #0]
 8008f16:	6878      	ldr	r0, [r7, #4]
 8008f18:	f7ff ffaa 	bl	8008e70 <FATFS_LinkDriverEx>
 8008f1c:	4603      	mov	r3, r0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3708      	adds	r7, #8
 8008f22:	46bd      	mov	sp, r7
 8008f24:	bd80      	pop	{r7, pc}

08008f26 <__cvt>:
 8008f26:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008f2a:	ec55 4b10 	vmov	r4, r5, d0
 8008f2e:	2d00      	cmp	r5, #0
 8008f30:	460e      	mov	r6, r1
 8008f32:	4619      	mov	r1, r3
 8008f34:	462b      	mov	r3, r5
 8008f36:	bfbb      	ittet	lt
 8008f38:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8008f3c:	461d      	movlt	r5, r3
 8008f3e:	2300      	movge	r3, #0
 8008f40:	232d      	movlt	r3, #45	; 0x2d
 8008f42:	700b      	strb	r3, [r1, #0]
 8008f44:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008f46:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8008f4a:	4691      	mov	r9, r2
 8008f4c:	f023 0820 	bic.w	r8, r3, #32
 8008f50:	bfbc      	itt	lt
 8008f52:	4622      	movlt	r2, r4
 8008f54:	4614      	movlt	r4, r2
 8008f56:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f5a:	d005      	beq.n	8008f68 <__cvt+0x42>
 8008f5c:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8008f60:	d100      	bne.n	8008f64 <__cvt+0x3e>
 8008f62:	3601      	adds	r6, #1
 8008f64:	2102      	movs	r1, #2
 8008f66:	e000      	b.n	8008f6a <__cvt+0x44>
 8008f68:	2103      	movs	r1, #3
 8008f6a:	ab03      	add	r3, sp, #12
 8008f6c:	9301      	str	r3, [sp, #4]
 8008f6e:	ab02      	add	r3, sp, #8
 8008f70:	9300      	str	r3, [sp, #0]
 8008f72:	ec45 4b10 	vmov	d0, r4, r5
 8008f76:	4653      	mov	r3, sl
 8008f78:	4632      	mov	r2, r6
 8008f7a:	f001 f8b5 	bl	800a0e8 <_dtoa_r>
 8008f7e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8008f82:	4607      	mov	r7, r0
 8008f84:	d102      	bne.n	8008f8c <__cvt+0x66>
 8008f86:	f019 0f01 	tst.w	r9, #1
 8008f8a:	d022      	beq.n	8008fd2 <__cvt+0xac>
 8008f8c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8008f90:	eb07 0906 	add.w	r9, r7, r6
 8008f94:	d110      	bne.n	8008fb8 <__cvt+0x92>
 8008f96:	783b      	ldrb	r3, [r7, #0]
 8008f98:	2b30      	cmp	r3, #48	; 0x30
 8008f9a:	d10a      	bne.n	8008fb2 <__cvt+0x8c>
 8008f9c:	2200      	movs	r2, #0
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	4620      	mov	r0, r4
 8008fa2:	4629      	mov	r1, r5
 8008fa4:	f7f7 fdc0 	bl	8000b28 <__aeabi_dcmpeq>
 8008fa8:	b918      	cbnz	r0, 8008fb2 <__cvt+0x8c>
 8008faa:	f1c6 0601 	rsb	r6, r6, #1
 8008fae:	f8ca 6000 	str.w	r6, [sl]
 8008fb2:	f8da 3000 	ldr.w	r3, [sl]
 8008fb6:	4499      	add	r9, r3
 8008fb8:	2200      	movs	r2, #0
 8008fba:	2300      	movs	r3, #0
 8008fbc:	4620      	mov	r0, r4
 8008fbe:	4629      	mov	r1, r5
 8008fc0:	f7f7 fdb2 	bl	8000b28 <__aeabi_dcmpeq>
 8008fc4:	b108      	cbz	r0, 8008fca <__cvt+0xa4>
 8008fc6:	f8cd 900c 	str.w	r9, [sp, #12]
 8008fca:	2230      	movs	r2, #48	; 0x30
 8008fcc:	9b03      	ldr	r3, [sp, #12]
 8008fce:	454b      	cmp	r3, r9
 8008fd0:	d307      	bcc.n	8008fe2 <__cvt+0xbc>
 8008fd2:	9b03      	ldr	r3, [sp, #12]
 8008fd4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008fd6:	1bdb      	subs	r3, r3, r7
 8008fd8:	4638      	mov	r0, r7
 8008fda:	6013      	str	r3, [r2, #0]
 8008fdc:	b004      	add	sp, #16
 8008fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fe2:	1c59      	adds	r1, r3, #1
 8008fe4:	9103      	str	r1, [sp, #12]
 8008fe6:	701a      	strb	r2, [r3, #0]
 8008fe8:	e7f0      	b.n	8008fcc <__cvt+0xa6>

08008fea <__exponent>:
 8008fea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008fec:	4603      	mov	r3, r0
 8008fee:	2900      	cmp	r1, #0
 8008ff0:	bfb8      	it	lt
 8008ff2:	4249      	neglt	r1, r1
 8008ff4:	f803 2b02 	strb.w	r2, [r3], #2
 8008ff8:	bfb4      	ite	lt
 8008ffa:	222d      	movlt	r2, #45	; 0x2d
 8008ffc:	222b      	movge	r2, #43	; 0x2b
 8008ffe:	2909      	cmp	r1, #9
 8009000:	7042      	strb	r2, [r0, #1]
 8009002:	dd2a      	ble.n	800905a <__exponent+0x70>
 8009004:	f10d 0207 	add.w	r2, sp, #7
 8009008:	4617      	mov	r7, r2
 800900a:	260a      	movs	r6, #10
 800900c:	4694      	mov	ip, r2
 800900e:	fb91 f5f6 	sdiv	r5, r1, r6
 8009012:	fb06 1415 	mls	r4, r6, r5, r1
 8009016:	3430      	adds	r4, #48	; 0x30
 8009018:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800901c:	460c      	mov	r4, r1
 800901e:	2c63      	cmp	r4, #99	; 0x63
 8009020:	f102 32ff 	add.w	r2, r2, #4294967295
 8009024:	4629      	mov	r1, r5
 8009026:	dcf1      	bgt.n	800900c <__exponent+0x22>
 8009028:	3130      	adds	r1, #48	; 0x30
 800902a:	f1ac 0402 	sub.w	r4, ip, #2
 800902e:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009032:	1c41      	adds	r1, r0, #1
 8009034:	4622      	mov	r2, r4
 8009036:	42ba      	cmp	r2, r7
 8009038:	d30a      	bcc.n	8009050 <__exponent+0x66>
 800903a:	f10d 0209 	add.w	r2, sp, #9
 800903e:	eba2 020c 	sub.w	r2, r2, ip
 8009042:	42bc      	cmp	r4, r7
 8009044:	bf88      	it	hi
 8009046:	2200      	movhi	r2, #0
 8009048:	4413      	add	r3, r2
 800904a:	1a18      	subs	r0, r3, r0
 800904c:	b003      	add	sp, #12
 800904e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009050:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009054:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009058:	e7ed      	b.n	8009036 <__exponent+0x4c>
 800905a:	2330      	movs	r3, #48	; 0x30
 800905c:	3130      	adds	r1, #48	; 0x30
 800905e:	7083      	strb	r3, [r0, #2]
 8009060:	70c1      	strb	r1, [r0, #3]
 8009062:	1d03      	adds	r3, r0, #4
 8009064:	e7f1      	b.n	800904a <__exponent+0x60>
	...

08009068 <_printf_float>:
 8009068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800906c:	ed2d 8b02 	vpush	{d8}
 8009070:	b08d      	sub	sp, #52	; 0x34
 8009072:	460c      	mov	r4, r1
 8009074:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009078:	4616      	mov	r6, r2
 800907a:	461f      	mov	r7, r3
 800907c:	4605      	mov	r5, r0
 800907e:	f000 ff2b 	bl	8009ed8 <_localeconv_r>
 8009082:	f8d0 a000 	ldr.w	sl, [r0]
 8009086:	4650      	mov	r0, sl
 8009088:	f7f7 f922 	bl	80002d0 <strlen>
 800908c:	2300      	movs	r3, #0
 800908e:	930a      	str	r3, [sp, #40]	; 0x28
 8009090:	6823      	ldr	r3, [r4, #0]
 8009092:	9305      	str	r3, [sp, #20]
 8009094:	f8d8 3000 	ldr.w	r3, [r8]
 8009098:	f894 b018 	ldrb.w	fp, [r4, #24]
 800909c:	3307      	adds	r3, #7
 800909e:	f023 0307 	bic.w	r3, r3, #7
 80090a2:	f103 0208 	add.w	r2, r3, #8
 80090a6:	f8c8 2000 	str.w	r2, [r8]
 80090aa:	e9d3 8900 	ldrd	r8, r9, [r3]
 80090ae:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80090b2:	9307      	str	r3, [sp, #28]
 80090b4:	f8cd 8018 	str.w	r8, [sp, #24]
 80090b8:	ee08 0a10 	vmov	s16, r0
 80090bc:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 80090c0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090c4:	4b9e      	ldr	r3, [pc, #632]	; (8009340 <_printf_float+0x2d8>)
 80090c6:	f04f 32ff 	mov.w	r2, #4294967295
 80090ca:	f7f7 fd5f 	bl	8000b8c <__aeabi_dcmpun>
 80090ce:	bb88      	cbnz	r0, 8009134 <_printf_float+0xcc>
 80090d0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80090d4:	4b9a      	ldr	r3, [pc, #616]	; (8009340 <_printf_float+0x2d8>)
 80090d6:	f04f 32ff 	mov.w	r2, #4294967295
 80090da:	f7f7 fd39 	bl	8000b50 <__aeabi_dcmple>
 80090de:	bb48      	cbnz	r0, 8009134 <_printf_float+0xcc>
 80090e0:	2200      	movs	r2, #0
 80090e2:	2300      	movs	r3, #0
 80090e4:	4640      	mov	r0, r8
 80090e6:	4649      	mov	r1, r9
 80090e8:	f7f7 fd28 	bl	8000b3c <__aeabi_dcmplt>
 80090ec:	b110      	cbz	r0, 80090f4 <_printf_float+0x8c>
 80090ee:	232d      	movs	r3, #45	; 0x2d
 80090f0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80090f4:	4a93      	ldr	r2, [pc, #588]	; (8009344 <_printf_float+0x2dc>)
 80090f6:	4b94      	ldr	r3, [pc, #592]	; (8009348 <_printf_float+0x2e0>)
 80090f8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80090fc:	bf94      	ite	ls
 80090fe:	4690      	movls	r8, r2
 8009100:	4698      	movhi	r8, r3
 8009102:	2303      	movs	r3, #3
 8009104:	6123      	str	r3, [r4, #16]
 8009106:	9b05      	ldr	r3, [sp, #20]
 8009108:	f023 0304 	bic.w	r3, r3, #4
 800910c:	6023      	str	r3, [r4, #0]
 800910e:	f04f 0900 	mov.w	r9, #0
 8009112:	9700      	str	r7, [sp, #0]
 8009114:	4633      	mov	r3, r6
 8009116:	aa0b      	add	r2, sp, #44	; 0x2c
 8009118:	4621      	mov	r1, r4
 800911a:	4628      	mov	r0, r5
 800911c:	f000 f9da 	bl	80094d4 <_printf_common>
 8009120:	3001      	adds	r0, #1
 8009122:	f040 8090 	bne.w	8009246 <_printf_float+0x1de>
 8009126:	f04f 30ff 	mov.w	r0, #4294967295
 800912a:	b00d      	add	sp, #52	; 0x34
 800912c:	ecbd 8b02 	vpop	{d8}
 8009130:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009134:	4642      	mov	r2, r8
 8009136:	464b      	mov	r3, r9
 8009138:	4640      	mov	r0, r8
 800913a:	4649      	mov	r1, r9
 800913c:	f7f7 fd26 	bl	8000b8c <__aeabi_dcmpun>
 8009140:	b140      	cbz	r0, 8009154 <_printf_float+0xec>
 8009142:	464b      	mov	r3, r9
 8009144:	2b00      	cmp	r3, #0
 8009146:	bfbc      	itt	lt
 8009148:	232d      	movlt	r3, #45	; 0x2d
 800914a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800914e:	4a7f      	ldr	r2, [pc, #508]	; (800934c <_printf_float+0x2e4>)
 8009150:	4b7f      	ldr	r3, [pc, #508]	; (8009350 <_printf_float+0x2e8>)
 8009152:	e7d1      	b.n	80090f8 <_printf_float+0x90>
 8009154:	6863      	ldr	r3, [r4, #4]
 8009156:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800915a:	9206      	str	r2, [sp, #24]
 800915c:	1c5a      	adds	r2, r3, #1
 800915e:	d13f      	bne.n	80091e0 <_printf_float+0x178>
 8009160:	2306      	movs	r3, #6
 8009162:	6063      	str	r3, [r4, #4]
 8009164:	9b05      	ldr	r3, [sp, #20]
 8009166:	6861      	ldr	r1, [r4, #4]
 8009168:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800916c:	2300      	movs	r3, #0
 800916e:	9303      	str	r3, [sp, #12]
 8009170:	ab0a      	add	r3, sp, #40	; 0x28
 8009172:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009176:	ab09      	add	r3, sp, #36	; 0x24
 8009178:	ec49 8b10 	vmov	d0, r8, r9
 800917c:	9300      	str	r3, [sp, #0]
 800917e:	6022      	str	r2, [r4, #0]
 8009180:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009184:	4628      	mov	r0, r5
 8009186:	f7ff fece 	bl	8008f26 <__cvt>
 800918a:	9b06      	ldr	r3, [sp, #24]
 800918c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800918e:	2b47      	cmp	r3, #71	; 0x47
 8009190:	4680      	mov	r8, r0
 8009192:	d108      	bne.n	80091a6 <_printf_float+0x13e>
 8009194:	1cc8      	adds	r0, r1, #3
 8009196:	db02      	blt.n	800919e <_printf_float+0x136>
 8009198:	6863      	ldr	r3, [r4, #4]
 800919a:	4299      	cmp	r1, r3
 800919c:	dd41      	ble.n	8009222 <_printf_float+0x1ba>
 800919e:	f1ab 0302 	sub.w	r3, fp, #2
 80091a2:	fa5f fb83 	uxtb.w	fp, r3
 80091a6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80091aa:	d820      	bhi.n	80091ee <_printf_float+0x186>
 80091ac:	3901      	subs	r1, #1
 80091ae:	465a      	mov	r2, fp
 80091b0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80091b4:	9109      	str	r1, [sp, #36]	; 0x24
 80091b6:	f7ff ff18 	bl	8008fea <__exponent>
 80091ba:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80091bc:	1813      	adds	r3, r2, r0
 80091be:	2a01      	cmp	r2, #1
 80091c0:	4681      	mov	r9, r0
 80091c2:	6123      	str	r3, [r4, #16]
 80091c4:	dc02      	bgt.n	80091cc <_printf_float+0x164>
 80091c6:	6822      	ldr	r2, [r4, #0]
 80091c8:	07d2      	lsls	r2, r2, #31
 80091ca:	d501      	bpl.n	80091d0 <_printf_float+0x168>
 80091cc:	3301      	adds	r3, #1
 80091ce:	6123      	str	r3, [r4, #16]
 80091d0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80091d4:	2b00      	cmp	r3, #0
 80091d6:	d09c      	beq.n	8009112 <_printf_float+0xaa>
 80091d8:	232d      	movs	r3, #45	; 0x2d
 80091da:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80091de:	e798      	b.n	8009112 <_printf_float+0xaa>
 80091e0:	9a06      	ldr	r2, [sp, #24]
 80091e2:	2a47      	cmp	r2, #71	; 0x47
 80091e4:	d1be      	bne.n	8009164 <_printf_float+0xfc>
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d1bc      	bne.n	8009164 <_printf_float+0xfc>
 80091ea:	2301      	movs	r3, #1
 80091ec:	e7b9      	b.n	8009162 <_printf_float+0xfa>
 80091ee:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80091f2:	d118      	bne.n	8009226 <_printf_float+0x1be>
 80091f4:	2900      	cmp	r1, #0
 80091f6:	6863      	ldr	r3, [r4, #4]
 80091f8:	dd0b      	ble.n	8009212 <_printf_float+0x1aa>
 80091fa:	6121      	str	r1, [r4, #16]
 80091fc:	b913      	cbnz	r3, 8009204 <_printf_float+0x19c>
 80091fe:	6822      	ldr	r2, [r4, #0]
 8009200:	07d0      	lsls	r0, r2, #31
 8009202:	d502      	bpl.n	800920a <_printf_float+0x1a2>
 8009204:	3301      	adds	r3, #1
 8009206:	440b      	add	r3, r1
 8009208:	6123      	str	r3, [r4, #16]
 800920a:	65a1      	str	r1, [r4, #88]	; 0x58
 800920c:	f04f 0900 	mov.w	r9, #0
 8009210:	e7de      	b.n	80091d0 <_printf_float+0x168>
 8009212:	b913      	cbnz	r3, 800921a <_printf_float+0x1b2>
 8009214:	6822      	ldr	r2, [r4, #0]
 8009216:	07d2      	lsls	r2, r2, #31
 8009218:	d501      	bpl.n	800921e <_printf_float+0x1b6>
 800921a:	3302      	adds	r3, #2
 800921c:	e7f4      	b.n	8009208 <_printf_float+0x1a0>
 800921e:	2301      	movs	r3, #1
 8009220:	e7f2      	b.n	8009208 <_printf_float+0x1a0>
 8009222:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009228:	4299      	cmp	r1, r3
 800922a:	db05      	blt.n	8009238 <_printf_float+0x1d0>
 800922c:	6823      	ldr	r3, [r4, #0]
 800922e:	6121      	str	r1, [r4, #16]
 8009230:	07d8      	lsls	r0, r3, #31
 8009232:	d5ea      	bpl.n	800920a <_printf_float+0x1a2>
 8009234:	1c4b      	adds	r3, r1, #1
 8009236:	e7e7      	b.n	8009208 <_printf_float+0x1a0>
 8009238:	2900      	cmp	r1, #0
 800923a:	bfd4      	ite	le
 800923c:	f1c1 0202 	rsble	r2, r1, #2
 8009240:	2201      	movgt	r2, #1
 8009242:	4413      	add	r3, r2
 8009244:	e7e0      	b.n	8009208 <_printf_float+0x1a0>
 8009246:	6823      	ldr	r3, [r4, #0]
 8009248:	055a      	lsls	r2, r3, #21
 800924a:	d407      	bmi.n	800925c <_printf_float+0x1f4>
 800924c:	6923      	ldr	r3, [r4, #16]
 800924e:	4642      	mov	r2, r8
 8009250:	4631      	mov	r1, r6
 8009252:	4628      	mov	r0, r5
 8009254:	47b8      	blx	r7
 8009256:	3001      	adds	r0, #1
 8009258:	d12c      	bne.n	80092b4 <_printf_float+0x24c>
 800925a:	e764      	b.n	8009126 <_printf_float+0xbe>
 800925c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009260:	f240 80e0 	bls.w	8009424 <_printf_float+0x3bc>
 8009264:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009268:	2200      	movs	r2, #0
 800926a:	2300      	movs	r3, #0
 800926c:	f7f7 fc5c 	bl	8000b28 <__aeabi_dcmpeq>
 8009270:	2800      	cmp	r0, #0
 8009272:	d034      	beq.n	80092de <_printf_float+0x276>
 8009274:	4a37      	ldr	r2, [pc, #220]	; (8009354 <_printf_float+0x2ec>)
 8009276:	2301      	movs	r3, #1
 8009278:	4631      	mov	r1, r6
 800927a:	4628      	mov	r0, r5
 800927c:	47b8      	blx	r7
 800927e:	3001      	adds	r0, #1
 8009280:	f43f af51 	beq.w	8009126 <_printf_float+0xbe>
 8009284:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009288:	429a      	cmp	r2, r3
 800928a:	db02      	blt.n	8009292 <_printf_float+0x22a>
 800928c:	6823      	ldr	r3, [r4, #0]
 800928e:	07d8      	lsls	r0, r3, #31
 8009290:	d510      	bpl.n	80092b4 <_printf_float+0x24c>
 8009292:	ee18 3a10 	vmov	r3, s16
 8009296:	4652      	mov	r2, sl
 8009298:	4631      	mov	r1, r6
 800929a:	4628      	mov	r0, r5
 800929c:	47b8      	blx	r7
 800929e:	3001      	adds	r0, #1
 80092a0:	f43f af41 	beq.w	8009126 <_printf_float+0xbe>
 80092a4:	f04f 0800 	mov.w	r8, #0
 80092a8:	f104 091a 	add.w	r9, r4, #26
 80092ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80092ae:	3b01      	subs	r3, #1
 80092b0:	4543      	cmp	r3, r8
 80092b2:	dc09      	bgt.n	80092c8 <_printf_float+0x260>
 80092b4:	6823      	ldr	r3, [r4, #0]
 80092b6:	079b      	lsls	r3, r3, #30
 80092b8:	f100 8107 	bmi.w	80094ca <_printf_float+0x462>
 80092bc:	68e0      	ldr	r0, [r4, #12]
 80092be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80092c0:	4298      	cmp	r0, r3
 80092c2:	bfb8      	it	lt
 80092c4:	4618      	movlt	r0, r3
 80092c6:	e730      	b.n	800912a <_printf_float+0xc2>
 80092c8:	2301      	movs	r3, #1
 80092ca:	464a      	mov	r2, r9
 80092cc:	4631      	mov	r1, r6
 80092ce:	4628      	mov	r0, r5
 80092d0:	47b8      	blx	r7
 80092d2:	3001      	adds	r0, #1
 80092d4:	f43f af27 	beq.w	8009126 <_printf_float+0xbe>
 80092d8:	f108 0801 	add.w	r8, r8, #1
 80092dc:	e7e6      	b.n	80092ac <_printf_float+0x244>
 80092de:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092e0:	2b00      	cmp	r3, #0
 80092e2:	dc39      	bgt.n	8009358 <_printf_float+0x2f0>
 80092e4:	4a1b      	ldr	r2, [pc, #108]	; (8009354 <_printf_float+0x2ec>)
 80092e6:	2301      	movs	r3, #1
 80092e8:	4631      	mov	r1, r6
 80092ea:	4628      	mov	r0, r5
 80092ec:	47b8      	blx	r7
 80092ee:	3001      	adds	r0, #1
 80092f0:	f43f af19 	beq.w	8009126 <_printf_float+0xbe>
 80092f4:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 80092f8:	4313      	orrs	r3, r2
 80092fa:	d102      	bne.n	8009302 <_printf_float+0x29a>
 80092fc:	6823      	ldr	r3, [r4, #0]
 80092fe:	07d9      	lsls	r1, r3, #31
 8009300:	d5d8      	bpl.n	80092b4 <_printf_float+0x24c>
 8009302:	ee18 3a10 	vmov	r3, s16
 8009306:	4652      	mov	r2, sl
 8009308:	4631      	mov	r1, r6
 800930a:	4628      	mov	r0, r5
 800930c:	47b8      	blx	r7
 800930e:	3001      	adds	r0, #1
 8009310:	f43f af09 	beq.w	8009126 <_printf_float+0xbe>
 8009314:	f04f 0900 	mov.w	r9, #0
 8009318:	f104 0a1a 	add.w	sl, r4, #26
 800931c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800931e:	425b      	negs	r3, r3
 8009320:	454b      	cmp	r3, r9
 8009322:	dc01      	bgt.n	8009328 <_printf_float+0x2c0>
 8009324:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009326:	e792      	b.n	800924e <_printf_float+0x1e6>
 8009328:	2301      	movs	r3, #1
 800932a:	4652      	mov	r2, sl
 800932c:	4631      	mov	r1, r6
 800932e:	4628      	mov	r0, r5
 8009330:	47b8      	blx	r7
 8009332:	3001      	adds	r0, #1
 8009334:	f43f aef7 	beq.w	8009126 <_printf_float+0xbe>
 8009338:	f109 0901 	add.w	r9, r9, #1
 800933c:	e7ee      	b.n	800931c <_printf_float+0x2b4>
 800933e:	bf00      	nop
 8009340:	7fefffff 	.word	0x7fefffff
 8009344:	0800d7d0 	.word	0x0800d7d0
 8009348:	0800d7d4 	.word	0x0800d7d4
 800934c:	0800d7d8 	.word	0x0800d7d8
 8009350:	0800d7dc 	.word	0x0800d7dc
 8009354:	0800d7e0 	.word	0x0800d7e0
 8009358:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800935a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800935c:	429a      	cmp	r2, r3
 800935e:	bfa8      	it	ge
 8009360:	461a      	movge	r2, r3
 8009362:	2a00      	cmp	r2, #0
 8009364:	4691      	mov	r9, r2
 8009366:	dc37      	bgt.n	80093d8 <_printf_float+0x370>
 8009368:	f04f 0b00 	mov.w	fp, #0
 800936c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009370:	f104 021a 	add.w	r2, r4, #26
 8009374:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009376:	9305      	str	r3, [sp, #20]
 8009378:	eba3 0309 	sub.w	r3, r3, r9
 800937c:	455b      	cmp	r3, fp
 800937e:	dc33      	bgt.n	80093e8 <_printf_float+0x380>
 8009380:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009384:	429a      	cmp	r2, r3
 8009386:	db3b      	blt.n	8009400 <_printf_float+0x398>
 8009388:	6823      	ldr	r3, [r4, #0]
 800938a:	07da      	lsls	r2, r3, #31
 800938c:	d438      	bmi.n	8009400 <_printf_float+0x398>
 800938e:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009392:	eba2 0903 	sub.w	r9, r2, r3
 8009396:	9b05      	ldr	r3, [sp, #20]
 8009398:	1ad2      	subs	r2, r2, r3
 800939a:	4591      	cmp	r9, r2
 800939c:	bfa8      	it	ge
 800939e:	4691      	movge	r9, r2
 80093a0:	f1b9 0f00 	cmp.w	r9, #0
 80093a4:	dc35      	bgt.n	8009412 <_printf_float+0x3aa>
 80093a6:	f04f 0800 	mov.w	r8, #0
 80093aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80093ae:	f104 0a1a 	add.w	sl, r4, #26
 80093b2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80093b6:	1a9b      	subs	r3, r3, r2
 80093b8:	eba3 0309 	sub.w	r3, r3, r9
 80093bc:	4543      	cmp	r3, r8
 80093be:	f77f af79 	ble.w	80092b4 <_printf_float+0x24c>
 80093c2:	2301      	movs	r3, #1
 80093c4:	4652      	mov	r2, sl
 80093c6:	4631      	mov	r1, r6
 80093c8:	4628      	mov	r0, r5
 80093ca:	47b8      	blx	r7
 80093cc:	3001      	adds	r0, #1
 80093ce:	f43f aeaa 	beq.w	8009126 <_printf_float+0xbe>
 80093d2:	f108 0801 	add.w	r8, r8, #1
 80093d6:	e7ec      	b.n	80093b2 <_printf_float+0x34a>
 80093d8:	4613      	mov	r3, r2
 80093da:	4631      	mov	r1, r6
 80093dc:	4642      	mov	r2, r8
 80093de:	4628      	mov	r0, r5
 80093e0:	47b8      	blx	r7
 80093e2:	3001      	adds	r0, #1
 80093e4:	d1c0      	bne.n	8009368 <_printf_float+0x300>
 80093e6:	e69e      	b.n	8009126 <_printf_float+0xbe>
 80093e8:	2301      	movs	r3, #1
 80093ea:	4631      	mov	r1, r6
 80093ec:	4628      	mov	r0, r5
 80093ee:	9205      	str	r2, [sp, #20]
 80093f0:	47b8      	blx	r7
 80093f2:	3001      	adds	r0, #1
 80093f4:	f43f ae97 	beq.w	8009126 <_printf_float+0xbe>
 80093f8:	9a05      	ldr	r2, [sp, #20]
 80093fa:	f10b 0b01 	add.w	fp, fp, #1
 80093fe:	e7b9      	b.n	8009374 <_printf_float+0x30c>
 8009400:	ee18 3a10 	vmov	r3, s16
 8009404:	4652      	mov	r2, sl
 8009406:	4631      	mov	r1, r6
 8009408:	4628      	mov	r0, r5
 800940a:	47b8      	blx	r7
 800940c:	3001      	adds	r0, #1
 800940e:	d1be      	bne.n	800938e <_printf_float+0x326>
 8009410:	e689      	b.n	8009126 <_printf_float+0xbe>
 8009412:	9a05      	ldr	r2, [sp, #20]
 8009414:	464b      	mov	r3, r9
 8009416:	4442      	add	r2, r8
 8009418:	4631      	mov	r1, r6
 800941a:	4628      	mov	r0, r5
 800941c:	47b8      	blx	r7
 800941e:	3001      	adds	r0, #1
 8009420:	d1c1      	bne.n	80093a6 <_printf_float+0x33e>
 8009422:	e680      	b.n	8009126 <_printf_float+0xbe>
 8009424:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009426:	2a01      	cmp	r2, #1
 8009428:	dc01      	bgt.n	800942e <_printf_float+0x3c6>
 800942a:	07db      	lsls	r3, r3, #31
 800942c:	d53a      	bpl.n	80094a4 <_printf_float+0x43c>
 800942e:	2301      	movs	r3, #1
 8009430:	4642      	mov	r2, r8
 8009432:	4631      	mov	r1, r6
 8009434:	4628      	mov	r0, r5
 8009436:	47b8      	blx	r7
 8009438:	3001      	adds	r0, #1
 800943a:	f43f ae74 	beq.w	8009126 <_printf_float+0xbe>
 800943e:	ee18 3a10 	vmov	r3, s16
 8009442:	4652      	mov	r2, sl
 8009444:	4631      	mov	r1, r6
 8009446:	4628      	mov	r0, r5
 8009448:	47b8      	blx	r7
 800944a:	3001      	adds	r0, #1
 800944c:	f43f ae6b 	beq.w	8009126 <_printf_float+0xbe>
 8009450:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009454:	2200      	movs	r2, #0
 8009456:	2300      	movs	r3, #0
 8009458:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800945c:	f7f7 fb64 	bl	8000b28 <__aeabi_dcmpeq>
 8009460:	b9d8      	cbnz	r0, 800949a <_printf_float+0x432>
 8009462:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009466:	f108 0201 	add.w	r2, r8, #1
 800946a:	4631      	mov	r1, r6
 800946c:	4628      	mov	r0, r5
 800946e:	47b8      	blx	r7
 8009470:	3001      	adds	r0, #1
 8009472:	d10e      	bne.n	8009492 <_printf_float+0x42a>
 8009474:	e657      	b.n	8009126 <_printf_float+0xbe>
 8009476:	2301      	movs	r3, #1
 8009478:	4652      	mov	r2, sl
 800947a:	4631      	mov	r1, r6
 800947c:	4628      	mov	r0, r5
 800947e:	47b8      	blx	r7
 8009480:	3001      	adds	r0, #1
 8009482:	f43f ae50 	beq.w	8009126 <_printf_float+0xbe>
 8009486:	f108 0801 	add.w	r8, r8, #1
 800948a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800948c:	3b01      	subs	r3, #1
 800948e:	4543      	cmp	r3, r8
 8009490:	dcf1      	bgt.n	8009476 <_printf_float+0x40e>
 8009492:	464b      	mov	r3, r9
 8009494:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009498:	e6da      	b.n	8009250 <_printf_float+0x1e8>
 800949a:	f04f 0800 	mov.w	r8, #0
 800949e:	f104 0a1a 	add.w	sl, r4, #26
 80094a2:	e7f2      	b.n	800948a <_printf_float+0x422>
 80094a4:	2301      	movs	r3, #1
 80094a6:	4642      	mov	r2, r8
 80094a8:	e7df      	b.n	800946a <_printf_float+0x402>
 80094aa:	2301      	movs	r3, #1
 80094ac:	464a      	mov	r2, r9
 80094ae:	4631      	mov	r1, r6
 80094b0:	4628      	mov	r0, r5
 80094b2:	47b8      	blx	r7
 80094b4:	3001      	adds	r0, #1
 80094b6:	f43f ae36 	beq.w	8009126 <_printf_float+0xbe>
 80094ba:	f108 0801 	add.w	r8, r8, #1
 80094be:	68e3      	ldr	r3, [r4, #12]
 80094c0:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80094c2:	1a5b      	subs	r3, r3, r1
 80094c4:	4543      	cmp	r3, r8
 80094c6:	dcf0      	bgt.n	80094aa <_printf_float+0x442>
 80094c8:	e6f8      	b.n	80092bc <_printf_float+0x254>
 80094ca:	f04f 0800 	mov.w	r8, #0
 80094ce:	f104 0919 	add.w	r9, r4, #25
 80094d2:	e7f4      	b.n	80094be <_printf_float+0x456>

080094d4 <_printf_common>:
 80094d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094d8:	4616      	mov	r6, r2
 80094da:	4699      	mov	r9, r3
 80094dc:	688a      	ldr	r2, [r1, #8]
 80094de:	690b      	ldr	r3, [r1, #16]
 80094e0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094e4:	4293      	cmp	r3, r2
 80094e6:	bfb8      	it	lt
 80094e8:	4613      	movlt	r3, r2
 80094ea:	6033      	str	r3, [r6, #0]
 80094ec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094f0:	4607      	mov	r7, r0
 80094f2:	460c      	mov	r4, r1
 80094f4:	b10a      	cbz	r2, 80094fa <_printf_common+0x26>
 80094f6:	3301      	adds	r3, #1
 80094f8:	6033      	str	r3, [r6, #0]
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	0699      	lsls	r1, r3, #26
 80094fe:	bf42      	ittt	mi
 8009500:	6833      	ldrmi	r3, [r6, #0]
 8009502:	3302      	addmi	r3, #2
 8009504:	6033      	strmi	r3, [r6, #0]
 8009506:	6825      	ldr	r5, [r4, #0]
 8009508:	f015 0506 	ands.w	r5, r5, #6
 800950c:	d106      	bne.n	800951c <_printf_common+0x48>
 800950e:	f104 0a19 	add.w	sl, r4, #25
 8009512:	68e3      	ldr	r3, [r4, #12]
 8009514:	6832      	ldr	r2, [r6, #0]
 8009516:	1a9b      	subs	r3, r3, r2
 8009518:	42ab      	cmp	r3, r5
 800951a:	dc26      	bgt.n	800956a <_printf_common+0x96>
 800951c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009520:	1e13      	subs	r3, r2, #0
 8009522:	6822      	ldr	r2, [r4, #0]
 8009524:	bf18      	it	ne
 8009526:	2301      	movne	r3, #1
 8009528:	0692      	lsls	r2, r2, #26
 800952a:	d42b      	bmi.n	8009584 <_printf_common+0xb0>
 800952c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009530:	4649      	mov	r1, r9
 8009532:	4638      	mov	r0, r7
 8009534:	47c0      	blx	r8
 8009536:	3001      	adds	r0, #1
 8009538:	d01e      	beq.n	8009578 <_printf_common+0xa4>
 800953a:	6823      	ldr	r3, [r4, #0]
 800953c:	6922      	ldr	r2, [r4, #16]
 800953e:	f003 0306 	and.w	r3, r3, #6
 8009542:	2b04      	cmp	r3, #4
 8009544:	bf02      	ittt	eq
 8009546:	68e5      	ldreq	r5, [r4, #12]
 8009548:	6833      	ldreq	r3, [r6, #0]
 800954a:	1aed      	subeq	r5, r5, r3
 800954c:	68a3      	ldr	r3, [r4, #8]
 800954e:	bf0c      	ite	eq
 8009550:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009554:	2500      	movne	r5, #0
 8009556:	4293      	cmp	r3, r2
 8009558:	bfc4      	itt	gt
 800955a:	1a9b      	subgt	r3, r3, r2
 800955c:	18ed      	addgt	r5, r5, r3
 800955e:	2600      	movs	r6, #0
 8009560:	341a      	adds	r4, #26
 8009562:	42b5      	cmp	r5, r6
 8009564:	d11a      	bne.n	800959c <_printf_common+0xc8>
 8009566:	2000      	movs	r0, #0
 8009568:	e008      	b.n	800957c <_printf_common+0xa8>
 800956a:	2301      	movs	r3, #1
 800956c:	4652      	mov	r2, sl
 800956e:	4649      	mov	r1, r9
 8009570:	4638      	mov	r0, r7
 8009572:	47c0      	blx	r8
 8009574:	3001      	adds	r0, #1
 8009576:	d103      	bne.n	8009580 <_printf_common+0xac>
 8009578:	f04f 30ff 	mov.w	r0, #4294967295
 800957c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009580:	3501      	adds	r5, #1
 8009582:	e7c6      	b.n	8009512 <_printf_common+0x3e>
 8009584:	18e1      	adds	r1, r4, r3
 8009586:	1c5a      	adds	r2, r3, #1
 8009588:	2030      	movs	r0, #48	; 0x30
 800958a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800958e:	4422      	add	r2, r4
 8009590:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009594:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009598:	3302      	adds	r3, #2
 800959a:	e7c7      	b.n	800952c <_printf_common+0x58>
 800959c:	2301      	movs	r3, #1
 800959e:	4622      	mov	r2, r4
 80095a0:	4649      	mov	r1, r9
 80095a2:	4638      	mov	r0, r7
 80095a4:	47c0      	blx	r8
 80095a6:	3001      	adds	r0, #1
 80095a8:	d0e6      	beq.n	8009578 <_printf_common+0xa4>
 80095aa:	3601      	adds	r6, #1
 80095ac:	e7d9      	b.n	8009562 <_printf_common+0x8e>
	...

080095b0 <_printf_i>:
 80095b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80095b4:	7e0f      	ldrb	r7, [r1, #24]
 80095b6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80095b8:	2f78      	cmp	r7, #120	; 0x78
 80095ba:	4691      	mov	r9, r2
 80095bc:	4680      	mov	r8, r0
 80095be:	460c      	mov	r4, r1
 80095c0:	469a      	mov	sl, r3
 80095c2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80095c6:	d807      	bhi.n	80095d8 <_printf_i+0x28>
 80095c8:	2f62      	cmp	r7, #98	; 0x62
 80095ca:	d80a      	bhi.n	80095e2 <_printf_i+0x32>
 80095cc:	2f00      	cmp	r7, #0
 80095ce:	f000 80d4 	beq.w	800977a <_printf_i+0x1ca>
 80095d2:	2f58      	cmp	r7, #88	; 0x58
 80095d4:	f000 80c0 	beq.w	8009758 <_printf_i+0x1a8>
 80095d8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095dc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80095e0:	e03a      	b.n	8009658 <_printf_i+0xa8>
 80095e2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80095e6:	2b15      	cmp	r3, #21
 80095e8:	d8f6      	bhi.n	80095d8 <_printf_i+0x28>
 80095ea:	a101      	add	r1, pc, #4	; (adr r1, 80095f0 <_printf_i+0x40>)
 80095ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80095f0:	08009649 	.word	0x08009649
 80095f4:	0800965d 	.word	0x0800965d
 80095f8:	080095d9 	.word	0x080095d9
 80095fc:	080095d9 	.word	0x080095d9
 8009600:	080095d9 	.word	0x080095d9
 8009604:	080095d9 	.word	0x080095d9
 8009608:	0800965d 	.word	0x0800965d
 800960c:	080095d9 	.word	0x080095d9
 8009610:	080095d9 	.word	0x080095d9
 8009614:	080095d9 	.word	0x080095d9
 8009618:	080095d9 	.word	0x080095d9
 800961c:	08009761 	.word	0x08009761
 8009620:	08009689 	.word	0x08009689
 8009624:	0800971b 	.word	0x0800971b
 8009628:	080095d9 	.word	0x080095d9
 800962c:	080095d9 	.word	0x080095d9
 8009630:	08009783 	.word	0x08009783
 8009634:	080095d9 	.word	0x080095d9
 8009638:	08009689 	.word	0x08009689
 800963c:	080095d9 	.word	0x080095d9
 8009640:	080095d9 	.word	0x080095d9
 8009644:	08009723 	.word	0x08009723
 8009648:	682b      	ldr	r3, [r5, #0]
 800964a:	1d1a      	adds	r2, r3, #4
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	602a      	str	r2, [r5, #0]
 8009650:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009654:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009658:	2301      	movs	r3, #1
 800965a:	e09f      	b.n	800979c <_printf_i+0x1ec>
 800965c:	6820      	ldr	r0, [r4, #0]
 800965e:	682b      	ldr	r3, [r5, #0]
 8009660:	0607      	lsls	r7, r0, #24
 8009662:	f103 0104 	add.w	r1, r3, #4
 8009666:	6029      	str	r1, [r5, #0]
 8009668:	d501      	bpl.n	800966e <_printf_i+0xbe>
 800966a:	681e      	ldr	r6, [r3, #0]
 800966c:	e003      	b.n	8009676 <_printf_i+0xc6>
 800966e:	0646      	lsls	r6, r0, #25
 8009670:	d5fb      	bpl.n	800966a <_printf_i+0xba>
 8009672:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009676:	2e00      	cmp	r6, #0
 8009678:	da03      	bge.n	8009682 <_printf_i+0xd2>
 800967a:	232d      	movs	r3, #45	; 0x2d
 800967c:	4276      	negs	r6, r6
 800967e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009682:	485a      	ldr	r0, [pc, #360]	; (80097ec <_printf_i+0x23c>)
 8009684:	230a      	movs	r3, #10
 8009686:	e012      	b.n	80096ae <_printf_i+0xfe>
 8009688:	682b      	ldr	r3, [r5, #0]
 800968a:	6820      	ldr	r0, [r4, #0]
 800968c:	1d19      	adds	r1, r3, #4
 800968e:	6029      	str	r1, [r5, #0]
 8009690:	0605      	lsls	r5, r0, #24
 8009692:	d501      	bpl.n	8009698 <_printf_i+0xe8>
 8009694:	681e      	ldr	r6, [r3, #0]
 8009696:	e002      	b.n	800969e <_printf_i+0xee>
 8009698:	0641      	lsls	r1, r0, #25
 800969a:	d5fb      	bpl.n	8009694 <_printf_i+0xe4>
 800969c:	881e      	ldrh	r6, [r3, #0]
 800969e:	4853      	ldr	r0, [pc, #332]	; (80097ec <_printf_i+0x23c>)
 80096a0:	2f6f      	cmp	r7, #111	; 0x6f
 80096a2:	bf0c      	ite	eq
 80096a4:	2308      	moveq	r3, #8
 80096a6:	230a      	movne	r3, #10
 80096a8:	2100      	movs	r1, #0
 80096aa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80096ae:	6865      	ldr	r5, [r4, #4]
 80096b0:	60a5      	str	r5, [r4, #8]
 80096b2:	2d00      	cmp	r5, #0
 80096b4:	bfa2      	ittt	ge
 80096b6:	6821      	ldrge	r1, [r4, #0]
 80096b8:	f021 0104 	bicge.w	r1, r1, #4
 80096bc:	6021      	strge	r1, [r4, #0]
 80096be:	b90e      	cbnz	r6, 80096c4 <_printf_i+0x114>
 80096c0:	2d00      	cmp	r5, #0
 80096c2:	d04b      	beq.n	800975c <_printf_i+0x1ac>
 80096c4:	4615      	mov	r5, r2
 80096c6:	fbb6 f1f3 	udiv	r1, r6, r3
 80096ca:	fb03 6711 	mls	r7, r3, r1, r6
 80096ce:	5dc7      	ldrb	r7, [r0, r7]
 80096d0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80096d4:	4637      	mov	r7, r6
 80096d6:	42bb      	cmp	r3, r7
 80096d8:	460e      	mov	r6, r1
 80096da:	d9f4      	bls.n	80096c6 <_printf_i+0x116>
 80096dc:	2b08      	cmp	r3, #8
 80096de:	d10b      	bne.n	80096f8 <_printf_i+0x148>
 80096e0:	6823      	ldr	r3, [r4, #0]
 80096e2:	07de      	lsls	r6, r3, #31
 80096e4:	d508      	bpl.n	80096f8 <_printf_i+0x148>
 80096e6:	6923      	ldr	r3, [r4, #16]
 80096e8:	6861      	ldr	r1, [r4, #4]
 80096ea:	4299      	cmp	r1, r3
 80096ec:	bfde      	ittt	le
 80096ee:	2330      	movle	r3, #48	; 0x30
 80096f0:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096f4:	f105 35ff 	addle.w	r5, r5, #4294967295
 80096f8:	1b52      	subs	r2, r2, r5
 80096fa:	6122      	str	r2, [r4, #16]
 80096fc:	f8cd a000 	str.w	sl, [sp]
 8009700:	464b      	mov	r3, r9
 8009702:	aa03      	add	r2, sp, #12
 8009704:	4621      	mov	r1, r4
 8009706:	4640      	mov	r0, r8
 8009708:	f7ff fee4 	bl	80094d4 <_printf_common>
 800970c:	3001      	adds	r0, #1
 800970e:	d14a      	bne.n	80097a6 <_printf_i+0x1f6>
 8009710:	f04f 30ff 	mov.w	r0, #4294967295
 8009714:	b004      	add	sp, #16
 8009716:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800971a:	6823      	ldr	r3, [r4, #0]
 800971c:	f043 0320 	orr.w	r3, r3, #32
 8009720:	6023      	str	r3, [r4, #0]
 8009722:	4833      	ldr	r0, [pc, #204]	; (80097f0 <_printf_i+0x240>)
 8009724:	2778      	movs	r7, #120	; 0x78
 8009726:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800972a:	6823      	ldr	r3, [r4, #0]
 800972c:	6829      	ldr	r1, [r5, #0]
 800972e:	061f      	lsls	r7, r3, #24
 8009730:	f851 6b04 	ldr.w	r6, [r1], #4
 8009734:	d402      	bmi.n	800973c <_printf_i+0x18c>
 8009736:	065f      	lsls	r7, r3, #25
 8009738:	bf48      	it	mi
 800973a:	b2b6      	uxthmi	r6, r6
 800973c:	07df      	lsls	r7, r3, #31
 800973e:	bf48      	it	mi
 8009740:	f043 0320 	orrmi.w	r3, r3, #32
 8009744:	6029      	str	r1, [r5, #0]
 8009746:	bf48      	it	mi
 8009748:	6023      	strmi	r3, [r4, #0]
 800974a:	b91e      	cbnz	r6, 8009754 <_printf_i+0x1a4>
 800974c:	6823      	ldr	r3, [r4, #0]
 800974e:	f023 0320 	bic.w	r3, r3, #32
 8009752:	6023      	str	r3, [r4, #0]
 8009754:	2310      	movs	r3, #16
 8009756:	e7a7      	b.n	80096a8 <_printf_i+0xf8>
 8009758:	4824      	ldr	r0, [pc, #144]	; (80097ec <_printf_i+0x23c>)
 800975a:	e7e4      	b.n	8009726 <_printf_i+0x176>
 800975c:	4615      	mov	r5, r2
 800975e:	e7bd      	b.n	80096dc <_printf_i+0x12c>
 8009760:	682b      	ldr	r3, [r5, #0]
 8009762:	6826      	ldr	r6, [r4, #0]
 8009764:	6961      	ldr	r1, [r4, #20]
 8009766:	1d18      	adds	r0, r3, #4
 8009768:	6028      	str	r0, [r5, #0]
 800976a:	0635      	lsls	r5, r6, #24
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	d501      	bpl.n	8009774 <_printf_i+0x1c4>
 8009770:	6019      	str	r1, [r3, #0]
 8009772:	e002      	b.n	800977a <_printf_i+0x1ca>
 8009774:	0670      	lsls	r0, r6, #25
 8009776:	d5fb      	bpl.n	8009770 <_printf_i+0x1c0>
 8009778:	8019      	strh	r1, [r3, #0]
 800977a:	2300      	movs	r3, #0
 800977c:	6123      	str	r3, [r4, #16]
 800977e:	4615      	mov	r5, r2
 8009780:	e7bc      	b.n	80096fc <_printf_i+0x14c>
 8009782:	682b      	ldr	r3, [r5, #0]
 8009784:	1d1a      	adds	r2, r3, #4
 8009786:	602a      	str	r2, [r5, #0]
 8009788:	681d      	ldr	r5, [r3, #0]
 800978a:	6862      	ldr	r2, [r4, #4]
 800978c:	2100      	movs	r1, #0
 800978e:	4628      	mov	r0, r5
 8009790:	f7f6 fd4e 	bl	8000230 <memchr>
 8009794:	b108      	cbz	r0, 800979a <_printf_i+0x1ea>
 8009796:	1b40      	subs	r0, r0, r5
 8009798:	6060      	str	r0, [r4, #4]
 800979a:	6863      	ldr	r3, [r4, #4]
 800979c:	6123      	str	r3, [r4, #16]
 800979e:	2300      	movs	r3, #0
 80097a0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80097a4:	e7aa      	b.n	80096fc <_printf_i+0x14c>
 80097a6:	6923      	ldr	r3, [r4, #16]
 80097a8:	462a      	mov	r2, r5
 80097aa:	4649      	mov	r1, r9
 80097ac:	4640      	mov	r0, r8
 80097ae:	47d0      	blx	sl
 80097b0:	3001      	adds	r0, #1
 80097b2:	d0ad      	beq.n	8009710 <_printf_i+0x160>
 80097b4:	6823      	ldr	r3, [r4, #0]
 80097b6:	079b      	lsls	r3, r3, #30
 80097b8:	d413      	bmi.n	80097e2 <_printf_i+0x232>
 80097ba:	68e0      	ldr	r0, [r4, #12]
 80097bc:	9b03      	ldr	r3, [sp, #12]
 80097be:	4298      	cmp	r0, r3
 80097c0:	bfb8      	it	lt
 80097c2:	4618      	movlt	r0, r3
 80097c4:	e7a6      	b.n	8009714 <_printf_i+0x164>
 80097c6:	2301      	movs	r3, #1
 80097c8:	4632      	mov	r2, r6
 80097ca:	4649      	mov	r1, r9
 80097cc:	4640      	mov	r0, r8
 80097ce:	47d0      	blx	sl
 80097d0:	3001      	adds	r0, #1
 80097d2:	d09d      	beq.n	8009710 <_printf_i+0x160>
 80097d4:	3501      	adds	r5, #1
 80097d6:	68e3      	ldr	r3, [r4, #12]
 80097d8:	9903      	ldr	r1, [sp, #12]
 80097da:	1a5b      	subs	r3, r3, r1
 80097dc:	42ab      	cmp	r3, r5
 80097de:	dcf2      	bgt.n	80097c6 <_printf_i+0x216>
 80097e0:	e7eb      	b.n	80097ba <_printf_i+0x20a>
 80097e2:	2500      	movs	r5, #0
 80097e4:	f104 0619 	add.w	r6, r4, #25
 80097e8:	e7f5      	b.n	80097d6 <_printf_i+0x226>
 80097ea:	bf00      	nop
 80097ec:	0800d7e2 	.word	0x0800d7e2
 80097f0:	0800d7f3 	.word	0x0800d7f3

080097f4 <_scanf_float>:
 80097f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f8:	b087      	sub	sp, #28
 80097fa:	4617      	mov	r7, r2
 80097fc:	9303      	str	r3, [sp, #12]
 80097fe:	688b      	ldr	r3, [r1, #8]
 8009800:	1e5a      	subs	r2, r3, #1
 8009802:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8009806:	bf83      	ittte	hi
 8009808:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800980c:	195b      	addhi	r3, r3, r5
 800980e:	9302      	strhi	r3, [sp, #8]
 8009810:	2300      	movls	r3, #0
 8009812:	bf86      	itte	hi
 8009814:	f240 135d 	movwhi	r3, #349	; 0x15d
 8009818:	608b      	strhi	r3, [r1, #8]
 800981a:	9302      	strls	r3, [sp, #8]
 800981c:	680b      	ldr	r3, [r1, #0]
 800981e:	468b      	mov	fp, r1
 8009820:	2500      	movs	r5, #0
 8009822:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8009826:	f84b 3b1c 	str.w	r3, [fp], #28
 800982a:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800982e:	4680      	mov	r8, r0
 8009830:	460c      	mov	r4, r1
 8009832:	465e      	mov	r6, fp
 8009834:	46aa      	mov	sl, r5
 8009836:	46a9      	mov	r9, r5
 8009838:	9501      	str	r5, [sp, #4]
 800983a:	68a2      	ldr	r2, [r4, #8]
 800983c:	b152      	cbz	r2, 8009854 <_scanf_float+0x60>
 800983e:	683b      	ldr	r3, [r7, #0]
 8009840:	781b      	ldrb	r3, [r3, #0]
 8009842:	2b4e      	cmp	r3, #78	; 0x4e
 8009844:	d864      	bhi.n	8009910 <_scanf_float+0x11c>
 8009846:	2b40      	cmp	r3, #64	; 0x40
 8009848:	d83c      	bhi.n	80098c4 <_scanf_float+0xd0>
 800984a:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800984e:	b2c8      	uxtb	r0, r1
 8009850:	280e      	cmp	r0, #14
 8009852:	d93a      	bls.n	80098ca <_scanf_float+0xd6>
 8009854:	f1b9 0f00 	cmp.w	r9, #0
 8009858:	d003      	beq.n	8009862 <_scanf_float+0x6e>
 800985a:	6823      	ldr	r3, [r4, #0]
 800985c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009860:	6023      	str	r3, [r4, #0]
 8009862:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009866:	f1ba 0f01 	cmp.w	sl, #1
 800986a:	f200 8113 	bhi.w	8009a94 <_scanf_float+0x2a0>
 800986e:	455e      	cmp	r6, fp
 8009870:	f200 8105 	bhi.w	8009a7e <_scanf_float+0x28a>
 8009874:	2501      	movs	r5, #1
 8009876:	4628      	mov	r0, r5
 8009878:	b007      	add	sp, #28
 800987a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800987e:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8009882:	2a0d      	cmp	r2, #13
 8009884:	d8e6      	bhi.n	8009854 <_scanf_float+0x60>
 8009886:	a101      	add	r1, pc, #4	; (adr r1, 800988c <_scanf_float+0x98>)
 8009888:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800988c:	080099cb 	.word	0x080099cb
 8009890:	08009855 	.word	0x08009855
 8009894:	08009855 	.word	0x08009855
 8009898:	08009855 	.word	0x08009855
 800989c:	08009a2b 	.word	0x08009a2b
 80098a0:	08009a03 	.word	0x08009a03
 80098a4:	08009855 	.word	0x08009855
 80098a8:	08009855 	.word	0x08009855
 80098ac:	080099d9 	.word	0x080099d9
 80098b0:	08009855 	.word	0x08009855
 80098b4:	08009855 	.word	0x08009855
 80098b8:	08009855 	.word	0x08009855
 80098bc:	08009855 	.word	0x08009855
 80098c0:	08009991 	.word	0x08009991
 80098c4:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 80098c8:	e7db      	b.n	8009882 <_scanf_float+0x8e>
 80098ca:	290e      	cmp	r1, #14
 80098cc:	d8c2      	bhi.n	8009854 <_scanf_float+0x60>
 80098ce:	a001      	add	r0, pc, #4	; (adr r0, 80098d4 <_scanf_float+0xe0>)
 80098d0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80098d4:	08009983 	.word	0x08009983
 80098d8:	08009855 	.word	0x08009855
 80098dc:	08009983 	.word	0x08009983
 80098e0:	08009a17 	.word	0x08009a17
 80098e4:	08009855 	.word	0x08009855
 80098e8:	08009931 	.word	0x08009931
 80098ec:	0800996d 	.word	0x0800996d
 80098f0:	0800996d 	.word	0x0800996d
 80098f4:	0800996d 	.word	0x0800996d
 80098f8:	0800996d 	.word	0x0800996d
 80098fc:	0800996d 	.word	0x0800996d
 8009900:	0800996d 	.word	0x0800996d
 8009904:	0800996d 	.word	0x0800996d
 8009908:	0800996d 	.word	0x0800996d
 800990c:	0800996d 	.word	0x0800996d
 8009910:	2b6e      	cmp	r3, #110	; 0x6e
 8009912:	d809      	bhi.n	8009928 <_scanf_float+0x134>
 8009914:	2b60      	cmp	r3, #96	; 0x60
 8009916:	d8b2      	bhi.n	800987e <_scanf_float+0x8a>
 8009918:	2b54      	cmp	r3, #84	; 0x54
 800991a:	d077      	beq.n	8009a0c <_scanf_float+0x218>
 800991c:	2b59      	cmp	r3, #89	; 0x59
 800991e:	d199      	bne.n	8009854 <_scanf_float+0x60>
 8009920:	2d07      	cmp	r5, #7
 8009922:	d197      	bne.n	8009854 <_scanf_float+0x60>
 8009924:	2508      	movs	r5, #8
 8009926:	e029      	b.n	800997c <_scanf_float+0x188>
 8009928:	2b74      	cmp	r3, #116	; 0x74
 800992a:	d06f      	beq.n	8009a0c <_scanf_float+0x218>
 800992c:	2b79      	cmp	r3, #121	; 0x79
 800992e:	e7f6      	b.n	800991e <_scanf_float+0x12a>
 8009930:	6821      	ldr	r1, [r4, #0]
 8009932:	05c8      	lsls	r0, r1, #23
 8009934:	d51a      	bpl.n	800996c <_scanf_float+0x178>
 8009936:	9b02      	ldr	r3, [sp, #8]
 8009938:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800993c:	6021      	str	r1, [r4, #0]
 800993e:	f109 0901 	add.w	r9, r9, #1
 8009942:	b11b      	cbz	r3, 800994c <_scanf_float+0x158>
 8009944:	3b01      	subs	r3, #1
 8009946:	3201      	adds	r2, #1
 8009948:	9302      	str	r3, [sp, #8]
 800994a:	60a2      	str	r2, [r4, #8]
 800994c:	68a3      	ldr	r3, [r4, #8]
 800994e:	3b01      	subs	r3, #1
 8009950:	60a3      	str	r3, [r4, #8]
 8009952:	6923      	ldr	r3, [r4, #16]
 8009954:	3301      	adds	r3, #1
 8009956:	6123      	str	r3, [r4, #16]
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	3b01      	subs	r3, #1
 800995c:	2b00      	cmp	r3, #0
 800995e:	607b      	str	r3, [r7, #4]
 8009960:	f340 8084 	ble.w	8009a6c <_scanf_float+0x278>
 8009964:	683b      	ldr	r3, [r7, #0]
 8009966:	3301      	adds	r3, #1
 8009968:	603b      	str	r3, [r7, #0]
 800996a:	e766      	b.n	800983a <_scanf_float+0x46>
 800996c:	eb1a 0f05 	cmn.w	sl, r5
 8009970:	f47f af70 	bne.w	8009854 <_scanf_float+0x60>
 8009974:	6822      	ldr	r2, [r4, #0]
 8009976:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800997a:	6022      	str	r2, [r4, #0]
 800997c:	f806 3b01 	strb.w	r3, [r6], #1
 8009980:	e7e4      	b.n	800994c <_scanf_float+0x158>
 8009982:	6822      	ldr	r2, [r4, #0]
 8009984:	0610      	lsls	r0, r2, #24
 8009986:	f57f af65 	bpl.w	8009854 <_scanf_float+0x60>
 800998a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800998e:	e7f4      	b.n	800997a <_scanf_float+0x186>
 8009990:	f1ba 0f00 	cmp.w	sl, #0
 8009994:	d10e      	bne.n	80099b4 <_scanf_float+0x1c0>
 8009996:	f1b9 0f00 	cmp.w	r9, #0
 800999a:	d10e      	bne.n	80099ba <_scanf_float+0x1c6>
 800999c:	6822      	ldr	r2, [r4, #0]
 800999e:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80099a2:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80099a6:	d108      	bne.n	80099ba <_scanf_float+0x1c6>
 80099a8:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80099ac:	6022      	str	r2, [r4, #0]
 80099ae:	f04f 0a01 	mov.w	sl, #1
 80099b2:	e7e3      	b.n	800997c <_scanf_float+0x188>
 80099b4:	f1ba 0f02 	cmp.w	sl, #2
 80099b8:	d055      	beq.n	8009a66 <_scanf_float+0x272>
 80099ba:	2d01      	cmp	r5, #1
 80099bc:	d002      	beq.n	80099c4 <_scanf_float+0x1d0>
 80099be:	2d04      	cmp	r5, #4
 80099c0:	f47f af48 	bne.w	8009854 <_scanf_float+0x60>
 80099c4:	3501      	adds	r5, #1
 80099c6:	b2ed      	uxtb	r5, r5
 80099c8:	e7d8      	b.n	800997c <_scanf_float+0x188>
 80099ca:	f1ba 0f01 	cmp.w	sl, #1
 80099ce:	f47f af41 	bne.w	8009854 <_scanf_float+0x60>
 80099d2:	f04f 0a02 	mov.w	sl, #2
 80099d6:	e7d1      	b.n	800997c <_scanf_float+0x188>
 80099d8:	b97d      	cbnz	r5, 80099fa <_scanf_float+0x206>
 80099da:	f1b9 0f00 	cmp.w	r9, #0
 80099de:	f47f af3c 	bne.w	800985a <_scanf_float+0x66>
 80099e2:	6822      	ldr	r2, [r4, #0]
 80099e4:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80099e8:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80099ec:	f47f af39 	bne.w	8009862 <_scanf_float+0x6e>
 80099f0:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80099f4:	6022      	str	r2, [r4, #0]
 80099f6:	2501      	movs	r5, #1
 80099f8:	e7c0      	b.n	800997c <_scanf_float+0x188>
 80099fa:	2d03      	cmp	r5, #3
 80099fc:	d0e2      	beq.n	80099c4 <_scanf_float+0x1d0>
 80099fe:	2d05      	cmp	r5, #5
 8009a00:	e7de      	b.n	80099c0 <_scanf_float+0x1cc>
 8009a02:	2d02      	cmp	r5, #2
 8009a04:	f47f af26 	bne.w	8009854 <_scanf_float+0x60>
 8009a08:	2503      	movs	r5, #3
 8009a0a:	e7b7      	b.n	800997c <_scanf_float+0x188>
 8009a0c:	2d06      	cmp	r5, #6
 8009a0e:	f47f af21 	bne.w	8009854 <_scanf_float+0x60>
 8009a12:	2507      	movs	r5, #7
 8009a14:	e7b2      	b.n	800997c <_scanf_float+0x188>
 8009a16:	6822      	ldr	r2, [r4, #0]
 8009a18:	0591      	lsls	r1, r2, #22
 8009a1a:	f57f af1b 	bpl.w	8009854 <_scanf_float+0x60>
 8009a1e:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8009a22:	6022      	str	r2, [r4, #0]
 8009a24:	f8cd 9004 	str.w	r9, [sp, #4]
 8009a28:	e7a8      	b.n	800997c <_scanf_float+0x188>
 8009a2a:	6822      	ldr	r2, [r4, #0]
 8009a2c:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8009a30:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8009a34:	d006      	beq.n	8009a44 <_scanf_float+0x250>
 8009a36:	0550      	lsls	r0, r2, #21
 8009a38:	f57f af0c 	bpl.w	8009854 <_scanf_float+0x60>
 8009a3c:	f1b9 0f00 	cmp.w	r9, #0
 8009a40:	f43f af0f 	beq.w	8009862 <_scanf_float+0x6e>
 8009a44:	0591      	lsls	r1, r2, #22
 8009a46:	bf58      	it	pl
 8009a48:	9901      	ldrpl	r1, [sp, #4]
 8009a4a:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8009a4e:	bf58      	it	pl
 8009a50:	eba9 0101 	subpl.w	r1, r9, r1
 8009a54:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8009a58:	bf58      	it	pl
 8009a5a:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8009a5e:	6022      	str	r2, [r4, #0]
 8009a60:	f04f 0900 	mov.w	r9, #0
 8009a64:	e78a      	b.n	800997c <_scanf_float+0x188>
 8009a66:	f04f 0a03 	mov.w	sl, #3
 8009a6a:	e787      	b.n	800997c <_scanf_float+0x188>
 8009a6c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8009a70:	4639      	mov	r1, r7
 8009a72:	4640      	mov	r0, r8
 8009a74:	4798      	blx	r3
 8009a76:	2800      	cmp	r0, #0
 8009a78:	f43f aedf 	beq.w	800983a <_scanf_float+0x46>
 8009a7c:	e6ea      	b.n	8009854 <_scanf_float+0x60>
 8009a7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009a82:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009a86:	463a      	mov	r2, r7
 8009a88:	4640      	mov	r0, r8
 8009a8a:	4798      	blx	r3
 8009a8c:	6923      	ldr	r3, [r4, #16]
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	6123      	str	r3, [r4, #16]
 8009a92:	e6ec      	b.n	800986e <_scanf_float+0x7a>
 8009a94:	1e6b      	subs	r3, r5, #1
 8009a96:	2b06      	cmp	r3, #6
 8009a98:	d825      	bhi.n	8009ae6 <_scanf_float+0x2f2>
 8009a9a:	2d02      	cmp	r5, #2
 8009a9c:	d836      	bhi.n	8009b0c <_scanf_float+0x318>
 8009a9e:	455e      	cmp	r6, fp
 8009aa0:	f67f aee8 	bls.w	8009874 <_scanf_float+0x80>
 8009aa4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009aa8:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009aac:	463a      	mov	r2, r7
 8009aae:	4640      	mov	r0, r8
 8009ab0:	4798      	blx	r3
 8009ab2:	6923      	ldr	r3, [r4, #16]
 8009ab4:	3b01      	subs	r3, #1
 8009ab6:	6123      	str	r3, [r4, #16]
 8009ab8:	e7f1      	b.n	8009a9e <_scanf_float+0x2aa>
 8009aba:	9802      	ldr	r0, [sp, #8]
 8009abc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009ac0:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8009ac4:	9002      	str	r0, [sp, #8]
 8009ac6:	463a      	mov	r2, r7
 8009ac8:	4640      	mov	r0, r8
 8009aca:	4798      	blx	r3
 8009acc:	6923      	ldr	r3, [r4, #16]
 8009ace:	3b01      	subs	r3, #1
 8009ad0:	6123      	str	r3, [r4, #16]
 8009ad2:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009ad6:	fa5f fa8a 	uxtb.w	sl, sl
 8009ada:	f1ba 0f02 	cmp.w	sl, #2
 8009ade:	d1ec      	bne.n	8009aba <_scanf_float+0x2c6>
 8009ae0:	3d03      	subs	r5, #3
 8009ae2:	b2ed      	uxtb	r5, r5
 8009ae4:	1b76      	subs	r6, r6, r5
 8009ae6:	6823      	ldr	r3, [r4, #0]
 8009ae8:	05da      	lsls	r2, r3, #23
 8009aea:	d52f      	bpl.n	8009b4c <_scanf_float+0x358>
 8009aec:	055b      	lsls	r3, r3, #21
 8009aee:	d510      	bpl.n	8009b12 <_scanf_float+0x31e>
 8009af0:	455e      	cmp	r6, fp
 8009af2:	f67f aebf 	bls.w	8009874 <_scanf_float+0x80>
 8009af6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009afa:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8009afe:	463a      	mov	r2, r7
 8009b00:	4640      	mov	r0, r8
 8009b02:	4798      	blx	r3
 8009b04:	6923      	ldr	r3, [r4, #16]
 8009b06:	3b01      	subs	r3, #1
 8009b08:	6123      	str	r3, [r4, #16]
 8009b0a:	e7f1      	b.n	8009af0 <_scanf_float+0x2fc>
 8009b0c:	46aa      	mov	sl, r5
 8009b0e:	9602      	str	r6, [sp, #8]
 8009b10:	e7df      	b.n	8009ad2 <_scanf_float+0x2de>
 8009b12:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8009b16:	6923      	ldr	r3, [r4, #16]
 8009b18:	2965      	cmp	r1, #101	; 0x65
 8009b1a:	f103 33ff 	add.w	r3, r3, #4294967295
 8009b1e:	f106 35ff 	add.w	r5, r6, #4294967295
 8009b22:	6123      	str	r3, [r4, #16]
 8009b24:	d00c      	beq.n	8009b40 <_scanf_float+0x34c>
 8009b26:	2945      	cmp	r1, #69	; 0x45
 8009b28:	d00a      	beq.n	8009b40 <_scanf_float+0x34c>
 8009b2a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b2e:	463a      	mov	r2, r7
 8009b30:	4640      	mov	r0, r8
 8009b32:	4798      	blx	r3
 8009b34:	6923      	ldr	r3, [r4, #16]
 8009b36:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8009b3a:	3b01      	subs	r3, #1
 8009b3c:	1eb5      	subs	r5, r6, #2
 8009b3e:	6123      	str	r3, [r4, #16]
 8009b40:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8009b44:	463a      	mov	r2, r7
 8009b46:	4640      	mov	r0, r8
 8009b48:	4798      	blx	r3
 8009b4a:	462e      	mov	r6, r5
 8009b4c:	6825      	ldr	r5, [r4, #0]
 8009b4e:	f015 0510 	ands.w	r5, r5, #16
 8009b52:	d158      	bne.n	8009c06 <_scanf_float+0x412>
 8009b54:	7035      	strb	r5, [r6, #0]
 8009b56:	6823      	ldr	r3, [r4, #0]
 8009b58:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009b5c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009b60:	d11c      	bne.n	8009b9c <_scanf_float+0x3a8>
 8009b62:	9b01      	ldr	r3, [sp, #4]
 8009b64:	454b      	cmp	r3, r9
 8009b66:	eba3 0209 	sub.w	r2, r3, r9
 8009b6a:	d124      	bne.n	8009bb6 <_scanf_float+0x3c2>
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	4659      	mov	r1, fp
 8009b70:	4640      	mov	r0, r8
 8009b72:	f002 fc65 	bl	800c440 <_strtod_r>
 8009b76:	9b03      	ldr	r3, [sp, #12]
 8009b78:	6821      	ldr	r1, [r4, #0]
 8009b7a:	681b      	ldr	r3, [r3, #0]
 8009b7c:	f011 0f02 	tst.w	r1, #2
 8009b80:	ec57 6b10 	vmov	r6, r7, d0
 8009b84:	f103 0204 	add.w	r2, r3, #4
 8009b88:	d020      	beq.n	8009bcc <_scanf_float+0x3d8>
 8009b8a:	9903      	ldr	r1, [sp, #12]
 8009b8c:	600a      	str	r2, [r1, #0]
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	e9c3 6700 	strd	r6, r7, [r3]
 8009b94:	68e3      	ldr	r3, [r4, #12]
 8009b96:	3301      	adds	r3, #1
 8009b98:	60e3      	str	r3, [r4, #12]
 8009b9a:	e66c      	b.n	8009876 <_scanf_float+0x82>
 8009b9c:	9b04      	ldr	r3, [sp, #16]
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d0e4      	beq.n	8009b6c <_scanf_float+0x378>
 8009ba2:	9905      	ldr	r1, [sp, #20]
 8009ba4:	230a      	movs	r3, #10
 8009ba6:	462a      	mov	r2, r5
 8009ba8:	3101      	adds	r1, #1
 8009baa:	4640      	mov	r0, r8
 8009bac:	f002 fcd0 	bl	800c550 <_strtol_r>
 8009bb0:	9b04      	ldr	r3, [sp, #16]
 8009bb2:	9e05      	ldr	r6, [sp, #20]
 8009bb4:	1ac2      	subs	r2, r0, r3
 8009bb6:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8009bba:	429e      	cmp	r6, r3
 8009bbc:	bf28      	it	cs
 8009bbe:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 8009bc2:	4912      	ldr	r1, [pc, #72]	; (8009c0c <_scanf_float+0x418>)
 8009bc4:	4630      	mov	r0, r6
 8009bc6:	f000 f91b 	bl	8009e00 <siprintf>
 8009bca:	e7cf      	b.n	8009b6c <_scanf_float+0x378>
 8009bcc:	f011 0f04 	tst.w	r1, #4
 8009bd0:	9903      	ldr	r1, [sp, #12]
 8009bd2:	600a      	str	r2, [r1, #0]
 8009bd4:	d1db      	bne.n	8009b8e <_scanf_float+0x39a>
 8009bd6:	f8d3 8000 	ldr.w	r8, [r3]
 8009bda:	ee10 2a10 	vmov	r2, s0
 8009bde:	ee10 0a10 	vmov	r0, s0
 8009be2:	463b      	mov	r3, r7
 8009be4:	4639      	mov	r1, r7
 8009be6:	f7f6 ffd1 	bl	8000b8c <__aeabi_dcmpun>
 8009bea:	b128      	cbz	r0, 8009bf8 <_scanf_float+0x404>
 8009bec:	4808      	ldr	r0, [pc, #32]	; (8009c10 <_scanf_float+0x41c>)
 8009bee:	f000 f9eb 	bl	8009fc8 <nanf>
 8009bf2:	ed88 0a00 	vstr	s0, [r8]
 8009bf6:	e7cd      	b.n	8009b94 <_scanf_float+0x3a0>
 8009bf8:	4630      	mov	r0, r6
 8009bfa:	4639      	mov	r1, r7
 8009bfc:	f7f7 f824 	bl	8000c48 <__aeabi_d2f>
 8009c00:	f8c8 0000 	str.w	r0, [r8]
 8009c04:	e7c6      	b.n	8009b94 <_scanf_float+0x3a0>
 8009c06:	2500      	movs	r5, #0
 8009c08:	e635      	b.n	8009876 <_scanf_float+0x82>
 8009c0a:	bf00      	nop
 8009c0c:	0800d804 	.word	0x0800d804
 8009c10:	0800db95 	.word	0x0800db95

08009c14 <std>:
 8009c14:	2300      	movs	r3, #0
 8009c16:	b510      	push	{r4, lr}
 8009c18:	4604      	mov	r4, r0
 8009c1a:	e9c0 3300 	strd	r3, r3, [r0]
 8009c1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009c22:	6083      	str	r3, [r0, #8]
 8009c24:	8181      	strh	r1, [r0, #12]
 8009c26:	6643      	str	r3, [r0, #100]	; 0x64
 8009c28:	81c2      	strh	r2, [r0, #14]
 8009c2a:	6183      	str	r3, [r0, #24]
 8009c2c:	4619      	mov	r1, r3
 8009c2e:	2208      	movs	r2, #8
 8009c30:	305c      	adds	r0, #92	; 0x5c
 8009c32:	f000 f948 	bl	8009ec6 <memset>
 8009c36:	4b0d      	ldr	r3, [pc, #52]	; (8009c6c <std+0x58>)
 8009c38:	6263      	str	r3, [r4, #36]	; 0x24
 8009c3a:	4b0d      	ldr	r3, [pc, #52]	; (8009c70 <std+0x5c>)
 8009c3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8009c3e:	4b0d      	ldr	r3, [pc, #52]	; (8009c74 <std+0x60>)
 8009c40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8009c42:	4b0d      	ldr	r3, [pc, #52]	; (8009c78 <std+0x64>)
 8009c44:	6323      	str	r3, [r4, #48]	; 0x30
 8009c46:	4b0d      	ldr	r3, [pc, #52]	; (8009c7c <std+0x68>)
 8009c48:	6224      	str	r4, [r4, #32]
 8009c4a:	429c      	cmp	r4, r3
 8009c4c:	d006      	beq.n	8009c5c <std+0x48>
 8009c4e:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8009c52:	4294      	cmp	r4, r2
 8009c54:	d002      	beq.n	8009c5c <std+0x48>
 8009c56:	33d0      	adds	r3, #208	; 0xd0
 8009c58:	429c      	cmp	r4, r3
 8009c5a:	d105      	bne.n	8009c68 <std+0x54>
 8009c5c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8009c60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009c64:	f000 b9ac 	b.w	8009fc0 <__retarget_lock_init_recursive>
 8009c68:	bd10      	pop	{r4, pc}
 8009c6a:	bf00      	nop
 8009c6c:	08009e41 	.word	0x08009e41
 8009c70:	08009e63 	.word	0x08009e63
 8009c74:	08009e9b 	.word	0x08009e9b
 8009c78:	08009ebf 	.word	0x08009ebf
 8009c7c:	20000bd8 	.word	0x20000bd8

08009c80 <stdio_exit_handler>:
 8009c80:	4a02      	ldr	r2, [pc, #8]	; (8009c8c <stdio_exit_handler+0xc>)
 8009c82:	4903      	ldr	r1, [pc, #12]	; (8009c90 <stdio_exit_handler+0x10>)
 8009c84:	4803      	ldr	r0, [pc, #12]	; (8009c94 <stdio_exit_handler+0x14>)
 8009c86:	f000 b869 	b.w	8009d5c <_fwalk_sglue>
 8009c8a:	bf00      	nop
 8009c8c:	20000020 	.word	0x20000020
 8009c90:	0800c911 	.word	0x0800c911
 8009c94:	2000002c 	.word	0x2000002c

08009c98 <cleanup_stdio>:
 8009c98:	6841      	ldr	r1, [r0, #4]
 8009c9a:	4b0c      	ldr	r3, [pc, #48]	; (8009ccc <cleanup_stdio+0x34>)
 8009c9c:	4299      	cmp	r1, r3
 8009c9e:	b510      	push	{r4, lr}
 8009ca0:	4604      	mov	r4, r0
 8009ca2:	d001      	beq.n	8009ca8 <cleanup_stdio+0x10>
 8009ca4:	f002 fe34 	bl	800c910 <_fflush_r>
 8009ca8:	68a1      	ldr	r1, [r4, #8]
 8009caa:	4b09      	ldr	r3, [pc, #36]	; (8009cd0 <cleanup_stdio+0x38>)
 8009cac:	4299      	cmp	r1, r3
 8009cae:	d002      	beq.n	8009cb6 <cleanup_stdio+0x1e>
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	f002 fe2d 	bl	800c910 <_fflush_r>
 8009cb6:	68e1      	ldr	r1, [r4, #12]
 8009cb8:	4b06      	ldr	r3, [pc, #24]	; (8009cd4 <cleanup_stdio+0x3c>)
 8009cba:	4299      	cmp	r1, r3
 8009cbc:	d004      	beq.n	8009cc8 <cleanup_stdio+0x30>
 8009cbe:	4620      	mov	r0, r4
 8009cc0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009cc4:	f002 be24 	b.w	800c910 <_fflush_r>
 8009cc8:	bd10      	pop	{r4, pc}
 8009cca:	bf00      	nop
 8009ccc:	20000bd8 	.word	0x20000bd8
 8009cd0:	20000c40 	.word	0x20000c40
 8009cd4:	20000ca8 	.word	0x20000ca8

08009cd8 <global_stdio_init.part.0>:
 8009cd8:	b510      	push	{r4, lr}
 8009cda:	4b0b      	ldr	r3, [pc, #44]	; (8009d08 <global_stdio_init.part.0+0x30>)
 8009cdc:	4c0b      	ldr	r4, [pc, #44]	; (8009d0c <global_stdio_init.part.0+0x34>)
 8009cde:	4a0c      	ldr	r2, [pc, #48]	; (8009d10 <global_stdio_init.part.0+0x38>)
 8009ce0:	601a      	str	r2, [r3, #0]
 8009ce2:	4620      	mov	r0, r4
 8009ce4:	2200      	movs	r2, #0
 8009ce6:	2104      	movs	r1, #4
 8009ce8:	f7ff ff94 	bl	8009c14 <std>
 8009cec:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	2109      	movs	r1, #9
 8009cf4:	f7ff ff8e 	bl	8009c14 <std>
 8009cf8:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8009cfc:	2202      	movs	r2, #2
 8009cfe:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d02:	2112      	movs	r1, #18
 8009d04:	f7ff bf86 	b.w	8009c14 <std>
 8009d08:	20000d10 	.word	0x20000d10
 8009d0c:	20000bd8 	.word	0x20000bd8
 8009d10:	08009c81 	.word	0x08009c81

08009d14 <__sfp_lock_acquire>:
 8009d14:	4801      	ldr	r0, [pc, #4]	; (8009d1c <__sfp_lock_acquire+0x8>)
 8009d16:	f000 b954 	b.w	8009fc2 <__retarget_lock_acquire_recursive>
 8009d1a:	bf00      	nop
 8009d1c:	20000d19 	.word	0x20000d19

08009d20 <__sfp_lock_release>:
 8009d20:	4801      	ldr	r0, [pc, #4]	; (8009d28 <__sfp_lock_release+0x8>)
 8009d22:	f000 b94f 	b.w	8009fc4 <__retarget_lock_release_recursive>
 8009d26:	bf00      	nop
 8009d28:	20000d19 	.word	0x20000d19

08009d2c <__sinit>:
 8009d2c:	b510      	push	{r4, lr}
 8009d2e:	4604      	mov	r4, r0
 8009d30:	f7ff fff0 	bl	8009d14 <__sfp_lock_acquire>
 8009d34:	6a23      	ldr	r3, [r4, #32]
 8009d36:	b11b      	cbz	r3, 8009d40 <__sinit+0x14>
 8009d38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009d3c:	f7ff bff0 	b.w	8009d20 <__sfp_lock_release>
 8009d40:	4b04      	ldr	r3, [pc, #16]	; (8009d54 <__sinit+0x28>)
 8009d42:	6223      	str	r3, [r4, #32]
 8009d44:	4b04      	ldr	r3, [pc, #16]	; (8009d58 <__sinit+0x2c>)
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d1f5      	bne.n	8009d38 <__sinit+0xc>
 8009d4c:	f7ff ffc4 	bl	8009cd8 <global_stdio_init.part.0>
 8009d50:	e7f2      	b.n	8009d38 <__sinit+0xc>
 8009d52:	bf00      	nop
 8009d54:	08009c99 	.word	0x08009c99
 8009d58:	20000d10 	.word	0x20000d10

08009d5c <_fwalk_sglue>:
 8009d5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009d60:	4607      	mov	r7, r0
 8009d62:	4688      	mov	r8, r1
 8009d64:	4614      	mov	r4, r2
 8009d66:	2600      	movs	r6, #0
 8009d68:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8009d6c:	f1b9 0901 	subs.w	r9, r9, #1
 8009d70:	d505      	bpl.n	8009d7e <_fwalk_sglue+0x22>
 8009d72:	6824      	ldr	r4, [r4, #0]
 8009d74:	2c00      	cmp	r4, #0
 8009d76:	d1f7      	bne.n	8009d68 <_fwalk_sglue+0xc>
 8009d78:	4630      	mov	r0, r6
 8009d7a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009d7e:	89ab      	ldrh	r3, [r5, #12]
 8009d80:	2b01      	cmp	r3, #1
 8009d82:	d907      	bls.n	8009d94 <_fwalk_sglue+0x38>
 8009d84:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009d88:	3301      	adds	r3, #1
 8009d8a:	d003      	beq.n	8009d94 <_fwalk_sglue+0x38>
 8009d8c:	4629      	mov	r1, r5
 8009d8e:	4638      	mov	r0, r7
 8009d90:	47c0      	blx	r8
 8009d92:	4306      	orrs	r6, r0
 8009d94:	3568      	adds	r5, #104	; 0x68
 8009d96:	e7e9      	b.n	8009d6c <_fwalk_sglue+0x10>

08009d98 <sniprintf>:
 8009d98:	b40c      	push	{r2, r3}
 8009d9a:	b530      	push	{r4, r5, lr}
 8009d9c:	4b17      	ldr	r3, [pc, #92]	; (8009dfc <sniprintf+0x64>)
 8009d9e:	1e0c      	subs	r4, r1, #0
 8009da0:	681d      	ldr	r5, [r3, #0]
 8009da2:	b09d      	sub	sp, #116	; 0x74
 8009da4:	da08      	bge.n	8009db8 <sniprintf+0x20>
 8009da6:	238b      	movs	r3, #139	; 0x8b
 8009da8:	602b      	str	r3, [r5, #0]
 8009daa:	f04f 30ff 	mov.w	r0, #4294967295
 8009dae:	b01d      	add	sp, #116	; 0x74
 8009db0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009db4:	b002      	add	sp, #8
 8009db6:	4770      	bx	lr
 8009db8:	f44f 7302 	mov.w	r3, #520	; 0x208
 8009dbc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8009dc0:	bf14      	ite	ne
 8009dc2:	f104 33ff 	addne.w	r3, r4, #4294967295
 8009dc6:	4623      	moveq	r3, r4
 8009dc8:	9304      	str	r3, [sp, #16]
 8009dca:	9307      	str	r3, [sp, #28]
 8009dcc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8009dd0:	9002      	str	r0, [sp, #8]
 8009dd2:	9006      	str	r0, [sp, #24]
 8009dd4:	f8ad 3016 	strh.w	r3, [sp, #22]
 8009dd8:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8009dda:	ab21      	add	r3, sp, #132	; 0x84
 8009ddc:	a902      	add	r1, sp, #8
 8009dde:	4628      	mov	r0, r5
 8009de0:	9301      	str	r3, [sp, #4]
 8009de2:	f002 fc11 	bl	800c608 <_svfiprintf_r>
 8009de6:	1c43      	adds	r3, r0, #1
 8009de8:	bfbc      	itt	lt
 8009dea:	238b      	movlt	r3, #139	; 0x8b
 8009dec:	602b      	strlt	r3, [r5, #0]
 8009dee:	2c00      	cmp	r4, #0
 8009df0:	d0dd      	beq.n	8009dae <sniprintf+0x16>
 8009df2:	9b02      	ldr	r3, [sp, #8]
 8009df4:	2200      	movs	r2, #0
 8009df6:	701a      	strb	r2, [r3, #0]
 8009df8:	e7d9      	b.n	8009dae <sniprintf+0x16>
 8009dfa:	bf00      	nop
 8009dfc:	20000078 	.word	0x20000078

08009e00 <siprintf>:
 8009e00:	b40e      	push	{r1, r2, r3}
 8009e02:	b500      	push	{lr}
 8009e04:	b09c      	sub	sp, #112	; 0x70
 8009e06:	ab1d      	add	r3, sp, #116	; 0x74
 8009e08:	9002      	str	r0, [sp, #8]
 8009e0a:	9006      	str	r0, [sp, #24]
 8009e0c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009e10:	4809      	ldr	r0, [pc, #36]	; (8009e38 <siprintf+0x38>)
 8009e12:	9107      	str	r1, [sp, #28]
 8009e14:	9104      	str	r1, [sp, #16]
 8009e16:	4909      	ldr	r1, [pc, #36]	; (8009e3c <siprintf+0x3c>)
 8009e18:	f853 2b04 	ldr.w	r2, [r3], #4
 8009e1c:	9105      	str	r1, [sp, #20]
 8009e1e:	6800      	ldr	r0, [r0, #0]
 8009e20:	9301      	str	r3, [sp, #4]
 8009e22:	a902      	add	r1, sp, #8
 8009e24:	f002 fbf0 	bl	800c608 <_svfiprintf_r>
 8009e28:	9b02      	ldr	r3, [sp, #8]
 8009e2a:	2200      	movs	r2, #0
 8009e2c:	701a      	strb	r2, [r3, #0]
 8009e2e:	b01c      	add	sp, #112	; 0x70
 8009e30:	f85d eb04 	ldr.w	lr, [sp], #4
 8009e34:	b003      	add	sp, #12
 8009e36:	4770      	bx	lr
 8009e38:	20000078 	.word	0x20000078
 8009e3c:	ffff0208 	.word	0xffff0208

08009e40 <__sread>:
 8009e40:	b510      	push	{r4, lr}
 8009e42:	460c      	mov	r4, r1
 8009e44:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e48:	f000 f86c 	bl	8009f24 <_read_r>
 8009e4c:	2800      	cmp	r0, #0
 8009e4e:	bfab      	itete	ge
 8009e50:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8009e52:	89a3      	ldrhlt	r3, [r4, #12]
 8009e54:	181b      	addge	r3, r3, r0
 8009e56:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009e5a:	bfac      	ite	ge
 8009e5c:	6563      	strge	r3, [r4, #84]	; 0x54
 8009e5e:	81a3      	strhlt	r3, [r4, #12]
 8009e60:	bd10      	pop	{r4, pc}

08009e62 <__swrite>:
 8009e62:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e66:	461f      	mov	r7, r3
 8009e68:	898b      	ldrh	r3, [r1, #12]
 8009e6a:	05db      	lsls	r3, r3, #23
 8009e6c:	4605      	mov	r5, r0
 8009e6e:	460c      	mov	r4, r1
 8009e70:	4616      	mov	r6, r2
 8009e72:	d505      	bpl.n	8009e80 <__swrite+0x1e>
 8009e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009e78:	2302      	movs	r3, #2
 8009e7a:	2200      	movs	r2, #0
 8009e7c:	f000 f840 	bl	8009f00 <_lseek_r>
 8009e80:	89a3      	ldrh	r3, [r4, #12]
 8009e82:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009e86:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009e8a:	81a3      	strh	r3, [r4, #12]
 8009e8c:	4632      	mov	r2, r6
 8009e8e:	463b      	mov	r3, r7
 8009e90:	4628      	mov	r0, r5
 8009e92:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009e96:	f000 b857 	b.w	8009f48 <_write_r>

08009e9a <__sseek>:
 8009e9a:	b510      	push	{r4, lr}
 8009e9c:	460c      	mov	r4, r1
 8009e9e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ea2:	f000 f82d 	bl	8009f00 <_lseek_r>
 8009ea6:	1c43      	adds	r3, r0, #1
 8009ea8:	89a3      	ldrh	r3, [r4, #12]
 8009eaa:	bf15      	itete	ne
 8009eac:	6560      	strne	r0, [r4, #84]	; 0x54
 8009eae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8009eb2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009eb6:	81a3      	strheq	r3, [r4, #12]
 8009eb8:	bf18      	it	ne
 8009eba:	81a3      	strhne	r3, [r4, #12]
 8009ebc:	bd10      	pop	{r4, pc}

08009ebe <__sclose>:
 8009ebe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009ec2:	f000 b80d 	b.w	8009ee0 <_close_r>

08009ec6 <memset>:
 8009ec6:	4402      	add	r2, r0
 8009ec8:	4603      	mov	r3, r0
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d100      	bne.n	8009ed0 <memset+0xa>
 8009ece:	4770      	bx	lr
 8009ed0:	f803 1b01 	strb.w	r1, [r3], #1
 8009ed4:	e7f9      	b.n	8009eca <memset+0x4>
	...

08009ed8 <_localeconv_r>:
 8009ed8:	4800      	ldr	r0, [pc, #0]	; (8009edc <_localeconv_r+0x4>)
 8009eda:	4770      	bx	lr
 8009edc:	2000016c 	.word	0x2000016c

08009ee0 <_close_r>:
 8009ee0:	b538      	push	{r3, r4, r5, lr}
 8009ee2:	4d06      	ldr	r5, [pc, #24]	; (8009efc <_close_r+0x1c>)
 8009ee4:	2300      	movs	r3, #0
 8009ee6:	4604      	mov	r4, r0
 8009ee8:	4608      	mov	r0, r1
 8009eea:	602b      	str	r3, [r5, #0]
 8009eec:	f7f7 febf 	bl	8001c6e <_close>
 8009ef0:	1c43      	adds	r3, r0, #1
 8009ef2:	d102      	bne.n	8009efa <_close_r+0x1a>
 8009ef4:	682b      	ldr	r3, [r5, #0]
 8009ef6:	b103      	cbz	r3, 8009efa <_close_r+0x1a>
 8009ef8:	6023      	str	r3, [r4, #0]
 8009efa:	bd38      	pop	{r3, r4, r5, pc}
 8009efc:	20000d14 	.word	0x20000d14

08009f00 <_lseek_r>:
 8009f00:	b538      	push	{r3, r4, r5, lr}
 8009f02:	4d07      	ldr	r5, [pc, #28]	; (8009f20 <_lseek_r+0x20>)
 8009f04:	4604      	mov	r4, r0
 8009f06:	4608      	mov	r0, r1
 8009f08:	4611      	mov	r1, r2
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	602a      	str	r2, [r5, #0]
 8009f0e:	461a      	mov	r2, r3
 8009f10:	f7f7 fed4 	bl	8001cbc <_lseek>
 8009f14:	1c43      	adds	r3, r0, #1
 8009f16:	d102      	bne.n	8009f1e <_lseek_r+0x1e>
 8009f18:	682b      	ldr	r3, [r5, #0]
 8009f1a:	b103      	cbz	r3, 8009f1e <_lseek_r+0x1e>
 8009f1c:	6023      	str	r3, [r4, #0]
 8009f1e:	bd38      	pop	{r3, r4, r5, pc}
 8009f20:	20000d14 	.word	0x20000d14

08009f24 <_read_r>:
 8009f24:	b538      	push	{r3, r4, r5, lr}
 8009f26:	4d07      	ldr	r5, [pc, #28]	; (8009f44 <_read_r+0x20>)
 8009f28:	4604      	mov	r4, r0
 8009f2a:	4608      	mov	r0, r1
 8009f2c:	4611      	mov	r1, r2
 8009f2e:	2200      	movs	r2, #0
 8009f30:	602a      	str	r2, [r5, #0]
 8009f32:	461a      	mov	r2, r3
 8009f34:	f7f7 fe62 	bl	8001bfc <_read>
 8009f38:	1c43      	adds	r3, r0, #1
 8009f3a:	d102      	bne.n	8009f42 <_read_r+0x1e>
 8009f3c:	682b      	ldr	r3, [r5, #0]
 8009f3e:	b103      	cbz	r3, 8009f42 <_read_r+0x1e>
 8009f40:	6023      	str	r3, [r4, #0]
 8009f42:	bd38      	pop	{r3, r4, r5, pc}
 8009f44:	20000d14 	.word	0x20000d14

08009f48 <_write_r>:
 8009f48:	b538      	push	{r3, r4, r5, lr}
 8009f4a:	4d07      	ldr	r5, [pc, #28]	; (8009f68 <_write_r+0x20>)
 8009f4c:	4604      	mov	r4, r0
 8009f4e:	4608      	mov	r0, r1
 8009f50:	4611      	mov	r1, r2
 8009f52:	2200      	movs	r2, #0
 8009f54:	602a      	str	r2, [r5, #0]
 8009f56:	461a      	mov	r2, r3
 8009f58:	f7f7 fe6d 	bl	8001c36 <_write>
 8009f5c:	1c43      	adds	r3, r0, #1
 8009f5e:	d102      	bne.n	8009f66 <_write_r+0x1e>
 8009f60:	682b      	ldr	r3, [r5, #0]
 8009f62:	b103      	cbz	r3, 8009f66 <_write_r+0x1e>
 8009f64:	6023      	str	r3, [r4, #0]
 8009f66:	bd38      	pop	{r3, r4, r5, pc}
 8009f68:	20000d14 	.word	0x20000d14

08009f6c <__errno>:
 8009f6c:	4b01      	ldr	r3, [pc, #4]	; (8009f74 <__errno+0x8>)
 8009f6e:	6818      	ldr	r0, [r3, #0]
 8009f70:	4770      	bx	lr
 8009f72:	bf00      	nop
 8009f74:	20000078 	.word	0x20000078

08009f78 <__libc_init_array>:
 8009f78:	b570      	push	{r4, r5, r6, lr}
 8009f7a:	4d0d      	ldr	r5, [pc, #52]	; (8009fb0 <__libc_init_array+0x38>)
 8009f7c:	4c0d      	ldr	r4, [pc, #52]	; (8009fb4 <__libc_init_array+0x3c>)
 8009f7e:	1b64      	subs	r4, r4, r5
 8009f80:	10a4      	asrs	r4, r4, #2
 8009f82:	2600      	movs	r6, #0
 8009f84:	42a6      	cmp	r6, r4
 8009f86:	d109      	bne.n	8009f9c <__libc_init_array+0x24>
 8009f88:	4d0b      	ldr	r5, [pc, #44]	; (8009fb8 <__libc_init_array+0x40>)
 8009f8a:	4c0c      	ldr	r4, [pc, #48]	; (8009fbc <__libc_init_array+0x44>)
 8009f8c:	f003 fbd8 	bl	800d740 <_init>
 8009f90:	1b64      	subs	r4, r4, r5
 8009f92:	10a4      	asrs	r4, r4, #2
 8009f94:	2600      	movs	r6, #0
 8009f96:	42a6      	cmp	r6, r4
 8009f98:	d105      	bne.n	8009fa6 <__libc_init_array+0x2e>
 8009f9a:	bd70      	pop	{r4, r5, r6, pc}
 8009f9c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009fa0:	4798      	blx	r3
 8009fa2:	3601      	adds	r6, #1
 8009fa4:	e7ee      	b.n	8009f84 <__libc_init_array+0xc>
 8009fa6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009faa:	4798      	blx	r3
 8009fac:	3601      	adds	r6, #1
 8009fae:	e7f2      	b.n	8009f96 <__libc_init_array+0x1e>
 8009fb0:	0800dc00 	.word	0x0800dc00
 8009fb4:	0800dc00 	.word	0x0800dc00
 8009fb8:	0800dc00 	.word	0x0800dc00
 8009fbc:	0800dc04 	.word	0x0800dc04

08009fc0 <__retarget_lock_init_recursive>:
 8009fc0:	4770      	bx	lr

08009fc2 <__retarget_lock_acquire_recursive>:
 8009fc2:	4770      	bx	lr

08009fc4 <__retarget_lock_release_recursive>:
 8009fc4:	4770      	bx	lr
	...

08009fc8 <nanf>:
 8009fc8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009fd0 <nanf+0x8>
 8009fcc:	4770      	bx	lr
 8009fce:	bf00      	nop
 8009fd0:	7fc00000 	.word	0x7fc00000

08009fd4 <quorem>:
 8009fd4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd8:	6903      	ldr	r3, [r0, #16]
 8009fda:	690c      	ldr	r4, [r1, #16]
 8009fdc:	42a3      	cmp	r3, r4
 8009fde:	4607      	mov	r7, r0
 8009fe0:	db7e      	blt.n	800a0e0 <quorem+0x10c>
 8009fe2:	3c01      	subs	r4, #1
 8009fe4:	f101 0814 	add.w	r8, r1, #20
 8009fe8:	f100 0514 	add.w	r5, r0, #20
 8009fec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009ff0:	9301      	str	r3, [sp, #4]
 8009ff2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009ff6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009ffa:	3301      	adds	r3, #1
 8009ffc:	429a      	cmp	r2, r3
 8009ffe:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a002:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a006:	fbb2 f6f3 	udiv	r6, r2, r3
 800a00a:	d331      	bcc.n	800a070 <quorem+0x9c>
 800a00c:	f04f 0e00 	mov.w	lr, #0
 800a010:	4640      	mov	r0, r8
 800a012:	46ac      	mov	ip, r5
 800a014:	46f2      	mov	sl, lr
 800a016:	f850 2b04 	ldr.w	r2, [r0], #4
 800a01a:	b293      	uxth	r3, r2
 800a01c:	fb06 e303 	mla	r3, r6, r3, lr
 800a020:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a024:	0c1a      	lsrs	r2, r3, #16
 800a026:	b29b      	uxth	r3, r3
 800a028:	ebaa 0303 	sub.w	r3, sl, r3
 800a02c:	f8dc a000 	ldr.w	sl, [ip]
 800a030:	fa13 f38a 	uxtah	r3, r3, sl
 800a034:	fb06 220e 	mla	r2, r6, lr, r2
 800a038:	9300      	str	r3, [sp, #0]
 800a03a:	9b00      	ldr	r3, [sp, #0]
 800a03c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a040:	b292      	uxth	r2, r2
 800a042:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a046:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a04a:	f8bd 3000 	ldrh.w	r3, [sp]
 800a04e:	4581      	cmp	r9, r0
 800a050:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a054:	f84c 3b04 	str.w	r3, [ip], #4
 800a058:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a05c:	d2db      	bcs.n	800a016 <quorem+0x42>
 800a05e:	f855 300b 	ldr.w	r3, [r5, fp]
 800a062:	b92b      	cbnz	r3, 800a070 <quorem+0x9c>
 800a064:	9b01      	ldr	r3, [sp, #4]
 800a066:	3b04      	subs	r3, #4
 800a068:	429d      	cmp	r5, r3
 800a06a:	461a      	mov	r2, r3
 800a06c:	d32c      	bcc.n	800a0c8 <quorem+0xf4>
 800a06e:	613c      	str	r4, [r7, #16]
 800a070:	4638      	mov	r0, r7
 800a072:	f001 f9f1 	bl	800b458 <__mcmp>
 800a076:	2800      	cmp	r0, #0
 800a078:	db22      	blt.n	800a0c0 <quorem+0xec>
 800a07a:	3601      	adds	r6, #1
 800a07c:	4629      	mov	r1, r5
 800a07e:	2000      	movs	r0, #0
 800a080:	f858 2b04 	ldr.w	r2, [r8], #4
 800a084:	f8d1 c000 	ldr.w	ip, [r1]
 800a088:	b293      	uxth	r3, r2
 800a08a:	1ac3      	subs	r3, r0, r3
 800a08c:	0c12      	lsrs	r2, r2, #16
 800a08e:	fa13 f38c 	uxtah	r3, r3, ip
 800a092:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a096:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a09a:	b29b      	uxth	r3, r3
 800a09c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a0a0:	45c1      	cmp	r9, r8
 800a0a2:	f841 3b04 	str.w	r3, [r1], #4
 800a0a6:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a0aa:	d2e9      	bcs.n	800a080 <quorem+0xac>
 800a0ac:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a0b0:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a0b4:	b922      	cbnz	r2, 800a0c0 <quorem+0xec>
 800a0b6:	3b04      	subs	r3, #4
 800a0b8:	429d      	cmp	r5, r3
 800a0ba:	461a      	mov	r2, r3
 800a0bc:	d30a      	bcc.n	800a0d4 <quorem+0x100>
 800a0be:	613c      	str	r4, [r7, #16]
 800a0c0:	4630      	mov	r0, r6
 800a0c2:	b003      	add	sp, #12
 800a0c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0c8:	6812      	ldr	r2, [r2, #0]
 800a0ca:	3b04      	subs	r3, #4
 800a0cc:	2a00      	cmp	r2, #0
 800a0ce:	d1ce      	bne.n	800a06e <quorem+0x9a>
 800a0d0:	3c01      	subs	r4, #1
 800a0d2:	e7c9      	b.n	800a068 <quorem+0x94>
 800a0d4:	6812      	ldr	r2, [r2, #0]
 800a0d6:	3b04      	subs	r3, #4
 800a0d8:	2a00      	cmp	r2, #0
 800a0da:	d1f0      	bne.n	800a0be <quorem+0xea>
 800a0dc:	3c01      	subs	r4, #1
 800a0de:	e7eb      	b.n	800a0b8 <quorem+0xe4>
 800a0e0:	2000      	movs	r0, #0
 800a0e2:	e7ee      	b.n	800a0c2 <quorem+0xee>
 800a0e4:	0000      	movs	r0, r0
	...

0800a0e8 <_dtoa_r>:
 800a0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0ec:	ed2d 8b04 	vpush	{d8-d9}
 800a0f0:	69c5      	ldr	r5, [r0, #28]
 800a0f2:	b093      	sub	sp, #76	; 0x4c
 800a0f4:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a0f8:	ec57 6b10 	vmov	r6, r7, d0
 800a0fc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a100:	9107      	str	r1, [sp, #28]
 800a102:	4604      	mov	r4, r0
 800a104:	920a      	str	r2, [sp, #40]	; 0x28
 800a106:	930d      	str	r3, [sp, #52]	; 0x34
 800a108:	b975      	cbnz	r5, 800a128 <_dtoa_r+0x40>
 800a10a:	2010      	movs	r0, #16
 800a10c:	f000 fe2a 	bl	800ad64 <malloc>
 800a110:	4602      	mov	r2, r0
 800a112:	61e0      	str	r0, [r4, #28]
 800a114:	b920      	cbnz	r0, 800a120 <_dtoa_r+0x38>
 800a116:	4bae      	ldr	r3, [pc, #696]	; (800a3d0 <_dtoa_r+0x2e8>)
 800a118:	21ef      	movs	r1, #239	; 0xef
 800a11a:	48ae      	ldr	r0, [pc, #696]	; (800a3d4 <_dtoa_r+0x2ec>)
 800a11c:	f002 fc74 	bl	800ca08 <__assert_func>
 800a120:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a124:	6005      	str	r5, [r0, #0]
 800a126:	60c5      	str	r5, [r0, #12]
 800a128:	69e3      	ldr	r3, [r4, #28]
 800a12a:	6819      	ldr	r1, [r3, #0]
 800a12c:	b151      	cbz	r1, 800a144 <_dtoa_r+0x5c>
 800a12e:	685a      	ldr	r2, [r3, #4]
 800a130:	604a      	str	r2, [r1, #4]
 800a132:	2301      	movs	r3, #1
 800a134:	4093      	lsls	r3, r2
 800a136:	608b      	str	r3, [r1, #8]
 800a138:	4620      	mov	r0, r4
 800a13a:	f000 ff07 	bl	800af4c <_Bfree>
 800a13e:	69e3      	ldr	r3, [r4, #28]
 800a140:	2200      	movs	r2, #0
 800a142:	601a      	str	r2, [r3, #0]
 800a144:	1e3b      	subs	r3, r7, #0
 800a146:	bfbb      	ittet	lt
 800a148:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a14c:	9303      	strlt	r3, [sp, #12]
 800a14e:	2300      	movge	r3, #0
 800a150:	2201      	movlt	r2, #1
 800a152:	bfac      	ite	ge
 800a154:	f8c8 3000 	strge.w	r3, [r8]
 800a158:	f8c8 2000 	strlt.w	r2, [r8]
 800a15c:	4b9e      	ldr	r3, [pc, #632]	; (800a3d8 <_dtoa_r+0x2f0>)
 800a15e:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a162:	ea33 0308 	bics.w	r3, r3, r8
 800a166:	d11b      	bne.n	800a1a0 <_dtoa_r+0xb8>
 800a168:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a16a:	f242 730f 	movw	r3, #9999	; 0x270f
 800a16e:	6013      	str	r3, [r2, #0]
 800a170:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a174:	4333      	orrs	r3, r6
 800a176:	f000 8593 	beq.w	800aca0 <_dtoa_r+0xbb8>
 800a17a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a17c:	b963      	cbnz	r3, 800a198 <_dtoa_r+0xb0>
 800a17e:	4b97      	ldr	r3, [pc, #604]	; (800a3dc <_dtoa_r+0x2f4>)
 800a180:	e027      	b.n	800a1d2 <_dtoa_r+0xea>
 800a182:	4b97      	ldr	r3, [pc, #604]	; (800a3e0 <_dtoa_r+0x2f8>)
 800a184:	9300      	str	r3, [sp, #0]
 800a186:	3308      	adds	r3, #8
 800a188:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a18a:	6013      	str	r3, [r2, #0]
 800a18c:	9800      	ldr	r0, [sp, #0]
 800a18e:	b013      	add	sp, #76	; 0x4c
 800a190:	ecbd 8b04 	vpop	{d8-d9}
 800a194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a198:	4b90      	ldr	r3, [pc, #576]	; (800a3dc <_dtoa_r+0x2f4>)
 800a19a:	9300      	str	r3, [sp, #0]
 800a19c:	3303      	adds	r3, #3
 800a19e:	e7f3      	b.n	800a188 <_dtoa_r+0xa0>
 800a1a0:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a1a4:	2200      	movs	r2, #0
 800a1a6:	ec51 0b17 	vmov	r0, r1, d7
 800a1aa:	eeb0 8a47 	vmov.f32	s16, s14
 800a1ae:	eef0 8a67 	vmov.f32	s17, s15
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	f7f6 fcb8 	bl	8000b28 <__aeabi_dcmpeq>
 800a1b8:	4681      	mov	r9, r0
 800a1ba:	b160      	cbz	r0, 800a1d6 <_dtoa_r+0xee>
 800a1bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a1be:	2301      	movs	r3, #1
 800a1c0:	6013      	str	r3, [r2, #0]
 800a1c2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	f000 8568 	beq.w	800ac9a <_dtoa_r+0xbb2>
 800a1ca:	4b86      	ldr	r3, [pc, #536]	; (800a3e4 <_dtoa_r+0x2fc>)
 800a1cc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a1ce:	6013      	str	r3, [r2, #0]
 800a1d0:	3b01      	subs	r3, #1
 800a1d2:	9300      	str	r3, [sp, #0]
 800a1d4:	e7da      	b.n	800a18c <_dtoa_r+0xa4>
 800a1d6:	aa10      	add	r2, sp, #64	; 0x40
 800a1d8:	a911      	add	r1, sp, #68	; 0x44
 800a1da:	4620      	mov	r0, r4
 800a1dc:	eeb0 0a48 	vmov.f32	s0, s16
 800a1e0:	eef0 0a68 	vmov.f32	s1, s17
 800a1e4:	f001 fa4e 	bl	800b684 <__d2b>
 800a1e8:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a1ec:	4682      	mov	sl, r0
 800a1ee:	2d00      	cmp	r5, #0
 800a1f0:	d07f      	beq.n	800a2f2 <_dtoa_r+0x20a>
 800a1f2:	ee18 3a90 	vmov	r3, s17
 800a1f6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a1fa:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a1fe:	ec51 0b18 	vmov	r0, r1, d8
 800a202:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a206:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a20a:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a20e:	4619      	mov	r1, r3
 800a210:	2200      	movs	r2, #0
 800a212:	4b75      	ldr	r3, [pc, #468]	; (800a3e8 <_dtoa_r+0x300>)
 800a214:	f7f6 f868 	bl	80002e8 <__aeabi_dsub>
 800a218:	a367      	add	r3, pc, #412	; (adr r3, 800a3b8 <_dtoa_r+0x2d0>)
 800a21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a21e:	f7f6 fa1b 	bl	8000658 <__aeabi_dmul>
 800a222:	a367      	add	r3, pc, #412	; (adr r3, 800a3c0 <_dtoa_r+0x2d8>)
 800a224:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a228:	f7f6 f860 	bl	80002ec <__adddf3>
 800a22c:	4606      	mov	r6, r0
 800a22e:	4628      	mov	r0, r5
 800a230:	460f      	mov	r7, r1
 800a232:	f7f6 f9a7 	bl	8000584 <__aeabi_i2d>
 800a236:	a364      	add	r3, pc, #400	; (adr r3, 800a3c8 <_dtoa_r+0x2e0>)
 800a238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a23c:	f7f6 fa0c 	bl	8000658 <__aeabi_dmul>
 800a240:	4602      	mov	r2, r0
 800a242:	460b      	mov	r3, r1
 800a244:	4630      	mov	r0, r6
 800a246:	4639      	mov	r1, r7
 800a248:	f7f6 f850 	bl	80002ec <__adddf3>
 800a24c:	4606      	mov	r6, r0
 800a24e:	460f      	mov	r7, r1
 800a250:	f7f6 fcb2 	bl	8000bb8 <__aeabi_d2iz>
 800a254:	2200      	movs	r2, #0
 800a256:	4683      	mov	fp, r0
 800a258:	2300      	movs	r3, #0
 800a25a:	4630      	mov	r0, r6
 800a25c:	4639      	mov	r1, r7
 800a25e:	f7f6 fc6d 	bl	8000b3c <__aeabi_dcmplt>
 800a262:	b148      	cbz	r0, 800a278 <_dtoa_r+0x190>
 800a264:	4658      	mov	r0, fp
 800a266:	f7f6 f98d 	bl	8000584 <__aeabi_i2d>
 800a26a:	4632      	mov	r2, r6
 800a26c:	463b      	mov	r3, r7
 800a26e:	f7f6 fc5b 	bl	8000b28 <__aeabi_dcmpeq>
 800a272:	b908      	cbnz	r0, 800a278 <_dtoa_r+0x190>
 800a274:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a278:	f1bb 0f16 	cmp.w	fp, #22
 800a27c:	d857      	bhi.n	800a32e <_dtoa_r+0x246>
 800a27e:	4b5b      	ldr	r3, [pc, #364]	; (800a3ec <_dtoa_r+0x304>)
 800a280:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a284:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a288:	ec51 0b18 	vmov	r0, r1, d8
 800a28c:	f7f6 fc56 	bl	8000b3c <__aeabi_dcmplt>
 800a290:	2800      	cmp	r0, #0
 800a292:	d04e      	beq.n	800a332 <_dtoa_r+0x24a>
 800a294:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a298:	2300      	movs	r3, #0
 800a29a:	930c      	str	r3, [sp, #48]	; 0x30
 800a29c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a29e:	1b5b      	subs	r3, r3, r5
 800a2a0:	1e5a      	subs	r2, r3, #1
 800a2a2:	bf45      	ittet	mi
 800a2a4:	f1c3 0301 	rsbmi	r3, r3, #1
 800a2a8:	9305      	strmi	r3, [sp, #20]
 800a2aa:	2300      	movpl	r3, #0
 800a2ac:	2300      	movmi	r3, #0
 800a2ae:	9206      	str	r2, [sp, #24]
 800a2b0:	bf54      	ite	pl
 800a2b2:	9305      	strpl	r3, [sp, #20]
 800a2b4:	9306      	strmi	r3, [sp, #24]
 800a2b6:	f1bb 0f00 	cmp.w	fp, #0
 800a2ba:	db3c      	blt.n	800a336 <_dtoa_r+0x24e>
 800a2bc:	9b06      	ldr	r3, [sp, #24]
 800a2be:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a2c2:	445b      	add	r3, fp
 800a2c4:	9306      	str	r3, [sp, #24]
 800a2c6:	2300      	movs	r3, #0
 800a2c8:	9308      	str	r3, [sp, #32]
 800a2ca:	9b07      	ldr	r3, [sp, #28]
 800a2cc:	2b09      	cmp	r3, #9
 800a2ce:	d868      	bhi.n	800a3a2 <_dtoa_r+0x2ba>
 800a2d0:	2b05      	cmp	r3, #5
 800a2d2:	bfc4      	itt	gt
 800a2d4:	3b04      	subgt	r3, #4
 800a2d6:	9307      	strgt	r3, [sp, #28]
 800a2d8:	9b07      	ldr	r3, [sp, #28]
 800a2da:	f1a3 0302 	sub.w	r3, r3, #2
 800a2de:	bfcc      	ite	gt
 800a2e0:	2500      	movgt	r5, #0
 800a2e2:	2501      	movle	r5, #1
 800a2e4:	2b03      	cmp	r3, #3
 800a2e6:	f200 8085 	bhi.w	800a3f4 <_dtoa_r+0x30c>
 800a2ea:	e8df f003 	tbb	[pc, r3]
 800a2ee:	3b2e      	.short	0x3b2e
 800a2f0:	5839      	.short	0x5839
 800a2f2:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a2f6:	441d      	add	r5, r3
 800a2f8:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a2fc:	2b20      	cmp	r3, #32
 800a2fe:	bfc1      	itttt	gt
 800a300:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a304:	fa08 f803 	lslgt.w	r8, r8, r3
 800a308:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a30c:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a310:	bfd6      	itet	le
 800a312:	f1c3 0320 	rsble	r3, r3, #32
 800a316:	ea48 0003 	orrgt.w	r0, r8, r3
 800a31a:	fa06 f003 	lslle.w	r0, r6, r3
 800a31e:	f7f6 f921 	bl	8000564 <__aeabi_ui2d>
 800a322:	2201      	movs	r2, #1
 800a324:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a328:	3d01      	subs	r5, #1
 800a32a:	920e      	str	r2, [sp, #56]	; 0x38
 800a32c:	e76f      	b.n	800a20e <_dtoa_r+0x126>
 800a32e:	2301      	movs	r3, #1
 800a330:	e7b3      	b.n	800a29a <_dtoa_r+0x1b2>
 800a332:	900c      	str	r0, [sp, #48]	; 0x30
 800a334:	e7b2      	b.n	800a29c <_dtoa_r+0x1b4>
 800a336:	9b05      	ldr	r3, [sp, #20]
 800a338:	eba3 030b 	sub.w	r3, r3, fp
 800a33c:	9305      	str	r3, [sp, #20]
 800a33e:	f1cb 0300 	rsb	r3, fp, #0
 800a342:	9308      	str	r3, [sp, #32]
 800a344:	2300      	movs	r3, #0
 800a346:	930b      	str	r3, [sp, #44]	; 0x2c
 800a348:	e7bf      	b.n	800a2ca <_dtoa_r+0x1e2>
 800a34a:	2300      	movs	r3, #0
 800a34c:	9309      	str	r3, [sp, #36]	; 0x24
 800a34e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a350:	2b00      	cmp	r3, #0
 800a352:	dc52      	bgt.n	800a3fa <_dtoa_r+0x312>
 800a354:	2301      	movs	r3, #1
 800a356:	9301      	str	r3, [sp, #4]
 800a358:	9304      	str	r3, [sp, #16]
 800a35a:	461a      	mov	r2, r3
 800a35c:	920a      	str	r2, [sp, #40]	; 0x28
 800a35e:	e00b      	b.n	800a378 <_dtoa_r+0x290>
 800a360:	2301      	movs	r3, #1
 800a362:	e7f3      	b.n	800a34c <_dtoa_r+0x264>
 800a364:	2300      	movs	r3, #0
 800a366:	9309      	str	r3, [sp, #36]	; 0x24
 800a368:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a36a:	445b      	add	r3, fp
 800a36c:	9301      	str	r3, [sp, #4]
 800a36e:	3301      	adds	r3, #1
 800a370:	2b01      	cmp	r3, #1
 800a372:	9304      	str	r3, [sp, #16]
 800a374:	bfb8      	it	lt
 800a376:	2301      	movlt	r3, #1
 800a378:	69e0      	ldr	r0, [r4, #28]
 800a37a:	2100      	movs	r1, #0
 800a37c:	2204      	movs	r2, #4
 800a37e:	f102 0614 	add.w	r6, r2, #20
 800a382:	429e      	cmp	r6, r3
 800a384:	d93d      	bls.n	800a402 <_dtoa_r+0x31a>
 800a386:	6041      	str	r1, [r0, #4]
 800a388:	4620      	mov	r0, r4
 800a38a:	f000 fd9f 	bl	800aecc <_Balloc>
 800a38e:	9000      	str	r0, [sp, #0]
 800a390:	2800      	cmp	r0, #0
 800a392:	d139      	bne.n	800a408 <_dtoa_r+0x320>
 800a394:	4b16      	ldr	r3, [pc, #88]	; (800a3f0 <_dtoa_r+0x308>)
 800a396:	4602      	mov	r2, r0
 800a398:	f240 11af 	movw	r1, #431	; 0x1af
 800a39c:	e6bd      	b.n	800a11a <_dtoa_r+0x32>
 800a39e:	2301      	movs	r3, #1
 800a3a0:	e7e1      	b.n	800a366 <_dtoa_r+0x27e>
 800a3a2:	2501      	movs	r5, #1
 800a3a4:	2300      	movs	r3, #0
 800a3a6:	9307      	str	r3, [sp, #28]
 800a3a8:	9509      	str	r5, [sp, #36]	; 0x24
 800a3aa:	f04f 33ff 	mov.w	r3, #4294967295
 800a3ae:	9301      	str	r3, [sp, #4]
 800a3b0:	9304      	str	r3, [sp, #16]
 800a3b2:	2200      	movs	r2, #0
 800a3b4:	2312      	movs	r3, #18
 800a3b6:	e7d1      	b.n	800a35c <_dtoa_r+0x274>
 800a3b8:	636f4361 	.word	0x636f4361
 800a3bc:	3fd287a7 	.word	0x3fd287a7
 800a3c0:	8b60c8b3 	.word	0x8b60c8b3
 800a3c4:	3fc68a28 	.word	0x3fc68a28
 800a3c8:	509f79fb 	.word	0x509f79fb
 800a3cc:	3fd34413 	.word	0x3fd34413
 800a3d0:	0800d816 	.word	0x0800d816
 800a3d4:	0800d82d 	.word	0x0800d82d
 800a3d8:	7ff00000 	.word	0x7ff00000
 800a3dc:	0800d812 	.word	0x0800d812
 800a3e0:	0800d809 	.word	0x0800d809
 800a3e4:	0800d7e1 	.word	0x0800d7e1
 800a3e8:	3ff80000 	.word	0x3ff80000
 800a3ec:	0800d918 	.word	0x0800d918
 800a3f0:	0800d885 	.word	0x0800d885
 800a3f4:	2301      	movs	r3, #1
 800a3f6:	9309      	str	r3, [sp, #36]	; 0x24
 800a3f8:	e7d7      	b.n	800a3aa <_dtoa_r+0x2c2>
 800a3fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3fc:	9301      	str	r3, [sp, #4]
 800a3fe:	9304      	str	r3, [sp, #16]
 800a400:	e7ba      	b.n	800a378 <_dtoa_r+0x290>
 800a402:	3101      	adds	r1, #1
 800a404:	0052      	lsls	r2, r2, #1
 800a406:	e7ba      	b.n	800a37e <_dtoa_r+0x296>
 800a408:	69e3      	ldr	r3, [r4, #28]
 800a40a:	9a00      	ldr	r2, [sp, #0]
 800a40c:	601a      	str	r2, [r3, #0]
 800a40e:	9b04      	ldr	r3, [sp, #16]
 800a410:	2b0e      	cmp	r3, #14
 800a412:	f200 80a8 	bhi.w	800a566 <_dtoa_r+0x47e>
 800a416:	2d00      	cmp	r5, #0
 800a418:	f000 80a5 	beq.w	800a566 <_dtoa_r+0x47e>
 800a41c:	f1bb 0f00 	cmp.w	fp, #0
 800a420:	dd38      	ble.n	800a494 <_dtoa_r+0x3ac>
 800a422:	4bc0      	ldr	r3, [pc, #768]	; (800a724 <_dtoa_r+0x63c>)
 800a424:	f00b 020f 	and.w	r2, fp, #15
 800a428:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a42c:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800a430:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a434:	ea4f 182b 	mov.w	r8, fp, asr #4
 800a438:	d019      	beq.n	800a46e <_dtoa_r+0x386>
 800a43a:	4bbb      	ldr	r3, [pc, #748]	; (800a728 <_dtoa_r+0x640>)
 800a43c:	ec51 0b18 	vmov	r0, r1, d8
 800a440:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800a444:	f7f6 fa32 	bl	80008ac <__aeabi_ddiv>
 800a448:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a44c:	f008 080f 	and.w	r8, r8, #15
 800a450:	2503      	movs	r5, #3
 800a452:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800a728 <_dtoa_r+0x640>
 800a456:	f1b8 0f00 	cmp.w	r8, #0
 800a45a:	d10a      	bne.n	800a472 <_dtoa_r+0x38a>
 800a45c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800a460:	4632      	mov	r2, r6
 800a462:	463b      	mov	r3, r7
 800a464:	f7f6 fa22 	bl	80008ac <__aeabi_ddiv>
 800a468:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a46c:	e02b      	b.n	800a4c6 <_dtoa_r+0x3de>
 800a46e:	2502      	movs	r5, #2
 800a470:	e7ef      	b.n	800a452 <_dtoa_r+0x36a>
 800a472:	f018 0f01 	tst.w	r8, #1
 800a476:	d008      	beq.n	800a48a <_dtoa_r+0x3a2>
 800a478:	4630      	mov	r0, r6
 800a47a:	4639      	mov	r1, r7
 800a47c:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a480:	f7f6 f8ea 	bl	8000658 <__aeabi_dmul>
 800a484:	3501      	adds	r5, #1
 800a486:	4606      	mov	r6, r0
 800a488:	460f      	mov	r7, r1
 800a48a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a48e:	f109 0908 	add.w	r9, r9, #8
 800a492:	e7e0      	b.n	800a456 <_dtoa_r+0x36e>
 800a494:	f000 809f 	beq.w	800a5d6 <_dtoa_r+0x4ee>
 800a498:	f1cb 0600 	rsb	r6, fp, #0
 800a49c:	4ba1      	ldr	r3, [pc, #644]	; (800a724 <_dtoa_r+0x63c>)
 800a49e:	4fa2      	ldr	r7, [pc, #648]	; (800a728 <_dtoa_r+0x640>)
 800a4a0:	f006 020f 	and.w	r2, r6, #15
 800a4a4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a4a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4ac:	ec51 0b18 	vmov	r0, r1, d8
 800a4b0:	f7f6 f8d2 	bl	8000658 <__aeabi_dmul>
 800a4b4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4b8:	1136      	asrs	r6, r6, #4
 800a4ba:	2300      	movs	r3, #0
 800a4bc:	2502      	movs	r5, #2
 800a4be:	2e00      	cmp	r6, #0
 800a4c0:	d17e      	bne.n	800a5c0 <_dtoa_r+0x4d8>
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1d0      	bne.n	800a468 <_dtoa_r+0x380>
 800a4c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a4c8:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	f000 8084 	beq.w	800a5da <_dtoa_r+0x4f2>
 800a4d2:	4b96      	ldr	r3, [pc, #600]	; (800a72c <_dtoa_r+0x644>)
 800a4d4:	2200      	movs	r2, #0
 800a4d6:	4640      	mov	r0, r8
 800a4d8:	4649      	mov	r1, r9
 800a4da:	f7f6 fb2f 	bl	8000b3c <__aeabi_dcmplt>
 800a4de:	2800      	cmp	r0, #0
 800a4e0:	d07b      	beq.n	800a5da <_dtoa_r+0x4f2>
 800a4e2:	9b04      	ldr	r3, [sp, #16]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d078      	beq.n	800a5da <_dtoa_r+0x4f2>
 800a4e8:	9b01      	ldr	r3, [sp, #4]
 800a4ea:	2b00      	cmp	r3, #0
 800a4ec:	dd39      	ble.n	800a562 <_dtoa_r+0x47a>
 800a4ee:	4b90      	ldr	r3, [pc, #576]	; (800a730 <_dtoa_r+0x648>)
 800a4f0:	2200      	movs	r2, #0
 800a4f2:	4640      	mov	r0, r8
 800a4f4:	4649      	mov	r1, r9
 800a4f6:	f7f6 f8af 	bl	8000658 <__aeabi_dmul>
 800a4fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a4fe:	9e01      	ldr	r6, [sp, #4]
 800a500:	f10b 37ff 	add.w	r7, fp, #4294967295
 800a504:	3501      	adds	r5, #1
 800a506:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800a50a:	4628      	mov	r0, r5
 800a50c:	f7f6 f83a 	bl	8000584 <__aeabi_i2d>
 800a510:	4642      	mov	r2, r8
 800a512:	464b      	mov	r3, r9
 800a514:	f7f6 f8a0 	bl	8000658 <__aeabi_dmul>
 800a518:	4b86      	ldr	r3, [pc, #536]	; (800a734 <_dtoa_r+0x64c>)
 800a51a:	2200      	movs	r2, #0
 800a51c:	f7f5 fee6 	bl	80002ec <__adddf3>
 800a520:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800a524:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800a528:	9303      	str	r3, [sp, #12]
 800a52a:	2e00      	cmp	r6, #0
 800a52c:	d158      	bne.n	800a5e0 <_dtoa_r+0x4f8>
 800a52e:	4b82      	ldr	r3, [pc, #520]	; (800a738 <_dtoa_r+0x650>)
 800a530:	2200      	movs	r2, #0
 800a532:	4640      	mov	r0, r8
 800a534:	4649      	mov	r1, r9
 800a536:	f7f5 fed7 	bl	80002e8 <__aeabi_dsub>
 800a53a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a53e:	4680      	mov	r8, r0
 800a540:	4689      	mov	r9, r1
 800a542:	f7f6 fb19 	bl	8000b78 <__aeabi_dcmpgt>
 800a546:	2800      	cmp	r0, #0
 800a548:	f040 8296 	bne.w	800aa78 <_dtoa_r+0x990>
 800a54c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800a550:	4640      	mov	r0, r8
 800a552:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800a556:	4649      	mov	r1, r9
 800a558:	f7f6 faf0 	bl	8000b3c <__aeabi_dcmplt>
 800a55c:	2800      	cmp	r0, #0
 800a55e:	f040 8289 	bne.w	800aa74 <_dtoa_r+0x98c>
 800a562:	ed8d 8b02 	vstr	d8, [sp, #8]
 800a566:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800a568:	2b00      	cmp	r3, #0
 800a56a:	f2c0 814e 	blt.w	800a80a <_dtoa_r+0x722>
 800a56e:	f1bb 0f0e 	cmp.w	fp, #14
 800a572:	f300 814a 	bgt.w	800a80a <_dtoa_r+0x722>
 800a576:	4b6b      	ldr	r3, [pc, #428]	; (800a724 <_dtoa_r+0x63c>)
 800a578:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a57c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a580:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a582:	2b00      	cmp	r3, #0
 800a584:	f280 80dc 	bge.w	800a740 <_dtoa_r+0x658>
 800a588:	9b04      	ldr	r3, [sp, #16]
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	f300 80d8 	bgt.w	800a740 <_dtoa_r+0x658>
 800a590:	f040 826f 	bne.w	800aa72 <_dtoa_r+0x98a>
 800a594:	4b68      	ldr	r3, [pc, #416]	; (800a738 <_dtoa_r+0x650>)
 800a596:	2200      	movs	r2, #0
 800a598:	4640      	mov	r0, r8
 800a59a:	4649      	mov	r1, r9
 800a59c:	f7f6 f85c 	bl	8000658 <__aeabi_dmul>
 800a5a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a5a4:	f7f6 fade 	bl	8000b64 <__aeabi_dcmpge>
 800a5a8:	9e04      	ldr	r6, [sp, #16]
 800a5aa:	4637      	mov	r7, r6
 800a5ac:	2800      	cmp	r0, #0
 800a5ae:	f040 8245 	bne.w	800aa3c <_dtoa_r+0x954>
 800a5b2:	9d00      	ldr	r5, [sp, #0]
 800a5b4:	2331      	movs	r3, #49	; 0x31
 800a5b6:	f805 3b01 	strb.w	r3, [r5], #1
 800a5ba:	f10b 0b01 	add.w	fp, fp, #1
 800a5be:	e241      	b.n	800aa44 <_dtoa_r+0x95c>
 800a5c0:	07f2      	lsls	r2, r6, #31
 800a5c2:	d505      	bpl.n	800a5d0 <_dtoa_r+0x4e8>
 800a5c4:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a5c8:	f7f6 f846 	bl	8000658 <__aeabi_dmul>
 800a5cc:	3501      	adds	r5, #1
 800a5ce:	2301      	movs	r3, #1
 800a5d0:	1076      	asrs	r6, r6, #1
 800a5d2:	3708      	adds	r7, #8
 800a5d4:	e773      	b.n	800a4be <_dtoa_r+0x3d6>
 800a5d6:	2502      	movs	r5, #2
 800a5d8:	e775      	b.n	800a4c6 <_dtoa_r+0x3de>
 800a5da:	9e04      	ldr	r6, [sp, #16]
 800a5dc:	465f      	mov	r7, fp
 800a5de:	e792      	b.n	800a506 <_dtoa_r+0x41e>
 800a5e0:	9900      	ldr	r1, [sp, #0]
 800a5e2:	4b50      	ldr	r3, [pc, #320]	; (800a724 <_dtoa_r+0x63c>)
 800a5e4:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a5e8:	4431      	add	r1, r6
 800a5ea:	9102      	str	r1, [sp, #8]
 800a5ec:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a5ee:	eeb0 9a47 	vmov.f32	s18, s14
 800a5f2:	eef0 9a67 	vmov.f32	s19, s15
 800a5f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800a5fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800a5fe:	2900      	cmp	r1, #0
 800a600:	d044      	beq.n	800a68c <_dtoa_r+0x5a4>
 800a602:	494e      	ldr	r1, [pc, #312]	; (800a73c <_dtoa_r+0x654>)
 800a604:	2000      	movs	r0, #0
 800a606:	f7f6 f951 	bl	80008ac <__aeabi_ddiv>
 800a60a:	ec53 2b19 	vmov	r2, r3, d9
 800a60e:	f7f5 fe6b 	bl	80002e8 <__aeabi_dsub>
 800a612:	9d00      	ldr	r5, [sp, #0]
 800a614:	ec41 0b19 	vmov	d9, r0, r1
 800a618:	4649      	mov	r1, r9
 800a61a:	4640      	mov	r0, r8
 800a61c:	f7f6 facc 	bl	8000bb8 <__aeabi_d2iz>
 800a620:	4606      	mov	r6, r0
 800a622:	f7f5 ffaf 	bl	8000584 <__aeabi_i2d>
 800a626:	4602      	mov	r2, r0
 800a628:	460b      	mov	r3, r1
 800a62a:	4640      	mov	r0, r8
 800a62c:	4649      	mov	r1, r9
 800a62e:	f7f5 fe5b 	bl	80002e8 <__aeabi_dsub>
 800a632:	3630      	adds	r6, #48	; 0x30
 800a634:	f805 6b01 	strb.w	r6, [r5], #1
 800a638:	ec53 2b19 	vmov	r2, r3, d9
 800a63c:	4680      	mov	r8, r0
 800a63e:	4689      	mov	r9, r1
 800a640:	f7f6 fa7c 	bl	8000b3c <__aeabi_dcmplt>
 800a644:	2800      	cmp	r0, #0
 800a646:	d164      	bne.n	800a712 <_dtoa_r+0x62a>
 800a648:	4642      	mov	r2, r8
 800a64a:	464b      	mov	r3, r9
 800a64c:	4937      	ldr	r1, [pc, #220]	; (800a72c <_dtoa_r+0x644>)
 800a64e:	2000      	movs	r0, #0
 800a650:	f7f5 fe4a 	bl	80002e8 <__aeabi_dsub>
 800a654:	ec53 2b19 	vmov	r2, r3, d9
 800a658:	f7f6 fa70 	bl	8000b3c <__aeabi_dcmplt>
 800a65c:	2800      	cmp	r0, #0
 800a65e:	f040 80b6 	bne.w	800a7ce <_dtoa_r+0x6e6>
 800a662:	9b02      	ldr	r3, [sp, #8]
 800a664:	429d      	cmp	r5, r3
 800a666:	f43f af7c 	beq.w	800a562 <_dtoa_r+0x47a>
 800a66a:	4b31      	ldr	r3, [pc, #196]	; (800a730 <_dtoa_r+0x648>)
 800a66c:	ec51 0b19 	vmov	r0, r1, d9
 800a670:	2200      	movs	r2, #0
 800a672:	f7f5 fff1 	bl	8000658 <__aeabi_dmul>
 800a676:	4b2e      	ldr	r3, [pc, #184]	; (800a730 <_dtoa_r+0x648>)
 800a678:	ec41 0b19 	vmov	d9, r0, r1
 800a67c:	2200      	movs	r2, #0
 800a67e:	4640      	mov	r0, r8
 800a680:	4649      	mov	r1, r9
 800a682:	f7f5 ffe9 	bl	8000658 <__aeabi_dmul>
 800a686:	4680      	mov	r8, r0
 800a688:	4689      	mov	r9, r1
 800a68a:	e7c5      	b.n	800a618 <_dtoa_r+0x530>
 800a68c:	ec51 0b17 	vmov	r0, r1, d7
 800a690:	f7f5 ffe2 	bl	8000658 <__aeabi_dmul>
 800a694:	9b02      	ldr	r3, [sp, #8]
 800a696:	9d00      	ldr	r5, [sp, #0]
 800a698:	930f      	str	r3, [sp, #60]	; 0x3c
 800a69a:	ec41 0b19 	vmov	d9, r0, r1
 800a69e:	4649      	mov	r1, r9
 800a6a0:	4640      	mov	r0, r8
 800a6a2:	f7f6 fa89 	bl	8000bb8 <__aeabi_d2iz>
 800a6a6:	4606      	mov	r6, r0
 800a6a8:	f7f5 ff6c 	bl	8000584 <__aeabi_i2d>
 800a6ac:	3630      	adds	r6, #48	; 0x30
 800a6ae:	4602      	mov	r2, r0
 800a6b0:	460b      	mov	r3, r1
 800a6b2:	4640      	mov	r0, r8
 800a6b4:	4649      	mov	r1, r9
 800a6b6:	f7f5 fe17 	bl	80002e8 <__aeabi_dsub>
 800a6ba:	f805 6b01 	strb.w	r6, [r5], #1
 800a6be:	9b02      	ldr	r3, [sp, #8]
 800a6c0:	429d      	cmp	r5, r3
 800a6c2:	4680      	mov	r8, r0
 800a6c4:	4689      	mov	r9, r1
 800a6c6:	f04f 0200 	mov.w	r2, #0
 800a6ca:	d124      	bne.n	800a716 <_dtoa_r+0x62e>
 800a6cc:	4b1b      	ldr	r3, [pc, #108]	; (800a73c <_dtoa_r+0x654>)
 800a6ce:	ec51 0b19 	vmov	r0, r1, d9
 800a6d2:	f7f5 fe0b 	bl	80002ec <__adddf3>
 800a6d6:	4602      	mov	r2, r0
 800a6d8:	460b      	mov	r3, r1
 800a6da:	4640      	mov	r0, r8
 800a6dc:	4649      	mov	r1, r9
 800a6de:	f7f6 fa4b 	bl	8000b78 <__aeabi_dcmpgt>
 800a6e2:	2800      	cmp	r0, #0
 800a6e4:	d173      	bne.n	800a7ce <_dtoa_r+0x6e6>
 800a6e6:	ec53 2b19 	vmov	r2, r3, d9
 800a6ea:	4914      	ldr	r1, [pc, #80]	; (800a73c <_dtoa_r+0x654>)
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	f7f5 fdfb 	bl	80002e8 <__aeabi_dsub>
 800a6f2:	4602      	mov	r2, r0
 800a6f4:	460b      	mov	r3, r1
 800a6f6:	4640      	mov	r0, r8
 800a6f8:	4649      	mov	r1, r9
 800a6fa:	f7f6 fa1f 	bl	8000b3c <__aeabi_dcmplt>
 800a6fe:	2800      	cmp	r0, #0
 800a700:	f43f af2f 	beq.w	800a562 <_dtoa_r+0x47a>
 800a704:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800a706:	1e6b      	subs	r3, r5, #1
 800a708:	930f      	str	r3, [sp, #60]	; 0x3c
 800a70a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800a70e:	2b30      	cmp	r3, #48	; 0x30
 800a710:	d0f8      	beq.n	800a704 <_dtoa_r+0x61c>
 800a712:	46bb      	mov	fp, r7
 800a714:	e04a      	b.n	800a7ac <_dtoa_r+0x6c4>
 800a716:	4b06      	ldr	r3, [pc, #24]	; (800a730 <_dtoa_r+0x648>)
 800a718:	f7f5 ff9e 	bl	8000658 <__aeabi_dmul>
 800a71c:	4680      	mov	r8, r0
 800a71e:	4689      	mov	r9, r1
 800a720:	e7bd      	b.n	800a69e <_dtoa_r+0x5b6>
 800a722:	bf00      	nop
 800a724:	0800d918 	.word	0x0800d918
 800a728:	0800d8f0 	.word	0x0800d8f0
 800a72c:	3ff00000 	.word	0x3ff00000
 800a730:	40240000 	.word	0x40240000
 800a734:	401c0000 	.word	0x401c0000
 800a738:	40140000 	.word	0x40140000
 800a73c:	3fe00000 	.word	0x3fe00000
 800a740:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800a744:	9d00      	ldr	r5, [sp, #0]
 800a746:	4642      	mov	r2, r8
 800a748:	464b      	mov	r3, r9
 800a74a:	4630      	mov	r0, r6
 800a74c:	4639      	mov	r1, r7
 800a74e:	f7f6 f8ad 	bl	80008ac <__aeabi_ddiv>
 800a752:	f7f6 fa31 	bl	8000bb8 <__aeabi_d2iz>
 800a756:	9001      	str	r0, [sp, #4]
 800a758:	f7f5 ff14 	bl	8000584 <__aeabi_i2d>
 800a75c:	4642      	mov	r2, r8
 800a75e:	464b      	mov	r3, r9
 800a760:	f7f5 ff7a 	bl	8000658 <__aeabi_dmul>
 800a764:	4602      	mov	r2, r0
 800a766:	460b      	mov	r3, r1
 800a768:	4630      	mov	r0, r6
 800a76a:	4639      	mov	r1, r7
 800a76c:	f7f5 fdbc 	bl	80002e8 <__aeabi_dsub>
 800a770:	9e01      	ldr	r6, [sp, #4]
 800a772:	9f04      	ldr	r7, [sp, #16]
 800a774:	3630      	adds	r6, #48	; 0x30
 800a776:	f805 6b01 	strb.w	r6, [r5], #1
 800a77a:	9e00      	ldr	r6, [sp, #0]
 800a77c:	1bae      	subs	r6, r5, r6
 800a77e:	42b7      	cmp	r7, r6
 800a780:	4602      	mov	r2, r0
 800a782:	460b      	mov	r3, r1
 800a784:	d134      	bne.n	800a7f0 <_dtoa_r+0x708>
 800a786:	f7f5 fdb1 	bl	80002ec <__adddf3>
 800a78a:	4642      	mov	r2, r8
 800a78c:	464b      	mov	r3, r9
 800a78e:	4606      	mov	r6, r0
 800a790:	460f      	mov	r7, r1
 800a792:	f7f6 f9f1 	bl	8000b78 <__aeabi_dcmpgt>
 800a796:	b9c8      	cbnz	r0, 800a7cc <_dtoa_r+0x6e4>
 800a798:	4642      	mov	r2, r8
 800a79a:	464b      	mov	r3, r9
 800a79c:	4630      	mov	r0, r6
 800a79e:	4639      	mov	r1, r7
 800a7a0:	f7f6 f9c2 	bl	8000b28 <__aeabi_dcmpeq>
 800a7a4:	b110      	cbz	r0, 800a7ac <_dtoa_r+0x6c4>
 800a7a6:	9b01      	ldr	r3, [sp, #4]
 800a7a8:	07db      	lsls	r3, r3, #31
 800a7aa:	d40f      	bmi.n	800a7cc <_dtoa_r+0x6e4>
 800a7ac:	4651      	mov	r1, sl
 800a7ae:	4620      	mov	r0, r4
 800a7b0:	f000 fbcc 	bl	800af4c <_Bfree>
 800a7b4:	2300      	movs	r3, #0
 800a7b6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7b8:	702b      	strb	r3, [r5, #0]
 800a7ba:	f10b 0301 	add.w	r3, fp, #1
 800a7be:	6013      	str	r3, [r2, #0]
 800a7c0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	f43f ace2 	beq.w	800a18c <_dtoa_r+0xa4>
 800a7c8:	601d      	str	r5, [r3, #0]
 800a7ca:	e4df      	b.n	800a18c <_dtoa_r+0xa4>
 800a7cc:	465f      	mov	r7, fp
 800a7ce:	462b      	mov	r3, r5
 800a7d0:	461d      	mov	r5, r3
 800a7d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a7d6:	2a39      	cmp	r2, #57	; 0x39
 800a7d8:	d106      	bne.n	800a7e8 <_dtoa_r+0x700>
 800a7da:	9a00      	ldr	r2, [sp, #0]
 800a7dc:	429a      	cmp	r2, r3
 800a7de:	d1f7      	bne.n	800a7d0 <_dtoa_r+0x6e8>
 800a7e0:	9900      	ldr	r1, [sp, #0]
 800a7e2:	2230      	movs	r2, #48	; 0x30
 800a7e4:	3701      	adds	r7, #1
 800a7e6:	700a      	strb	r2, [r1, #0]
 800a7e8:	781a      	ldrb	r2, [r3, #0]
 800a7ea:	3201      	adds	r2, #1
 800a7ec:	701a      	strb	r2, [r3, #0]
 800a7ee:	e790      	b.n	800a712 <_dtoa_r+0x62a>
 800a7f0:	4ba3      	ldr	r3, [pc, #652]	; (800aa80 <_dtoa_r+0x998>)
 800a7f2:	2200      	movs	r2, #0
 800a7f4:	f7f5 ff30 	bl	8000658 <__aeabi_dmul>
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	2300      	movs	r3, #0
 800a7fc:	4606      	mov	r6, r0
 800a7fe:	460f      	mov	r7, r1
 800a800:	f7f6 f992 	bl	8000b28 <__aeabi_dcmpeq>
 800a804:	2800      	cmp	r0, #0
 800a806:	d09e      	beq.n	800a746 <_dtoa_r+0x65e>
 800a808:	e7d0      	b.n	800a7ac <_dtoa_r+0x6c4>
 800a80a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a80c:	2a00      	cmp	r2, #0
 800a80e:	f000 80ca 	beq.w	800a9a6 <_dtoa_r+0x8be>
 800a812:	9a07      	ldr	r2, [sp, #28]
 800a814:	2a01      	cmp	r2, #1
 800a816:	f300 80ad 	bgt.w	800a974 <_dtoa_r+0x88c>
 800a81a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a81c:	2a00      	cmp	r2, #0
 800a81e:	f000 80a5 	beq.w	800a96c <_dtoa_r+0x884>
 800a822:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800a826:	9e08      	ldr	r6, [sp, #32]
 800a828:	9d05      	ldr	r5, [sp, #20]
 800a82a:	9a05      	ldr	r2, [sp, #20]
 800a82c:	441a      	add	r2, r3
 800a82e:	9205      	str	r2, [sp, #20]
 800a830:	9a06      	ldr	r2, [sp, #24]
 800a832:	2101      	movs	r1, #1
 800a834:	441a      	add	r2, r3
 800a836:	4620      	mov	r0, r4
 800a838:	9206      	str	r2, [sp, #24]
 800a83a:	f000 fc87 	bl	800b14c <__i2b>
 800a83e:	4607      	mov	r7, r0
 800a840:	b165      	cbz	r5, 800a85c <_dtoa_r+0x774>
 800a842:	9b06      	ldr	r3, [sp, #24]
 800a844:	2b00      	cmp	r3, #0
 800a846:	dd09      	ble.n	800a85c <_dtoa_r+0x774>
 800a848:	42ab      	cmp	r3, r5
 800a84a:	9a05      	ldr	r2, [sp, #20]
 800a84c:	bfa8      	it	ge
 800a84e:	462b      	movge	r3, r5
 800a850:	1ad2      	subs	r2, r2, r3
 800a852:	9205      	str	r2, [sp, #20]
 800a854:	9a06      	ldr	r2, [sp, #24]
 800a856:	1aed      	subs	r5, r5, r3
 800a858:	1ad3      	subs	r3, r2, r3
 800a85a:	9306      	str	r3, [sp, #24]
 800a85c:	9b08      	ldr	r3, [sp, #32]
 800a85e:	b1f3      	cbz	r3, 800a89e <_dtoa_r+0x7b6>
 800a860:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a862:	2b00      	cmp	r3, #0
 800a864:	f000 80a3 	beq.w	800a9ae <_dtoa_r+0x8c6>
 800a868:	2e00      	cmp	r6, #0
 800a86a:	dd10      	ble.n	800a88e <_dtoa_r+0x7a6>
 800a86c:	4639      	mov	r1, r7
 800a86e:	4632      	mov	r2, r6
 800a870:	4620      	mov	r0, r4
 800a872:	f000 fd2b 	bl	800b2cc <__pow5mult>
 800a876:	4652      	mov	r2, sl
 800a878:	4601      	mov	r1, r0
 800a87a:	4607      	mov	r7, r0
 800a87c:	4620      	mov	r0, r4
 800a87e:	f000 fc7b 	bl	800b178 <__multiply>
 800a882:	4651      	mov	r1, sl
 800a884:	4680      	mov	r8, r0
 800a886:	4620      	mov	r0, r4
 800a888:	f000 fb60 	bl	800af4c <_Bfree>
 800a88c:	46c2      	mov	sl, r8
 800a88e:	9b08      	ldr	r3, [sp, #32]
 800a890:	1b9a      	subs	r2, r3, r6
 800a892:	d004      	beq.n	800a89e <_dtoa_r+0x7b6>
 800a894:	4651      	mov	r1, sl
 800a896:	4620      	mov	r0, r4
 800a898:	f000 fd18 	bl	800b2cc <__pow5mult>
 800a89c:	4682      	mov	sl, r0
 800a89e:	2101      	movs	r1, #1
 800a8a0:	4620      	mov	r0, r4
 800a8a2:	f000 fc53 	bl	800b14c <__i2b>
 800a8a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	4606      	mov	r6, r0
 800a8ac:	f340 8081 	ble.w	800a9b2 <_dtoa_r+0x8ca>
 800a8b0:	461a      	mov	r2, r3
 800a8b2:	4601      	mov	r1, r0
 800a8b4:	4620      	mov	r0, r4
 800a8b6:	f000 fd09 	bl	800b2cc <__pow5mult>
 800a8ba:	9b07      	ldr	r3, [sp, #28]
 800a8bc:	2b01      	cmp	r3, #1
 800a8be:	4606      	mov	r6, r0
 800a8c0:	dd7a      	ble.n	800a9b8 <_dtoa_r+0x8d0>
 800a8c2:	f04f 0800 	mov.w	r8, #0
 800a8c6:	6933      	ldr	r3, [r6, #16]
 800a8c8:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800a8cc:	6918      	ldr	r0, [r3, #16]
 800a8ce:	f000 fbef 	bl	800b0b0 <__hi0bits>
 800a8d2:	f1c0 0020 	rsb	r0, r0, #32
 800a8d6:	9b06      	ldr	r3, [sp, #24]
 800a8d8:	4418      	add	r0, r3
 800a8da:	f010 001f 	ands.w	r0, r0, #31
 800a8de:	f000 8094 	beq.w	800aa0a <_dtoa_r+0x922>
 800a8e2:	f1c0 0320 	rsb	r3, r0, #32
 800a8e6:	2b04      	cmp	r3, #4
 800a8e8:	f340 8085 	ble.w	800a9f6 <_dtoa_r+0x90e>
 800a8ec:	9b05      	ldr	r3, [sp, #20]
 800a8ee:	f1c0 001c 	rsb	r0, r0, #28
 800a8f2:	4403      	add	r3, r0
 800a8f4:	9305      	str	r3, [sp, #20]
 800a8f6:	9b06      	ldr	r3, [sp, #24]
 800a8f8:	4403      	add	r3, r0
 800a8fa:	4405      	add	r5, r0
 800a8fc:	9306      	str	r3, [sp, #24]
 800a8fe:	9b05      	ldr	r3, [sp, #20]
 800a900:	2b00      	cmp	r3, #0
 800a902:	dd05      	ble.n	800a910 <_dtoa_r+0x828>
 800a904:	4651      	mov	r1, sl
 800a906:	461a      	mov	r2, r3
 800a908:	4620      	mov	r0, r4
 800a90a:	f000 fd39 	bl	800b380 <__lshift>
 800a90e:	4682      	mov	sl, r0
 800a910:	9b06      	ldr	r3, [sp, #24]
 800a912:	2b00      	cmp	r3, #0
 800a914:	dd05      	ble.n	800a922 <_dtoa_r+0x83a>
 800a916:	4631      	mov	r1, r6
 800a918:	461a      	mov	r2, r3
 800a91a:	4620      	mov	r0, r4
 800a91c:	f000 fd30 	bl	800b380 <__lshift>
 800a920:	4606      	mov	r6, r0
 800a922:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a924:	2b00      	cmp	r3, #0
 800a926:	d072      	beq.n	800aa0e <_dtoa_r+0x926>
 800a928:	4631      	mov	r1, r6
 800a92a:	4650      	mov	r0, sl
 800a92c:	f000 fd94 	bl	800b458 <__mcmp>
 800a930:	2800      	cmp	r0, #0
 800a932:	da6c      	bge.n	800aa0e <_dtoa_r+0x926>
 800a934:	2300      	movs	r3, #0
 800a936:	4651      	mov	r1, sl
 800a938:	220a      	movs	r2, #10
 800a93a:	4620      	mov	r0, r4
 800a93c:	f000 fb28 	bl	800af90 <__multadd>
 800a940:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a942:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a946:	4682      	mov	sl, r0
 800a948:	2b00      	cmp	r3, #0
 800a94a:	f000 81b0 	beq.w	800acae <_dtoa_r+0xbc6>
 800a94e:	2300      	movs	r3, #0
 800a950:	4639      	mov	r1, r7
 800a952:	220a      	movs	r2, #10
 800a954:	4620      	mov	r0, r4
 800a956:	f000 fb1b 	bl	800af90 <__multadd>
 800a95a:	9b01      	ldr	r3, [sp, #4]
 800a95c:	2b00      	cmp	r3, #0
 800a95e:	4607      	mov	r7, r0
 800a960:	f300 8096 	bgt.w	800aa90 <_dtoa_r+0x9a8>
 800a964:	9b07      	ldr	r3, [sp, #28]
 800a966:	2b02      	cmp	r3, #2
 800a968:	dc59      	bgt.n	800aa1e <_dtoa_r+0x936>
 800a96a:	e091      	b.n	800aa90 <_dtoa_r+0x9a8>
 800a96c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a96e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800a972:	e758      	b.n	800a826 <_dtoa_r+0x73e>
 800a974:	9b04      	ldr	r3, [sp, #16]
 800a976:	1e5e      	subs	r6, r3, #1
 800a978:	9b08      	ldr	r3, [sp, #32]
 800a97a:	42b3      	cmp	r3, r6
 800a97c:	bfbf      	itttt	lt
 800a97e:	9b08      	ldrlt	r3, [sp, #32]
 800a980:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800a982:	9608      	strlt	r6, [sp, #32]
 800a984:	1af3      	sublt	r3, r6, r3
 800a986:	bfb4      	ite	lt
 800a988:	18d2      	addlt	r2, r2, r3
 800a98a:	1b9e      	subge	r6, r3, r6
 800a98c:	9b04      	ldr	r3, [sp, #16]
 800a98e:	bfbc      	itt	lt
 800a990:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800a992:	2600      	movlt	r6, #0
 800a994:	2b00      	cmp	r3, #0
 800a996:	bfb7      	itett	lt
 800a998:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800a99c:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800a9a0:	1a9d      	sublt	r5, r3, r2
 800a9a2:	2300      	movlt	r3, #0
 800a9a4:	e741      	b.n	800a82a <_dtoa_r+0x742>
 800a9a6:	9e08      	ldr	r6, [sp, #32]
 800a9a8:	9d05      	ldr	r5, [sp, #20]
 800a9aa:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800a9ac:	e748      	b.n	800a840 <_dtoa_r+0x758>
 800a9ae:	9a08      	ldr	r2, [sp, #32]
 800a9b0:	e770      	b.n	800a894 <_dtoa_r+0x7ac>
 800a9b2:	9b07      	ldr	r3, [sp, #28]
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	dc19      	bgt.n	800a9ec <_dtoa_r+0x904>
 800a9b8:	9b02      	ldr	r3, [sp, #8]
 800a9ba:	b9bb      	cbnz	r3, 800a9ec <_dtoa_r+0x904>
 800a9bc:	9b03      	ldr	r3, [sp, #12]
 800a9be:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a9c2:	b99b      	cbnz	r3, 800a9ec <_dtoa_r+0x904>
 800a9c4:	9b03      	ldr	r3, [sp, #12]
 800a9c6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a9ca:	0d1b      	lsrs	r3, r3, #20
 800a9cc:	051b      	lsls	r3, r3, #20
 800a9ce:	b183      	cbz	r3, 800a9f2 <_dtoa_r+0x90a>
 800a9d0:	9b05      	ldr	r3, [sp, #20]
 800a9d2:	3301      	adds	r3, #1
 800a9d4:	9305      	str	r3, [sp, #20]
 800a9d6:	9b06      	ldr	r3, [sp, #24]
 800a9d8:	3301      	adds	r3, #1
 800a9da:	9306      	str	r3, [sp, #24]
 800a9dc:	f04f 0801 	mov.w	r8, #1
 800a9e0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	f47f af6f 	bne.w	800a8c6 <_dtoa_r+0x7de>
 800a9e8:	2001      	movs	r0, #1
 800a9ea:	e774      	b.n	800a8d6 <_dtoa_r+0x7ee>
 800a9ec:	f04f 0800 	mov.w	r8, #0
 800a9f0:	e7f6      	b.n	800a9e0 <_dtoa_r+0x8f8>
 800a9f2:	4698      	mov	r8, r3
 800a9f4:	e7f4      	b.n	800a9e0 <_dtoa_r+0x8f8>
 800a9f6:	d082      	beq.n	800a8fe <_dtoa_r+0x816>
 800a9f8:	9a05      	ldr	r2, [sp, #20]
 800a9fa:	331c      	adds	r3, #28
 800a9fc:	441a      	add	r2, r3
 800a9fe:	9205      	str	r2, [sp, #20]
 800aa00:	9a06      	ldr	r2, [sp, #24]
 800aa02:	441a      	add	r2, r3
 800aa04:	441d      	add	r5, r3
 800aa06:	9206      	str	r2, [sp, #24]
 800aa08:	e779      	b.n	800a8fe <_dtoa_r+0x816>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	e7f4      	b.n	800a9f8 <_dtoa_r+0x910>
 800aa0e:	9b04      	ldr	r3, [sp, #16]
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	dc37      	bgt.n	800aa84 <_dtoa_r+0x99c>
 800aa14:	9b07      	ldr	r3, [sp, #28]
 800aa16:	2b02      	cmp	r3, #2
 800aa18:	dd34      	ble.n	800aa84 <_dtoa_r+0x99c>
 800aa1a:	9b04      	ldr	r3, [sp, #16]
 800aa1c:	9301      	str	r3, [sp, #4]
 800aa1e:	9b01      	ldr	r3, [sp, #4]
 800aa20:	b963      	cbnz	r3, 800aa3c <_dtoa_r+0x954>
 800aa22:	4631      	mov	r1, r6
 800aa24:	2205      	movs	r2, #5
 800aa26:	4620      	mov	r0, r4
 800aa28:	f000 fab2 	bl	800af90 <__multadd>
 800aa2c:	4601      	mov	r1, r0
 800aa2e:	4606      	mov	r6, r0
 800aa30:	4650      	mov	r0, sl
 800aa32:	f000 fd11 	bl	800b458 <__mcmp>
 800aa36:	2800      	cmp	r0, #0
 800aa38:	f73f adbb 	bgt.w	800a5b2 <_dtoa_r+0x4ca>
 800aa3c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa3e:	9d00      	ldr	r5, [sp, #0]
 800aa40:	ea6f 0b03 	mvn.w	fp, r3
 800aa44:	f04f 0800 	mov.w	r8, #0
 800aa48:	4631      	mov	r1, r6
 800aa4a:	4620      	mov	r0, r4
 800aa4c:	f000 fa7e 	bl	800af4c <_Bfree>
 800aa50:	2f00      	cmp	r7, #0
 800aa52:	f43f aeab 	beq.w	800a7ac <_dtoa_r+0x6c4>
 800aa56:	f1b8 0f00 	cmp.w	r8, #0
 800aa5a:	d005      	beq.n	800aa68 <_dtoa_r+0x980>
 800aa5c:	45b8      	cmp	r8, r7
 800aa5e:	d003      	beq.n	800aa68 <_dtoa_r+0x980>
 800aa60:	4641      	mov	r1, r8
 800aa62:	4620      	mov	r0, r4
 800aa64:	f000 fa72 	bl	800af4c <_Bfree>
 800aa68:	4639      	mov	r1, r7
 800aa6a:	4620      	mov	r0, r4
 800aa6c:	f000 fa6e 	bl	800af4c <_Bfree>
 800aa70:	e69c      	b.n	800a7ac <_dtoa_r+0x6c4>
 800aa72:	2600      	movs	r6, #0
 800aa74:	4637      	mov	r7, r6
 800aa76:	e7e1      	b.n	800aa3c <_dtoa_r+0x954>
 800aa78:	46bb      	mov	fp, r7
 800aa7a:	4637      	mov	r7, r6
 800aa7c:	e599      	b.n	800a5b2 <_dtoa_r+0x4ca>
 800aa7e:	bf00      	nop
 800aa80:	40240000 	.word	0x40240000
 800aa84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	f000 80c8 	beq.w	800ac1c <_dtoa_r+0xb34>
 800aa8c:	9b04      	ldr	r3, [sp, #16]
 800aa8e:	9301      	str	r3, [sp, #4]
 800aa90:	2d00      	cmp	r5, #0
 800aa92:	dd05      	ble.n	800aaa0 <_dtoa_r+0x9b8>
 800aa94:	4639      	mov	r1, r7
 800aa96:	462a      	mov	r2, r5
 800aa98:	4620      	mov	r0, r4
 800aa9a:	f000 fc71 	bl	800b380 <__lshift>
 800aa9e:	4607      	mov	r7, r0
 800aaa0:	f1b8 0f00 	cmp.w	r8, #0
 800aaa4:	d05b      	beq.n	800ab5e <_dtoa_r+0xa76>
 800aaa6:	6879      	ldr	r1, [r7, #4]
 800aaa8:	4620      	mov	r0, r4
 800aaaa:	f000 fa0f 	bl	800aecc <_Balloc>
 800aaae:	4605      	mov	r5, r0
 800aab0:	b928      	cbnz	r0, 800aabe <_dtoa_r+0x9d6>
 800aab2:	4b83      	ldr	r3, [pc, #524]	; (800acc0 <_dtoa_r+0xbd8>)
 800aab4:	4602      	mov	r2, r0
 800aab6:	f240 21ef 	movw	r1, #751	; 0x2ef
 800aaba:	f7ff bb2e 	b.w	800a11a <_dtoa_r+0x32>
 800aabe:	693a      	ldr	r2, [r7, #16]
 800aac0:	3202      	adds	r2, #2
 800aac2:	0092      	lsls	r2, r2, #2
 800aac4:	f107 010c 	add.w	r1, r7, #12
 800aac8:	300c      	adds	r0, #12
 800aaca:	f001 ff85 	bl	800c9d8 <memcpy>
 800aace:	2201      	movs	r2, #1
 800aad0:	4629      	mov	r1, r5
 800aad2:	4620      	mov	r0, r4
 800aad4:	f000 fc54 	bl	800b380 <__lshift>
 800aad8:	9b00      	ldr	r3, [sp, #0]
 800aada:	3301      	adds	r3, #1
 800aadc:	9304      	str	r3, [sp, #16]
 800aade:	e9dd 2300 	ldrd	r2, r3, [sp]
 800aae2:	4413      	add	r3, r2
 800aae4:	9308      	str	r3, [sp, #32]
 800aae6:	9b02      	ldr	r3, [sp, #8]
 800aae8:	f003 0301 	and.w	r3, r3, #1
 800aaec:	46b8      	mov	r8, r7
 800aaee:	9306      	str	r3, [sp, #24]
 800aaf0:	4607      	mov	r7, r0
 800aaf2:	9b04      	ldr	r3, [sp, #16]
 800aaf4:	4631      	mov	r1, r6
 800aaf6:	3b01      	subs	r3, #1
 800aaf8:	4650      	mov	r0, sl
 800aafa:	9301      	str	r3, [sp, #4]
 800aafc:	f7ff fa6a 	bl	8009fd4 <quorem>
 800ab00:	4641      	mov	r1, r8
 800ab02:	9002      	str	r0, [sp, #8]
 800ab04:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ab08:	4650      	mov	r0, sl
 800ab0a:	f000 fca5 	bl	800b458 <__mcmp>
 800ab0e:	463a      	mov	r2, r7
 800ab10:	9005      	str	r0, [sp, #20]
 800ab12:	4631      	mov	r1, r6
 800ab14:	4620      	mov	r0, r4
 800ab16:	f000 fcbb 	bl	800b490 <__mdiff>
 800ab1a:	68c2      	ldr	r2, [r0, #12]
 800ab1c:	4605      	mov	r5, r0
 800ab1e:	bb02      	cbnz	r2, 800ab62 <_dtoa_r+0xa7a>
 800ab20:	4601      	mov	r1, r0
 800ab22:	4650      	mov	r0, sl
 800ab24:	f000 fc98 	bl	800b458 <__mcmp>
 800ab28:	4602      	mov	r2, r0
 800ab2a:	4629      	mov	r1, r5
 800ab2c:	4620      	mov	r0, r4
 800ab2e:	9209      	str	r2, [sp, #36]	; 0x24
 800ab30:	f000 fa0c 	bl	800af4c <_Bfree>
 800ab34:	9b07      	ldr	r3, [sp, #28]
 800ab36:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ab38:	9d04      	ldr	r5, [sp, #16]
 800ab3a:	ea43 0102 	orr.w	r1, r3, r2
 800ab3e:	9b06      	ldr	r3, [sp, #24]
 800ab40:	4319      	orrs	r1, r3
 800ab42:	d110      	bne.n	800ab66 <_dtoa_r+0xa7e>
 800ab44:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ab48:	d029      	beq.n	800ab9e <_dtoa_r+0xab6>
 800ab4a:	9b05      	ldr	r3, [sp, #20]
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	dd02      	ble.n	800ab56 <_dtoa_r+0xa6e>
 800ab50:	9b02      	ldr	r3, [sp, #8]
 800ab52:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800ab56:	9b01      	ldr	r3, [sp, #4]
 800ab58:	f883 9000 	strb.w	r9, [r3]
 800ab5c:	e774      	b.n	800aa48 <_dtoa_r+0x960>
 800ab5e:	4638      	mov	r0, r7
 800ab60:	e7ba      	b.n	800aad8 <_dtoa_r+0x9f0>
 800ab62:	2201      	movs	r2, #1
 800ab64:	e7e1      	b.n	800ab2a <_dtoa_r+0xa42>
 800ab66:	9b05      	ldr	r3, [sp, #20]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	db04      	blt.n	800ab76 <_dtoa_r+0xa8e>
 800ab6c:	9907      	ldr	r1, [sp, #28]
 800ab6e:	430b      	orrs	r3, r1
 800ab70:	9906      	ldr	r1, [sp, #24]
 800ab72:	430b      	orrs	r3, r1
 800ab74:	d120      	bne.n	800abb8 <_dtoa_r+0xad0>
 800ab76:	2a00      	cmp	r2, #0
 800ab78:	dded      	ble.n	800ab56 <_dtoa_r+0xa6e>
 800ab7a:	4651      	mov	r1, sl
 800ab7c:	2201      	movs	r2, #1
 800ab7e:	4620      	mov	r0, r4
 800ab80:	f000 fbfe 	bl	800b380 <__lshift>
 800ab84:	4631      	mov	r1, r6
 800ab86:	4682      	mov	sl, r0
 800ab88:	f000 fc66 	bl	800b458 <__mcmp>
 800ab8c:	2800      	cmp	r0, #0
 800ab8e:	dc03      	bgt.n	800ab98 <_dtoa_r+0xab0>
 800ab90:	d1e1      	bne.n	800ab56 <_dtoa_r+0xa6e>
 800ab92:	f019 0f01 	tst.w	r9, #1
 800ab96:	d0de      	beq.n	800ab56 <_dtoa_r+0xa6e>
 800ab98:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800ab9c:	d1d8      	bne.n	800ab50 <_dtoa_r+0xa68>
 800ab9e:	9a01      	ldr	r2, [sp, #4]
 800aba0:	2339      	movs	r3, #57	; 0x39
 800aba2:	7013      	strb	r3, [r2, #0]
 800aba4:	462b      	mov	r3, r5
 800aba6:	461d      	mov	r5, r3
 800aba8:	3b01      	subs	r3, #1
 800abaa:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800abae:	2a39      	cmp	r2, #57	; 0x39
 800abb0:	d06c      	beq.n	800ac8c <_dtoa_r+0xba4>
 800abb2:	3201      	adds	r2, #1
 800abb4:	701a      	strb	r2, [r3, #0]
 800abb6:	e747      	b.n	800aa48 <_dtoa_r+0x960>
 800abb8:	2a00      	cmp	r2, #0
 800abba:	dd07      	ble.n	800abcc <_dtoa_r+0xae4>
 800abbc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800abc0:	d0ed      	beq.n	800ab9e <_dtoa_r+0xab6>
 800abc2:	9a01      	ldr	r2, [sp, #4]
 800abc4:	f109 0301 	add.w	r3, r9, #1
 800abc8:	7013      	strb	r3, [r2, #0]
 800abca:	e73d      	b.n	800aa48 <_dtoa_r+0x960>
 800abcc:	9b04      	ldr	r3, [sp, #16]
 800abce:	9a08      	ldr	r2, [sp, #32]
 800abd0:	f803 9c01 	strb.w	r9, [r3, #-1]
 800abd4:	4293      	cmp	r3, r2
 800abd6:	d043      	beq.n	800ac60 <_dtoa_r+0xb78>
 800abd8:	4651      	mov	r1, sl
 800abda:	2300      	movs	r3, #0
 800abdc:	220a      	movs	r2, #10
 800abde:	4620      	mov	r0, r4
 800abe0:	f000 f9d6 	bl	800af90 <__multadd>
 800abe4:	45b8      	cmp	r8, r7
 800abe6:	4682      	mov	sl, r0
 800abe8:	f04f 0300 	mov.w	r3, #0
 800abec:	f04f 020a 	mov.w	r2, #10
 800abf0:	4641      	mov	r1, r8
 800abf2:	4620      	mov	r0, r4
 800abf4:	d107      	bne.n	800ac06 <_dtoa_r+0xb1e>
 800abf6:	f000 f9cb 	bl	800af90 <__multadd>
 800abfa:	4680      	mov	r8, r0
 800abfc:	4607      	mov	r7, r0
 800abfe:	9b04      	ldr	r3, [sp, #16]
 800ac00:	3301      	adds	r3, #1
 800ac02:	9304      	str	r3, [sp, #16]
 800ac04:	e775      	b.n	800aaf2 <_dtoa_r+0xa0a>
 800ac06:	f000 f9c3 	bl	800af90 <__multadd>
 800ac0a:	4639      	mov	r1, r7
 800ac0c:	4680      	mov	r8, r0
 800ac0e:	2300      	movs	r3, #0
 800ac10:	220a      	movs	r2, #10
 800ac12:	4620      	mov	r0, r4
 800ac14:	f000 f9bc 	bl	800af90 <__multadd>
 800ac18:	4607      	mov	r7, r0
 800ac1a:	e7f0      	b.n	800abfe <_dtoa_r+0xb16>
 800ac1c:	9b04      	ldr	r3, [sp, #16]
 800ac1e:	9301      	str	r3, [sp, #4]
 800ac20:	9d00      	ldr	r5, [sp, #0]
 800ac22:	4631      	mov	r1, r6
 800ac24:	4650      	mov	r0, sl
 800ac26:	f7ff f9d5 	bl	8009fd4 <quorem>
 800ac2a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800ac2e:	9b00      	ldr	r3, [sp, #0]
 800ac30:	f805 9b01 	strb.w	r9, [r5], #1
 800ac34:	1aea      	subs	r2, r5, r3
 800ac36:	9b01      	ldr	r3, [sp, #4]
 800ac38:	4293      	cmp	r3, r2
 800ac3a:	dd07      	ble.n	800ac4c <_dtoa_r+0xb64>
 800ac3c:	4651      	mov	r1, sl
 800ac3e:	2300      	movs	r3, #0
 800ac40:	220a      	movs	r2, #10
 800ac42:	4620      	mov	r0, r4
 800ac44:	f000 f9a4 	bl	800af90 <__multadd>
 800ac48:	4682      	mov	sl, r0
 800ac4a:	e7ea      	b.n	800ac22 <_dtoa_r+0xb3a>
 800ac4c:	9b01      	ldr	r3, [sp, #4]
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	bfc8      	it	gt
 800ac52:	461d      	movgt	r5, r3
 800ac54:	9b00      	ldr	r3, [sp, #0]
 800ac56:	bfd8      	it	le
 800ac58:	2501      	movle	r5, #1
 800ac5a:	441d      	add	r5, r3
 800ac5c:	f04f 0800 	mov.w	r8, #0
 800ac60:	4651      	mov	r1, sl
 800ac62:	2201      	movs	r2, #1
 800ac64:	4620      	mov	r0, r4
 800ac66:	f000 fb8b 	bl	800b380 <__lshift>
 800ac6a:	4631      	mov	r1, r6
 800ac6c:	4682      	mov	sl, r0
 800ac6e:	f000 fbf3 	bl	800b458 <__mcmp>
 800ac72:	2800      	cmp	r0, #0
 800ac74:	dc96      	bgt.n	800aba4 <_dtoa_r+0xabc>
 800ac76:	d102      	bne.n	800ac7e <_dtoa_r+0xb96>
 800ac78:	f019 0f01 	tst.w	r9, #1
 800ac7c:	d192      	bne.n	800aba4 <_dtoa_r+0xabc>
 800ac7e:	462b      	mov	r3, r5
 800ac80:	461d      	mov	r5, r3
 800ac82:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ac86:	2a30      	cmp	r2, #48	; 0x30
 800ac88:	d0fa      	beq.n	800ac80 <_dtoa_r+0xb98>
 800ac8a:	e6dd      	b.n	800aa48 <_dtoa_r+0x960>
 800ac8c:	9a00      	ldr	r2, [sp, #0]
 800ac8e:	429a      	cmp	r2, r3
 800ac90:	d189      	bne.n	800aba6 <_dtoa_r+0xabe>
 800ac92:	f10b 0b01 	add.w	fp, fp, #1
 800ac96:	2331      	movs	r3, #49	; 0x31
 800ac98:	e796      	b.n	800abc8 <_dtoa_r+0xae0>
 800ac9a:	4b0a      	ldr	r3, [pc, #40]	; (800acc4 <_dtoa_r+0xbdc>)
 800ac9c:	f7ff ba99 	b.w	800a1d2 <_dtoa_r+0xea>
 800aca0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800aca2:	2b00      	cmp	r3, #0
 800aca4:	f47f aa6d 	bne.w	800a182 <_dtoa_r+0x9a>
 800aca8:	4b07      	ldr	r3, [pc, #28]	; (800acc8 <_dtoa_r+0xbe0>)
 800acaa:	f7ff ba92 	b.w	800a1d2 <_dtoa_r+0xea>
 800acae:	9b01      	ldr	r3, [sp, #4]
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	dcb5      	bgt.n	800ac20 <_dtoa_r+0xb38>
 800acb4:	9b07      	ldr	r3, [sp, #28]
 800acb6:	2b02      	cmp	r3, #2
 800acb8:	f73f aeb1 	bgt.w	800aa1e <_dtoa_r+0x936>
 800acbc:	e7b0      	b.n	800ac20 <_dtoa_r+0xb38>
 800acbe:	bf00      	nop
 800acc0:	0800d885 	.word	0x0800d885
 800acc4:	0800d7e0 	.word	0x0800d7e0
 800acc8:	0800d809 	.word	0x0800d809

0800accc <_free_r>:
 800accc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800acce:	2900      	cmp	r1, #0
 800acd0:	d044      	beq.n	800ad5c <_free_r+0x90>
 800acd2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800acd6:	9001      	str	r0, [sp, #4]
 800acd8:	2b00      	cmp	r3, #0
 800acda:	f1a1 0404 	sub.w	r4, r1, #4
 800acde:	bfb8      	it	lt
 800ace0:	18e4      	addlt	r4, r4, r3
 800ace2:	f000 f8e7 	bl	800aeb4 <__malloc_lock>
 800ace6:	4a1e      	ldr	r2, [pc, #120]	; (800ad60 <_free_r+0x94>)
 800ace8:	9801      	ldr	r0, [sp, #4]
 800acea:	6813      	ldr	r3, [r2, #0]
 800acec:	b933      	cbnz	r3, 800acfc <_free_r+0x30>
 800acee:	6063      	str	r3, [r4, #4]
 800acf0:	6014      	str	r4, [r2, #0]
 800acf2:	b003      	add	sp, #12
 800acf4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800acf8:	f000 b8e2 	b.w	800aec0 <__malloc_unlock>
 800acfc:	42a3      	cmp	r3, r4
 800acfe:	d908      	bls.n	800ad12 <_free_r+0x46>
 800ad00:	6825      	ldr	r5, [r4, #0]
 800ad02:	1961      	adds	r1, r4, r5
 800ad04:	428b      	cmp	r3, r1
 800ad06:	bf01      	itttt	eq
 800ad08:	6819      	ldreq	r1, [r3, #0]
 800ad0a:	685b      	ldreq	r3, [r3, #4]
 800ad0c:	1949      	addeq	r1, r1, r5
 800ad0e:	6021      	streq	r1, [r4, #0]
 800ad10:	e7ed      	b.n	800acee <_free_r+0x22>
 800ad12:	461a      	mov	r2, r3
 800ad14:	685b      	ldr	r3, [r3, #4]
 800ad16:	b10b      	cbz	r3, 800ad1c <_free_r+0x50>
 800ad18:	42a3      	cmp	r3, r4
 800ad1a:	d9fa      	bls.n	800ad12 <_free_r+0x46>
 800ad1c:	6811      	ldr	r1, [r2, #0]
 800ad1e:	1855      	adds	r5, r2, r1
 800ad20:	42a5      	cmp	r5, r4
 800ad22:	d10b      	bne.n	800ad3c <_free_r+0x70>
 800ad24:	6824      	ldr	r4, [r4, #0]
 800ad26:	4421      	add	r1, r4
 800ad28:	1854      	adds	r4, r2, r1
 800ad2a:	42a3      	cmp	r3, r4
 800ad2c:	6011      	str	r1, [r2, #0]
 800ad2e:	d1e0      	bne.n	800acf2 <_free_r+0x26>
 800ad30:	681c      	ldr	r4, [r3, #0]
 800ad32:	685b      	ldr	r3, [r3, #4]
 800ad34:	6053      	str	r3, [r2, #4]
 800ad36:	440c      	add	r4, r1
 800ad38:	6014      	str	r4, [r2, #0]
 800ad3a:	e7da      	b.n	800acf2 <_free_r+0x26>
 800ad3c:	d902      	bls.n	800ad44 <_free_r+0x78>
 800ad3e:	230c      	movs	r3, #12
 800ad40:	6003      	str	r3, [r0, #0]
 800ad42:	e7d6      	b.n	800acf2 <_free_r+0x26>
 800ad44:	6825      	ldr	r5, [r4, #0]
 800ad46:	1961      	adds	r1, r4, r5
 800ad48:	428b      	cmp	r3, r1
 800ad4a:	bf04      	itt	eq
 800ad4c:	6819      	ldreq	r1, [r3, #0]
 800ad4e:	685b      	ldreq	r3, [r3, #4]
 800ad50:	6063      	str	r3, [r4, #4]
 800ad52:	bf04      	itt	eq
 800ad54:	1949      	addeq	r1, r1, r5
 800ad56:	6021      	streq	r1, [r4, #0]
 800ad58:	6054      	str	r4, [r2, #4]
 800ad5a:	e7ca      	b.n	800acf2 <_free_r+0x26>
 800ad5c:	b003      	add	sp, #12
 800ad5e:	bd30      	pop	{r4, r5, pc}
 800ad60:	20000d1c 	.word	0x20000d1c

0800ad64 <malloc>:
 800ad64:	4b02      	ldr	r3, [pc, #8]	; (800ad70 <malloc+0xc>)
 800ad66:	4601      	mov	r1, r0
 800ad68:	6818      	ldr	r0, [r3, #0]
 800ad6a:	f000 b823 	b.w	800adb4 <_malloc_r>
 800ad6e:	bf00      	nop
 800ad70:	20000078 	.word	0x20000078

0800ad74 <sbrk_aligned>:
 800ad74:	b570      	push	{r4, r5, r6, lr}
 800ad76:	4e0e      	ldr	r6, [pc, #56]	; (800adb0 <sbrk_aligned+0x3c>)
 800ad78:	460c      	mov	r4, r1
 800ad7a:	6831      	ldr	r1, [r6, #0]
 800ad7c:	4605      	mov	r5, r0
 800ad7e:	b911      	cbnz	r1, 800ad86 <sbrk_aligned+0x12>
 800ad80:	f001 fe1a 	bl	800c9b8 <_sbrk_r>
 800ad84:	6030      	str	r0, [r6, #0]
 800ad86:	4621      	mov	r1, r4
 800ad88:	4628      	mov	r0, r5
 800ad8a:	f001 fe15 	bl	800c9b8 <_sbrk_r>
 800ad8e:	1c43      	adds	r3, r0, #1
 800ad90:	d00a      	beq.n	800ada8 <sbrk_aligned+0x34>
 800ad92:	1cc4      	adds	r4, r0, #3
 800ad94:	f024 0403 	bic.w	r4, r4, #3
 800ad98:	42a0      	cmp	r0, r4
 800ad9a:	d007      	beq.n	800adac <sbrk_aligned+0x38>
 800ad9c:	1a21      	subs	r1, r4, r0
 800ad9e:	4628      	mov	r0, r5
 800ada0:	f001 fe0a 	bl	800c9b8 <_sbrk_r>
 800ada4:	3001      	adds	r0, #1
 800ada6:	d101      	bne.n	800adac <sbrk_aligned+0x38>
 800ada8:	f04f 34ff 	mov.w	r4, #4294967295
 800adac:	4620      	mov	r0, r4
 800adae:	bd70      	pop	{r4, r5, r6, pc}
 800adb0:	20000d20 	.word	0x20000d20

0800adb4 <_malloc_r>:
 800adb4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adb8:	1ccd      	adds	r5, r1, #3
 800adba:	f025 0503 	bic.w	r5, r5, #3
 800adbe:	3508      	adds	r5, #8
 800adc0:	2d0c      	cmp	r5, #12
 800adc2:	bf38      	it	cc
 800adc4:	250c      	movcc	r5, #12
 800adc6:	2d00      	cmp	r5, #0
 800adc8:	4607      	mov	r7, r0
 800adca:	db01      	blt.n	800add0 <_malloc_r+0x1c>
 800adcc:	42a9      	cmp	r1, r5
 800adce:	d905      	bls.n	800addc <_malloc_r+0x28>
 800add0:	230c      	movs	r3, #12
 800add2:	603b      	str	r3, [r7, #0]
 800add4:	2600      	movs	r6, #0
 800add6:	4630      	mov	r0, r6
 800add8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800addc:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800aeb0 <_malloc_r+0xfc>
 800ade0:	f000 f868 	bl	800aeb4 <__malloc_lock>
 800ade4:	f8d8 3000 	ldr.w	r3, [r8]
 800ade8:	461c      	mov	r4, r3
 800adea:	bb5c      	cbnz	r4, 800ae44 <_malloc_r+0x90>
 800adec:	4629      	mov	r1, r5
 800adee:	4638      	mov	r0, r7
 800adf0:	f7ff ffc0 	bl	800ad74 <sbrk_aligned>
 800adf4:	1c43      	adds	r3, r0, #1
 800adf6:	4604      	mov	r4, r0
 800adf8:	d155      	bne.n	800aea6 <_malloc_r+0xf2>
 800adfa:	f8d8 4000 	ldr.w	r4, [r8]
 800adfe:	4626      	mov	r6, r4
 800ae00:	2e00      	cmp	r6, #0
 800ae02:	d145      	bne.n	800ae90 <_malloc_r+0xdc>
 800ae04:	2c00      	cmp	r4, #0
 800ae06:	d048      	beq.n	800ae9a <_malloc_r+0xe6>
 800ae08:	6823      	ldr	r3, [r4, #0]
 800ae0a:	4631      	mov	r1, r6
 800ae0c:	4638      	mov	r0, r7
 800ae0e:	eb04 0903 	add.w	r9, r4, r3
 800ae12:	f001 fdd1 	bl	800c9b8 <_sbrk_r>
 800ae16:	4581      	cmp	r9, r0
 800ae18:	d13f      	bne.n	800ae9a <_malloc_r+0xe6>
 800ae1a:	6821      	ldr	r1, [r4, #0]
 800ae1c:	1a6d      	subs	r5, r5, r1
 800ae1e:	4629      	mov	r1, r5
 800ae20:	4638      	mov	r0, r7
 800ae22:	f7ff ffa7 	bl	800ad74 <sbrk_aligned>
 800ae26:	3001      	adds	r0, #1
 800ae28:	d037      	beq.n	800ae9a <_malloc_r+0xe6>
 800ae2a:	6823      	ldr	r3, [r4, #0]
 800ae2c:	442b      	add	r3, r5
 800ae2e:	6023      	str	r3, [r4, #0]
 800ae30:	f8d8 3000 	ldr.w	r3, [r8]
 800ae34:	2b00      	cmp	r3, #0
 800ae36:	d038      	beq.n	800aeaa <_malloc_r+0xf6>
 800ae38:	685a      	ldr	r2, [r3, #4]
 800ae3a:	42a2      	cmp	r2, r4
 800ae3c:	d12b      	bne.n	800ae96 <_malloc_r+0xe2>
 800ae3e:	2200      	movs	r2, #0
 800ae40:	605a      	str	r2, [r3, #4]
 800ae42:	e00f      	b.n	800ae64 <_malloc_r+0xb0>
 800ae44:	6822      	ldr	r2, [r4, #0]
 800ae46:	1b52      	subs	r2, r2, r5
 800ae48:	d41f      	bmi.n	800ae8a <_malloc_r+0xd6>
 800ae4a:	2a0b      	cmp	r2, #11
 800ae4c:	d917      	bls.n	800ae7e <_malloc_r+0xca>
 800ae4e:	1961      	adds	r1, r4, r5
 800ae50:	42a3      	cmp	r3, r4
 800ae52:	6025      	str	r5, [r4, #0]
 800ae54:	bf18      	it	ne
 800ae56:	6059      	strne	r1, [r3, #4]
 800ae58:	6863      	ldr	r3, [r4, #4]
 800ae5a:	bf08      	it	eq
 800ae5c:	f8c8 1000 	streq.w	r1, [r8]
 800ae60:	5162      	str	r2, [r4, r5]
 800ae62:	604b      	str	r3, [r1, #4]
 800ae64:	4638      	mov	r0, r7
 800ae66:	f104 060b 	add.w	r6, r4, #11
 800ae6a:	f000 f829 	bl	800aec0 <__malloc_unlock>
 800ae6e:	f026 0607 	bic.w	r6, r6, #7
 800ae72:	1d23      	adds	r3, r4, #4
 800ae74:	1af2      	subs	r2, r6, r3
 800ae76:	d0ae      	beq.n	800add6 <_malloc_r+0x22>
 800ae78:	1b9b      	subs	r3, r3, r6
 800ae7a:	50a3      	str	r3, [r4, r2]
 800ae7c:	e7ab      	b.n	800add6 <_malloc_r+0x22>
 800ae7e:	42a3      	cmp	r3, r4
 800ae80:	6862      	ldr	r2, [r4, #4]
 800ae82:	d1dd      	bne.n	800ae40 <_malloc_r+0x8c>
 800ae84:	f8c8 2000 	str.w	r2, [r8]
 800ae88:	e7ec      	b.n	800ae64 <_malloc_r+0xb0>
 800ae8a:	4623      	mov	r3, r4
 800ae8c:	6864      	ldr	r4, [r4, #4]
 800ae8e:	e7ac      	b.n	800adea <_malloc_r+0x36>
 800ae90:	4634      	mov	r4, r6
 800ae92:	6876      	ldr	r6, [r6, #4]
 800ae94:	e7b4      	b.n	800ae00 <_malloc_r+0x4c>
 800ae96:	4613      	mov	r3, r2
 800ae98:	e7cc      	b.n	800ae34 <_malloc_r+0x80>
 800ae9a:	230c      	movs	r3, #12
 800ae9c:	603b      	str	r3, [r7, #0]
 800ae9e:	4638      	mov	r0, r7
 800aea0:	f000 f80e 	bl	800aec0 <__malloc_unlock>
 800aea4:	e797      	b.n	800add6 <_malloc_r+0x22>
 800aea6:	6025      	str	r5, [r4, #0]
 800aea8:	e7dc      	b.n	800ae64 <_malloc_r+0xb0>
 800aeaa:	605b      	str	r3, [r3, #4]
 800aeac:	deff      	udf	#255	; 0xff
 800aeae:	bf00      	nop
 800aeb0:	20000d1c 	.word	0x20000d1c

0800aeb4 <__malloc_lock>:
 800aeb4:	4801      	ldr	r0, [pc, #4]	; (800aebc <__malloc_lock+0x8>)
 800aeb6:	f7ff b884 	b.w	8009fc2 <__retarget_lock_acquire_recursive>
 800aeba:	bf00      	nop
 800aebc:	20000d18 	.word	0x20000d18

0800aec0 <__malloc_unlock>:
 800aec0:	4801      	ldr	r0, [pc, #4]	; (800aec8 <__malloc_unlock+0x8>)
 800aec2:	f7ff b87f 	b.w	8009fc4 <__retarget_lock_release_recursive>
 800aec6:	bf00      	nop
 800aec8:	20000d18 	.word	0x20000d18

0800aecc <_Balloc>:
 800aecc:	b570      	push	{r4, r5, r6, lr}
 800aece:	69c6      	ldr	r6, [r0, #28]
 800aed0:	4604      	mov	r4, r0
 800aed2:	460d      	mov	r5, r1
 800aed4:	b976      	cbnz	r6, 800aef4 <_Balloc+0x28>
 800aed6:	2010      	movs	r0, #16
 800aed8:	f7ff ff44 	bl	800ad64 <malloc>
 800aedc:	4602      	mov	r2, r0
 800aede:	61e0      	str	r0, [r4, #28]
 800aee0:	b920      	cbnz	r0, 800aeec <_Balloc+0x20>
 800aee2:	4b18      	ldr	r3, [pc, #96]	; (800af44 <_Balloc+0x78>)
 800aee4:	4818      	ldr	r0, [pc, #96]	; (800af48 <_Balloc+0x7c>)
 800aee6:	216b      	movs	r1, #107	; 0x6b
 800aee8:	f001 fd8e 	bl	800ca08 <__assert_func>
 800aeec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aef0:	6006      	str	r6, [r0, #0]
 800aef2:	60c6      	str	r6, [r0, #12]
 800aef4:	69e6      	ldr	r6, [r4, #28]
 800aef6:	68f3      	ldr	r3, [r6, #12]
 800aef8:	b183      	cbz	r3, 800af1c <_Balloc+0x50>
 800aefa:	69e3      	ldr	r3, [r4, #28]
 800aefc:	68db      	ldr	r3, [r3, #12]
 800aefe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800af02:	b9b8      	cbnz	r0, 800af34 <_Balloc+0x68>
 800af04:	2101      	movs	r1, #1
 800af06:	fa01 f605 	lsl.w	r6, r1, r5
 800af0a:	1d72      	adds	r2, r6, #5
 800af0c:	0092      	lsls	r2, r2, #2
 800af0e:	4620      	mov	r0, r4
 800af10:	f001 fd98 	bl	800ca44 <_calloc_r>
 800af14:	b160      	cbz	r0, 800af30 <_Balloc+0x64>
 800af16:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800af1a:	e00e      	b.n	800af3a <_Balloc+0x6e>
 800af1c:	2221      	movs	r2, #33	; 0x21
 800af1e:	2104      	movs	r1, #4
 800af20:	4620      	mov	r0, r4
 800af22:	f001 fd8f 	bl	800ca44 <_calloc_r>
 800af26:	69e3      	ldr	r3, [r4, #28]
 800af28:	60f0      	str	r0, [r6, #12]
 800af2a:	68db      	ldr	r3, [r3, #12]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d1e4      	bne.n	800aefa <_Balloc+0x2e>
 800af30:	2000      	movs	r0, #0
 800af32:	bd70      	pop	{r4, r5, r6, pc}
 800af34:	6802      	ldr	r2, [r0, #0]
 800af36:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800af3a:	2300      	movs	r3, #0
 800af3c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800af40:	e7f7      	b.n	800af32 <_Balloc+0x66>
 800af42:	bf00      	nop
 800af44:	0800d816 	.word	0x0800d816
 800af48:	0800d896 	.word	0x0800d896

0800af4c <_Bfree>:
 800af4c:	b570      	push	{r4, r5, r6, lr}
 800af4e:	69c6      	ldr	r6, [r0, #28]
 800af50:	4605      	mov	r5, r0
 800af52:	460c      	mov	r4, r1
 800af54:	b976      	cbnz	r6, 800af74 <_Bfree+0x28>
 800af56:	2010      	movs	r0, #16
 800af58:	f7ff ff04 	bl	800ad64 <malloc>
 800af5c:	4602      	mov	r2, r0
 800af5e:	61e8      	str	r0, [r5, #28]
 800af60:	b920      	cbnz	r0, 800af6c <_Bfree+0x20>
 800af62:	4b09      	ldr	r3, [pc, #36]	; (800af88 <_Bfree+0x3c>)
 800af64:	4809      	ldr	r0, [pc, #36]	; (800af8c <_Bfree+0x40>)
 800af66:	218f      	movs	r1, #143	; 0x8f
 800af68:	f001 fd4e 	bl	800ca08 <__assert_func>
 800af6c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800af70:	6006      	str	r6, [r0, #0]
 800af72:	60c6      	str	r6, [r0, #12]
 800af74:	b13c      	cbz	r4, 800af86 <_Bfree+0x3a>
 800af76:	69eb      	ldr	r3, [r5, #28]
 800af78:	6862      	ldr	r2, [r4, #4]
 800af7a:	68db      	ldr	r3, [r3, #12]
 800af7c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800af80:	6021      	str	r1, [r4, #0]
 800af82:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800af86:	bd70      	pop	{r4, r5, r6, pc}
 800af88:	0800d816 	.word	0x0800d816
 800af8c:	0800d896 	.word	0x0800d896

0800af90 <__multadd>:
 800af90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800af94:	690d      	ldr	r5, [r1, #16]
 800af96:	4607      	mov	r7, r0
 800af98:	460c      	mov	r4, r1
 800af9a:	461e      	mov	r6, r3
 800af9c:	f101 0c14 	add.w	ip, r1, #20
 800afa0:	2000      	movs	r0, #0
 800afa2:	f8dc 3000 	ldr.w	r3, [ip]
 800afa6:	b299      	uxth	r1, r3
 800afa8:	fb02 6101 	mla	r1, r2, r1, r6
 800afac:	0c1e      	lsrs	r6, r3, #16
 800afae:	0c0b      	lsrs	r3, r1, #16
 800afb0:	fb02 3306 	mla	r3, r2, r6, r3
 800afb4:	b289      	uxth	r1, r1
 800afb6:	3001      	adds	r0, #1
 800afb8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800afbc:	4285      	cmp	r5, r0
 800afbe:	f84c 1b04 	str.w	r1, [ip], #4
 800afc2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800afc6:	dcec      	bgt.n	800afa2 <__multadd+0x12>
 800afc8:	b30e      	cbz	r6, 800b00e <__multadd+0x7e>
 800afca:	68a3      	ldr	r3, [r4, #8]
 800afcc:	42ab      	cmp	r3, r5
 800afce:	dc19      	bgt.n	800b004 <__multadd+0x74>
 800afd0:	6861      	ldr	r1, [r4, #4]
 800afd2:	4638      	mov	r0, r7
 800afd4:	3101      	adds	r1, #1
 800afd6:	f7ff ff79 	bl	800aecc <_Balloc>
 800afda:	4680      	mov	r8, r0
 800afdc:	b928      	cbnz	r0, 800afea <__multadd+0x5a>
 800afde:	4602      	mov	r2, r0
 800afe0:	4b0c      	ldr	r3, [pc, #48]	; (800b014 <__multadd+0x84>)
 800afe2:	480d      	ldr	r0, [pc, #52]	; (800b018 <__multadd+0x88>)
 800afe4:	21ba      	movs	r1, #186	; 0xba
 800afe6:	f001 fd0f 	bl	800ca08 <__assert_func>
 800afea:	6922      	ldr	r2, [r4, #16]
 800afec:	3202      	adds	r2, #2
 800afee:	f104 010c 	add.w	r1, r4, #12
 800aff2:	0092      	lsls	r2, r2, #2
 800aff4:	300c      	adds	r0, #12
 800aff6:	f001 fcef 	bl	800c9d8 <memcpy>
 800affa:	4621      	mov	r1, r4
 800affc:	4638      	mov	r0, r7
 800affe:	f7ff ffa5 	bl	800af4c <_Bfree>
 800b002:	4644      	mov	r4, r8
 800b004:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b008:	3501      	adds	r5, #1
 800b00a:	615e      	str	r6, [r3, #20]
 800b00c:	6125      	str	r5, [r4, #16]
 800b00e:	4620      	mov	r0, r4
 800b010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b014:	0800d885 	.word	0x0800d885
 800b018:	0800d896 	.word	0x0800d896

0800b01c <__s2b>:
 800b01c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b020:	460c      	mov	r4, r1
 800b022:	4615      	mov	r5, r2
 800b024:	461f      	mov	r7, r3
 800b026:	2209      	movs	r2, #9
 800b028:	3308      	adds	r3, #8
 800b02a:	4606      	mov	r6, r0
 800b02c:	fb93 f3f2 	sdiv	r3, r3, r2
 800b030:	2100      	movs	r1, #0
 800b032:	2201      	movs	r2, #1
 800b034:	429a      	cmp	r2, r3
 800b036:	db09      	blt.n	800b04c <__s2b+0x30>
 800b038:	4630      	mov	r0, r6
 800b03a:	f7ff ff47 	bl	800aecc <_Balloc>
 800b03e:	b940      	cbnz	r0, 800b052 <__s2b+0x36>
 800b040:	4602      	mov	r2, r0
 800b042:	4b19      	ldr	r3, [pc, #100]	; (800b0a8 <__s2b+0x8c>)
 800b044:	4819      	ldr	r0, [pc, #100]	; (800b0ac <__s2b+0x90>)
 800b046:	21d3      	movs	r1, #211	; 0xd3
 800b048:	f001 fcde 	bl	800ca08 <__assert_func>
 800b04c:	0052      	lsls	r2, r2, #1
 800b04e:	3101      	adds	r1, #1
 800b050:	e7f0      	b.n	800b034 <__s2b+0x18>
 800b052:	9b08      	ldr	r3, [sp, #32]
 800b054:	6143      	str	r3, [r0, #20]
 800b056:	2d09      	cmp	r5, #9
 800b058:	f04f 0301 	mov.w	r3, #1
 800b05c:	6103      	str	r3, [r0, #16]
 800b05e:	dd16      	ble.n	800b08e <__s2b+0x72>
 800b060:	f104 0909 	add.w	r9, r4, #9
 800b064:	46c8      	mov	r8, r9
 800b066:	442c      	add	r4, r5
 800b068:	f818 3b01 	ldrb.w	r3, [r8], #1
 800b06c:	4601      	mov	r1, r0
 800b06e:	3b30      	subs	r3, #48	; 0x30
 800b070:	220a      	movs	r2, #10
 800b072:	4630      	mov	r0, r6
 800b074:	f7ff ff8c 	bl	800af90 <__multadd>
 800b078:	45a0      	cmp	r8, r4
 800b07a:	d1f5      	bne.n	800b068 <__s2b+0x4c>
 800b07c:	f1a5 0408 	sub.w	r4, r5, #8
 800b080:	444c      	add	r4, r9
 800b082:	1b2d      	subs	r5, r5, r4
 800b084:	1963      	adds	r3, r4, r5
 800b086:	42bb      	cmp	r3, r7
 800b088:	db04      	blt.n	800b094 <__s2b+0x78>
 800b08a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b08e:	340a      	adds	r4, #10
 800b090:	2509      	movs	r5, #9
 800b092:	e7f6      	b.n	800b082 <__s2b+0x66>
 800b094:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b098:	4601      	mov	r1, r0
 800b09a:	3b30      	subs	r3, #48	; 0x30
 800b09c:	220a      	movs	r2, #10
 800b09e:	4630      	mov	r0, r6
 800b0a0:	f7ff ff76 	bl	800af90 <__multadd>
 800b0a4:	e7ee      	b.n	800b084 <__s2b+0x68>
 800b0a6:	bf00      	nop
 800b0a8:	0800d885 	.word	0x0800d885
 800b0ac:	0800d896 	.word	0x0800d896

0800b0b0 <__hi0bits>:
 800b0b0:	0c03      	lsrs	r3, r0, #16
 800b0b2:	041b      	lsls	r3, r3, #16
 800b0b4:	b9d3      	cbnz	r3, 800b0ec <__hi0bits+0x3c>
 800b0b6:	0400      	lsls	r0, r0, #16
 800b0b8:	2310      	movs	r3, #16
 800b0ba:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b0be:	bf04      	itt	eq
 800b0c0:	0200      	lsleq	r0, r0, #8
 800b0c2:	3308      	addeq	r3, #8
 800b0c4:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b0c8:	bf04      	itt	eq
 800b0ca:	0100      	lsleq	r0, r0, #4
 800b0cc:	3304      	addeq	r3, #4
 800b0ce:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b0d2:	bf04      	itt	eq
 800b0d4:	0080      	lsleq	r0, r0, #2
 800b0d6:	3302      	addeq	r3, #2
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	db05      	blt.n	800b0e8 <__hi0bits+0x38>
 800b0dc:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b0e0:	f103 0301 	add.w	r3, r3, #1
 800b0e4:	bf08      	it	eq
 800b0e6:	2320      	moveq	r3, #32
 800b0e8:	4618      	mov	r0, r3
 800b0ea:	4770      	bx	lr
 800b0ec:	2300      	movs	r3, #0
 800b0ee:	e7e4      	b.n	800b0ba <__hi0bits+0xa>

0800b0f0 <__lo0bits>:
 800b0f0:	6803      	ldr	r3, [r0, #0]
 800b0f2:	f013 0207 	ands.w	r2, r3, #7
 800b0f6:	d00c      	beq.n	800b112 <__lo0bits+0x22>
 800b0f8:	07d9      	lsls	r1, r3, #31
 800b0fa:	d422      	bmi.n	800b142 <__lo0bits+0x52>
 800b0fc:	079a      	lsls	r2, r3, #30
 800b0fe:	bf49      	itett	mi
 800b100:	085b      	lsrmi	r3, r3, #1
 800b102:	089b      	lsrpl	r3, r3, #2
 800b104:	6003      	strmi	r3, [r0, #0]
 800b106:	2201      	movmi	r2, #1
 800b108:	bf5c      	itt	pl
 800b10a:	6003      	strpl	r3, [r0, #0]
 800b10c:	2202      	movpl	r2, #2
 800b10e:	4610      	mov	r0, r2
 800b110:	4770      	bx	lr
 800b112:	b299      	uxth	r1, r3
 800b114:	b909      	cbnz	r1, 800b11a <__lo0bits+0x2a>
 800b116:	0c1b      	lsrs	r3, r3, #16
 800b118:	2210      	movs	r2, #16
 800b11a:	b2d9      	uxtb	r1, r3
 800b11c:	b909      	cbnz	r1, 800b122 <__lo0bits+0x32>
 800b11e:	3208      	adds	r2, #8
 800b120:	0a1b      	lsrs	r3, r3, #8
 800b122:	0719      	lsls	r1, r3, #28
 800b124:	bf04      	itt	eq
 800b126:	091b      	lsreq	r3, r3, #4
 800b128:	3204      	addeq	r2, #4
 800b12a:	0799      	lsls	r1, r3, #30
 800b12c:	bf04      	itt	eq
 800b12e:	089b      	lsreq	r3, r3, #2
 800b130:	3202      	addeq	r2, #2
 800b132:	07d9      	lsls	r1, r3, #31
 800b134:	d403      	bmi.n	800b13e <__lo0bits+0x4e>
 800b136:	085b      	lsrs	r3, r3, #1
 800b138:	f102 0201 	add.w	r2, r2, #1
 800b13c:	d003      	beq.n	800b146 <__lo0bits+0x56>
 800b13e:	6003      	str	r3, [r0, #0]
 800b140:	e7e5      	b.n	800b10e <__lo0bits+0x1e>
 800b142:	2200      	movs	r2, #0
 800b144:	e7e3      	b.n	800b10e <__lo0bits+0x1e>
 800b146:	2220      	movs	r2, #32
 800b148:	e7e1      	b.n	800b10e <__lo0bits+0x1e>
	...

0800b14c <__i2b>:
 800b14c:	b510      	push	{r4, lr}
 800b14e:	460c      	mov	r4, r1
 800b150:	2101      	movs	r1, #1
 800b152:	f7ff febb 	bl	800aecc <_Balloc>
 800b156:	4602      	mov	r2, r0
 800b158:	b928      	cbnz	r0, 800b166 <__i2b+0x1a>
 800b15a:	4b05      	ldr	r3, [pc, #20]	; (800b170 <__i2b+0x24>)
 800b15c:	4805      	ldr	r0, [pc, #20]	; (800b174 <__i2b+0x28>)
 800b15e:	f240 1145 	movw	r1, #325	; 0x145
 800b162:	f001 fc51 	bl	800ca08 <__assert_func>
 800b166:	2301      	movs	r3, #1
 800b168:	6144      	str	r4, [r0, #20]
 800b16a:	6103      	str	r3, [r0, #16]
 800b16c:	bd10      	pop	{r4, pc}
 800b16e:	bf00      	nop
 800b170:	0800d885 	.word	0x0800d885
 800b174:	0800d896 	.word	0x0800d896

0800b178 <__multiply>:
 800b178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b17c:	4691      	mov	r9, r2
 800b17e:	690a      	ldr	r2, [r1, #16]
 800b180:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b184:	429a      	cmp	r2, r3
 800b186:	bfb8      	it	lt
 800b188:	460b      	movlt	r3, r1
 800b18a:	460c      	mov	r4, r1
 800b18c:	bfbc      	itt	lt
 800b18e:	464c      	movlt	r4, r9
 800b190:	4699      	movlt	r9, r3
 800b192:	6927      	ldr	r7, [r4, #16]
 800b194:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b198:	68a3      	ldr	r3, [r4, #8]
 800b19a:	6861      	ldr	r1, [r4, #4]
 800b19c:	eb07 060a 	add.w	r6, r7, sl
 800b1a0:	42b3      	cmp	r3, r6
 800b1a2:	b085      	sub	sp, #20
 800b1a4:	bfb8      	it	lt
 800b1a6:	3101      	addlt	r1, #1
 800b1a8:	f7ff fe90 	bl	800aecc <_Balloc>
 800b1ac:	b930      	cbnz	r0, 800b1bc <__multiply+0x44>
 800b1ae:	4602      	mov	r2, r0
 800b1b0:	4b44      	ldr	r3, [pc, #272]	; (800b2c4 <__multiply+0x14c>)
 800b1b2:	4845      	ldr	r0, [pc, #276]	; (800b2c8 <__multiply+0x150>)
 800b1b4:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b1b8:	f001 fc26 	bl	800ca08 <__assert_func>
 800b1bc:	f100 0514 	add.w	r5, r0, #20
 800b1c0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b1c4:	462b      	mov	r3, r5
 800b1c6:	2200      	movs	r2, #0
 800b1c8:	4543      	cmp	r3, r8
 800b1ca:	d321      	bcc.n	800b210 <__multiply+0x98>
 800b1cc:	f104 0314 	add.w	r3, r4, #20
 800b1d0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b1d4:	f109 0314 	add.w	r3, r9, #20
 800b1d8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b1dc:	9202      	str	r2, [sp, #8]
 800b1de:	1b3a      	subs	r2, r7, r4
 800b1e0:	3a15      	subs	r2, #21
 800b1e2:	f022 0203 	bic.w	r2, r2, #3
 800b1e6:	3204      	adds	r2, #4
 800b1e8:	f104 0115 	add.w	r1, r4, #21
 800b1ec:	428f      	cmp	r7, r1
 800b1ee:	bf38      	it	cc
 800b1f0:	2204      	movcc	r2, #4
 800b1f2:	9201      	str	r2, [sp, #4]
 800b1f4:	9a02      	ldr	r2, [sp, #8]
 800b1f6:	9303      	str	r3, [sp, #12]
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d80c      	bhi.n	800b216 <__multiply+0x9e>
 800b1fc:	2e00      	cmp	r6, #0
 800b1fe:	dd03      	ble.n	800b208 <__multiply+0x90>
 800b200:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b204:	2b00      	cmp	r3, #0
 800b206:	d05b      	beq.n	800b2c0 <__multiply+0x148>
 800b208:	6106      	str	r6, [r0, #16]
 800b20a:	b005      	add	sp, #20
 800b20c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b210:	f843 2b04 	str.w	r2, [r3], #4
 800b214:	e7d8      	b.n	800b1c8 <__multiply+0x50>
 800b216:	f8b3 a000 	ldrh.w	sl, [r3]
 800b21a:	f1ba 0f00 	cmp.w	sl, #0
 800b21e:	d024      	beq.n	800b26a <__multiply+0xf2>
 800b220:	f104 0e14 	add.w	lr, r4, #20
 800b224:	46a9      	mov	r9, r5
 800b226:	f04f 0c00 	mov.w	ip, #0
 800b22a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b22e:	f8d9 1000 	ldr.w	r1, [r9]
 800b232:	fa1f fb82 	uxth.w	fp, r2
 800b236:	b289      	uxth	r1, r1
 800b238:	fb0a 110b 	mla	r1, sl, fp, r1
 800b23c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b240:	f8d9 2000 	ldr.w	r2, [r9]
 800b244:	4461      	add	r1, ip
 800b246:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b24a:	fb0a c20b 	mla	r2, sl, fp, ip
 800b24e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b252:	b289      	uxth	r1, r1
 800b254:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b258:	4577      	cmp	r7, lr
 800b25a:	f849 1b04 	str.w	r1, [r9], #4
 800b25e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b262:	d8e2      	bhi.n	800b22a <__multiply+0xb2>
 800b264:	9a01      	ldr	r2, [sp, #4]
 800b266:	f845 c002 	str.w	ip, [r5, r2]
 800b26a:	9a03      	ldr	r2, [sp, #12]
 800b26c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b270:	3304      	adds	r3, #4
 800b272:	f1b9 0f00 	cmp.w	r9, #0
 800b276:	d021      	beq.n	800b2bc <__multiply+0x144>
 800b278:	6829      	ldr	r1, [r5, #0]
 800b27a:	f104 0c14 	add.w	ip, r4, #20
 800b27e:	46ae      	mov	lr, r5
 800b280:	f04f 0a00 	mov.w	sl, #0
 800b284:	f8bc b000 	ldrh.w	fp, [ip]
 800b288:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b28c:	fb09 220b 	mla	r2, r9, fp, r2
 800b290:	4452      	add	r2, sl
 800b292:	b289      	uxth	r1, r1
 800b294:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b298:	f84e 1b04 	str.w	r1, [lr], #4
 800b29c:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b2a0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b2a4:	f8be 1000 	ldrh.w	r1, [lr]
 800b2a8:	fb09 110a 	mla	r1, r9, sl, r1
 800b2ac:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b2b0:	4567      	cmp	r7, ip
 800b2b2:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b2b6:	d8e5      	bhi.n	800b284 <__multiply+0x10c>
 800b2b8:	9a01      	ldr	r2, [sp, #4]
 800b2ba:	50a9      	str	r1, [r5, r2]
 800b2bc:	3504      	adds	r5, #4
 800b2be:	e799      	b.n	800b1f4 <__multiply+0x7c>
 800b2c0:	3e01      	subs	r6, #1
 800b2c2:	e79b      	b.n	800b1fc <__multiply+0x84>
 800b2c4:	0800d885 	.word	0x0800d885
 800b2c8:	0800d896 	.word	0x0800d896

0800b2cc <__pow5mult>:
 800b2cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b2d0:	4615      	mov	r5, r2
 800b2d2:	f012 0203 	ands.w	r2, r2, #3
 800b2d6:	4606      	mov	r6, r0
 800b2d8:	460f      	mov	r7, r1
 800b2da:	d007      	beq.n	800b2ec <__pow5mult+0x20>
 800b2dc:	4c25      	ldr	r4, [pc, #148]	; (800b374 <__pow5mult+0xa8>)
 800b2de:	3a01      	subs	r2, #1
 800b2e0:	2300      	movs	r3, #0
 800b2e2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b2e6:	f7ff fe53 	bl	800af90 <__multadd>
 800b2ea:	4607      	mov	r7, r0
 800b2ec:	10ad      	asrs	r5, r5, #2
 800b2ee:	d03d      	beq.n	800b36c <__pow5mult+0xa0>
 800b2f0:	69f4      	ldr	r4, [r6, #28]
 800b2f2:	b97c      	cbnz	r4, 800b314 <__pow5mult+0x48>
 800b2f4:	2010      	movs	r0, #16
 800b2f6:	f7ff fd35 	bl	800ad64 <malloc>
 800b2fa:	4602      	mov	r2, r0
 800b2fc:	61f0      	str	r0, [r6, #28]
 800b2fe:	b928      	cbnz	r0, 800b30c <__pow5mult+0x40>
 800b300:	4b1d      	ldr	r3, [pc, #116]	; (800b378 <__pow5mult+0xac>)
 800b302:	481e      	ldr	r0, [pc, #120]	; (800b37c <__pow5mult+0xb0>)
 800b304:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b308:	f001 fb7e 	bl	800ca08 <__assert_func>
 800b30c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b310:	6004      	str	r4, [r0, #0]
 800b312:	60c4      	str	r4, [r0, #12]
 800b314:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b318:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b31c:	b94c      	cbnz	r4, 800b332 <__pow5mult+0x66>
 800b31e:	f240 2171 	movw	r1, #625	; 0x271
 800b322:	4630      	mov	r0, r6
 800b324:	f7ff ff12 	bl	800b14c <__i2b>
 800b328:	2300      	movs	r3, #0
 800b32a:	f8c8 0008 	str.w	r0, [r8, #8]
 800b32e:	4604      	mov	r4, r0
 800b330:	6003      	str	r3, [r0, #0]
 800b332:	f04f 0900 	mov.w	r9, #0
 800b336:	07eb      	lsls	r3, r5, #31
 800b338:	d50a      	bpl.n	800b350 <__pow5mult+0x84>
 800b33a:	4639      	mov	r1, r7
 800b33c:	4622      	mov	r2, r4
 800b33e:	4630      	mov	r0, r6
 800b340:	f7ff ff1a 	bl	800b178 <__multiply>
 800b344:	4639      	mov	r1, r7
 800b346:	4680      	mov	r8, r0
 800b348:	4630      	mov	r0, r6
 800b34a:	f7ff fdff 	bl	800af4c <_Bfree>
 800b34e:	4647      	mov	r7, r8
 800b350:	106d      	asrs	r5, r5, #1
 800b352:	d00b      	beq.n	800b36c <__pow5mult+0xa0>
 800b354:	6820      	ldr	r0, [r4, #0]
 800b356:	b938      	cbnz	r0, 800b368 <__pow5mult+0x9c>
 800b358:	4622      	mov	r2, r4
 800b35a:	4621      	mov	r1, r4
 800b35c:	4630      	mov	r0, r6
 800b35e:	f7ff ff0b 	bl	800b178 <__multiply>
 800b362:	6020      	str	r0, [r4, #0]
 800b364:	f8c0 9000 	str.w	r9, [r0]
 800b368:	4604      	mov	r4, r0
 800b36a:	e7e4      	b.n	800b336 <__pow5mult+0x6a>
 800b36c:	4638      	mov	r0, r7
 800b36e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b372:	bf00      	nop
 800b374:	0800d9e0 	.word	0x0800d9e0
 800b378:	0800d816 	.word	0x0800d816
 800b37c:	0800d896 	.word	0x0800d896

0800b380 <__lshift>:
 800b380:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b384:	460c      	mov	r4, r1
 800b386:	6849      	ldr	r1, [r1, #4]
 800b388:	6923      	ldr	r3, [r4, #16]
 800b38a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b38e:	68a3      	ldr	r3, [r4, #8]
 800b390:	4607      	mov	r7, r0
 800b392:	4691      	mov	r9, r2
 800b394:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b398:	f108 0601 	add.w	r6, r8, #1
 800b39c:	42b3      	cmp	r3, r6
 800b39e:	db0b      	blt.n	800b3b8 <__lshift+0x38>
 800b3a0:	4638      	mov	r0, r7
 800b3a2:	f7ff fd93 	bl	800aecc <_Balloc>
 800b3a6:	4605      	mov	r5, r0
 800b3a8:	b948      	cbnz	r0, 800b3be <__lshift+0x3e>
 800b3aa:	4602      	mov	r2, r0
 800b3ac:	4b28      	ldr	r3, [pc, #160]	; (800b450 <__lshift+0xd0>)
 800b3ae:	4829      	ldr	r0, [pc, #164]	; (800b454 <__lshift+0xd4>)
 800b3b0:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b3b4:	f001 fb28 	bl	800ca08 <__assert_func>
 800b3b8:	3101      	adds	r1, #1
 800b3ba:	005b      	lsls	r3, r3, #1
 800b3bc:	e7ee      	b.n	800b39c <__lshift+0x1c>
 800b3be:	2300      	movs	r3, #0
 800b3c0:	f100 0114 	add.w	r1, r0, #20
 800b3c4:	f100 0210 	add.w	r2, r0, #16
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	4553      	cmp	r3, sl
 800b3cc:	db33      	blt.n	800b436 <__lshift+0xb6>
 800b3ce:	6920      	ldr	r0, [r4, #16]
 800b3d0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b3d4:	f104 0314 	add.w	r3, r4, #20
 800b3d8:	f019 091f 	ands.w	r9, r9, #31
 800b3dc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b3e0:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b3e4:	d02b      	beq.n	800b43e <__lshift+0xbe>
 800b3e6:	f1c9 0e20 	rsb	lr, r9, #32
 800b3ea:	468a      	mov	sl, r1
 800b3ec:	2200      	movs	r2, #0
 800b3ee:	6818      	ldr	r0, [r3, #0]
 800b3f0:	fa00 f009 	lsl.w	r0, r0, r9
 800b3f4:	4310      	orrs	r0, r2
 800b3f6:	f84a 0b04 	str.w	r0, [sl], #4
 800b3fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800b3fe:	459c      	cmp	ip, r3
 800b400:	fa22 f20e 	lsr.w	r2, r2, lr
 800b404:	d8f3      	bhi.n	800b3ee <__lshift+0x6e>
 800b406:	ebac 0304 	sub.w	r3, ip, r4
 800b40a:	3b15      	subs	r3, #21
 800b40c:	f023 0303 	bic.w	r3, r3, #3
 800b410:	3304      	adds	r3, #4
 800b412:	f104 0015 	add.w	r0, r4, #21
 800b416:	4584      	cmp	ip, r0
 800b418:	bf38      	it	cc
 800b41a:	2304      	movcc	r3, #4
 800b41c:	50ca      	str	r2, [r1, r3]
 800b41e:	b10a      	cbz	r2, 800b424 <__lshift+0xa4>
 800b420:	f108 0602 	add.w	r6, r8, #2
 800b424:	3e01      	subs	r6, #1
 800b426:	4638      	mov	r0, r7
 800b428:	612e      	str	r6, [r5, #16]
 800b42a:	4621      	mov	r1, r4
 800b42c:	f7ff fd8e 	bl	800af4c <_Bfree>
 800b430:	4628      	mov	r0, r5
 800b432:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b436:	f842 0f04 	str.w	r0, [r2, #4]!
 800b43a:	3301      	adds	r3, #1
 800b43c:	e7c5      	b.n	800b3ca <__lshift+0x4a>
 800b43e:	3904      	subs	r1, #4
 800b440:	f853 2b04 	ldr.w	r2, [r3], #4
 800b444:	f841 2f04 	str.w	r2, [r1, #4]!
 800b448:	459c      	cmp	ip, r3
 800b44a:	d8f9      	bhi.n	800b440 <__lshift+0xc0>
 800b44c:	e7ea      	b.n	800b424 <__lshift+0xa4>
 800b44e:	bf00      	nop
 800b450:	0800d885 	.word	0x0800d885
 800b454:	0800d896 	.word	0x0800d896

0800b458 <__mcmp>:
 800b458:	b530      	push	{r4, r5, lr}
 800b45a:	6902      	ldr	r2, [r0, #16]
 800b45c:	690c      	ldr	r4, [r1, #16]
 800b45e:	1b12      	subs	r2, r2, r4
 800b460:	d10e      	bne.n	800b480 <__mcmp+0x28>
 800b462:	f100 0314 	add.w	r3, r0, #20
 800b466:	3114      	adds	r1, #20
 800b468:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800b46c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800b470:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800b474:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800b478:	42a5      	cmp	r5, r4
 800b47a:	d003      	beq.n	800b484 <__mcmp+0x2c>
 800b47c:	d305      	bcc.n	800b48a <__mcmp+0x32>
 800b47e:	2201      	movs	r2, #1
 800b480:	4610      	mov	r0, r2
 800b482:	bd30      	pop	{r4, r5, pc}
 800b484:	4283      	cmp	r3, r0
 800b486:	d3f3      	bcc.n	800b470 <__mcmp+0x18>
 800b488:	e7fa      	b.n	800b480 <__mcmp+0x28>
 800b48a:	f04f 32ff 	mov.w	r2, #4294967295
 800b48e:	e7f7      	b.n	800b480 <__mcmp+0x28>

0800b490 <__mdiff>:
 800b490:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b494:	460c      	mov	r4, r1
 800b496:	4606      	mov	r6, r0
 800b498:	4611      	mov	r1, r2
 800b49a:	4620      	mov	r0, r4
 800b49c:	4690      	mov	r8, r2
 800b49e:	f7ff ffdb 	bl	800b458 <__mcmp>
 800b4a2:	1e05      	subs	r5, r0, #0
 800b4a4:	d110      	bne.n	800b4c8 <__mdiff+0x38>
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	4630      	mov	r0, r6
 800b4aa:	f7ff fd0f 	bl	800aecc <_Balloc>
 800b4ae:	b930      	cbnz	r0, 800b4be <__mdiff+0x2e>
 800b4b0:	4b3a      	ldr	r3, [pc, #232]	; (800b59c <__mdiff+0x10c>)
 800b4b2:	4602      	mov	r2, r0
 800b4b4:	f240 2137 	movw	r1, #567	; 0x237
 800b4b8:	4839      	ldr	r0, [pc, #228]	; (800b5a0 <__mdiff+0x110>)
 800b4ba:	f001 faa5 	bl	800ca08 <__assert_func>
 800b4be:	2301      	movs	r3, #1
 800b4c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800b4c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b4c8:	bfa4      	itt	ge
 800b4ca:	4643      	movge	r3, r8
 800b4cc:	46a0      	movge	r8, r4
 800b4ce:	4630      	mov	r0, r6
 800b4d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800b4d4:	bfa6      	itte	ge
 800b4d6:	461c      	movge	r4, r3
 800b4d8:	2500      	movge	r5, #0
 800b4da:	2501      	movlt	r5, #1
 800b4dc:	f7ff fcf6 	bl	800aecc <_Balloc>
 800b4e0:	b920      	cbnz	r0, 800b4ec <__mdiff+0x5c>
 800b4e2:	4b2e      	ldr	r3, [pc, #184]	; (800b59c <__mdiff+0x10c>)
 800b4e4:	4602      	mov	r2, r0
 800b4e6:	f240 2145 	movw	r1, #581	; 0x245
 800b4ea:	e7e5      	b.n	800b4b8 <__mdiff+0x28>
 800b4ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800b4f0:	6926      	ldr	r6, [r4, #16]
 800b4f2:	60c5      	str	r5, [r0, #12]
 800b4f4:	f104 0914 	add.w	r9, r4, #20
 800b4f8:	f108 0514 	add.w	r5, r8, #20
 800b4fc:	f100 0e14 	add.w	lr, r0, #20
 800b500:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800b504:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800b508:	f108 0210 	add.w	r2, r8, #16
 800b50c:	46f2      	mov	sl, lr
 800b50e:	2100      	movs	r1, #0
 800b510:	f859 3b04 	ldr.w	r3, [r9], #4
 800b514:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b518:	fa11 f88b 	uxtah	r8, r1, fp
 800b51c:	b299      	uxth	r1, r3
 800b51e:	0c1b      	lsrs	r3, r3, #16
 800b520:	eba8 0801 	sub.w	r8, r8, r1
 800b524:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b528:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b52c:	fa1f f888 	uxth.w	r8, r8
 800b530:	1419      	asrs	r1, r3, #16
 800b532:	454e      	cmp	r6, r9
 800b534:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b538:	f84a 3b04 	str.w	r3, [sl], #4
 800b53c:	d8e8      	bhi.n	800b510 <__mdiff+0x80>
 800b53e:	1b33      	subs	r3, r6, r4
 800b540:	3b15      	subs	r3, #21
 800b542:	f023 0303 	bic.w	r3, r3, #3
 800b546:	3304      	adds	r3, #4
 800b548:	3415      	adds	r4, #21
 800b54a:	42a6      	cmp	r6, r4
 800b54c:	bf38      	it	cc
 800b54e:	2304      	movcc	r3, #4
 800b550:	441d      	add	r5, r3
 800b552:	4473      	add	r3, lr
 800b554:	469e      	mov	lr, r3
 800b556:	462e      	mov	r6, r5
 800b558:	4566      	cmp	r6, ip
 800b55a:	d30e      	bcc.n	800b57a <__mdiff+0xea>
 800b55c:	f10c 0203 	add.w	r2, ip, #3
 800b560:	1b52      	subs	r2, r2, r5
 800b562:	f022 0203 	bic.w	r2, r2, #3
 800b566:	3d03      	subs	r5, #3
 800b568:	45ac      	cmp	ip, r5
 800b56a:	bf38      	it	cc
 800b56c:	2200      	movcc	r2, #0
 800b56e:	4413      	add	r3, r2
 800b570:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800b574:	b17a      	cbz	r2, 800b596 <__mdiff+0x106>
 800b576:	6107      	str	r7, [r0, #16]
 800b578:	e7a4      	b.n	800b4c4 <__mdiff+0x34>
 800b57a:	f856 8b04 	ldr.w	r8, [r6], #4
 800b57e:	fa11 f288 	uxtah	r2, r1, r8
 800b582:	1414      	asrs	r4, r2, #16
 800b584:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b588:	b292      	uxth	r2, r2
 800b58a:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b58e:	f84e 2b04 	str.w	r2, [lr], #4
 800b592:	1421      	asrs	r1, r4, #16
 800b594:	e7e0      	b.n	800b558 <__mdiff+0xc8>
 800b596:	3f01      	subs	r7, #1
 800b598:	e7ea      	b.n	800b570 <__mdiff+0xe0>
 800b59a:	bf00      	nop
 800b59c:	0800d885 	.word	0x0800d885
 800b5a0:	0800d896 	.word	0x0800d896

0800b5a4 <__ulp>:
 800b5a4:	b082      	sub	sp, #8
 800b5a6:	ed8d 0b00 	vstr	d0, [sp]
 800b5aa:	9a01      	ldr	r2, [sp, #4]
 800b5ac:	4b0f      	ldr	r3, [pc, #60]	; (800b5ec <__ulp+0x48>)
 800b5ae:	4013      	ands	r3, r2
 800b5b0:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	dc08      	bgt.n	800b5ca <__ulp+0x26>
 800b5b8:	425b      	negs	r3, r3
 800b5ba:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 800b5be:	ea4f 5223 	mov.w	r2, r3, asr #20
 800b5c2:	da04      	bge.n	800b5ce <__ulp+0x2a>
 800b5c4:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800b5c8:	4113      	asrs	r3, r2
 800b5ca:	2200      	movs	r2, #0
 800b5cc:	e008      	b.n	800b5e0 <__ulp+0x3c>
 800b5ce:	f1a2 0314 	sub.w	r3, r2, #20
 800b5d2:	2b1e      	cmp	r3, #30
 800b5d4:	bfda      	itte	le
 800b5d6:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 800b5da:	40da      	lsrle	r2, r3
 800b5dc:	2201      	movgt	r2, #1
 800b5de:	2300      	movs	r3, #0
 800b5e0:	4619      	mov	r1, r3
 800b5e2:	4610      	mov	r0, r2
 800b5e4:	ec41 0b10 	vmov	d0, r0, r1
 800b5e8:	b002      	add	sp, #8
 800b5ea:	4770      	bx	lr
 800b5ec:	7ff00000 	.word	0x7ff00000

0800b5f0 <__b2d>:
 800b5f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5f4:	6906      	ldr	r6, [r0, #16]
 800b5f6:	f100 0814 	add.w	r8, r0, #20
 800b5fa:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800b5fe:	1f37      	subs	r7, r6, #4
 800b600:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800b604:	4610      	mov	r0, r2
 800b606:	f7ff fd53 	bl	800b0b0 <__hi0bits>
 800b60a:	f1c0 0320 	rsb	r3, r0, #32
 800b60e:	280a      	cmp	r0, #10
 800b610:	600b      	str	r3, [r1, #0]
 800b612:	491b      	ldr	r1, [pc, #108]	; (800b680 <__b2d+0x90>)
 800b614:	dc15      	bgt.n	800b642 <__b2d+0x52>
 800b616:	f1c0 0c0b 	rsb	ip, r0, #11
 800b61a:	fa22 f30c 	lsr.w	r3, r2, ip
 800b61e:	45b8      	cmp	r8, r7
 800b620:	ea43 0501 	orr.w	r5, r3, r1
 800b624:	bf34      	ite	cc
 800b626:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b62a:	2300      	movcs	r3, #0
 800b62c:	3015      	adds	r0, #21
 800b62e:	fa02 f000 	lsl.w	r0, r2, r0
 800b632:	fa23 f30c 	lsr.w	r3, r3, ip
 800b636:	4303      	orrs	r3, r0
 800b638:	461c      	mov	r4, r3
 800b63a:	ec45 4b10 	vmov	d0, r4, r5
 800b63e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b642:	45b8      	cmp	r8, r7
 800b644:	bf3a      	itte	cc
 800b646:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 800b64a:	f1a6 0708 	subcc.w	r7, r6, #8
 800b64e:	2300      	movcs	r3, #0
 800b650:	380b      	subs	r0, #11
 800b652:	d012      	beq.n	800b67a <__b2d+0x8a>
 800b654:	f1c0 0120 	rsb	r1, r0, #32
 800b658:	fa23 f401 	lsr.w	r4, r3, r1
 800b65c:	4082      	lsls	r2, r0
 800b65e:	4322      	orrs	r2, r4
 800b660:	4547      	cmp	r7, r8
 800b662:	f042 557f 	orr.w	r5, r2, #1069547520	; 0x3fc00000
 800b666:	bf8c      	ite	hi
 800b668:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 800b66c:	2200      	movls	r2, #0
 800b66e:	4083      	lsls	r3, r0
 800b670:	40ca      	lsrs	r2, r1
 800b672:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800b676:	4313      	orrs	r3, r2
 800b678:	e7de      	b.n	800b638 <__b2d+0x48>
 800b67a:	ea42 0501 	orr.w	r5, r2, r1
 800b67e:	e7db      	b.n	800b638 <__b2d+0x48>
 800b680:	3ff00000 	.word	0x3ff00000

0800b684 <__d2b>:
 800b684:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b688:	460f      	mov	r7, r1
 800b68a:	2101      	movs	r1, #1
 800b68c:	ec59 8b10 	vmov	r8, r9, d0
 800b690:	4616      	mov	r6, r2
 800b692:	f7ff fc1b 	bl	800aecc <_Balloc>
 800b696:	4604      	mov	r4, r0
 800b698:	b930      	cbnz	r0, 800b6a8 <__d2b+0x24>
 800b69a:	4602      	mov	r2, r0
 800b69c:	4b24      	ldr	r3, [pc, #144]	; (800b730 <__d2b+0xac>)
 800b69e:	4825      	ldr	r0, [pc, #148]	; (800b734 <__d2b+0xb0>)
 800b6a0:	f240 310f 	movw	r1, #783	; 0x30f
 800b6a4:	f001 f9b0 	bl	800ca08 <__assert_func>
 800b6a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800b6ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800b6b0:	bb2d      	cbnz	r5, 800b6fe <__d2b+0x7a>
 800b6b2:	9301      	str	r3, [sp, #4]
 800b6b4:	f1b8 0300 	subs.w	r3, r8, #0
 800b6b8:	d026      	beq.n	800b708 <__d2b+0x84>
 800b6ba:	4668      	mov	r0, sp
 800b6bc:	9300      	str	r3, [sp, #0]
 800b6be:	f7ff fd17 	bl	800b0f0 <__lo0bits>
 800b6c2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800b6c6:	b1e8      	cbz	r0, 800b704 <__d2b+0x80>
 800b6c8:	f1c0 0320 	rsb	r3, r0, #32
 800b6cc:	fa02 f303 	lsl.w	r3, r2, r3
 800b6d0:	430b      	orrs	r3, r1
 800b6d2:	40c2      	lsrs	r2, r0
 800b6d4:	6163      	str	r3, [r4, #20]
 800b6d6:	9201      	str	r2, [sp, #4]
 800b6d8:	9b01      	ldr	r3, [sp, #4]
 800b6da:	61a3      	str	r3, [r4, #24]
 800b6dc:	2b00      	cmp	r3, #0
 800b6de:	bf14      	ite	ne
 800b6e0:	2202      	movne	r2, #2
 800b6e2:	2201      	moveq	r2, #1
 800b6e4:	6122      	str	r2, [r4, #16]
 800b6e6:	b1bd      	cbz	r5, 800b718 <__d2b+0x94>
 800b6e8:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b6ec:	4405      	add	r5, r0
 800b6ee:	603d      	str	r5, [r7, #0]
 800b6f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b6f4:	6030      	str	r0, [r6, #0]
 800b6f6:	4620      	mov	r0, r4
 800b6f8:	b003      	add	sp, #12
 800b6fa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b6fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b702:	e7d6      	b.n	800b6b2 <__d2b+0x2e>
 800b704:	6161      	str	r1, [r4, #20]
 800b706:	e7e7      	b.n	800b6d8 <__d2b+0x54>
 800b708:	a801      	add	r0, sp, #4
 800b70a:	f7ff fcf1 	bl	800b0f0 <__lo0bits>
 800b70e:	9b01      	ldr	r3, [sp, #4]
 800b710:	6163      	str	r3, [r4, #20]
 800b712:	3020      	adds	r0, #32
 800b714:	2201      	movs	r2, #1
 800b716:	e7e5      	b.n	800b6e4 <__d2b+0x60>
 800b718:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b71c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b720:	6038      	str	r0, [r7, #0]
 800b722:	6918      	ldr	r0, [r3, #16]
 800b724:	f7ff fcc4 	bl	800b0b0 <__hi0bits>
 800b728:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b72c:	e7e2      	b.n	800b6f4 <__d2b+0x70>
 800b72e:	bf00      	nop
 800b730:	0800d885 	.word	0x0800d885
 800b734:	0800d896 	.word	0x0800d896

0800b738 <__ratio>:
 800b738:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b73c:	4688      	mov	r8, r1
 800b73e:	4669      	mov	r1, sp
 800b740:	4681      	mov	r9, r0
 800b742:	f7ff ff55 	bl	800b5f0 <__b2d>
 800b746:	a901      	add	r1, sp, #4
 800b748:	4640      	mov	r0, r8
 800b74a:	ec55 4b10 	vmov	r4, r5, d0
 800b74e:	f7ff ff4f 	bl	800b5f0 <__b2d>
 800b752:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b756:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b75a:	eba3 0c02 	sub.w	ip, r3, r2
 800b75e:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b762:	1a9b      	subs	r3, r3, r2
 800b764:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b768:	ec51 0b10 	vmov	r0, r1, d0
 800b76c:	2b00      	cmp	r3, #0
 800b76e:	bfd6      	itet	le
 800b770:	460a      	movle	r2, r1
 800b772:	462a      	movgt	r2, r5
 800b774:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b778:	468b      	mov	fp, r1
 800b77a:	462f      	mov	r7, r5
 800b77c:	bfd4      	ite	le
 800b77e:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b782:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b786:	4620      	mov	r0, r4
 800b788:	ee10 2a10 	vmov	r2, s0
 800b78c:	465b      	mov	r3, fp
 800b78e:	4639      	mov	r1, r7
 800b790:	f7f5 f88c 	bl	80008ac <__aeabi_ddiv>
 800b794:	ec41 0b10 	vmov	d0, r0, r1
 800b798:	b003      	add	sp, #12
 800b79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b79e <__copybits>:
 800b79e:	3901      	subs	r1, #1
 800b7a0:	b570      	push	{r4, r5, r6, lr}
 800b7a2:	1149      	asrs	r1, r1, #5
 800b7a4:	6914      	ldr	r4, [r2, #16]
 800b7a6:	3101      	adds	r1, #1
 800b7a8:	f102 0314 	add.w	r3, r2, #20
 800b7ac:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b7b0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b7b4:	1f05      	subs	r5, r0, #4
 800b7b6:	42a3      	cmp	r3, r4
 800b7b8:	d30c      	bcc.n	800b7d4 <__copybits+0x36>
 800b7ba:	1aa3      	subs	r3, r4, r2
 800b7bc:	3b11      	subs	r3, #17
 800b7be:	f023 0303 	bic.w	r3, r3, #3
 800b7c2:	3211      	adds	r2, #17
 800b7c4:	42a2      	cmp	r2, r4
 800b7c6:	bf88      	it	hi
 800b7c8:	2300      	movhi	r3, #0
 800b7ca:	4418      	add	r0, r3
 800b7cc:	2300      	movs	r3, #0
 800b7ce:	4288      	cmp	r0, r1
 800b7d0:	d305      	bcc.n	800b7de <__copybits+0x40>
 800b7d2:	bd70      	pop	{r4, r5, r6, pc}
 800b7d4:	f853 6b04 	ldr.w	r6, [r3], #4
 800b7d8:	f845 6f04 	str.w	r6, [r5, #4]!
 800b7dc:	e7eb      	b.n	800b7b6 <__copybits+0x18>
 800b7de:	f840 3b04 	str.w	r3, [r0], #4
 800b7e2:	e7f4      	b.n	800b7ce <__copybits+0x30>

0800b7e4 <__any_on>:
 800b7e4:	f100 0214 	add.w	r2, r0, #20
 800b7e8:	6900      	ldr	r0, [r0, #16]
 800b7ea:	114b      	asrs	r3, r1, #5
 800b7ec:	4298      	cmp	r0, r3
 800b7ee:	b510      	push	{r4, lr}
 800b7f0:	db11      	blt.n	800b816 <__any_on+0x32>
 800b7f2:	dd0a      	ble.n	800b80a <__any_on+0x26>
 800b7f4:	f011 011f 	ands.w	r1, r1, #31
 800b7f8:	d007      	beq.n	800b80a <__any_on+0x26>
 800b7fa:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b7fe:	fa24 f001 	lsr.w	r0, r4, r1
 800b802:	fa00 f101 	lsl.w	r1, r0, r1
 800b806:	428c      	cmp	r4, r1
 800b808:	d10b      	bne.n	800b822 <__any_on+0x3e>
 800b80a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b80e:	4293      	cmp	r3, r2
 800b810:	d803      	bhi.n	800b81a <__any_on+0x36>
 800b812:	2000      	movs	r0, #0
 800b814:	bd10      	pop	{r4, pc}
 800b816:	4603      	mov	r3, r0
 800b818:	e7f7      	b.n	800b80a <__any_on+0x26>
 800b81a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b81e:	2900      	cmp	r1, #0
 800b820:	d0f5      	beq.n	800b80e <__any_on+0x2a>
 800b822:	2001      	movs	r0, #1
 800b824:	e7f6      	b.n	800b814 <__any_on+0x30>

0800b826 <sulp>:
 800b826:	b570      	push	{r4, r5, r6, lr}
 800b828:	4604      	mov	r4, r0
 800b82a:	460d      	mov	r5, r1
 800b82c:	ec45 4b10 	vmov	d0, r4, r5
 800b830:	4616      	mov	r6, r2
 800b832:	f7ff feb7 	bl	800b5a4 <__ulp>
 800b836:	ec51 0b10 	vmov	r0, r1, d0
 800b83a:	b17e      	cbz	r6, 800b85c <sulp+0x36>
 800b83c:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800b840:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b844:	2b00      	cmp	r3, #0
 800b846:	dd09      	ble.n	800b85c <sulp+0x36>
 800b848:	051b      	lsls	r3, r3, #20
 800b84a:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800b84e:	2400      	movs	r4, #0
 800b850:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800b854:	4622      	mov	r2, r4
 800b856:	462b      	mov	r3, r5
 800b858:	f7f4 fefe 	bl	8000658 <__aeabi_dmul>
 800b85c:	bd70      	pop	{r4, r5, r6, pc}
	...

0800b860 <_strtod_l>:
 800b860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b864:	ed2d 8b02 	vpush	{d8}
 800b868:	b09b      	sub	sp, #108	; 0x6c
 800b86a:	4604      	mov	r4, r0
 800b86c:	9213      	str	r2, [sp, #76]	; 0x4c
 800b86e:	2200      	movs	r2, #0
 800b870:	9216      	str	r2, [sp, #88]	; 0x58
 800b872:	460d      	mov	r5, r1
 800b874:	f04f 0800 	mov.w	r8, #0
 800b878:	f04f 0900 	mov.w	r9, #0
 800b87c:	460a      	mov	r2, r1
 800b87e:	9215      	str	r2, [sp, #84]	; 0x54
 800b880:	7811      	ldrb	r1, [r2, #0]
 800b882:	292b      	cmp	r1, #43	; 0x2b
 800b884:	d04c      	beq.n	800b920 <_strtod_l+0xc0>
 800b886:	d83a      	bhi.n	800b8fe <_strtod_l+0x9e>
 800b888:	290d      	cmp	r1, #13
 800b88a:	d834      	bhi.n	800b8f6 <_strtod_l+0x96>
 800b88c:	2908      	cmp	r1, #8
 800b88e:	d834      	bhi.n	800b8fa <_strtod_l+0x9a>
 800b890:	2900      	cmp	r1, #0
 800b892:	d03d      	beq.n	800b910 <_strtod_l+0xb0>
 800b894:	2200      	movs	r2, #0
 800b896:	920a      	str	r2, [sp, #40]	; 0x28
 800b898:	9e15      	ldr	r6, [sp, #84]	; 0x54
 800b89a:	7832      	ldrb	r2, [r6, #0]
 800b89c:	2a30      	cmp	r2, #48	; 0x30
 800b89e:	f040 80b4 	bne.w	800ba0a <_strtod_l+0x1aa>
 800b8a2:	7872      	ldrb	r2, [r6, #1]
 800b8a4:	f002 02df 	and.w	r2, r2, #223	; 0xdf
 800b8a8:	2a58      	cmp	r2, #88	; 0x58
 800b8aa:	d170      	bne.n	800b98e <_strtod_l+0x12e>
 800b8ac:	9302      	str	r3, [sp, #8]
 800b8ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8b0:	9301      	str	r3, [sp, #4]
 800b8b2:	ab16      	add	r3, sp, #88	; 0x58
 800b8b4:	9300      	str	r3, [sp, #0]
 800b8b6:	4a8e      	ldr	r2, [pc, #568]	; (800baf0 <_strtod_l+0x290>)
 800b8b8:	ab17      	add	r3, sp, #92	; 0x5c
 800b8ba:	a915      	add	r1, sp, #84	; 0x54
 800b8bc:	4620      	mov	r0, r4
 800b8be:	f001 f93f 	bl	800cb40 <__gethex>
 800b8c2:	f010 070f 	ands.w	r7, r0, #15
 800b8c6:	4605      	mov	r5, r0
 800b8c8:	d005      	beq.n	800b8d6 <_strtod_l+0x76>
 800b8ca:	2f06      	cmp	r7, #6
 800b8cc:	d12a      	bne.n	800b924 <_strtod_l+0xc4>
 800b8ce:	3601      	adds	r6, #1
 800b8d0:	2300      	movs	r3, #0
 800b8d2:	9615      	str	r6, [sp, #84]	; 0x54
 800b8d4:	930a      	str	r3, [sp, #40]	; 0x28
 800b8d6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	f040 857f 	bne.w	800c3dc <_strtod_l+0xb7c>
 800b8de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8e0:	b1db      	cbz	r3, 800b91a <_strtod_l+0xba>
 800b8e2:	4642      	mov	r2, r8
 800b8e4:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b8e8:	ec43 2b10 	vmov	d0, r2, r3
 800b8ec:	b01b      	add	sp, #108	; 0x6c
 800b8ee:	ecbd 8b02 	vpop	{d8}
 800b8f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b8f6:	2920      	cmp	r1, #32
 800b8f8:	d1cc      	bne.n	800b894 <_strtod_l+0x34>
 800b8fa:	3201      	adds	r2, #1
 800b8fc:	e7bf      	b.n	800b87e <_strtod_l+0x1e>
 800b8fe:	292d      	cmp	r1, #45	; 0x2d
 800b900:	d1c8      	bne.n	800b894 <_strtod_l+0x34>
 800b902:	2101      	movs	r1, #1
 800b904:	910a      	str	r1, [sp, #40]	; 0x28
 800b906:	1c51      	adds	r1, r2, #1
 800b908:	9115      	str	r1, [sp, #84]	; 0x54
 800b90a:	7852      	ldrb	r2, [r2, #1]
 800b90c:	2a00      	cmp	r2, #0
 800b90e:	d1c3      	bne.n	800b898 <_strtod_l+0x38>
 800b910:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800b912:	9515      	str	r5, [sp, #84]	; 0x54
 800b914:	2b00      	cmp	r3, #0
 800b916:	f040 855f 	bne.w	800c3d8 <_strtod_l+0xb78>
 800b91a:	4642      	mov	r2, r8
 800b91c:	464b      	mov	r3, r9
 800b91e:	e7e3      	b.n	800b8e8 <_strtod_l+0x88>
 800b920:	2100      	movs	r1, #0
 800b922:	e7ef      	b.n	800b904 <_strtod_l+0xa4>
 800b924:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800b926:	b13a      	cbz	r2, 800b938 <_strtod_l+0xd8>
 800b928:	2135      	movs	r1, #53	; 0x35
 800b92a:	a818      	add	r0, sp, #96	; 0x60
 800b92c:	f7ff ff37 	bl	800b79e <__copybits>
 800b930:	9916      	ldr	r1, [sp, #88]	; 0x58
 800b932:	4620      	mov	r0, r4
 800b934:	f7ff fb0a 	bl	800af4c <_Bfree>
 800b938:	3f01      	subs	r7, #1
 800b93a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800b93c:	2f04      	cmp	r7, #4
 800b93e:	d806      	bhi.n	800b94e <_strtod_l+0xee>
 800b940:	e8df f007 	tbb	[pc, r7]
 800b944:	201d0314 	.word	0x201d0314
 800b948:	14          	.byte	0x14
 800b949:	00          	.byte	0x00
 800b94a:	e9dd 8918 	ldrd	r8, r9, [sp, #96]	; 0x60
 800b94e:	05e9      	lsls	r1, r5, #23
 800b950:	bf48      	it	mi
 800b952:	f049 4900 	orrmi.w	r9, r9, #2147483648	; 0x80000000
 800b956:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800b95a:	0d1b      	lsrs	r3, r3, #20
 800b95c:	051b      	lsls	r3, r3, #20
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d1b9      	bne.n	800b8d6 <_strtod_l+0x76>
 800b962:	f7fe fb03 	bl	8009f6c <__errno>
 800b966:	2322      	movs	r3, #34	; 0x22
 800b968:	6003      	str	r3, [r0, #0]
 800b96a:	e7b4      	b.n	800b8d6 <_strtod_l+0x76>
 800b96c:	e9dd 8318 	ldrd	r8, r3, [sp, #96]	; 0x60
 800b970:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800b974:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800b978:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800b97c:	e7e7      	b.n	800b94e <_strtod_l+0xee>
 800b97e:	f8df 9178 	ldr.w	r9, [pc, #376]	; 800baf8 <_strtod_l+0x298>
 800b982:	e7e4      	b.n	800b94e <_strtod_l+0xee>
 800b984:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 800b988:	f04f 38ff 	mov.w	r8, #4294967295
 800b98c:	e7df      	b.n	800b94e <_strtod_l+0xee>
 800b98e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b990:	1c5a      	adds	r2, r3, #1
 800b992:	9215      	str	r2, [sp, #84]	; 0x54
 800b994:	785b      	ldrb	r3, [r3, #1]
 800b996:	2b30      	cmp	r3, #48	; 0x30
 800b998:	d0f9      	beq.n	800b98e <_strtod_l+0x12e>
 800b99a:	2b00      	cmp	r3, #0
 800b99c:	d09b      	beq.n	800b8d6 <_strtod_l+0x76>
 800b99e:	2301      	movs	r3, #1
 800b9a0:	f04f 0a00 	mov.w	sl, #0
 800b9a4:	9304      	str	r3, [sp, #16]
 800b9a6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800b9a8:	930b      	str	r3, [sp, #44]	; 0x2c
 800b9aa:	f8cd a024 	str.w	sl, [sp, #36]	; 0x24
 800b9ae:	46d3      	mov	fp, sl
 800b9b0:	220a      	movs	r2, #10
 800b9b2:	9815      	ldr	r0, [sp, #84]	; 0x54
 800b9b4:	7806      	ldrb	r6, [r0, #0]
 800b9b6:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800b9ba:	b2d9      	uxtb	r1, r3
 800b9bc:	2909      	cmp	r1, #9
 800b9be:	d926      	bls.n	800ba0e <_strtod_l+0x1ae>
 800b9c0:	494c      	ldr	r1, [pc, #304]	; (800baf4 <_strtod_l+0x294>)
 800b9c2:	2201      	movs	r2, #1
 800b9c4:	f000 ffe6 	bl	800c994 <strncmp>
 800b9c8:	2800      	cmp	r0, #0
 800b9ca:	d030      	beq.n	800ba2e <_strtod_l+0x1ce>
 800b9cc:	2000      	movs	r0, #0
 800b9ce:	4632      	mov	r2, r6
 800b9d0:	9005      	str	r0, [sp, #20]
 800b9d2:	465e      	mov	r6, fp
 800b9d4:	4603      	mov	r3, r0
 800b9d6:	2a65      	cmp	r2, #101	; 0x65
 800b9d8:	d001      	beq.n	800b9de <_strtod_l+0x17e>
 800b9da:	2a45      	cmp	r2, #69	; 0x45
 800b9dc:	d113      	bne.n	800ba06 <_strtod_l+0x1a6>
 800b9de:	b91e      	cbnz	r6, 800b9e8 <_strtod_l+0x188>
 800b9e0:	9a04      	ldr	r2, [sp, #16]
 800b9e2:	4302      	orrs	r2, r0
 800b9e4:	d094      	beq.n	800b910 <_strtod_l+0xb0>
 800b9e6:	2600      	movs	r6, #0
 800b9e8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800b9ea:	1c6a      	adds	r2, r5, #1
 800b9ec:	9215      	str	r2, [sp, #84]	; 0x54
 800b9ee:	786a      	ldrb	r2, [r5, #1]
 800b9f0:	2a2b      	cmp	r2, #43	; 0x2b
 800b9f2:	d074      	beq.n	800bade <_strtod_l+0x27e>
 800b9f4:	2a2d      	cmp	r2, #45	; 0x2d
 800b9f6:	d078      	beq.n	800baea <_strtod_l+0x28a>
 800b9f8:	f04f 0c00 	mov.w	ip, #0
 800b9fc:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ba00:	2909      	cmp	r1, #9
 800ba02:	d97f      	bls.n	800bb04 <_strtod_l+0x2a4>
 800ba04:	9515      	str	r5, [sp, #84]	; 0x54
 800ba06:	2700      	movs	r7, #0
 800ba08:	e09e      	b.n	800bb48 <_strtod_l+0x2e8>
 800ba0a:	2300      	movs	r3, #0
 800ba0c:	e7c8      	b.n	800b9a0 <_strtod_l+0x140>
 800ba0e:	f1bb 0f08 	cmp.w	fp, #8
 800ba12:	bfd8      	it	le
 800ba14:	9909      	ldrle	r1, [sp, #36]	; 0x24
 800ba16:	f100 0001 	add.w	r0, r0, #1
 800ba1a:	bfda      	itte	le
 800ba1c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ba20:	9309      	strle	r3, [sp, #36]	; 0x24
 800ba22:	fb02 3a0a 	mlagt	sl, r2, sl, r3
 800ba26:	f10b 0b01 	add.w	fp, fp, #1
 800ba2a:	9015      	str	r0, [sp, #84]	; 0x54
 800ba2c:	e7c1      	b.n	800b9b2 <_strtod_l+0x152>
 800ba2e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba30:	1c5a      	adds	r2, r3, #1
 800ba32:	9215      	str	r2, [sp, #84]	; 0x54
 800ba34:	785a      	ldrb	r2, [r3, #1]
 800ba36:	f1bb 0f00 	cmp.w	fp, #0
 800ba3a:	d037      	beq.n	800baac <_strtod_l+0x24c>
 800ba3c:	9005      	str	r0, [sp, #20]
 800ba3e:	465e      	mov	r6, fp
 800ba40:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ba44:	2b09      	cmp	r3, #9
 800ba46:	d912      	bls.n	800ba6e <_strtod_l+0x20e>
 800ba48:	2301      	movs	r3, #1
 800ba4a:	e7c4      	b.n	800b9d6 <_strtod_l+0x176>
 800ba4c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba4e:	1c5a      	adds	r2, r3, #1
 800ba50:	9215      	str	r2, [sp, #84]	; 0x54
 800ba52:	785a      	ldrb	r2, [r3, #1]
 800ba54:	3001      	adds	r0, #1
 800ba56:	2a30      	cmp	r2, #48	; 0x30
 800ba58:	d0f8      	beq.n	800ba4c <_strtod_l+0x1ec>
 800ba5a:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ba5e:	2b08      	cmp	r3, #8
 800ba60:	f200 84c1 	bhi.w	800c3e6 <_strtod_l+0xb86>
 800ba64:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800ba66:	9005      	str	r0, [sp, #20]
 800ba68:	2000      	movs	r0, #0
 800ba6a:	930b      	str	r3, [sp, #44]	; 0x2c
 800ba6c:	4606      	mov	r6, r0
 800ba6e:	3a30      	subs	r2, #48	; 0x30
 800ba70:	f100 0301 	add.w	r3, r0, #1
 800ba74:	d014      	beq.n	800baa0 <_strtod_l+0x240>
 800ba76:	9905      	ldr	r1, [sp, #20]
 800ba78:	4419      	add	r1, r3
 800ba7a:	9105      	str	r1, [sp, #20]
 800ba7c:	4633      	mov	r3, r6
 800ba7e:	eb00 0c06 	add.w	ip, r0, r6
 800ba82:	210a      	movs	r1, #10
 800ba84:	4563      	cmp	r3, ip
 800ba86:	d113      	bne.n	800bab0 <_strtod_l+0x250>
 800ba88:	1833      	adds	r3, r6, r0
 800ba8a:	2b08      	cmp	r3, #8
 800ba8c:	f106 0601 	add.w	r6, r6, #1
 800ba90:	4406      	add	r6, r0
 800ba92:	dc1a      	bgt.n	800baca <_strtod_l+0x26a>
 800ba94:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ba96:	230a      	movs	r3, #10
 800ba98:	fb03 2301 	mla	r3, r3, r1, r2
 800ba9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ba9e:	2300      	movs	r3, #0
 800baa0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800baa2:	1c51      	adds	r1, r2, #1
 800baa4:	9115      	str	r1, [sp, #84]	; 0x54
 800baa6:	7852      	ldrb	r2, [r2, #1]
 800baa8:	4618      	mov	r0, r3
 800baaa:	e7c9      	b.n	800ba40 <_strtod_l+0x1e0>
 800baac:	4658      	mov	r0, fp
 800baae:	e7d2      	b.n	800ba56 <_strtod_l+0x1f6>
 800bab0:	2b08      	cmp	r3, #8
 800bab2:	f103 0301 	add.w	r3, r3, #1
 800bab6:	dc03      	bgt.n	800bac0 <_strtod_l+0x260>
 800bab8:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800baba:	434f      	muls	r7, r1
 800babc:	9709      	str	r7, [sp, #36]	; 0x24
 800babe:	e7e1      	b.n	800ba84 <_strtod_l+0x224>
 800bac0:	2b10      	cmp	r3, #16
 800bac2:	bfd8      	it	le
 800bac4:	fb01 fa0a 	mulle.w	sl, r1, sl
 800bac8:	e7dc      	b.n	800ba84 <_strtod_l+0x224>
 800baca:	2e10      	cmp	r6, #16
 800bacc:	bfdc      	itt	le
 800bace:	230a      	movle	r3, #10
 800bad0:	fb03 2a0a 	mlale	sl, r3, sl, r2
 800bad4:	e7e3      	b.n	800ba9e <_strtod_l+0x23e>
 800bad6:	2300      	movs	r3, #0
 800bad8:	9305      	str	r3, [sp, #20]
 800bada:	2301      	movs	r3, #1
 800badc:	e780      	b.n	800b9e0 <_strtod_l+0x180>
 800bade:	f04f 0c00 	mov.w	ip, #0
 800bae2:	1caa      	adds	r2, r5, #2
 800bae4:	9215      	str	r2, [sp, #84]	; 0x54
 800bae6:	78aa      	ldrb	r2, [r5, #2]
 800bae8:	e788      	b.n	800b9fc <_strtod_l+0x19c>
 800baea:	f04f 0c01 	mov.w	ip, #1
 800baee:	e7f8      	b.n	800bae2 <_strtod_l+0x282>
 800baf0:	0800d9f0 	.word	0x0800d9f0
 800baf4:	0800d9ec 	.word	0x0800d9ec
 800baf8:	7ff00000 	.word	0x7ff00000
 800bafc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bafe:	1c51      	adds	r1, r2, #1
 800bb00:	9115      	str	r1, [sp, #84]	; 0x54
 800bb02:	7852      	ldrb	r2, [r2, #1]
 800bb04:	2a30      	cmp	r2, #48	; 0x30
 800bb06:	d0f9      	beq.n	800bafc <_strtod_l+0x29c>
 800bb08:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bb0c:	2908      	cmp	r1, #8
 800bb0e:	f63f af7a 	bhi.w	800ba06 <_strtod_l+0x1a6>
 800bb12:	3a30      	subs	r2, #48	; 0x30
 800bb14:	9208      	str	r2, [sp, #32]
 800bb16:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bb18:	920c      	str	r2, [sp, #48]	; 0x30
 800bb1a:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800bb1c:	1c57      	adds	r7, r2, #1
 800bb1e:	9715      	str	r7, [sp, #84]	; 0x54
 800bb20:	7852      	ldrb	r2, [r2, #1]
 800bb22:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800bb26:	f1be 0f09 	cmp.w	lr, #9
 800bb2a:	d938      	bls.n	800bb9e <_strtod_l+0x33e>
 800bb2c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800bb2e:	1a7f      	subs	r7, r7, r1
 800bb30:	2f08      	cmp	r7, #8
 800bb32:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800bb36:	dc03      	bgt.n	800bb40 <_strtod_l+0x2e0>
 800bb38:	9908      	ldr	r1, [sp, #32]
 800bb3a:	428f      	cmp	r7, r1
 800bb3c:	bfa8      	it	ge
 800bb3e:	460f      	movge	r7, r1
 800bb40:	f1bc 0f00 	cmp.w	ip, #0
 800bb44:	d000      	beq.n	800bb48 <_strtod_l+0x2e8>
 800bb46:	427f      	negs	r7, r7
 800bb48:	2e00      	cmp	r6, #0
 800bb4a:	d14f      	bne.n	800bbec <_strtod_l+0x38c>
 800bb4c:	9904      	ldr	r1, [sp, #16]
 800bb4e:	4301      	orrs	r1, r0
 800bb50:	f47f aec1 	bne.w	800b8d6 <_strtod_l+0x76>
 800bb54:	2b00      	cmp	r3, #0
 800bb56:	f47f aedb 	bne.w	800b910 <_strtod_l+0xb0>
 800bb5a:	2a69      	cmp	r2, #105	; 0x69
 800bb5c:	d029      	beq.n	800bbb2 <_strtod_l+0x352>
 800bb5e:	dc26      	bgt.n	800bbae <_strtod_l+0x34e>
 800bb60:	2a49      	cmp	r2, #73	; 0x49
 800bb62:	d026      	beq.n	800bbb2 <_strtod_l+0x352>
 800bb64:	2a4e      	cmp	r2, #78	; 0x4e
 800bb66:	f47f aed3 	bne.w	800b910 <_strtod_l+0xb0>
 800bb6a:	499b      	ldr	r1, [pc, #620]	; (800bdd8 <_strtod_l+0x578>)
 800bb6c:	a815      	add	r0, sp, #84	; 0x54
 800bb6e:	f001 fa27 	bl	800cfc0 <__match>
 800bb72:	2800      	cmp	r0, #0
 800bb74:	f43f aecc 	beq.w	800b910 <_strtod_l+0xb0>
 800bb78:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bb7a:	781b      	ldrb	r3, [r3, #0]
 800bb7c:	2b28      	cmp	r3, #40	; 0x28
 800bb7e:	d12f      	bne.n	800bbe0 <_strtod_l+0x380>
 800bb80:	4996      	ldr	r1, [pc, #600]	; (800bddc <_strtod_l+0x57c>)
 800bb82:	aa18      	add	r2, sp, #96	; 0x60
 800bb84:	a815      	add	r0, sp, #84	; 0x54
 800bb86:	f001 fa2f 	bl	800cfe8 <__hexnan>
 800bb8a:	2805      	cmp	r0, #5
 800bb8c:	d128      	bne.n	800bbe0 <_strtod_l+0x380>
 800bb8e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800bb90:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bb94:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 800bb98:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800bb9c:	e69b      	b.n	800b8d6 <_strtod_l+0x76>
 800bb9e:	9f08      	ldr	r7, [sp, #32]
 800bba0:	210a      	movs	r1, #10
 800bba2:	fb01 2107 	mla	r1, r1, r7, r2
 800bba6:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
 800bbaa:	9208      	str	r2, [sp, #32]
 800bbac:	e7b5      	b.n	800bb1a <_strtod_l+0x2ba>
 800bbae:	2a6e      	cmp	r2, #110	; 0x6e
 800bbb0:	e7d9      	b.n	800bb66 <_strtod_l+0x306>
 800bbb2:	498b      	ldr	r1, [pc, #556]	; (800bde0 <_strtod_l+0x580>)
 800bbb4:	a815      	add	r0, sp, #84	; 0x54
 800bbb6:	f001 fa03 	bl	800cfc0 <__match>
 800bbba:	2800      	cmp	r0, #0
 800bbbc:	f43f aea8 	beq.w	800b910 <_strtod_l+0xb0>
 800bbc0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bbc2:	4988      	ldr	r1, [pc, #544]	; (800bde4 <_strtod_l+0x584>)
 800bbc4:	3b01      	subs	r3, #1
 800bbc6:	a815      	add	r0, sp, #84	; 0x54
 800bbc8:	9315      	str	r3, [sp, #84]	; 0x54
 800bbca:	f001 f9f9 	bl	800cfc0 <__match>
 800bbce:	b910      	cbnz	r0, 800bbd6 <_strtod_l+0x376>
 800bbd0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bbd2:	3301      	adds	r3, #1
 800bbd4:	9315      	str	r3, [sp, #84]	; 0x54
 800bbd6:	f8df 921c 	ldr.w	r9, [pc, #540]	; 800bdf4 <_strtod_l+0x594>
 800bbda:	f04f 0800 	mov.w	r8, #0
 800bbde:	e67a      	b.n	800b8d6 <_strtod_l+0x76>
 800bbe0:	4881      	ldr	r0, [pc, #516]	; (800bde8 <_strtod_l+0x588>)
 800bbe2:	f000 ff09 	bl	800c9f8 <nan>
 800bbe6:	ec59 8b10 	vmov	r8, r9, d0
 800bbea:	e674      	b.n	800b8d6 <_strtod_l+0x76>
 800bbec:	9b05      	ldr	r3, [sp, #20]
 800bbee:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bbf0:	1afb      	subs	r3, r7, r3
 800bbf2:	f1bb 0f00 	cmp.w	fp, #0
 800bbf6:	bf08      	it	eq
 800bbf8:	46b3      	moveq	fp, r6
 800bbfa:	2e10      	cmp	r6, #16
 800bbfc:	9308      	str	r3, [sp, #32]
 800bbfe:	4635      	mov	r5, r6
 800bc00:	bfa8      	it	ge
 800bc02:	2510      	movge	r5, #16
 800bc04:	f7f4 fcae 	bl	8000564 <__aeabi_ui2d>
 800bc08:	2e09      	cmp	r6, #9
 800bc0a:	4680      	mov	r8, r0
 800bc0c:	4689      	mov	r9, r1
 800bc0e:	dd13      	ble.n	800bc38 <_strtod_l+0x3d8>
 800bc10:	4b76      	ldr	r3, [pc, #472]	; (800bdec <_strtod_l+0x58c>)
 800bc12:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bc16:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bc1a:	f7f4 fd1d 	bl	8000658 <__aeabi_dmul>
 800bc1e:	4680      	mov	r8, r0
 800bc20:	4650      	mov	r0, sl
 800bc22:	4689      	mov	r9, r1
 800bc24:	f7f4 fc9e 	bl	8000564 <__aeabi_ui2d>
 800bc28:	4602      	mov	r2, r0
 800bc2a:	460b      	mov	r3, r1
 800bc2c:	4640      	mov	r0, r8
 800bc2e:	4649      	mov	r1, r9
 800bc30:	f7f4 fb5c 	bl	80002ec <__adddf3>
 800bc34:	4680      	mov	r8, r0
 800bc36:	4689      	mov	r9, r1
 800bc38:	2e0f      	cmp	r6, #15
 800bc3a:	dc38      	bgt.n	800bcae <_strtod_l+0x44e>
 800bc3c:	9b08      	ldr	r3, [sp, #32]
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	f43f ae49 	beq.w	800b8d6 <_strtod_l+0x76>
 800bc44:	dd24      	ble.n	800bc90 <_strtod_l+0x430>
 800bc46:	2b16      	cmp	r3, #22
 800bc48:	dc0b      	bgt.n	800bc62 <_strtod_l+0x402>
 800bc4a:	4968      	ldr	r1, [pc, #416]	; (800bdec <_strtod_l+0x58c>)
 800bc4c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bc50:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc54:	4642      	mov	r2, r8
 800bc56:	464b      	mov	r3, r9
 800bc58:	f7f4 fcfe 	bl	8000658 <__aeabi_dmul>
 800bc5c:	4680      	mov	r8, r0
 800bc5e:	4689      	mov	r9, r1
 800bc60:	e639      	b.n	800b8d6 <_strtod_l+0x76>
 800bc62:	9a08      	ldr	r2, [sp, #32]
 800bc64:	f1c6 0325 	rsb	r3, r6, #37	; 0x25
 800bc68:	4293      	cmp	r3, r2
 800bc6a:	db20      	blt.n	800bcae <_strtod_l+0x44e>
 800bc6c:	4c5f      	ldr	r4, [pc, #380]	; (800bdec <_strtod_l+0x58c>)
 800bc6e:	f1c6 060f 	rsb	r6, r6, #15
 800bc72:	eb04 01c6 	add.w	r1, r4, r6, lsl #3
 800bc76:	4642      	mov	r2, r8
 800bc78:	464b      	mov	r3, r9
 800bc7a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bc7e:	f7f4 fceb 	bl	8000658 <__aeabi_dmul>
 800bc82:	9b08      	ldr	r3, [sp, #32]
 800bc84:	1b9e      	subs	r6, r3, r6
 800bc86:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 800bc8a:	e9d4 2300 	ldrd	r2, r3, [r4]
 800bc8e:	e7e3      	b.n	800bc58 <_strtod_l+0x3f8>
 800bc90:	9b08      	ldr	r3, [sp, #32]
 800bc92:	3316      	adds	r3, #22
 800bc94:	db0b      	blt.n	800bcae <_strtod_l+0x44e>
 800bc96:	9b05      	ldr	r3, [sp, #20]
 800bc98:	1bdf      	subs	r7, r3, r7
 800bc9a:	4b54      	ldr	r3, [pc, #336]	; (800bdec <_strtod_l+0x58c>)
 800bc9c:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800bca0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800bca4:	4640      	mov	r0, r8
 800bca6:	4649      	mov	r1, r9
 800bca8:	f7f4 fe00 	bl	80008ac <__aeabi_ddiv>
 800bcac:	e7d6      	b.n	800bc5c <_strtod_l+0x3fc>
 800bcae:	9b08      	ldr	r3, [sp, #32]
 800bcb0:	1b75      	subs	r5, r6, r5
 800bcb2:	441d      	add	r5, r3
 800bcb4:	2d00      	cmp	r5, #0
 800bcb6:	dd70      	ble.n	800bd9a <_strtod_l+0x53a>
 800bcb8:	f015 030f 	ands.w	r3, r5, #15
 800bcbc:	d00a      	beq.n	800bcd4 <_strtod_l+0x474>
 800bcbe:	494b      	ldr	r1, [pc, #300]	; (800bdec <_strtod_l+0x58c>)
 800bcc0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bcc4:	4642      	mov	r2, r8
 800bcc6:	464b      	mov	r3, r9
 800bcc8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bccc:	f7f4 fcc4 	bl	8000658 <__aeabi_dmul>
 800bcd0:	4680      	mov	r8, r0
 800bcd2:	4689      	mov	r9, r1
 800bcd4:	f035 050f 	bics.w	r5, r5, #15
 800bcd8:	d04d      	beq.n	800bd76 <_strtod_l+0x516>
 800bcda:	f5b5 7f9a 	cmp.w	r5, #308	; 0x134
 800bcde:	dd22      	ble.n	800bd26 <_strtod_l+0x4c6>
 800bce0:	2500      	movs	r5, #0
 800bce2:	46ab      	mov	fp, r5
 800bce4:	9509      	str	r5, [sp, #36]	; 0x24
 800bce6:	9505      	str	r5, [sp, #20]
 800bce8:	2322      	movs	r3, #34	; 0x22
 800bcea:	f8df 9108 	ldr.w	r9, [pc, #264]	; 800bdf4 <_strtod_l+0x594>
 800bcee:	6023      	str	r3, [r4, #0]
 800bcf0:	f04f 0800 	mov.w	r8, #0
 800bcf4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	f43f aded 	beq.w	800b8d6 <_strtod_l+0x76>
 800bcfc:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bcfe:	4620      	mov	r0, r4
 800bd00:	f7ff f924 	bl	800af4c <_Bfree>
 800bd04:	9905      	ldr	r1, [sp, #20]
 800bd06:	4620      	mov	r0, r4
 800bd08:	f7ff f920 	bl	800af4c <_Bfree>
 800bd0c:	4659      	mov	r1, fp
 800bd0e:	4620      	mov	r0, r4
 800bd10:	f7ff f91c 	bl	800af4c <_Bfree>
 800bd14:	9909      	ldr	r1, [sp, #36]	; 0x24
 800bd16:	4620      	mov	r0, r4
 800bd18:	f7ff f918 	bl	800af4c <_Bfree>
 800bd1c:	4629      	mov	r1, r5
 800bd1e:	4620      	mov	r0, r4
 800bd20:	f7ff f914 	bl	800af4c <_Bfree>
 800bd24:	e5d7      	b.n	800b8d6 <_strtod_l+0x76>
 800bd26:	4b32      	ldr	r3, [pc, #200]	; (800bdf0 <_strtod_l+0x590>)
 800bd28:	9304      	str	r3, [sp, #16]
 800bd2a:	2300      	movs	r3, #0
 800bd2c:	112d      	asrs	r5, r5, #4
 800bd2e:	4640      	mov	r0, r8
 800bd30:	4649      	mov	r1, r9
 800bd32:	469a      	mov	sl, r3
 800bd34:	2d01      	cmp	r5, #1
 800bd36:	dc21      	bgt.n	800bd7c <_strtod_l+0x51c>
 800bd38:	b10b      	cbz	r3, 800bd3e <_strtod_l+0x4de>
 800bd3a:	4680      	mov	r8, r0
 800bd3c:	4689      	mov	r9, r1
 800bd3e:	492c      	ldr	r1, [pc, #176]	; (800bdf0 <_strtod_l+0x590>)
 800bd40:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 800bd44:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 800bd48:	4642      	mov	r2, r8
 800bd4a:	464b      	mov	r3, r9
 800bd4c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bd50:	f7f4 fc82 	bl	8000658 <__aeabi_dmul>
 800bd54:	4b27      	ldr	r3, [pc, #156]	; (800bdf4 <_strtod_l+0x594>)
 800bd56:	460a      	mov	r2, r1
 800bd58:	400b      	ands	r3, r1
 800bd5a:	4927      	ldr	r1, [pc, #156]	; (800bdf8 <_strtod_l+0x598>)
 800bd5c:	428b      	cmp	r3, r1
 800bd5e:	4680      	mov	r8, r0
 800bd60:	d8be      	bhi.n	800bce0 <_strtod_l+0x480>
 800bd62:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bd66:	428b      	cmp	r3, r1
 800bd68:	bf86      	itte	hi
 800bd6a:	f8df 9090 	ldrhi.w	r9, [pc, #144]	; 800bdfc <_strtod_l+0x59c>
 800bd6e:	f04f 38ff 	movhi.w	r8, #4294967295
 800bd72:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 800bd76:	2300      	movs	r3, #0
 800bd78:	9304      	str	r3, [sp, #16]
 800bd7a:	e07b      	b.n	800be74 <_strtod_l+0x614>
 800bd7c:	07ea      	lsls	r2, r5, #31
 800bd7e:	d505      	bpl.n	800bd8c <_strtod_l+0x52c>
 800bd80:	9b04      	ldr	r3, [sp, #16]
 800bd82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd86:	f7f4 fc67 	bl	8000658 <__aeabi_dmul>
 800bd8a:	2301      	movs	r3, #1
 800bd8c:	9a04      	ldr	r2, [sp, #16]
 800bd8e:	3208      	adds	r2, #8
 800bd90:	f10a 0a01 	add.w	sl, sl, #1
 800bd94:	106d      	asrs	r5, r5, #1
 800bd96:	9204      	str	r2, [sp, #16]
 800bd98:	e7cc      	b.n	800bd34 <_strtod_l+0x4d4>
 800bd9a:	d0ec      	beq.n	800bd76 <_strtod_l+0x516>
 800bd9c:	426d      	negs	r5, r5
 800bd9e:	f015 020f 	ands.w	r2, r5, #15
 800bda2:	d00a      	beq.n	800bdba <_strtod_l+0x55a>
 800bda4:	4b11      	ldr	r3, [pc, #68]	; (800bdec <_strtod_l+0x58c>)
 800bda6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bdaa:	4640      	mov	r0, r8
 800bdac:	4649      	mov	r1, r9
 800bdae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdb2:	f7f4 fd7b 	bl	80008ac <__aeabi_ddiv>
 800bdb6:	4680      	mov	r8, r0
 800bdb8:	4689      	mov	r9, r1
 800bdba:	112d      	asrs	r5, r5, #4
 800bdbc:	d0db      	beq.n	800bd76 <_strtod_l+0x516>
 800bdbe:	2d1f      	cmp	r5, #31
 800bdc0:	dd1e      	ble.n	800be00 <_strtod_l+0x5a0>
 800bdc2:	2500      	movs	r5, #0
 800bdc4:	46ab      	mov	fp, r5
 800bdc6:	9509      	str	r5, [sp, #36]	; 0x24
 800bdc8:	9505      	str	r5, [sp, #20]
 800bdca:	2322      	movs	r3, #34	; 0x22
 800bdcc:	f04f 0800 	mov.w	r8, #0
 800bdd0:	f04f 0900 	mov.w	r9, #0
 800bdd4:	6023      	str	r3, [r4, #0]
 800bdd6:	e78d      	b.n	800bcf4 <_strtod_l+0x494>
 800bdd8:	0800d7dd 	.word	0x0800d7dd
 800bddc:	0800da04 	.word	0x0800da04
 800bde0:	0800d7d5 	.word	0x0800d7d5
 800bde4:	0800d80c 	.word	0x0800d80c
 800bde8:	0800db95 	.word	0x0800db95
 800bdec:	0800d918 	.word	0x0800d918
 800bdf0:	0800d8f0 	.word	0x0800d8f0
 800bdf4:	7ff00000 	.word	0x7ff00000
 800bdf8:	7ca00000 	.word	0x7ca00000
 800bdfc:	7fefffff 	.word	0x7fefffff
 800be00:	f015 0310 	ands.w	r3, r5, #16
 800be04:	bf18      	it	ne
 800be06:	236a      	movne	r3, #106	; 0x6a
 800be08:	f8df a3a0 	ldr.w	sl, [pc, #928]	; 800c1ac <_strtod_l+0x94c>
 800be0c:	9304      	str	r3, [sp, #16]
 800be0e:	4640      	mov	r0, r8
 800be10:	4649      	mov	r1, r9
 800be12:	2300      	movs	r3, #0
 800be14:	07ea      	lsls	r2, r5, #31
 800be16:	d504      	bpl.n	800be22 <_strtod_l+0x5c2>
 800be18:	e9da 2300 	ldrd	r2, r3, [sl]
 800be1c:	f7f4 fc1c 	bl	8000658 <__aeabi_dmul>
 800be20:	2301      	movs	r3, #1
 800be22:	106d      	asrs	r5, r5, #1
 800be24:	f10a 0a08 	add.w	sl, sl, #8
 800be28:	d1f4      	bne.n	800be14 <_strtod_l+0x5b4>
 800be2a:	b10b      	cbz	r3, 800be30 <_strtod_l+0x5d0>
 800be2c:	4680      	mov	r8, r0
 800be2e:	4689      	mov	r9, r1
 800be30:	9b04      	ldr	r3, [sp, #16]
 800be32:	b1bb      	cbz	r3, 800be64 <_strtod_l+0x604>
 800be34:	f3c9 520a 	ubfx	r2, r9, #20, #11
 800be38:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	4649      	mov	r1, r9
 800be40:	dd10      	ble.n	800be64 <_strtod_l+0x604>
 800be42:	2b1f      	cmp	r3, #31
 800be44:	f340 811e 	ble.w	800c084 <_strtod_l+0x824>
 800be48:	2b34      	cmp	r3, #52	; 0x34
 800be4a:	bfde      	ittt	le
 800be4c:	f04f 33ff 	movle.w	r3, #4294967295
 800be50:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800be54:	4093      	lslle	r3, r2
 800be56:	f04f 0800 	mov.w	r8, #0
 800be5a:	bfcc      	ite	gt
 800be5c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 800be60:	ea03 0901 	andle.w	r9, r3, r1
 800be64:	2200      	movs	r2, #0
 800be66:	2300      	movs	r3, #0
 800be68:	4640      	mov	r0, r8
 800be6a:	4649      	mov	r1, r9
 800be6c:	f7f4 fe5c 	bl	8000b28 <__aeabi_dcmpeq>
 800be70:	2800      	cmp	r0, #0
 800be72:	d1a6      	bne.n	800bdc2 <_strtod_l+0x562>
 800be74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be76:	9300      	str	r3, [sp, #0]
 800be78:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800be7a:	4633      	mov	r3, r6
 800be7c:	465a      	mov	r2, fp
 800be7e:	4620      	mov	r0, r4
 800be80:	f7ff f8cc 	bl	800b01c <__s2b>
 800be84:	9009      	str	r0, [sp, #36]	; 0x24
 800be86:	2800      	cmp	r0, #0
 800be88:	f43f af2a 	beq.w	800bce0 <_strtod_l+0x480>
 800be8c:	9a08      	ldr	r2, [sp, #32]
 800be8e:	9b05      	ldr	r3, [sp, #20]
 800be90:	2a00      	cmp	r2, #0
 800be92:	eba3 0307 	sub.w	r3, r3, r7
 800be96:	bfa8      	it	ge
 800be98:	2300      	movge	r3, #0
 800be9a:	930c      	str	r3, [sp, #48]	; 0x30
 800be9c:	2500      	movs	r5, #0
 800be9e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800bea2:	9312      	str	r3, [sp, #72]	; 0x48
 800bea4:	46ab      	mov	fp, r5
 800bea6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bea8:	4620      	mov	r0, r4
 800beaa:	6859      	ldr	r1, [r3, #4]
 800beac:	f7ff f80e 	bl	800aecc <_Balloc>
 800beb0:	9005      	str	r0, [sp, #20]
 800beb2:	2800      	cmp	r0, #0
 800beb4:	f43f af18 	beq.w	800bce8 <_strtod_l+0x488>
 800beb8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800beba:	691a      	ldr	r2, [r3, #16]
 800bebc:	3202      	adds	r2, #2
 800bebe:	f103 010c 	add.w	r1, r3, #12
 800bec2:	0092      	lsls	r2, r2, #2
 800bec4:	300c      	adds	r0, #12
 800bec6:	f000 fd87 	bl	800c9d8 <memcpy>
 800beca:	ec49 8b10 	vmov	d0, r8, r9
 800bece:	aa18      	add	r2, sp, #96	; 0x60
 800bed0:	a917      	add	r1, sp, #92	; 0x5c
 800bed2:	4620      	mov	r0, r4
 800bed4:	f7ff fbd6 	bl	800b684 <__d2b>
 800bed8:	ec49 8b18 	vmov	d8, r8, r9
 800bedc:	9016      	str	r0, [sp, #88]	; 0x58
 800bede:	2800      	cmp	r0, #0
 800bee0:	f43f af02 	beq.w	800bce8 <_strtod_l+0x488>
 800bee4:	2101      	movs	r1, #1
 800bee6:	4620      	mov	r0, r4
 800bee8:	f7ff f930 	bl	800b14c <__i2b>
 800beec:	4683      	mov	fp, r0
 800beee:	2800      	cmp	r0, #0
 800bef0:	f43f aefa 	beq.w	800bce8 <_strtod_l+0x488>
 800bef4:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bef6:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bef8:	2e00      	cmp	r6, #0
 800befa:	bfab      	itete	ge
 800befc:	9b0c      	ldrge	r3, [sp, #48]	; 0x30
 800befe:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
 800bf00:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800bf02:	f8dd a030 	ldrlt.w	sl, [sp, #48]	; 0x30
 800bf06:	bfac      	ite	ge
 800bf08:	eb06 0a03 	addge.w	sl, r6, r3
 800bf0c:	1b9f      	sublt	r7, r3, r6
 800bf0e:	9b04      	ldr	r3, [sp, #16]
 800bf10:	1af6      	subs	r6, r6, r3
 800bf12:	4416      	add	r6, r2
 800bf14:	4ba0      	ldr	r3, [pc, #640]	; (800c198 <_strtod_l+0x938>)
 800bf16:	3e01      	subs	r6, #1
 800bf18:	429e      	cmp	r6, r3
 800bf1a:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800bf1e:	f280 80c4 	bge.w	800c0aa <_strtod_l+0x84a>
 800bf22:	1b9b      	subs	r3, r3, r6
 800bf24:	2b1f      	cmp	r3, #31
 800bf26:	eba2 0203 	sub.w	r2, r2, r3
 800bf2a:	f04f 0101 	mov.w	r1, #1
 800bf2e:	f300 80b0 	bgt.w	800c092 <_strtod_l+0x832>
 800bf32:	fa01 f303 	lsl.w	r3, r1, r3
 800bf36:	930e      	str	r3, [sp, #56]	; 0x38
 800bf38:	2300      	movs	r3, #0
 800bf3a:	930d      	str	r3, [sp, #52]	; 0x34
 800bf3c:	eb0a 0602 	add.w	r6, sl, r2
 800bf40:	9b04      	ldr	r3, [sp, #16]
 800bf42:	45b2      	cmp	sl, r6
 800bf44:	4417      	add	r7, r2
 800bf46:	441f      	add	r7, r3
 800bf48:	4653      	mov	r3, sl
 800bf4a:	bfa8      	it	ge
 800bf4c:	4633      	movge	r3, r6
 800bf4e:	42bb      	cmp	r3, r7
 800bf50:	bfa8      	it	ge
 800bf52:	463b      	movge	r3, r7
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	bfc2      	ittt	gt
 800bf58:	1af6      	subgt	r6, r6, r3
 800bf5a:	1aff      	subgt	r7, r7, r3
 800bf5c:	ebaa 0a03 	subgt.w	sl, sl, r3
 800bf60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	dd17      	ble.n	800bf96 <_strtod_l+0x736>
 800bf66:	4659      	mov	r1, fp
 800bf68:	461a      	mov	r2, r3
 800bf6a:	4620      	mov	r0, r4
 800bf6c:	f7ff f9ae 	bl	800b2cc <__pow5mult>
 800bf70:	4683      	mov	fp, r0
 800bf72:	2800      	cmp	r0, #0
 800bf74:	f43f aeb8 	beq.w	800bce8 <_strtod_l+0x488>
 800bf78:	4601      	mov	r1, r0
 800bf7a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800bf7c:	4620      	mov	r0, r4
 800bf7e:	f7ff f8fb 	bl	800b178 <__multiply>
 800bf82:	900b      	str	r0, [sp, #44]	; 0x2c
 800bf84:	2800      	cmp	r0, #0
 800bf86:	f43f aeaf 	beq.w	800bce8 <_strtod_l+0x488>
 800bf8a:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bf8c:	4620      	mov	r0, r4
 800bf8e:	f7fe ffdd 	bl	800af4c <_Bfree>
 800bf92:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf94:	9316      	str	r3, [sp, #88]	; 0x58
 800bf96:	2e00      	cmp	r6, #0
 800bf98:	f300 808c 	bgt.w	800c0b4 <_strtod_l+0x854>
 800bf9c:	9b08      	ldr	r3, [sp, #32]
 800bf9e:	2b00      	cmp	r3, #0
 800bfa0:	dd08      	ble.n	800bfb4 <_strtod_l+0x754>
 800bfa2:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800bfa4:	9905      	ldr	r1, [sp, #20]
 800bfa6:	4620      	mov	r0, r4
 800bfa8:	f7ff f990 	bl	800b2cc <__pow5mult>
 800bfac:	9005      	str	r0, [sp, #20]
 800bfae:	2800      	cmp	r0, #0
 800bfb0:	f43f ae9a 	beq.w	800bce8 <_strtod_l+0x488>
 800bfb4:	2f00      	cmp	r7, #0
 800bfb6:	dd08      	ble.n	800bfca <_strtod_l+0x76a>
 800bfb8:	9905      	ldr	r1, [sp, #20]
 800bfba:	463a      	mov	r2, r7
 800bfbc:	4620      	mov	r0, r4
 800bfbe:	f7ff f9df 	bl	800b380 <__lshift>
 800bfc2:	9005      	str	r0, [sp, #20]
 800bfc4:	2800      	cmp	r0, #0
 800bfc6:	f43f ae8f 	beq.w	800bce8 <_strtod_l+0x488>
 800bfca:	f1ba 0f00 	cmp.w	sl, #0
 800bfce:	dd08      	ble.n	800bfe2 <_strtod_l+0x782>
 800bfd0:	4659      	mov	r1, fp
 800bfd2:	4652      	mov	r2, sl
 800bfd4:	4620      	mov	r0, r4
 800bfd6:	f7ff f9d3 	bl	800b380 <__lshift>
 800bfda:	4683      	mov	fp, r0
 800bfdc:	2800      	cmp	r0, #0
 800bfde:	f43f ae83 	beq.w	800bce8 <_strtod_l+0x488>
 800bfe2:	9a05      	ldr	r2, [sp, #20]
 800bfe4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800bfe6:	4620      	mov	r0, r4
 800bfe8:	f7ff fa52 	bl	800b490 <__mdiff>
 800bfec:	4605      	mov	r5, r0
 800bfee:	2800      	cmp	r0, #0
 800bff0:	f43f ae7a 	beq.w	800bce8 <_strtod_l+0x488>
 800bff4:	68c3      	ldr	r3, [r0, #12]
 800bff6:	930b      	str	r3, [sp, #44]	; 0x2c
 800bff8:	2300      	movs	r3, #0
 800bffa:	60c3      	str	r3, [r0, #12]
 800bffc:	4659      	mov	r1, fp
 800bffe:	f7ff fa2b 	bl	800b458 <__mcmp>
 800c002:	2800      	cmp	r0, #0
 800c004:	da60      	bge.n	800c0c8 <_strtod_l+0x868>
 800c006:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c008:	ea53 0308 	orrs.w	r3, r3, r8
 800c00c:	f040 8084 	bne.w	800c118 <_strtod_l+0x8b8>
 800c010:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c014:	2b00      	cmp	r3, #0
 800c016:	d17f      	bne.n	800c118 <_strtod_l+0x8b8>
 800c018:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c01c:	0d1b      	lsrs	r3, r3, #20
 800c01e:	051b      	lsls	r3, r3, #20
 800c020:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c024:	d978      	bls.n	800c118 <_strtod_l+0x8b8>
 800c026:	696b      	ldr	r3, [r5, #20]
 800c028:	b913      	cbnz	r3, 800c030 <_strtod_l+0x7d0>
 800c02a:	692b      	ldr	r3, [r5, #16]
 800c02c:	2b01      	cmp	r3, #1
 800c02e:	dd73      	ble.n	800c118 <_strtod_l+0x8b8>
 800c030:	4629      	mov	r1, r5
 800c032:	2201      	movs	r2, #1
 800c034:	4620      	mov	r0, r4
 800c036:	f7ff f9a3 	bl	800b380 <__lshift>
 800c03a:	4659      	mov	r1, fp
 800c03c:	4605      	mov	r5, r0
 800c03e:	f7ff fa0b 	bl	800b458 <__mcmp>
 800c042:	2800      	cmp	r0, #0
 800c044:	dd68      	ble.n	800c118 <_strtod_l+0x8b8>
 800c046:	9904      	ldr	r1, [sp, #16]
 800c048:	4a54      	ldr	r2, [pc, #336]	; (800c19c <_strtod_l+0x93c>)
 800c04a:	464b      	mov	r3, r9
 800c04c:	2900      	cmp	r1, #0
 800c04e:	f000 8084 	beq.w	800c15a <_strtod_l+0x8fa>
 800c052:	ea02 0109 	and.w	r1, r2, r9
 800c056:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c05a:	dc7e      	bgt.n	800c15a <_strtod_l+0x8fa>
 800c05c:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c060:	f77f aeb3 	ble.w	800bdca <_strtod_l+0x56a>
 800c064:	4b4e      	ldr	r3, [pc, #312]	; (800c1a0 <_strtod_l+0x940>)
 800c066:	4640      	mov	r0, r8
 800c068:	4649      	mov	r1, r9
 800c06a:	2200      	movs	r2, #0
 800c06c:	f7f4 faf4 	bl	8000658 <__aeabi_dmul>
 800c070:	4b4a      	ldr	r3, [pc, #296]	; (800c19c <_strtod_l+0x93c>)
 800c072:	400b      	ands	r3, r1
 800c074:	4680      	mov	r8, r0
 800c076:	4689      	mov	r9, r1
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f47f ae3f 	bne.w	800bcfc <_strtod_l+0x49c>
 800c07e:	2322      	movs	r3, #34	; 0x22
 800c080:	6023      	str	r3, [r4, #0]
 800c082:	e63b      	b.n	800bcfc <_strtod_l+0x49c>
 800c084:	f04f 32ff 	mov.w	r2, #4294967295
 800c088:	fa02 f303 	lsl.w	r3, r2, r3
 800c08c:	ea03 0808 	and.w	r8, r3, r8
 800c090:	e6e8      	b.n	800be64 <_strtod_l+0x604>
 800c092:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800c096:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800c09a:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800c09e:	36e2      	adds	r6, #226	; 0xe2
 800c0a0:	fa01 f306 	lsl.w	r3, r1, r6
 800c0a4:	e9cd 310d 	strd	r3, r1, [sp, #52]	; 0x34
 800c0a8:	e748      	b.n	800bf3c <_strtod_l+0x6dc>
 800c0aa:	2100      	movs	r1, #0
 800c0ac:	2301      	movs	r3, #1
 800c0ae:	e9cd 130d 	strd	r1, r3, [sp, #52]	; 0x34
 800c0b2:	e743      	b.n	800bf3c <_strtod_l+0x6dc>
 800c0b4:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c0b6:	4632      	mov	r2, r6
 800c0b8:	4620      	mov	r0, r4
 800c0ba:	f7ff f961 	bl	800b380 <__lshift>
 800c0be:	9016      	str	r0, [sp, #88]	; 0x58
 800c0c0:	2800      	cmp	r0, #0
 800c0c2:	f47f af6b 	bne.w	800bf9c <_strtod_l+0x73c>
 800c0c6:	e60f      	b.n	800bce8 <_strtod_l+0x488>
 800c0c8:	46ca      	mov	sl, r9
 800c0ca:	d171      	bne.n	800c1b0 <_strtod_l+0x950>
 800c0cc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c0ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c0d2:	b352      	cbz	r2, 800c12a <_strtod_l+0x8ca>
 800c0d4:	4a33      	ldr	r2, [pc, #204]	; (800c1a4 <_strtod_l+0x944>)
 800c0d6:	4293      	cmp	r3, r2
 800c0d8:	d12a      	bne.n	800c130 <_strtod_l+0x8d0>
 800c0da:	9b04      	ldr	r3, [sp, #16]
 800c0dc:	4641      	mov	r1, r8
 800c0de:	b1fb      	cbz	r3, 800c120 <_strtod_l+0x8c0>
 800c0e0:	4b2e      	ldr	r3, [pc, #184]	; (800c19c <_strtod_l+0x93c>)
 800c0e2:	ea09 0303 	and.w	r3, r9, r3
 800c0e6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c0ea:	f04f 32ff 	mov.w	r2, #4294967295
 800c0ee:	d81a      	bhi.n	800c126 <_strtod_l+0x8c6>
 800c0f0:	0d1b      	lsrs	r3, r3, #20
 800c0f2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c0f6:	fa02 f303 	lsl.w	r3, r2, r3
 800c0fa:	4299      	cmp	r1, r3
 800c0fc:	d118      	bne.n	800c130 <_strtod_l+0x8d0>
 800c0fe:	4b2a      	ldr	r3, [pc, #168]	; (800c1a8 <_strtod_l+0x948>)
 800c100:	459a      	cmp	sl, r3
 800c102:	d102      	bne.n	800c10a <_strtod_l+0x8aa>
 800c104:	3101      	adds	r1, #1
 800c106:	f43f adef 	beq.w	800bce8 <_strtod_l+0x488>
 800c10a:	4b24      	ldr	r3, [pc, #144]	; (800c19c <_strtod_l+0x93c>)
 800c10c:	ea0a 0303 	and.w	r3, sl, r3
 800c110:	f503 1980 	add.w	r9, r3, #1048576	; 0x100000
 800c114:	f04f 0800 	mov.w	r8, #0
 800c118:	9b04      	ldr	r3, [sp, #16]
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d1a2      	bne.n	800c064 <_strtod_l+0x804>
 800c11e:	e5ed      	b.n	800bcfc <_strtod_l+0x49c>
 800c120:	f04f 33ff 	mov.w	r3, #4294967295
 800c124:	e7e9      	b.n	800c0fa <_strtod_l+0x89a>
 800c126:	4613      	mov	r3, r2
 800c128:	e7e7      	b.n	800c0fa <_strtod_l+0x89a>
 800c12a:	ea53 0308 	orrs.w	r3, r3, r8
 800c12e:	d08a      	beq.n	800c046 <_strtod_l+0x7e6>
 800c130:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c132:	b1e3      	cbz	r3, 800c16e <_strtod_l+0x90e>
 800c134:	ea13 0f0a 	tst.w	r3, sl
 800c138:	d0ee      	beq.n	800c118 <_strtod_l+0x8b8>
 800c13a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c13c:	9a04      	ldr	r2, [sp, #16]
 800c13e:	4640      	mov	r0, r8
 800c140:	4649      	mov	r1, r9
 800c142:	b1c3      	cbz	r3, 800c176 <_strtod_l+0x916>
 800c144:	f7ff fb6f 	bl	800b826 <sulp>
 800c148:	4602      	mov	r2, r0
 800c14a:	460b      	mov	r3, r1
 800c14c:	ec51 0b18 	vmov	r0, r1, d8
 800c150:	f7f4 f8cc 	bl	80002ec <__adddf3>
 800c154:	4680      	mov	r8, r0
 800c156:	4689      	mov	r9, r1
 800c158:	e7de      	b.n	800c118 <_strtod_l+0x8b8>
 800c15a:	4013      	ands	r3, r2
 800c15c:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c160:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 800c164:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 800c168:	f04f 38ff 	mov.w	r8, #4294967295
 800c16c:	e7d4      	b.n	800c118 <_strtod_l+0x8b8>
 800c16e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800c170:	ea13 0f08 	tst.w	r3, r8
 800c174:	e7e0      	b.n	800c138 <_strtod_l+0x8d8>
 800c176:	f7ff fb56 	bl	800b826 <sulp>
 800c17a:	4602      	mov	r2, r0
 800c17c:	460b      	mov	r3, r1
 800c17e:	ec51 0b18 	vmov	r0, r1, d8
 800c182:	f7f4 f8b1 	bl	80002e8 <__aeabi_dsub>
 800c186:	2200      	movs	r2, #0
 800c188:	2300      	movs	r3, #0
 800c18a:	4680      	mov	r8, r0
 800c18c:	4689      	mov	r9, r1
 800c18e:	f7f4 fccb 	bl	8000b28 <__aeabi_dcmpeq>
 800c192:	2800      	cmp	r0, #0
 800c194:	d0c0      	beq.n	800c118 <_strtod_l+0x8b8>
 800c196:	e618      	b.n	800bdca <_strtod_l+0x56a>
 800c198:	fffffc02 	.word	0xfffffc02
 800c19c:	7ff00000 	.word	0x7ff00000
 800c1a0:	39500000 	.word	0x39500000
 800c1a4:	000fffff 	.word	0x000fffff
 800c1a8:	7fefffff 	.word	0x7fefffff
 800c1ac:	0800da18 	.word	0x0800da18
 800c1b0:	4659      	mov	r1, fp
 800c1b2:	4628      	mov	r0, r5
 800c1b4:	f7ff fac0 	bl	800b738 <__ratio>
 800c1b8:	ec57 6b10 	vmov	r6, r7, d0
 800c1bc:	ee10 0a10 	vmov	r0, s0
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c1c6:	4639      	mov	r1, r7
 800c1c8:	f7f4 fcc2 	bl	8000b50 <__aeabi_dcmple>
 800c1cc:	2800      	cmp	r0, #0
 800c1ce:	d071      	beq.n	800c2b4 <_strtod_l+0xa54>
 800c1d0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d17c      	bne.n	800c2d0 <_strtod_l+0xa70>
 800c1d6:	f1b8 0f00 	cmp.w	r8, #0
 800c1da:	d15a      	bne.n	800c292 <_strtod_l+0xa32>
 800c1dc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d15d      	bne.n	800c2a0 <_strtod_l+0xa40>
 800c1e4:	4b90      	ldr	r3, [pc, #576]	; (800c428 <_strtod_l+0xbc8>)
 800c1e6:	2200      	movs	r2, #0
 800c1e8:	4630      	mov	r0, r6
 800c1ea:	4639      	mov	r1, r7
 800c1ec:	f7f4 fca6 	bl	8000b3c <__aeabi_dcmplt>
 800c1f0:	2800      	cmp	r0, #0
 800c1f2:	d15c      	bne.n	800c2ae <_strtod_l+0xa4e>
 800c1f4:	4630      	mov	r0, r6
 800c1f6:	4639      	mov	r1, r7
 800c1f8:	4b8c      	ldr	r3, [pc, #560]	; (800c42c <_strtod_l+0xbcc>)
 800c1fa:	2200      	movs	r2, #0
 800c1fc:	f7f4 fa2c 	bl	8000658 <__aeabi_dmul>
 800c200:	4606      	mov	r6, r0
 800c202:	460f      	mov	r7, r1
 800c204:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800c208:	9606      	str	r6, [sp, #24]
 800c20a:	9307      	str	r3, [sp, #28]
 800c20c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c210:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c214:	4b86      	ldr	r3, [pc, #536]	; (800c430 <_strtod_l+0xbd0>)
 800c216:	ea0a 0303 	and.w	r3, sl, r3
 800c21a:	930d      	str	r3, [sp, #52]	; 0x34
 800c21c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c21e:	4b85      	ldr	r3, [pc, #532]	; (800c434 <_strtod_l+0xbd4>)
 800c220:	429a      	cmp	r2, r3
 800c222:	f040 8090 	bne.w	800c346 <_strtod_l+0xae6>
 800c226:	f1aa 7954 	sub.w	r9, sl, #55574528	; 0x3500000
 800c22a:	ec49 8b10 	vmov	d0, r8, r9
 800c22e:	f7ff f9b9 	bl	800b5a4 <__ulp>
 800c232:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c236:	ec51 0b10 	vmov	r0, r1, d0
 800c23a:	f7f4 fa0d 	bl	8000658 <__aeabi_dmul>
 800c23e:	4642      	mov	r2, r8
 800c240:	464b      	mov	r3, r9
 800c242:	f7f4 f853 	bl	80002ec <__adddf3>
 800c246:	460b      	mov	r3, r1
 800c248:	4979      	ldr	r1, [pc, #484]	; (800c430 <_strtod_l+0xbd0>)
 800c24a:	4a7b      	ldr	r2, [pc, #492]	; (800c438 <_strtod_l+0xbd8>)
 800c24c:	4019      	ands	r1, r3
 800c24e:	4291      	cmp	r1, r2
 800c250:	4680      	mov	r8, r0
 800c252:	d944      	bls.n	800c2de <_strtod_l+0xa7e>
 800c254:	ee18 2a90 	vmov	r2, s17
 800c258:	4b78      	ldr	r3, [pc, #480]	; (800c43c <_strtod_l+0xbdc>)
 800c25a:	429a      	cmp	r2, r3
 800c25c:	d104      	bne.n	800c268 <_strtod_l+0xa08>
 800c25e:	ee18 3a10 	vmov	r3, s16
 800c262:	3301      	adds	r3, #1
 800c264:	f43f ad40 	beq.w	800bce8 <_strtod_l+0x488>
 800c268:	f8df 91d0 	ldr.w	r9, [pc, #464]	; 800c43c <_strtod_l+0xbdc>
 800c26c:	f04f 38ff 	mov.w	r8, #4294967295
 800c270:	9916      	ldr	r1, [sp, #88]	; 0x58
 800c272:	4620      	mov	r0, r4
 800c274:	f7fe fe6a 	bl	800af4c <_Bfree>
 800c278:	9905      	ldr	r1, [sp, #20]
 800c27a:	4620      	mov	r0, r4
 800c27c:	f7fe fe66 	bl	800af4c <_Bfree>
 800c280:	4659      	mov	r1, fp
 800c282:	4620      	mov	r0, r4
 800c284:	f7fe fe62 	bl	800af4c <_Bfree>
 800c288:	4629      	mov	r1, r5
 800c28a:	4620      	mov	r0, r4
 800c28c:	f7fe fe5e 	bl	800af4c <_Bfree>
 800c290:	e609      	b.n	800bea6 <_strtod_l+0x646>
 800c292:	f1b8 0f01 	cmp.w	r8, #1
 800c296:	d103      	bne.n	800c2a0 <_strtod_l+0xa40>
 800c298:	f1b9 0f00 	cmp.w	r9, #0
 800c29c:	f43f ad95 	beq.w	800bdca <_strtod_l+0x56a>
 800c2a0:	ed9f 7b55 	vldr	d7, [pc, #340]	; 800c3f8 <_strtod_l+0xb98>
 800c2a4:	4f60      	ldr	r7, [pc, #384]	; (800c428 <_strtod_l+0xbc8>)
 800c2a6:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c2aa:	2600      	movs	r6, #0
 800c2ac:	e7ae      	b.n	800c20c <_strtod_l+0x9ac>
 800c2ae:	4f5f      	ldr	r7, [pc, #380]	; (800c42c <_strtod_l+0xbcc>)
 800c2b0:	2600      	movs	r6, #0
 800c2b2:	e7a7      	b.n	800c204 <_strtod_l+0x9a4>
 800c2b4:	4b5d      	ldr	r3, [pc, #372]	; (800c42c <_strtod_l+0xbcc>)
 800c2b6:	4630      	mov	r0, r6
 800c2b8:	4639      	mov	r1, r7
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	f7f4 f9cc 	bl	8000658 <__aeabi_dmul>
 800c2c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c2c2:	4606      	mov	r6, r0
 800c2c4:	460f      	mov	r7, r1
 800c2c6:	2b00      	cmp	r3, #0
 800c2c8:	d09c      	beq.n	800c204 <_strtod_l+0x9a4>
 800c2ca:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800c2ce:	e79d      	b.n	800c20c <_strtod_l+0x9ac>
 800c2d0:	ed9f 7b4b 	vldr	d7, [pc, #300]	; 800c400 <_strtod_l+0xba0>
 800c2d4:	ed8d 7b06 	vstr	d7, [sp, #24]
 800c2d8:	ec57 6b17 	vmov	r6, r7, d7
 800c2dc:	e796      	b.n	800c20c <_strtod_l+0x9ac>
 800c2de:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 800c2e2:	9b04      	ldr	r3, [sp, #16]
 800c2e4:	46ca      	mov	sl, r9
 800c2e6:	2b00      	cmp	r3, #0
 800c2e8:	d1c2      	bne.n	800c270 <_strtod_l+0xa10>
 800c2ea:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c2ee:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c2f0:	0d1b      	lsrs	r3, r3, #20
 800c2f2:	051b      	lsls	r3, r3, #20
 800c2f4:	429a      	cmp	r2, r3
 800c2f6:	d1bb      	bne.n	800c270 <_strtod_l+0xa10>
 800c2f8:	4630      	mov	r0, r6
 800c2fa:	4639      	mov	r1, r7
 800c2fc:	f7f4 fd0c 	bl	8000d18 <__aeabi_d2lz>
 800c300:	f7f4 f97c 	bl	80005fc <__aeabi_l2d>
 800c304:	4602      	mov	r2, r0
 800c306:	460b      	mov	r3, r1
 800c308:	4630      	mov	r0, r6
 800c30a:	4639      	mov	r1, r7
 800c30c:	f7f3 ffec 	bl	80002e8 <__aeabi_dsub>
 800c310:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c312:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c316:	ea43 0308 	orr.w	r3, r3, r8
 800c31a:	4313      	orrs	r3, r2
 800c31c:	4606      	mov	r6, r0
 800c31e:	460f      	mov	r7, r1
 800c320:	d054      	beq.n	800c3cc <_strtod_l+0xb6c>
 800c322:	a339      	add	r3, pc, #228	; (adr r3, 800c408 <_strtod_l+0xba8>)
 800c324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c328:	f7f4 fc08 	bl	8000b3c <__aeabi_dcmplt>
 800c32c:	2800      	cmp	r0, #0
 800c32e:	f47f ace5 	bne.w	800bcfc <_strtod_l+0x49c>
 800c332:	a337      	add	r3, pc, #220	; (adr r3, 800c410 <_strtod_l+0xbb0>)
 800c334:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c338:	4630      	mov	r0, r6
 800c33a:	4639      	mov	r1, r7
 800c33c:	f7f4 fc1c 	bl	8000b78 <__aeabi_dcmpgt>
 800c340:	2800      	cmp	r0, #0
 800c342:	d095      	beq.n	800c270 <_strtod_l+0xa10>
 800c344:	e4da      	b.n	800bcfc <_strtod_l+0x49c>
 800c346:	9b04      	ldr	r3, [sp, #16]
 800c348:	b333      	cbz	r3, 800c398 <_strtod_l+0xb38>
 800c34a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c34c:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c350:	d822      	bhi.n	800c398 <_strtod_l+0xb38>
 800c352:	a331      	add	r3, pc, #196	; (adr r3, 800c418 <_strtod_l+0xbb8>)
 800c354:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c358:	4630      	mov	r0, r6
 800c35a:	4639      	mov	r1, r7
 800c35c:	f7f4 fbf8 	bl	8000b50 <__aeabi_dcmple>
 800c360:	b1a0      	cbz	r0, 800c38c <_strtod_l+0xb2c>
 800c362:	4639      	mov	r1, r7
 800c364:	4630      	mov	r0, r6
 800c366:	f7f4 fc4f 	bl	8000c08 <__aeabi_d2uiz>
 800c36a:	2801      	cmp	r0, #1
 800c36c:	bf38      	it	cc
 800c36e:	2001      	movcc	r0, #1
 800c370:	f7f4 f8f8 	bl	8000564 <__aeabi_ui2d>
 800c374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c376:	4606      	mov	r6, r0
 800c378:	460f      	mov	r7, r1
 800c37a:	bb23      	cbnz	r3, 800c3c6 <_strtod_l+0xb66>
 800c37c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c380:	9010      	str	r0, [sp, #64]	; 0x40
 800c382:	9311      	str	r3, [sp, #68]	; 0x44
 800c384:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c388:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
 800c38c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800c38e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c390:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c394:	1a9b      	subs	r3, r3, r2
 800c396:	930f      	str	r3, [sp, #60]	; 0x3c
 800c398:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c39c:	eeb0 0a48 	vmov.f32	s0, s16
 800c3a0:	eef0 0a68 	vmov.f32	s1, s17
 800c3a4:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800c3a8:	f7ff f8fc 	bl	800b5a4 <__ulp>
 800c3ac:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	; 0x38
 800c3b0:	ec53 2b10 	vmov	r2, r3, d0
 800c3b4:	f7f4 f950 	bl	8000658 <__aeabi_dmul>
 800c3b8:	ec53 2b18 	vmov	r2, r3, d8
 800c3bc:	f7f3 ff96 	bl	80002ec <__adddf3>
 800c3c0:	4680      	mov	r8, r0
 800c3c2:	4689      	mov	r9, r1
 800c3c4:	e78d      	b.n	800c2e2 <_strtod_l+0xa82>
 800c3c6:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800c3ca:	e7db      	b.n	800c384 <_strtod_l+0xb24>
 800c3cc:	a314      	add	r3, pc, #80	; (adr r3, 800c420 <_strtod_l+0xbc0>)
 800c3ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d2:	f7f4 fbb3 	bl	8000b3c <__aeabi_dcmplt>
 800c3d6:	e7b3      	b.n	800c340 <_strtod_l+0xae0>
 800c3d8:	2300      	movs	r3, #0
 800c3da:	930a      	str	r3, [sp, #40]	; 0x28
 800c3dc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c3de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c3e0:	6013      	str	r3, [r2, #0]
 800c3e2:	f7ff ba7c 	b.w	800b8de <_strtod_l+0x7e>
 800c3e6:	2a65      	cmp	r2, #101	; 0x65
 800c3e8:	f43f ab75 	beq.w	800bad6 <_strtod_l+0x276>
 800c3ec:	2a45      	cmp	r2, #69	; 0x45
 800c3ee:	f43f ab72 	beq.w	800bad6 <_strtod_l+0x276>
 800c3f2:	2301      	movs	r3, #1
 800c3f4:	f7ff bbaa 	b.w	800bb4c <_strtod_l+0x2ec>
 800c3f8:	00000000 	.word	0x00000000
 800c3fc:	bff00000 	.word	0xbff00000
 800c400:	00000000 	.word	0x00000000
 800c404:	3ff00000 	.word	0x3ff00000
 800c408:	94a03595 	.word	0x94a03595
 800c40c:	3fdfffff 	.word	0x3fdfffff
 800c410:	35afe535 	.word	0x35afe535
 800c414:	3fe00000 	.word	0x3fe00000
 800c418:	ffc00000 	.word	0xffc00000
 800c41c:	41dfffff 	.word	0x41dfffff
 800c420:	94a03595 	.word	0x94a03595
 800c424:	3fcfffff 	.word	0x3fcfffff
 800c428:	3ff00000 	.word	0x3ff00000
 800c42c:	3fe00000 	.word	0x3fe00000
 800c430:	7ff00000 	.word	0x7ff00000
 800c434:	7fe00000 	.word	0x7fe00000
 800c438:	7c9fffff 	.word	0x7c9fffff
 800c43c:	7fefffff 	.word	0x7fefffff

0800c440 <_strtod_r>:
 800c440:	4b01      	ldr	r3, [pc, #4]	; (800c448 <_strtod_r+0x8>)
 800c442:	f7ff ba0d 	b.w	800b860 <_strtod_l>
 800c446:	bf00      	nop
 800c448:	2000007c 	.word	0x2000007c

0800c44c <_strtol_l.constprop.0>:
 800c44c:	2b01      	cmp	r3, #1
 800c44e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c452:	d001      	beq.n	800c458 <_strtol_l.constprop.0+0xc>
 800c454:	2b24      	cmp	r3, #36	; 0x24
 800c456:	d906      	bls.n	800c466 <_strtol_l.constprop.0+0x1a>
 800c458:	f7fd fd88 	bl	8009f6c <__errno>
 800c45c:	2316      	movs	r3, #22
 800c45e:	6003      	str	r3, [r0, #0]
 800c460:	2000      	movs	r0, #0
 800c462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c466:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c54c <_strtol_l.constprop.0+0x100>
 800c46a:	460d      	mov	r5, r1
 800c46c:	462e      	mov	r6, r5
 800c46e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c472:	f81c 7004 	ldrb.w	r7, [ip, r4]
 800c476:	f017 0708 	ands.w	r7, r7, #8
 800c47a:	d1f7      	bne.n	800c46c <_strtol_l.constprop.0+0x20>
 800c47c:	2c2d      	cmp	r4, #45	; 0x2d
 800c47e:	d132      	bne.n	800c4e6 <_strtol_l.constprop.0+0x9a>
 800c480:	782c      	ldrb	r4, [r5, #0]
 800c482:	2701      	movs	r7, #1
 800c484:	1cb5      	adds	r5, r6, #2
 800c486:	2b00      	cmp	r3, #0
 800c488:	d05b      	beq.n	800c542 <_strtol_l.constprop.0+0xf6>
 800c48a:	2b10      	cmp	r3, #16
 800c48c:	d109      	bne.n	800c4a2 <_strtol_l.constprop.0+0x56>
 800c48e:	2c30      	cmp	r4, #48	; 0x30
 800c490:	d107      	bne.n	800c4a2 <_strtol_l.constprop.0+0x56>
 800c492:	782c      	ldrb	r4, [r5, #0]
 800c494:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c498:	2c58      	cmp	r4, #88	; 0x58
 800c49a:	d14d      	bne.n	800c538 <_strtol_l.constprop.0+0xec>
 800c49c:	786c      	ldrb	r4, [r5, #1]
 800c49e:	2310      	movs	r3, #16
 800c4a0:	3502      	adds	r5, #2
 800c4a2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c4a6:	f108 38ff 	add.w	r8, r8, #4294967295
 800c4aa:	f04f 0e00 	mov.w	lr, #0
 800c4ae:	fbb8 f9f3 	udiv	r9, r8, r3
 800c4b2:	4676      	mov	r6, lr
 800c4b4:	fb03 8a19 	mls	sl, r3, r9, r8
 800c4b8:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800c4bc:	f1bc 0f09 	cmp.w	ip, #9
 800c4c0:	d816      	bhi.n	800c4f0 <_strtol_l.constprop.0+0xa4>
 800c4c2:	4664      	mov	r4, ip
 800c4c4:	42a3      	cmp	r3, r4
 800c4c6:	dd24      	ble.n	800c512 <_strtol_l.constprop.0+0xc6>
 800c4c8:	f1be 3fff 	cmp.w	lr, #4294967295
 800c4cc:	d008      	beq.n	800c4e0 <_strtol_l.constprop.0+0x94>
 800c4ce:	45b1      	cmp	r9, r6
 800c4d0:	d31c      	bcc.n	800c50c <_strtol_l.constprop.0+0xc0>
 800c4d2:	d101      	bne.n	800c4d8 <_strtol_l.constprop.0+0x8c>
 800c4d4:	45a2      	cmp	sl, r4
 800c4d6:	db19      	blt.n	800c50c <_strtol_l.constprop.0+0xc0>
 800c4d8:	fb06 4603 	mla	r6, r6, r3, r4
 800c4dc:	f04f 0e01 	mov.w	lr, #1
 800c4e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c4e4:	e7e8      	b.n	800c4b8 <_strtol_l.constprop.0+0x6c>
 800c4e6:	2c2b      	cmp	r4, #43	; 0x2b
 800c4e8:	bf04      	itt	eq
 800c4ea:	782c      	ldrbeq	r4, [r5, #0]
 800c4ec:	1cb5      	addeq	r5, r6, #2
 800c4ee:	e7ca      	b.n	800c486 <_strtol_l.constprop.0+0x3a>
 800c4f0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800c4f4:	f1bc 0f19 	cmp.w	ip, #25
 800c4f8:	d801      	bhi.n	800c4fe <_strtol_l.constprop.0+0xb2>
 800c4fa:	3c37      	subs	r4, #55	; 0x37
 800c4fc:	e7e2      	b.n	800c4c4 <_strtol_l.constprop.0+0x78>
 800c4fe:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800c502:	f1bc 0f19 	cmp.w	ip, #25
 800c506:	d804      	bhi.n	800c512 <_strtol_l.constprop.0+0xc6>
 800c508:	3c57      	subs	r4, #87	; 0x57
 800c50a:	e7db      	b.n	800c4c4 <_strtol_l.constprop.0+0x78>
 800c50c:	f04f 3eff 	mov.w	lr, #4294967295
 800c510:	e7e6      	b.n	800c4e0 <_strtol_l.constprop.0+0x94>
 800c512:	f1be 3fff 	cmp.w	lr, #4294967295
 800c516:	d105      	bne.n	800c524 <_strtol_l.constprop.0+0xd8>
 800c518:	2322      	movs	r3, #34	; 0x22
 800c51a:	6003      	str	r3, [r0, #0]
 800c51c:	4646      	mov	r6, r8
 800c51e:	b942      	cbnz	r2, 800c532 <_strtol_l.constprop.0+0xe6>
 800c520:	4630      	mov	r0, r6
 800c522:	e79e      	b.n	800c462 <_strtol_l.constprop.0+0x16>
 800c524:	b107      	cbz	r7, 800c528 <_strtol_l.constprop.0+0xdc>
 800c526:	4276      	negs	r6, r6
 800c528:	2a00      	cmp	r2, #0
 800c52a:	d0f9      	beq.n	800c520 <_strtol_l.constprop.0+0xd4>
 800c52c:	f1be 0f00 	cmp.w	lr, #0
 800c530:	d000      	beq.n	800c534 <_strtol_l.constprop.0+0xe8>
 800c532:	1e69      	subs	r1, r5, #1
 800c534:	6011      	str	r1, [r2, #0]
 800c536:	e7f3      	b.n	800c520 <_strtol_l.constprop.0+0xd4>
 800c538:	2430      	movs	r4, #48	; 0x30
 800c53a:	2b00      	cmp	r3, #0
 800c53c:	d1b1      	bne.n	800c4a2 <_strtol_l.constprop.0+0x56>
 800c53e:	2308      	movs	r3, #8
 800c540:	e7af      	b.n	800c4a2 <_strtol_l.constprop.0+0x56>
 800c542:	2c30      	cmp	r4, #48	; 0x30
 800c544:	d0a5      	beq.n	800c492 <_strtol_l.constprop.0+0x46>
 800c546:	230a      	movs	r3, #10
 800c548:	e7ab      	b.n	800c4a2 <_strtol_l.constprop.0+0x56>
 800c54a:	bf00      	nop
 800c54c:	0800da41 	.word	0x0800da41

0800c550 <_strtol_r>:
 800c550:	f7ff bf7c 	b.w	800c44c <_strtol_l.constprop.0>

0800c554 <__ssputs_r>:
 800c554:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c558:	688e      	ldr	r6, [r1, #8]
 800c55a:	461f      	mov	r7, r3
 800c55c:	42be      	cmp	r6, r7
 800c55e:	680b      	ldr	r3, [r1, #0]
 800c560:	4682      	mov	sl, r0
 800c562:	460c      	mov	r4, r1
 800c564:	4690      	mov	r8, r2
 800c566:	d82c      	bhi.n	800c5c2 <__ssputs_r+0x6e>
 800c568:	898a      	ldrh	r2, [r1, #12]
 800c56a:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c56e:	d026      	beq.n	800c5be <__ssputs_r+0x6a>
 800c570:	6965      	ldr	r5, [r4, #20]
 800c572:	6909      	ldr	r1, [r1, #16]
 800c574:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c578:	eba3 0901 	sub.w	r9, r3, r1
 800c57c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c580:	1c7b      	adds	r3, r7, #1
 800c582:	444b      	add	r3, r9
 800c584:	106d      	asrs	r5, r5, #1
 800c586:	429d      	cmp	r5, r3
 800c588:	bf38      	it	cc
 800c58a:	461d      	movcc	r5, r3
 800c58c:	0553      	lsls	r3, r2, #21
 800c58e:	d527      	bpl.n	800c5e0 <__ssputs_r+0x8c>
 800c590:	4629      	mov	r1, r5
 800c592:	f7fe fc0f 	bl	800adb4 <_malloc_r>
 800c596:	4606      	mov	r6, r0
 800c598:	b360      	cbz	r0, 800c5f4 <__ssputs_r+0xa0>
 800c59a:	6921      	ldr	r1, [r4, #16]
 800c59c:	464a      	mov	r2, r9
 800c59e:	f000 fa1b 	bl	800c9d8 <memcpy>
 800c5a2:	89a3      	ldrh	r3, [r4, #12]
 800c5a4:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c5a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c5ac:	81a3      	strh	r3, [r4, #12]
 800c5ae:	6126      	str	r6, [r4, #16]
 800c5b0:	6165      	str	r5, [r4, #20]
 800c5b2:	444e      	add	r6, r9
 800c5b4:	eba5 0509 	sub.w	r5, r5, r9
 800c5b8:	6026      	str	r6, [r4, #0]
 800c5ba:	60a5      	str	r5, [r4, #8]
 800c5bc:	463e      	mov	r6, r7
 800c5be:	42be      	cmp	r6, r7
 800c5c0:	d900      	bls.n	800c5c4 <__ssputs_r+0x70>
 800c5c2:	463e      	mov	r6, r7
 800c5c4:	6820      	ldr	r0, [r4, #0]
 800c5c6:	4632      	mov	r2, r6
 800c5c8:	4641      	mov	r1, r8
 800c5ca:	f000 f9c9 	bl	800c960 <memmove>
 800c5ce:	68a3      	ldr	r3, [r4, #8]
 800c5d0:	1b9b      	subs	r3, r3, r6
 800c5d2:	60a3      	str	r3, [r4, #8]
 800c5d4:	6823      	ldr	r3, [r4, #0]
 800c5d6:	4433      	add	r3, r6
 800c5d8:	6023      	str	r3, [r4, #0]
 800c5da:	2000      	movs	r0, #0
 800c5dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c5e0:	462a      	mov	r2, r5
 800c5e2:	f000 fdae 	bl	800d142 <_realloc_r>
 800c5e6:	4606      	mov	r6, r0
 800c5e8:	2800      	cmp	r0, #0
 800c5ea:	d1e0      	bne.n	800c5ae <__ssputs_r+0x5a>
 800c5ec:	6921      	ldr	r1, [r4, #16]
 800c5ee:	4650      	mov	r0, sl
 800c5f0:	f7fe fb6c 	bl	800accc <_free_r>
 800c5f4:	230c      	movs	r3, #12
 800c5f6:	f8ca 3000 	str.w	r3, [sl]
 800c5fa:	89a3      	ldrh	r3, [r4, #12]
 800c5fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c600:	81a3      	strh	r3, [r4, #12]
 800c602:	f04f 30ff 	mov.w	r0, #4294967295
 800c606:	e7e9      	b.n	800c5dc <__ssputs_r+0x88>

0800c608 <_svfiprintf_r>:
 800c608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c60c:	4698      	mov	r8, r3
 800c60e:	898b      	ldrh	r3, [r1, #12]
 800c610:	061b      	lsls	r3, r3, #24
 800c612:	b09d      	sub	sp, #116	; 0x74
 800c614:	4607      	mov	r7, r0
 800c616:	460d      	mov	r5, r1
 800c618:	4614      	mov	r4, r2
 800c61a:	d50e      	bpl.n	800c63a <_svfiprintf_r+0x32>
 800c61c:	690b      	ldr	r3, [r1, #16]
 800c61e:	b963      	cbnz	r3, 800c63a <_svfiprintf_r+0x32>
 800c620:	2140      	movs	r1, #64	; 0x40
 800c622:	f7fe fbc7 	bl	800adb4 <_malloc_r>
 800c626:	6028      	str	r0, [r5, #0]
 800c628:	6128      	str	r0, [r5, #16]
 800c62a:	b920      	cbnz	r0, 800c636 <_svfiprintf_r+0x2e>
 800c62c:	230c      	movs	r3, #12
 800c62e:	603b      	str	r3, [r7, #0]
 800c630:	f04f 30ff 	mov.w	r0, #4294967295
 800c634:	e0d0      	b.n	800c7d8 <_svfiprintf_r+0x1d0>
 800c636:	2340      	movs	r3, #64	; 0x40
 800c638:	616b      	str	r3, [r5, #20]
 800c63a:	2300      	movs	r3, #0
 800c63c:	9309      	str	r3, [sp, #36]	; 0x24
 800c63e:	2320      	movs	r3, #32
 800c640:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c644:	f8cd 800c 	str.w	r8, [sp, #12]
 800c648:	2330      	movs	r3, #48	; 0x30
 800c64a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c7f0 <_svfiprintf_r+0x1e8>
 800c64e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c652:	f04f 0901 	mov.w	r9, #1
 800c656:	4623      	mov	r3, r4
 800c658:	469a      	mov	sl, r3
 800c65a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c65e:	b10a      	cbz	r2, 800c664 <_svfiprintf_r+0x5c>
 800c660:	2a25      	cmp	r2, #37	; 0x25
 800c662:	d1f9      	bne.n	800c658 <_svfiprintf_r+0x50>
 800c664:	ebba 0b04 	subs.w	fp, sl, r4
 800c668:	d00b      	beq.n	800c682 <_svfiprintf_r+0x7a>
 800c66a:	465b      	mov	r3, fp
 800c66c:	4622      	mov	r2, r4
 800c66e:	4629      	mov	r1, r5
 800c670:	4638      	mov	r0, r7
 800c672:	f7ff ff6f 	bl	800c554 <__ssputs_r>
 800c676:	3001      	adds	r0, #1
 800c678:	f000 80a9 	beq.w	800c7ce <_svfiprintf_r+0x1c6>
 800c67c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c67e:	445a      	add	r2, fp
 800c680:	9209      	str	r2, [sp, #36]	; 0x24
 800c682:	f89a 3000 	ldrb.w	r3, [sl]
 800c686:	2b00      	cmp	r3, #0
 800c688:	f000 80a1 	beq.w	800c7ce <_svfiprintf_r+0x1c6>
 800c68c:	2300      	movs	r3, #0
 800c68e:	f04f 32ff 	mov.w	r2, #4294967295
 800c692:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c696:	f10a 0a01 	add.w	sl, sl, #1
 800c69a:	9304      	str	r3, [sp, #16]
 800c69c:	9307      	str	r3, [sp, #28]
 800c69e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c6a2:	931a      	str	r3, [sp, #104]	; 0x68
 800c6a4:	4654      	mov	r4, sl
 800c6a6:	2205      	movs	r2, #5
 800c6a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c6ac:	4850      	ldr	r0, [pc, #320]	; (800c7f0 <_svfiprintf_r+0x1e8>)
 800c6ae:	f7f3 fdbf 	bl	8000230 <memchr>
 800c6b2:	9a04      	ldr	r2, [sp, #16]
 800c6b4:	b9d8      	cbnz	r0, 800c6ee <_svfiprintf_r+0xe6>
 800c6b6:	06d0      	lsls	r0, r2, #27
 800c6b8:	bf44      	itt	mi
 800c6ba:	2320      	movmi	r3, #32
 800c6bc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6c0:	0711      	lsls	r1, r2, #28
 800c6c2:	bf44      	itt	mi
 800c6c4:	232b      	movmi	r3, #43	; 0x2b
 800c6c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c6ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c6ce:	2b2a      	cmp	r3, #42	; 0x2a
 800c6d0:	d015      	beq.n	800c6fe <_svfiprintf_r+0xf6>
 800c6d2:	9a07      	ldr	r2, [sp, #28]
 800c6d4:	4654      	mov	r4, sl
 800c6d6:	2000      	movs	r0, #0
 800c6d8:	f04f 0c0a 	mov.w	ip, #10
 800c6dc:	4621      	mov	r1, r4
 800c6de:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c6e2:	3b30      	subs	r3, #48	; 0x30
 800c6e4:	2b09      	cmp	r3, #9
 800c6e6:	d94d      	bls.n	800c784 <_svfiprintf_r+0x17c>
 800c6e8:	b1b0      	cbz	r0, 800c718 <_svfiprintf_r+0x110>
 800c6ea:	9207      	str	r2, [sp, #28]
 800c6ec:	e014      	b.n	800c718 <_svfiprintf_r+0x110>
 800c6ee:	eba0 0308 	sub.w	r3, r0, r8
 800c6f2:	fa09 f303 	lsl.w	r3, r9, r3
 800c6f6:	4313      	orrs	r3, r2
 800c6f8:	9304      	str	r3, [sp, #16]
 800c6fa:	46a2      	mov	sl, r4
 800c6fc:	e7d2      	b.n	800c6a4 <_svfiprintf_r+0x9c>
 800c6fe:	9b03      	ldr	r3, [sp, #12]
 800c700:	1d19      	adds	r1, r3, #4
 800c702:	681b      	ldr	r3, [r3, #0]
 800c704:	9103      	str	r1, [sp, #12]
 800c706:	2b00      	cmp	r3, #0
 800c708:	bfbb      	ittet	lt
 800c70a:	425b      	neglt	r3, r3
 800c70c:	f042 0202 	orrlt.w	r2, r2, #2
 800c710:	9307      	strge	r3, [sp, #28]
 800c712:	9307      	strlt	r3, [sp, #28]
 800c714:	bfb8      	it	lt
 800c716:	9204      	strlt	r2, [sp, #16]
 800c718:	7823      	ldrb	r3, [r4, #0]
 800c71a:	2b2e      	cmp	r3, #46	; 0x2e
 800c71c:	d10c      	bne.n	800c738 <_svfiprintf_r+0x130>
 800c71e:	7863      	ldrb	r3, [r4, #1]
 800c720:	2b2a      	cmp	r3, #42	; 0x2a
 800c722:	d134      	bne.n	800c78e <_svfiprintf_r+0x186>
 800c724:	9b03      	ldr	r3, [sp, #12]
 800c726:	1d1a      	adds	r2, r3, #4
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	9203      	str	r2, [sp, #12]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	bfb8      	it	lt
 800c730:	f04f 33ff 	movlt.w	r3, #4294967295
 800c734:	3402      	adds	r4, #2
 800c736:	9305      	str	r3, [sp, #20]
 800c738:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c800 <_svfiprintf_r+0x1f8>
 800c73c:	7821      	ldrb	r1, [r4, #0]
 800c73e:	2203      	movs	r2, #3
 800c740:	4650      	mov	r0, sl
 800c742:	f7f3 fd75 	bl	8000230 <memchr>
 800c746:	b138      	cbz	r0, 800c758 <_svfiprintf_r+0x150>
 800c748:	9b04      	ldr	r3, [sp, #16]
 800c74a:	eba0 000a 	sub.w	r0, r0, sl
 800c74e:	2240      	movs	r2, #64	; 0x40
 800c750:	4082      	lsls	r2, r0
 800c752:	4313      	orrs	r3, r2
 800c754:	3401      	adds	r4, #1
 800c756:	9304      	str	r3, [sp, #16]
 800c758:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c75c:	4825      	ldr	r0, [pc, #148]	; (800c7f4 <_svfiprintf_r+0x1ec>)
 800c75e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c762:	2206      	movs	r2, #6
 800c764:	f7f3 fd64 	bl	8000230 <memchr>
 800c768:	2800      	cmp	r0, #0
 800c76a:	d038      	beq.n	800c7de <_svfiprintf_r+0x1d6>
 800c76c:	4b22      	ldr	r3, [pc, #136]	; (800c7f8 <_svfiprintf_r+0x1f0>)
 800c76e:	bb1b      	cbnz	r3, 800c7b8 <_svfiprintf_r+0x1b0>
 800c770:	9b03      	ldr	r3, [sp, #12]
 800c772:	3307      	adds	r3, #7
 800c774:	f023 0307 	bic.w	r3, r3, #7
 800c778:	3308      	adds	r3, #8
 800c77a:	9303      	str	r3, [sp, #12]
 800c77c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c77e:	4433      	add	r3, r6
 800c780:	9309      	str	r3, [sp, #36]	; 0x24
 800c782:	e768      	b.n	800c656 <_svfiprintf_r+0x4e>
 800c784:	fb0c 3202 	mla	r2, ip, r2, r3
 800c788:	460c      	mov	r4, r1
 800c78a:	2001      	movs	r0, #1
 800c78c:	e7a6      	b.n	800c6dc <_svfiprintf_r+0xd4>
 800c78e:	2300      	movs	r3, #0
 800c790:	3401      	adds	r4, #1
 800c792:	9305      	str	r3, [sp, #20]
 800c794:	4619      	mov	r1, r3
 800c796:	f04f 0c0a 	mov.w	ip, #10
 800c79a:	4620      	mov	r0, r4
 800c79c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c7a0:	3a30      	subs	r2, #48	; 0x30
 800c7a2:	2a09      	cmp	r2, #9
 800c7a4:	d903      	bls.n	800c7ae <_svfiprintf_r+0x1a6>
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d0c6      	beq.n	800c738 <_svfiprintf_r+0x130>
 800c7aa:	9105      	str	r1, [sp, #20]
 800c7ac:	e7c4      	b.n	800c738 <_svfiprintf_r+0x130>
 800c7ae:	fb0c 2101 	mla	r1, ip, r1, r2
 800c7b2:	4604      	mov	r4, r0
 800c7b4:	2301      	movs	r3, #1
 800c7b6:	e7f0      	b.n	800c79a <_svfiprintf_r+0x192>
 800c7b8:	ab03      	add	r3, sp, #12
 800c7ba:	9300      	str	r3, [sp, #0]
 800c7bc:	462a      	mov	r2, r5
 800c7be:	4b0f      	ldr	r3, [pc, #60]	; (800c7fc <_svfiprintf_r+0x1f4>)
 800c7c0:	a904      	add	r1, sp, #16
 800c7c2:	4638      	mov	r0, r7
 800c7c4:	f7fc fc50 	bl	8009068 <_printf_float>
 800c7c8:	1c42      	adds	r2, r0, #1
 800c7ca:	4606      	mov	r6, r0
 800c7cc:	d1d6      	bne.n	800c77c <_svfiprintf_r+0x174>
 800c7ce:	89ab      	ldrh	r3, [r5, #12]
 800c7d0:	065b      	lsls	r3, r3, #25
 800c7d2:	f53f af2d 	bmi.w	800c630 <_svfiprintf_r+0x28>
 800c7d6:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c7d8:	b01d      	add	sp, #116	; 0x74
 800c7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7de:	ab03      	add	r3, sp, #12
 800c7e0:	9300      	str	r3, [sp, #0]
 800c7e2:	462a      	mov	r2, r5
 800c7e4:	4b05      	ldr	r3, [pc, #20]	; (800c7fc <_svfiprintf_r+0x1f4>)
 800c7e6:	a904      	add	r1, sp, #16
 800c7e8:	4638      	mov	r0, r7
 800c7ea:	f7fc fee1 	bl	80095b0 <_printf_i>
 800c7ee:	e7eb      	b.n	800c7c8 <_svfiprintf_r+0x1c0>
 800c7f0:	0800db41 	.word	0x0800db41
 800c7f4:	0800db4b 	.word	0x0800db4b
 800c7f8:	08009069 	.word	0x08009069
 800c7fc:	0800c555 	.word	0x0800c555
 800c800:	0800db47 	.word	0x0800db47

0800c804 <__sflush_r>:
 800c804:	898a      	ldrh	r2, [r1, #12]
 800c806:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c80a:	4605      	mov	r5, r0
 800c80c:	0710      	lsls	r0, r2, #28
 800c80e:	460c      	mov	r4, r1
 800c810:	d458      	bmi.n	800c8c4 <__sflush_r+0xc0>
 800c812:	684b      	ldr	r3, [r1, #4]
 800c814:	2b00      	cmp	r3, #0
 800c816:	dc05      	bgt.n	800c824 <__sflush_r+0x20>
 800c818:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c81a:	2b00      	cmp	r3, #0
 800c81c:	dc02      	bgt.n	800c824 <__sflush_r+0x20>
 800c81e:	2000      	movs	r0, #0
 800c820:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c824:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c826:	2e00      	cmp	r6, #0
 800c828:	d0f9      	beq.n	800c81e <__sflush_r+0x1a>
 800c82a:	2300      	movs	r3, #0
 800c82c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c830:	682f      	ldr	r7, [r5, #0]
 800c832:	6a21      	ldr	r1, [r4, #32]
 800c834:	602b      	str	r3, [r5, #0]
 800c836:	d032      	beq.n	800c89e <__sflush_r+0x9a>
 800c838:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c83a:	89a3      	ldrh	r3, [r4, #12]
 800c83c:	075a      	lsls	r2, r3, #29
 800c83e:	d505      	bpl.n	800c84c <__sflush_r+0x48>
 800c840:	6863      	ldr	r3, [r4, #4]
 800c842:	1ac0      	subs	r0, r0, r3
 800c844:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c846:	b10b      	cbz	r3, 800c84c <__sflush_r+0x48>
 800c848:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c84a:	1ac0      	subs	r0, r0, r3
 800c84c:	2300      	movs	r3, #0
 800c84e:	4602      	mov	r2, r0
 800c850:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c852:	6a21      	ldr	r1, [r4, #32]
 800c854:	4628      	mov	r0, r5
 800c856:	47b0      	blx	r6
 800c858:	1c43      	adds	r3, r0, #1
 800c85a:	89a3      	ldrh	r3, [r4, #12]
 800c85c:	d106      	bne.n	800c86c <__sflush_r+0x68>
 800c85e:	6829      	ldr	r1, [r5, #0]
 800c860:	291d      	cmp	r1, #29
 800c862:	d82b      	bhi.n	800c8bc <__sflush_r+0xb8>
 800c864:	4a29      	ldr	r2, [pc, #164]	; (800c90c <__sflush_r+0x108>)
 800c866:	410a      	asrs	r2, r1
 800c868:	07d6      	lsls	r6, r2, #31
 800c86a:	d427      	bmi.n	800c8bc <__sflush_r+0xb8>
 800c86c:	2200      	movs	r2, #0
 800c86e:	6062      	str	r2, [r4, #4]
 800c870:	04d9      	lsls	r1, r3, #19
 800c872:	6922      	ldr	r2, [r4, #16]
 800c874:	6022      	str	r2, [r4, #0]
 800c876:	d504      	bpl.n	800c882 <__sflush_r+0x7e>
 800c878:	1c42      	adds	r2, r0, #1
 800c87a:	d101      	bne.n	800c880 <__sflush_r+0x7c>
 800c87c:	682b      	ldr	r3, [r5, #0]
 800c87e:	b903      	cbnz	r3, 800c882 <__sflush_r+0x7e>
 800c880:	6560      	str	r0, [r4, #84]	; 0x54
 800c882:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c884:	602f      	str	r7, [r5, #0]
 800c886:	2900      	cmp	r1, #0
 800c888:	d0c9      	beq.n	800c81e <__sflush_r+0x1a>
 800c88a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c88e:	4299      	cmp	r1, r3
 800c890:	d002      	beq.n	800c898 <__sflush_r+0x94>
 800c892:	4628      	mov	r0, r5
 800c894:	f7fe fa1a 	bl	800accc <_free_r>
 800c898:	2000      	movs	r0, #0
 800c89a:	6360      	str	r0, [r4, #52]	; 0x34
 800c89c:	e7c0      	b.n	800c820 <__sflush_r+0x1c>
 800c89e:	2301      	movs	r3, #1
 800c8a0:	4628      	mov	r0, r5
 800c8a2:	47b0      	blx	r6
 800c8a4:	1c41      	adds	r1, r0, #1
 800c8a6:	d1c8      	bne.n	800c83a <__sflush_r+0x36>
 800c8a8:	682b      	ldr	r3, [r5, #0]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d0c5      	beq.n	800c83a <__sflush_r+0x36>
 800c8ae:	2b1d      	cmp	r3, #29
 800c8b0:	d001      	beq.n	800c8b6 <__sflush_r+0xb2>
 800c8b2:	2b16      	cmp	r3, #22
 800c8b4:	d101      	bne.n	800c8ba <__sflush_r+0xb6>
 800c8b6:	602f      	str	r7, [r5, #0]
 800c8b8:	e7b1      	b.n	800c81e <__sflush_r+0x1a>
 800c8ba:	89a3      	ldrh	r3, [r4, #12]
 800c8bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8c0:	81a3      	strh	r3, [r4, #12]
 800c8c2:	e7ad      	b.n	800c820 <__sflush_r+0x1c>
 800c8c4:	690f      	ldr	r7, [r1, #16]
 800c8c6:	2f00      	cmp	r7, #0
 800c8c8:	d0a9      	beq.n	800c81e <__sflush_r+0x1a>
 800c8ca:	0793      	lsls	r3, r2, #30
 800c8cc:	680e      	ldr	r6, [r1, #0]
 800c8ce:	bf08      	it	eq
 800c8d0:	694b      	ldreq	r3, [r1, #20]
 800c8d2:	600f      	str	r7, [r1, #0]
 800c8d4:	bf18      	it	ne
 800c8d6:	2300      	movne	r3, #0
 800c8d8:	eba6 0807 	sub.w	r8, r6, r7
 800c8dc:	608b      	str	r3, [r1, #8]
 800c8de:	f1b8 0f00 	cmp.w	r8, #0
 800c8e2:	dd9c      	ble.n	800c81e <__sflush_r+0x1a>
 800c8e4:	6a21      	ldr	r1, [r4, #32]
 800c8e6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c8e8:	4643      	mov	r3, r8
 800c8ea:	463a      	mov	r2, r7
 800c8ec:	4628      	mov	r0, r5
 800c8ee:	47b0      	blx	r6
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	dc06      	bgt.n	800c902 <__sflush_r+0xfe>
 800c8f4:	89a3      	ldrh	r3, [r4, #12]
 800c8f6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c8fa:	81a3      	strh	r3, [r4, #12]
 800c8fc:	f04f 30ff 	mov.w	r0, #4294967295
 800c900:	e78e      	b.n	800c820 <__sflush_r+0x1c>
 800c902:	4407      	add	r7, r0
 800c904:	eba8 0800 	sub.w	r8, r8, r0
 800c908:	e7e9      	b.n	800c8de <__sflush_r+0xda>
 800c90a:	bf00      	nop
 800c90c:	dfbffffe 	.word	0xdfbffffe

0800c910 <_fflush_r>:
 800c910:	b538      	push	{r3, r4, r5, lr}
 800c912:	690b      	ldr	r3, [r1, #16]
 800c914:	4605      	mov	r5, r0
 800c916:	460c      	mov	r4, r1
 800c918:	b913      	cbnz	r3, 800c920 <_fflush_r+0x10>
 800c91a:	2500      	movs	r5, #0
 800c91c:	4628      	mov	r0, r5
 800c91e:	bd38      	pop	{r3, r4, r5, pc}
 800c920:	b118      	cbz	r0, 800c92a <_fflush_r+0x1a>
 800c922:	6a03      	ldr	r3, [r0, #32]
 800c924:	b90b      	cbnz	r3, 800c92a <_fflush_r+0x1a>
 800c926:	f7fd fa01 	bl	8009d2c <__sinit>
 800c92a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c92e:	2b00      	cmp	r3, #0
 800c930:	d0f3      	beq.n	800c91a <_fflush_r+0xa>
 800c932:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c934:	07d0      	lsls	r0, r2, #31
 800c936:	d404      	bmi.n	800c942 <_fflush_r+0x32>
 800c938:	0599      	lsls	r1, r3, #22
 800c93a:	d402      	bmi.n	800c942 <_fflush_r+0x32>
 800c93c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c93e:	f7fd fb40 	bl	8009fc2 <__retarget_lock_acquire_recursive>
 800c942:	4628      	mov	r0, r5
 800c944:	4621      	mov	r1, r4
 800c946:	f7ff ff5d 	bl	800c804 <__sflush_r>
 800c94a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c94c:	07da      	lsls	r2, r3, #31
 800c94e:	4605      	mov	r5, r0
 800c950:	d4e4      	bmi.n	800c91c <_fflush_r+0xc>
 800c952:	89a3      	ldrh	r3, [r4, #12]
 800c954:	059b      	lsls	r3, r3, #22
 800c956:	d4e1      	bmi.n	800c91c <_fflush_r+0xc>
 800c958:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c95a:	f7fd fb33 	bl	8009fc4 <__retarget_lock_release_recursive>
 800c95e:	e7dd      	b.n	800c91c <_fflush_r+0xc>

0800c960 <memmove>:
 800c960:	4288      	cmp	r0, r1
 800c962:	b510      	push	{r4, lr}
 800c964:	eb01 0402 	add.w	r4, r1, r2
 800c968:	d902      	bls.n	800c970 <memmove+0x10>
 800c96a:	4284      	cmp	r4, r0
 800c96c:	4623      	mov	r3, r4
 800c96e:	d807      	bhi.n	800c980 <memmove+0x20>
 800c970:	1e43      	subs	r3, r0, #1
 800c972:	42a1      	cmp	r1, r4
 800c974:	d008      	beq.n	800c988 <memmove+0x28>
 800c976:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c97a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c97e:	e7f8      	b.n	800c972 <memmove+0x12>
 800c980:	4402      	add	r2, r0
 800c982:	4601      	mov	r1, r0
 800c984:	428a      	cmp	r2, r1
 800c986:	d100      	bne.n	800c98a <memmove+0x2a>
 800c988:	bd10      	pop	{r4, pc}
 800c98a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c98e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c992:	e7f7      	b.n	800c984 <memmove+0x24>

0800c994 <strncmp>:
 800c994:	b510      	push	{r4, lr}
 800c996:	b16a      	cbz	r2, 800c9b4 <strncmp+0x20>
 800c998:	3901      	subs	r1, #1
 800c99a:	1884      	adds	r4, r0, r2
 800c99c:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c9a0:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800c9a4:	429a      	cmp	r2, r3
 800c9a6:	d103      	bne.n	800c9b0 <strncmp+0x1c>
 800c9a8:	42a0      	cmp	r0, r4
 800c9aa:	d001      	beq.n	800c9b0 <strncmp+0x1c>
 800c9ac:	2a00      	cmp	r2, #0
 800c9ae:	d1f5      	bne.n	800c99c <strncmp+0x8>
 800c9b0:	1ad0      	subs	r0, r2, r3
 800c9b2:	bd10      	pop	{r4, pc}
 800c9b4:	4610      	mov	r0, r2
 800c9b6:	e7fc      	b.n	800c9b2 <strncmp+0x1e>

0800c9b8 <_sbrk_r>:
 800c9b8:	b538      	push	{r3, r4, r5, lr}
 800c9ba:	4d06      	ldr	r5, [pc, #24]	; (800c9d4 <_sbrk_r+0x1c>)
 800c9bc:	2300      	movs	r3, #0
 800c9be:	4604      	mov	r4, r0
 800c9c0:	4608      	mov	r0, r1
 800c9c2:	602b      	str	r3, [r5, #0]
 800c9c4:	f7f5 f988 	bl	8001cd8 <_sbrk>
 800c9c8:	1c43      	adds	r3, r0, #1
 800c9ca:	d102      	bne.n	800c9d2 <_sbrk_r+0x1a>
 800c9cc:	682b      	ldr	r3, [r5, #0]
 800c9ce:	b103      	cbz	r3, 800c9d2 <_sbrk_r+0x1a>
 800c9d0:	6023      	str	r3, [r4, #0]
 800c9d2:	bd38      	pop	{r3, r4, r5, pc}
 800c9d4:	20000d14 	.word	0x20000d14

0800c9d8 <memcpy>:
 800c9d8:	440a      	add	r2, r1
 800c9da:	4291      	cmp	r1, r2
 800c9dc:	f100 33ff 	add.w	r3, r0, #4294967295
 800c9e0:	d100      	bne.n	800c9e4 <memcpy+0xc>
 800c9e2:	4770      	bx	lr
 800c9e4:	b510      	push	{r4, lr}
 800c9e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9ee:	4291      	cmp	r1, r2
 800c9f0:	d1f9      	bne.n	800c9e6 <memcpy+0xe>
 800c9f2:	bd10      	pop	{r4, pc}
 800c9f4:	0000      	movs	r0, r0
	...

0800c9f8 <nan>:
 800c9f8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ca00 <nan+0x8>
 800c9fc:	4770      	bx	lr
 800c9fe:	bf00      	nop
 800ca00:	00000000 	.word	0x00000000
 800ca04:	7ff80000 	.word	0x7ff80000

0800ca08 <__assert_func>:
 800ca08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ca0a:	4614      	mov	r4, r2
 800ca0c:	461a      	mov	r2, r3
 800ca0e:	4b09      	ldr	r3, [pc, #36]	; (800ca34 <__assert_func+0x2c>)
 800ca10:	681b      	ldr	r3, [r3, #0]
 800ca12:	4605      	mov	r5, r0
 800ca14:	68d8      	ldr	r0, [r3, #12]
 800ca16:	b14c      	cbz	r4, 800ca2c <__assert_func+0x24>
 800ca18:	4b07      	ldr	r3, [pc, #28]	; (800ca38 <__assert_func+0x30>)
 800ca1a:	9100      	str	r1, [sp, #0]
 800ca1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ca20:	4906      	ldr	r1, [pc, #24]	; (800ca3c <__assert_func+0x34>)
 800ca22:	462b      	mov	r3, r5
 800ca24:	f000 fbca 	bl	800d1bc <fiprintf>
 800ca28:	f000 fbda 	bl	800d1e0 <abort>
 800ca2c:	4b04      	ldr	r3, [pc, #16]	; (800ca40 <__assert_func+0x38>)
 800ca2e:	461c      	mov	r4, r3
 800ca30:	e7f3      	b.n	800ca1a <__assert_func+0x12>
 800ca32:	bf00      	nop
 800ca34:	20000078 	.word	0x20000078
 800ca38:	0800db5a 	.word	0x0800db5a
 800ca3c:	0800db67 	.word	0x0800db67
 800ca40:	0800db95 	.word	0x0800db95

0800ca44 <_calloc_r>:
 800ca44:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ca46:	fba1 2402 	umull	r2, r4, r1, r2
 800ca4a:	b94c      	cbnz	r4, 800ca60 <_calloc_r+0x1c>
 800ca4c:	4611      	mov	r1, r2
 800ca4e:	9201      	str	r2, [sp, #4]
 800ca50:	f7fe f9b0 	bl	800adb4 <_malloc_r>
 800ca54:	9a01      	ldr	r2, [sp, #4]
 800ca56:	4605      	mov	r5, r0
 800ca58:	b930      	cbnz	r0, 800ca68 <_calloc_r+0x24>
 800ca5a:	4628      	mov	r0, r5
 800ca5c:	b003      	add	sp, #12
 800ca5e:	bd30      	pop	{r4, r5, pc}
 800ca60:	220c      	movs	r2, #12
 800ca62:	6002      	str	r2, [r0, #0]
 800ca64:	2500      	movs	r5, #0
 800ca66:	e7f8      	b.n	800ca5a <_calloc_r+0x16>
 800ca68:	4621      	mov	r1, r4
 800ca6a:	f7fd fa2c 	bl	8009ec6 <memset>
 800ca6e:	e7f4      	b.n	800ca5a <_calloc_r+0x16>

0800ca70 <rshift>:
 800ca70:	6903      	ldr	r3, [r0, #16]
 800ca72:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ca76:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ca7a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ca7e:	f100 0414 	add.w	r4, r0, #20
 800ca82:	dd45      	ble.n	800cb10 <rshift+0xa0>
 800ca84:	f011 011f 	ands.w	r1, r1, #31
 800ca88:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ca8c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ca90:	d10c      	bne.n	800caac <rshift+0x3c>
 800ca92:	f100 0710 	add.w	r7, r0, #16
 800ca96:	4629      	mov	r1, r5
 800ca98:	42b1      	cmp	r1, r6
 800ca9a:	d334      	bcc.n	800cb06 <rshift+0x96>
 800ca9c:	1a9b      	subs	r3, r3, r2
 800ca9e:	009b      	lsls	r3, r3, #2
 800caa0:	1eea      	subs	r2, r5, #3
 800caa2:	4296      	cmp	r6, r2
 800caa4:	bf38      	it	cc
 800caa6:	2300      	movcc	r3, #0
 800caa8:	4423      	add	r3, r4
 800caaa:	e015      	b.n	800cad8 <rshift+0x68>
 800caac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800cab0:	f1c1 0820 	rsb	r8, r1, #32
 800cab4:	40cf      	lsrs	r7, r1
 800cab6:	f105 0e04 	add.w	lr, r5, #4
 800caba:	46a1      	mov	r9, r4
 800cabc:	4576      	cmp	r6, lr
 800cabe:	46f4      	mov	ip, lr
 800cac0:	d815      	bhi.n	800caee <rshift+0x7e>
 800cac2:	1a9a      	subs	r2, r3, r2
 800cac4:	0092      	lsls	r2, r2, #2
 800cac6:	3a04      	subs	r2, #4
 800cac8:	3501      	adds	r5, #1
 800caca:	42ae      	cmp	r6, r5
 800cacc:	bf38      	it	cc
 800cace:	2200      	movcc	r2, #0
 800cad0:	18a3      	adds	r3, r4, r2
 800cad2:	50a7      	str	r7, [r4, r2]
 800cad4:	b107      	cbz	r7, 800cad8 <rshift+0x68>
 800cad6:	3304      	adds	r3, #4
 800cad8:	1b1a      	subs	r2, r3, r4
 800cada:	42a3      	cmp	r3, r4
 800cadc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800cae0:	bf08      	it	eq
 800cae2:	2300      	moveq	r3, #0
 800cae4:	6102      	str	r2, [r0, #16]
 800cae6:	bf08      	it	eq
 800cae8:	6143      	streq	r3, [r0, #20]
 800caea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800caee:	f8dc c000 	ldr.w	ip, [ip]
 800caf2:	fa0c fc08 	lsl.w	ip, ip, r8
 800caf6:	ea4c 0707 	orr.w	r7, ip, r7
 800cafa:	f849 7b04 	str.w	r7, [r9], #4
 800cafe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cb02:	40cf      	lsrs	r7, r1
 800cb04:	e7da      	b.n	800cabc <rshift+0x4c>
 800cb06:	f851 cb04 	ldr.w	ip, [r1], #4
 800cb0a:	f847 cf04 	str.w	ip, [r7, #4]!
 800cb0e:	e7c3      	b.n	800ca98 <rshift+0x28>
 800cb10:	4623      	mov	r3, r4
 800cb12:	e7e1      	b.n	800cad8 <rshift+0x68>

0800cb14 <__hexdig_fun>:
 800cb14:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800cb18:	2b09      	cmp	r3, #9
 800cb1a:	d802      	bhi.n	800cb22 <__hexdig_fun+0xe>
 800cb1c:	3820      	subs	r0, #32
 800cb1e:	b2c0      	uxtb	r0, r0
 800cb20:	4770      	bx	lr
 800cb22:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800cb26:	2b05      	cmp	r3, #5
 800cb28:	d801      	bhi.n	800cb2e <__hexdig_fun+0x1a>
 800cb2a:	3847      	subs	r0, #71	; 0x47
 800cb2c:	e7f7      	b.n	800cb1e <__hexdig_fun+0xa>
 800cb2e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800cb32:	2b05      	cmp	r3, #5
 800cb34:	d801      	bhi.n	800cb3a <__hexdig_fun+0x26>
 800cb36:	3827      	subs	r0, #39	; 0x27
 800cb38:	e7f1      	b.n	800cb1e <__hexdig_fun+0xa>
 800cb3a:	2000      	movs	r0, #0
 800cb3c:	4770      	bx	lr
	...

0800cb40 <__gethex>:
 800cb40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb44:	4617      	mov	r7, r2
 800cb46:	680a      	ldr	r2, [r1, #0]
 800cb48:	b085      	sub	sp, #20
 800cb4a:	f102 0b02 	add.w	fp, r2, #2
 800cb4e:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cb52:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cb56:	4681      	mov	r9, r0
 800cb58:	468a      	mov	sl, r1
 800cb5a:	9302      	str	r3, [sp, #8]
 800cb5c:	32fe      	adds	r2, #254	; 0xfe
 800cb5e:	eb02 030b 	add.w	r3, r2, fp
 800cb62:	46d8      	mov	r8, fp
 800cb64:	f81b 0b01 	ldrb.w	r0, [fp], #1
 800cb68:	9301      	str	r3, [sp, #4]
 800cb6a:	2830      	cmp	r0, #48	; 0x30
 800cb6c:	d0f7      	beq.n	800cb5e <__gethex+0x1e>
 800cb6e:	f7ff ffd1 	bl	800cb14 <__hexdig_fun>
 800cb72:	4604      	mov	r4, r0
 800cb74:	2800      	cmp	r0, #0
 800cb76:	d138      	bne.n	800cbea <__gethex+0xaa>
 800cb78:	49a7      	ldr	r1, [pc, #668]	; (800ce18 <__gethex+0x2d8>)
 800cb7a:	2201      	movs	r2, #1
 800cb7c:	4640      	mov	r0, r8
 800cb7e:	f7ff ff09 	bl	800c994 <strncmp>
 800cb82:	4606      	mov	r6, r0
 800cb84:	2800      	cmp	r0, #0
 800cb86:	d169      	bne.n	800cc5c <__gethex+0x11c>
 800cb88:	f898 0001 	ldrb.w	r0, [r8, #1]
 800cb8c:	465d      	mov	r5, fp
 800cb8e:	f7ff ffc1 	bl	800cb14 <__hexdig_fun>
 800cb92:	2800      	cmp	r0, #0
 800cb94:	d064      	beq.n	800cc60 <__gethex+0x120>
 800cb96:	465a      	mov	r2, fp
 800cb98:	7810      	ldrb	r0, [r2, #0]
 800cb9a:	2830      	cmp	r0, #48	; 0x30
 800cb9c:	4690      	mov	r8, r2
 800cb9e:	f102 0201 	add.w	r2, r2, #1
 800cba2:	d0f9      	beq.n	800cb98 <__gethex+0x58>
 800cba4:	f7ff ffb6 	bl	800cb14 <__hexdig_fun>
 800cba8:	2301      	movs	r3, #1
 800cbaa:	fab0 f480 	clz	r4, r0
 800cbae:	0964      	lsrs	r4, r4, #5
 800cbb0:	465e      	mov	r6, fp
 800cbb2:	9301      	str	r3, [sp, #4]
 800cbb4:	4642      	mov	r2, r8
 800cbb6:	4615      	mov	r5, r2
 800cbb8:	3201      	adds	r2, #1
 800cbba:	7828      	ldrb	r0, [r5, #0]
 800cbbc:	f7ff ffaa 	bl	800cb14 <__hexdig_fun>
 800cbc0:	2800      	cmp	r0, #0
 800cbc2:	d1f8      	bne.n	800cbb6 <__gethex+0x76>
 800cbc4:	4994      	ldr	r1, [pc, #592]	; (800ce18 <__gethex+0x2d8>)
 800cbc6:	2201      	movs	r2, #1
 800cbc8:	4628      	mov	r0, r5
 800cbca:	f7ff fee3 	bl	800c994 <strncmp>
 800cbce:	b978      	cbnz	r0, 800cbf0 <__gethex+0xb0>
 800cbd0:	b946      	cbnz	r6, 800cbe4 <__gethex+0xa4>
 800cbd2:	1c6e      	adds	r6, r5, #1
 800cbd4:	4632      	mov	r2, r6
 800cbd6:	4615      	mov	r5, r2
 800cbd8:	3201      	adds	r2, #1
 800cbda:	7828      	ldrb	r0, [r5, #0]
 800cbdc:	f7ff ff9a 	bl	800cb14 <__hexdig_fun>
 800cbe0:	2800      	cmp	r0, #0
 800cbe2:	d1f8      	bne.n	800cbd6 <__gethex+0x96>
 800cbe4:	1b73      	subs	r3, r6, r5
 800cbe6:	009e      	lsls	r6, r3, #2
 800cbe8:	e004      	b.n	800cbf4 <__gethex+0xb4>
 800cbea:	2400      	movs	r4, #0
 800cbec:	4626      	mov	r6, r4
 800cbee:	e7e1      	b.n	800cbb4 <__gethex+0x74>
 800cbf0:	2e00      	cmp	r6, #0
 800cbf2:	d1f7      	bne.n	800cbe4 <__gethex+0xa4>
 800cbf4:	782b      	ldrb	r3, [r5, #0]
 800cbf6:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800cbfa:	2b50      	cmp	r3, #80	; 0x50
 800cbfc:	d13d      	bne.n	800cc7a <__gethex+0x13a>
 800cbfe:	786b      	ldrb	r3, [r5, #1]
 800cc00:	2b2b      	cmp	r3, #43	; 0x2b
 800cc02:	d02f      	beq.n	800cc64 <__gethex+0x124>
 800cc04:	2b2d      	cmp	r3, #45	; 0x2d
 800cc06:	d031      	beq.n	800cc6c <__gethex+0x12c>
 800cc08:	1c69      	adds	r1, r5, #1
 800cc0a:	f04f 0b00 	mov.w	fp, #0
 800cc0e:	7808      	ldrb	r0, [r1, #0]
 800cc10:	f7ff ff80 	bl	800cb14 <__hexdig_fun>
 800cc14:	1e42      	subs	r2, r0, #1
 800cc16:	b2d2      	uxtb	r2, r2
 800cc18:	2a18      	cmp	r2, #24
 800cc1a:	d82e      	bhi.n	800cc7a <__gethex+0x13a>
 800cc1c:	f1a0 0210 	sub.w	r2, r0, #16
 800cc20:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800cc24:	f7ff ff76 	bl	800cb14 <__hexdig_fun>
 800cc28:	f100 3cff 	add.w	ip, r0, #4294967295
 800cc2c:	fa5f fc8c 	uxtb.w	ip, ip
 800cc30:	f1bc 0f18 	cmp.w	ip, #24
 800cc34:	d91d      	bls.n	800cc72 <__gethex+0x132>
 800cc36:	f1bb 0f00 	cmp.w	fp, #0
 800cc3a:	d000      	beq.n	800cc3e <__gethex+0xfe>
 800cc3c:	4252      	negs	r2, r2
 800cc3e:	4416      	add	r6, r2
 800cc40:	f8ca 1000 	str.w	r1, [sl]
 800cc44:	b1dc      	cbz	r4, 800cc7e <__gethex+0x13e>
 800cc46:	9b01      	ldr	r3, [sp, #4]
 800cc48:	2b00      	cmp	r3, #0
 800cc4a:	bf14      	ite	ne
 800cc4c:	f04f 0800 	movne.w	r8, #0
 800cc50:	f04f 0806 	moveq.w	r8, #6
 800cc54:	4640      	mov	r0, r8
 800cc56:	b005      	add	sp, #20
 800cc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc5c:	4645      	mov	r5, r8
 800cc5e:	4626      	mov	r6, r4
 800cc60:	2401      	movs	r4, #1
 800cc62:	e7c7      	b.n	800cbf4 <__gethex+0xb4>
 800cc64:	f04f 0b00 	mov.w	fp, #0
 800cc68:	1ca9      	adds	r1, r5, #2
 800cc6a:	e7d0      	b.n	800cc0e <__gethex+0xce>
 800cc6c:	f04f 0b01 	mov.w	fp, #1
 800cc70:	e7fa      	b.n	800cc68 <__gethex+0x128>
 800cc72:	230a      	movs	r3, #10
 800cc74:	fb03 0002 	mla	r0, r3, r2, r0
 800cc78:	e7d0      	b.n	800cc1c <__gethex+0xdc>
 800cc7a:	4629      	mov	r1, r5
 800cc7c:	e7e0      	b.n	800cc40 <__gethex+0x100>
 800cc7e:	eba5 0308 	sub.w	r3, r5, r8
 800cc82:	3b01      	subs	r3, #1
 800cc84:	4621      	mov	r1, r4
 800cc86:	2b07      	cmp	r3, #7
 800cc88:	dc0a      	bgt.n	800cca0 <__gethex+0x160>
 800cc8a:	4648      	mov	r0, r9
 800cc8c:	f7fe f91e 	bl	800aecc <_Balloc>
 800cc90:	4604      	mov	r4, r0
 800cc92:	b940      	cbnz	r0, 800cca6 <__gethex+0x166>
 800cc94:	4b61      	ldr	r3, [pc, #388]	; (800ce1c <__gethex+0x2dc>)
 800cc96:	4602      	mov	r2, r0
 800cc98:	21e4      	movs	r1, #228	; 0xe4
 800cc9a:	4861      	ldr	r0, [pc, #388]	; (800ce20 <__gethex+0x2e0>)
 800cc9c:	f7ff feb4 	bl	800ca08 <__assert_func>
 800cca0:	3101      	adds	r1, #1
 800cca2:	105b      	asrs	r3, r3, #1
 800cca4:	e7ef      	b.n	800cc86 <__gethex+0x146>
 800cca6:	f100 0a14 	add.w	sl, r0, #20
 800ccaa:	2300      	movs	r3, #0
 800ccac:	495a      	ldr	r1, [pc, #360]	; (800ce18 <__gethex+0x2d8>)
 800ccae:	f8cd a004 	str.w	sl, [sp, #4]
 800ccb2:	469b      	mov	fp, r3
 800ccb4:	45a8      	cmp	r8, r5
 800ccb6:	d342      	bcc.n	800cd3e <__gethex+0x1fe>
 800ccb8:	9801      	ldr	r0, [sp, #4]
 800ccba:	f840 bb04 	str.w	fp, [r0], #4
 800ccbe:	eba0 000a 	sub.w	r0, r0, sl
 800ccc2:	1080      	asrs	r0, r0, #2
 800ccc4:	6120      	str	r0, [r4, #16]
 800ccc6:	ea4f 1840 	mov.w	r8, r0, lsl #5
 800ccca:	4658      	mov	r0, fp
 800cccc:	f7fe f9f0 	bl	800b0b0 <__hi0bits>
 800ccd0:	683d      	ldr	r5, [r7, #0]
 800ccd2:	eba8 0000 	sub.w	r0, r8, r0
 800ccd6:	42a8      	cmp	r0, r5
 800ccd8:	dd59      	ble.n	800cd8e <__gethex+0x24e>
 800ccda:	eba0 0805 	sub.w	r8, r0, r5
 800ccde:	4641      	mov	r1, r8
 800cce0:	4620      	mov	r0, r4
 800cce2:	f7fe fd7f 	bl	800b7e4 <__any_on>
 800cce6:	4683      	mov	fp, r0
 800cce8:	b1b8      	cbz	r0, 800cd1a <__gethex+0x1da>
 800ccea:	f108 33ff 	add.w	r3, r8, #4294967295
 800ccee:	1159      	asrs	r1, r3, #5
 800ccf0:	f003 021f 	and.w	r2, r3, #31
 800ccf4:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800ccf8:	f04f 0b01 	mov.w	fp, #1
 800ccfc:	fa0b f202 	lsl.w	r2, fp, r2
 800cd00:	420a      	tst	r2, r1
 800cd02:	d00a      	beq.n	800cd1a <__gethex+0x1da>
 800cd04:	455b      	cmp	r3, fp
 800cd06:	dd06      	ble.n	800cd16 <__gethex+0x1d6>
 800cd08:	f1a8 0102 	sub.w	r1, r8, #2
 800cd0c:	4620      	mov	r0, r4
 800cd0e:	f7fe fd69 	bl	800b7e4 <__any_on>
 800cd12:	2800      	cmp	r0, #0
 800cd14:	d138      	bne.n	800cd88 <__gethex+0x248>
 800cd16:	f04f 0b02 	mov.w	fp, #2
 800cd1a:	4641      	mov	r1, r8
 800cd1c:	4620      	mov	r0, r4
 800cd1e:	f7ff fea7 	bl	800ca70 <rshift>
 800cd22:	4446      	add	r6, r8
 800cd24:	68bb      	ldr	r3, [r7, #8]
 800cd26:	42b3      	cmp	r3, r6
 800cd28:	da41      	bge.n	800cdae <__gethex+0x26e>
 800cd2a:	4621      	mov	r1, r4
 800cd2c:	4648      	mov	r0, r9
 800cd2e:	f7fe f90d 	bl	800af4c <_Bfree>
 800cd32:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cd34:	2300      	movs	r3, #0
 800cd36:	6013      	str	r3, [r2, #0]
 800cd38:	f04f 08a3 	mov.w	r8, #163	; 0xa3
 800cd3c:	e78a      	b.n	800cc54 <__gethex+0x114>
 800cd3e:	f815 2d01 	ldrb.w	r2, [r5, #-1]!
 800cd42:	2a2e      	cmp	r2, #46	; 0x2e
 800cd44:	d014      	beq.n	800cd70 <__gethex+0x230>
 800cd46:	2b20      	cmp	r3, #32
 800cd48:	d106      	bne.n	800cd58 <__gethex+0x218>
 800cd4a:	9b01      	ldr	r3, [sp, #4]
 800cd4c:	f843 bb04 	str.w	fp, [r3], #4
 800cd50:	f04f 0b00 	mov.w	fp, #0
 800cd54:	9301      	str	r3, [sp, #4]
 800cd56:	465b      	mov	r3, fp
 800cd58:	7828      	ldrb	r0, [r5, #0]
 800cd5a:	9303      	str	r3, [sp, #12]
 800cd5c:	f7ff feda 	bl	800cb14 <__hexdig_fun>
 800cd60:	9b03      	ldr	r3, [sp, #12]
 800cd62:	f000 000f 	and.w	r0, r0, #15
 800cd66:	4098      	lsls	r0, r3
 800cd68:	ea4b 0b00 	orr.w	fp, fp, r0
 800cd6c:	3304      	adds	r3, #4
 800cd6e:	e7a1      	b.n	800ccb4 <__gethex+0x174>
 800cd70:	45a8      	cmp	r8, r5
 800cd72:	d8e8      	bhi.n	800cd46 <__gethex+0x206>
 800cd74:	2201      	movs	r2, #1
 800cd76:	4628      	mov	r0, r5
 800cd78:	9303      	str	r3, [sp, #12]
 800cd7a:	f7ff fe0b 	bl	800c994 <strncmp>
 800cd7e:	4926      	ldr	r1, [pc, #152]	; (800ce18 <__gethex+0x2d8>)
 800cd80:	9b03      	ldr	r3, [sp, #12]
 800cd82:	2800      	cmp	r0, #0
 800cd84:	d1df      	bne.n	800cd46 <__gethex+0x206>
 800cd86:	e795      	b.n	800ccb4 <__gethex+0x174>
 800cd88:	f04f 0b03 	mov.w	fp, #3
 800cd8c:	e7c5      	b.n	800cd1a <__gethex+0x1da>
 800cd8e:	da0b      	bge.n	800cda8 <__gethex+0x268>
 800cd90:	eba5 0800 	sub.w	r8, r5, r0
 800cd94:	4621      	mov	r1, r4
 800cd96:	4642      	mov	r2, r8
 800cd98:	4648      	mov	r0, r9
 800cd9a:	f7fe faf1 	bl	800b380 <__lshift>
 800cd9e:	eba6 0608 	sub.w	r6, r6, r8
 800cda2:	4604      	mov	r4, r0
 800cda4:	f100 0a14 	add.w	sl, r0, #20
 800cda8:	f04f 0b00 	mov.w	fp, #0
 800cdac:	e7ba      	b.n	800cd24 <__gethex+0x1e4>
 800cdae:	687b      	ldr	r3, [r7, #4]
 800cdb0:	42b3      	cmp	r3, r6
 800cdb2:	dd73      	ble.n	800ce9c <__gethex+0x35c>
 800cdb4:	1b9e      	subs	r6, r3, r6
 800cdb6:	42b5      	cmp	r5, r6
 800cdb8:	dc34      	bgt.n	800ce24 <__gethex+0x2e4>
 800cdba:	68fb      	ldr	r3, [r7, #12]
 800cdbc:	2b02      	cmp	r3, #2
 800cdbe:	d023      	beq.n	800ce08 <__gethex+0x2c8>
 800cdc0:	2b03      	cmp	r3, #3
 800cdc2:	d025      	beq.n	800ce10 <__gethex+0x2d0>
 800cdc4:	2b01      	cmp	r3, #1
 800cdc6:	d115      	bne.n	800cdf4 <__gethex+0x2b4>
 800cdc8:	42b5      	cmp	r5, r6
 800cdca:	d113      	bne.n	800cdf4 <__gethex+0x2b4>
 800cdcc:	2d01      	cmp	r5, #1
 800cdce:	d10b      	bne.n	800cde8 <__gethex+0x2a8>
 800cdd0:	9a02      	ldr	r2, [sp, #8]
 800cdd2:	687b      	ldr	r3, [r7, #4]
 800cdd4:	6013      	str	r3, [r2, #0]
 800cdd6:	2301      	movs	r3, #1
 800cdd8:	6123      	str	r3, [r4, #16]
 800cdda:	f8ca 3000 	str.w	r3, [sl]
 800cdde:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cde0:	f04f 0862 	mov.w	r8, #98	; 0x62
 800cde4:	601c      	str	r4, [r3, #0]
 800cde6:	e735      	b.n	800cc54 <__gethex+0x114>
 800cde8:	1e69      	subs	r1, r5, #1
 800cdea:	4620      	mov	r0, r4
 800cdec:	f7fe fcfa 	bl	800b7e4 <__any_on>
 800cdf0:	2800      	cmp	r0, #0
 800cdf2:	d1ed      	bne.n	800cdd0 <__gethex+0x290>
 800cdf4:	4621      	mov	r1, r4
 800cdf6:	4648      	mov	r0, r9
 800cdf8:	f7fe f8a8 	bl	800af4c <_Bfree>
 800cdfc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800cdfe:	2300      	movs	r3, #0
 800ce00:	6013      	str	r3, [r2, #0]
 800ce02:	f04f 0850 	mov.w	r8, #80	; 0x50
 800ce06:	e725      	b.n	800cc54 <__gethex+0x114>
 800ce08:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce0a:	2b00      	cmp	r3, #0
 800ce0c:	d1f2      	bne.n	800cdf4 <__gethex+0x2b4>
 800ce0e:	e7df      	b.n	800cdd0 <__gethex+0x290>
 800ce10:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ce12:	2b00      	cmp	r3, #0
 800ce14:	d1dc      	bne.n	800cdd0 <__gethex+0x290>
 800ce16:	e7ed      	b.n	800cdf4 <__gethex+0x2b4>
 800ce18:	0800d9ec 	.word	0x0800d9ec
 800ce1c:	0800d885 	.word	0x0800d885
 800ce20:	0800db96 	.word	0x0800db96
 800ce24:	f106 38ff 	add.w	r8, r6, #4294967295
 800ce28:	f1bb 0f00 	cmp.w	fp, #0
 800ce2c:	d133      	bne.n	800ce96 <__gethex+0x356>
 800ce2e:	f1b8 0f00 	cmp.w	r8, #0
 800ce32:	d004      	beq.n	800ce3e <__gethex+0x2fe>
 800ce34:	4641      	mov	r1, r8
 800ce36:	4620      	mov	r0, r4
 800ce38:	f7fe fcd4 	bl	800b7e4 <__any_on>
 800ce3c:	4683      	mov	fp, r0
 800ce3e:	ea4f 1268 	mov.w	r2, r8, asr #5
 800ce42:	2301      	movs	r3, #1
 800ce44:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800ce48:	f008 081f 	and.w	r8, r8, #31
 800ce4c:	fa03 f308 	lsl.w	r3, r3, r8
 800ce50:	4213      	tst	r3, r2
 800ce52:	4631      	mov	r1, r6
 800ce54:	4620      	mov	r0, r4
 800ce56:	bf18      	it	ne
 800ce58:	f04b 0b02 	orrne.w	fp, fp, #2
 800ce5c:	1bad      	subs	r5, r5, r6
 800ce5e:	f7ff fe07 	bl	800ca70 <rshift>
 800ce62:	687e      	ldr	r6, [r7, #4]
 800ce64:	f04f 0802 	mov.w	r8, #2
 800ce68:	f1bb 0f00 	cmp.w	fp, #0
 800ce6c:	d04a      	beq.n	800cf04 <__gethex+0x3c4>
 800ce6e:	68fb      	ldr	r3, [r7, #12]
 800ce70:	2b02      	cmp	r3, #2
 800ce72:	d016      	beq.n	800cea2 <__gethex+0x362>
 800ce74:	2b03      	cmp	r3, #3
 800ce76:	d018      	beq.n	800ceaa <__gethex+0x36a>
 800ce78:	2b01      	cmp	r3, #1
 800ce7a:	d109      	bne.n	800ce90 <__gethex+0x350>
 800ce7c:	f01b 0f02 	tst.w	fp, #2
 800ce80:	d006      	beq.n	800ce90 <__gethex+0x350>
 800ce82:	f8da 3000 	ldr.w	r3, [sl]
 800ce86:	ea4b 0b03 	orr.w	fp, fp, r3
 800ce8a:	f01b 0f01 	tst.w	fp, #1
 800ce8e:	d10f      	bne.n	800ceb0 <__gethex+0x370>
 800ce90:	f048 0810 	orr.w	r8, r8, #16
 800ce94:	e036      	b.n	800cf04 <__gethex+0x3c4>
 800ce96:	f04f 0b01 	mov.w	fp, #1
 800ce9a:	e7d0      	b.n	800ce3e <__gethex+0x2fe>
 800ce9c:	f04f 0801 	mov.w	r8, #1
 800cea0:	e7e2      	b.n	800ce68 <__gethex+0x328>
 800cea2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800cea4:	f1c3 0301 	rsb	r3, r3, #1
 800cea8:	930f      	str	r3, [sp, #60]	; 0x3c
 800ceaa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800ceac:	2b00      	cmp	r3, #0
 800ceae:	d0ef      	beq.n	800ce90 <__gethex+0x350>
 800ceb0:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ceb4:	f104 0214 	add.w	r2, r4, #20
 800ceb8:	ea4f 038b 	mov.w	r3, fp, lsl #2
 800cebc:	9301      	str	r3, [sp, #4]
 800cebe:	eb02 008b 	add.w	r0, r2, fp, lsl #2
 800cec2:	2300      	movs	r3, #0
 800cec4:	4694      	mov	ip, r2
 800cec6:	f852 1b04 	ldr.w	r1, [r2], #4
 800ceca:	f1b1 3fff 	cmp.w	r1, #4294967295
 800cece:	d01e      	beq.n	800cf0e <__gethex+0x3ce>
 800ced0:	3101      	adds	r1, #1
 800ced2:	f8cc 1000 	str.w	r1, [ip]
 800ced6:	f1b8 0f02 	cmp.w	r8, #2
 800ceda:	f104 0214 	add.w	r2, r4, #20
 800cede:	d13d      	bne.n	800cf5c <__gethex+0x41c>
 800cee0:	683b      	ldr	r3, [r7, #0]
 800cee2:	3b01      	subs	r3, #1
 800cee4:	42ab      	cmp	r3, r5
 800cee6:	d10b      	bne.n	800cf00 <__gethex+0x3c0>
 800cee8:	1169      	asrs	r1, r5, #5
 800ceea:	2301      	movs	r3, #1
 800ceec:	f005 051f 	and.w	r5, r5, #31
 800cef0:	fa03 f505 	lsl.w	r5, r3, r5
 800cef4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cef8:	421d      	tst	r5, r3
 800cefa:	bf18      	it	ne
 800cefc:	f04f 0801 	movne.w	r8, #1
 800cf00:	f048 0820 	orr.w	r8, r8, #32
 800cf04:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800cf06:	601c      	str	r4, [r3, #0]
 800cf08:	9b02      	ldr	r3, [sp, #8]
 800cf0a:	601e      	str	r6, [r3, #0]
 800cf0c:	e6a2      	b.n	800cc54 <__gethex+0x114>
 800cf0e:	4290      	cmp	r0, r2
 800cf10:	f842 3c04 	str.w	r3, [r2, #-4]
 800cf14:	d8d6      	bhi.n	800cec4 <__gethex+0x384>
 800cf16:	68a2      	ldr	r2, [r4, #8]
 800cf18:	4593      	cmp	fp, r2
 800cf1a:	db17      	blt.n	800cf4c <__gethex+0x40c>
 800cf1c:	6861      	ldr	r1, [r4, #4]
 800cf1e:	4648      	mov	r0, r9
 800cf20:	3101      	adds	r1, #1
 800cf22:	f7fd ffd3 	bl	800aecc <_Balloc>
 800cf26:	4682      	mov	sl, r0
 800cf28:	b918      	cbnz	r0, 800cf32 <__gethex+0x3f2>
 800cf2a:	4b1b      	ldr	r3, [pc, #108]	; (800cf98 <__gethex+0x458>)
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	2184      	movs	r1, #132	; 0x84
 800cf30:	e6b3      	b.n	800cc9a <__gethex+0x15a>
 800cf32:	6922      	ldr	r2, [r4, #16]
 800cf34:	3202      	adds	r2, #2
 800cf36:	f104 010c 	add.w	r1, r4, #12
 800cf3a:	0092      	lsls	r2, r2, #2
 800cf3c:	300c      	adds	r0, #12
 800cf3e:	f7ff fd4b 	bl	800c9d8 <memcpy>
 800cf42:	4621      	mov	r1, r4
 800cf44:	4648      	mov	r0, r9
 800cf46:	f7fe f801 	bl	800af4c <_Bfree>
 800cf4a:	4654      	mov	r4, sl
 800cf4c:	6922      	ldr	r2, [r4, #16]
 800cf4e:	1c51      	adds	r1, r2, #1
 800cf50:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 800cf54:	6121      	str	r1, [r4, #16]
 800cf56:	2101      	movs	r1, #1
 800cf58:	6151      	str	r1, [r2, #20]
 800cf5a:	e7bc      	b.n	800ced6 <__gethex+0x396>
 800cf5c:	6921      	ldr	r1, [r4, #16]
 800cf5e:	4559      	cmp	r1, fp
 800cf60:	dd0b      	ble.n	800cf7a <__gethex+0x43a>
 800cf62:	2101      	movs	r1, #1
 800cf64:	4620      	mov	r0, r4
 800cf66:	f7ff fd83 	bl	800ca70 <rshift>
 800cf6a:	68bb      	ldr	r3, [r7, #8]
 800cf6c:	3601      	adds	r6, #1
 800cf6e:	42b3      	cmp	r3, r6
 800cf70:	f6ff aedb 	blt.w	800cd2a <__gethex+0x1ea>
 800cf74:	f04f 0801 	mov.w	r8, #1
 800cf78:	e7c2      	b.n	800cf00 <__gethex+0x3c0>
 800cf7a:	f015 051f 	ands.w	r5, r5, #31
 800cf7e:	d0f9      	beq.n	800cf74 <__gethex+0x434>
 800cf80:	9b01      	ldr	r3, [sp, #4]
 800cf82:	441a      	add	r2, r3
 800cf84:	f1c5 0520 	rsb	r5, r5, #32
 800cf88:	f852 0c04 	ldr.w	r0, [r2, #-4]
 800cf8c:	f7fe f890 	bl	800b0b0 <__hi0bits>
 800cf90:	42a8      	cmp	r0, r5
 800cf92:	dbe6      	blt.n	800cf62 <__gethex+0x422>
 800cf94:	e7ee      	b.n	800cf74 <__gethex+0x434>
 800cf96:	bf00      	nop
 800cf98:	0800d885 	.word	0x0800d885

0800cf9c <L_shift>:
 800cf9c:	f1c2 0208 	rsb	r2, r2, #8
 800cfa0:	0092      	lsls	r2, r2, #2
 800cfa2:	b570      	push	{r4, r5, r6, lr}
 800cfa4:	f1c2 0620 	rsb	r6, r2, #32
 800cfa8:	6843      	ldr	r3, [r0, #4]
 800cfaa:	6804      	ldr	r4, [r0, #0]
 800cfac:	fa03 f506 	lsl.w	r5, r3, r6
 800cfb0:	432c      	orrs	r4, r5
 800cfb2:	40d3      	lsrs	r3, r2
 800cfb4:	6004      	str	r4, [r0, #0]
 800cfb6:	f840 3f04 	str.w	r3, [r0, #4]!
 800cfba:	4288      	cmp	r0, r1
 800cfbc:	d3f4      	bcc.n	800cfa8 <L_shift+0xc>
 800cfbe:	bd70      	pop	{r4, r5, r6, pc}

0800cfc0 <__match>:
 800cfc0:	b530      	push	{r4, r5, lr}
 800cfc2:	6803      	ldr	r3, [r0, #0]
 800cfc4:	3301      	adds	r3, #1
 800cfc6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cfca:	b914      	cbnz	r4, 800cfd2 <__match+0x12>
 800cfcc:	6003      	str	r3, [r0, #0]
 800cfce:	2001      	movs	r0, #1
 800cfd0:	bd30      	pop	{r4, r5, pc}
 800cfd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cfd6:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cfda:	2d19      	cmp	r5, #25
 800cfdc:	bf98      	it	ls
 800cfde:	3220      	addls	r2, #32
 800cfe0:	42a2      	cmp	r2, r4
 800cfe2:	d0f0      	beq.n	800cfc6 <__match+0x6>
 800cfe4:	2000      	movs	r0, #0
 800cfe6:	e7f3      	b.n	800cfd0 <__match+0x10>

0800cfe8 <__hexnan>:
 800cfe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cfec:	680b      	ldr	r3, [r1, #0]
 800cfee:	6801      	ldr	r1, [r0, #0]
 800cff0:	115e      	asrs	r6, r3, #5
 800cff2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cff6:	f013 031f 	ands.w	r3, r3, #31
 800cffa:	b087      	sub	sp, #28
 800cffc:	bf18      	it	ne
 800cffe:	3604      	addne	r6, #4
 800d000:	2500      	movs	r5, #0
 800d002:	1f37      	subs	r7, r6, #4
 800d004:	4682      	mov	sl, r0
 800d006:	4690      	mov	r8, r2
 800d008:	9301      	str	r3, [sp, #4]
 800d00a:	f846 5c04 	str.w	r5, [r6, #-4]
 800d00e:	46b9      	mov	r9, r7
 800d010:	463c      	mov	r4, r7
 800d012:	9502      	str	r5, [sp, #8]
 800d014:	46ab      	mov	fp, r5
 800d016:	784a      	ldrb	r2, [r1, #1]
 800d018:	1c4b      	adds	r3, r1, #1
 800d01a:	9303      	str	r3, [sp, #12]
 800d01c:	b342      	cbz	r2, 800d070 <__hexnan+0x88>
 800d01e:	4610      	mov	r0, r2
 800d020:	9105      	str	r1, [sp, #20]
 800d022:	9204      	str	r2, [sp, #16]
 800d024:	f7ff fd76 	bl	800cb14 <__hexdig_fun>
 800d028:	2800      	cmp	r0, #0
 800d02a:	d14f      	bne.n	800d0cc <__hexnan+0xe4>
 800d02c:	9a04      	ldr	r2, [sp, #16]
 800d02e:	9905      	ldr	r1, [sp, #20]
 800d030:	2a20      	cmp	r2, #32
 800d032:	d818      	bhi.n	800d066 <__hexnan+0x7e>
 800d034:	9b02      	ldr	r3, [sp, #8]
 800d036:	459b      	cmp	fp, r3
 800d038:	dd13      	ble.n	800d062 <__hexnan+0x7a>
 800d03a:	454c      	cmp	r4, r9
 800d03c:	d206      	bcs.n	800d04c <__hexnan+0x64>
 800d03e:	2d07      	cmp	r5, #7
 800d040:	dc04      	bgt.n	800d04c <__hexnan+0x64>
 800d042:	462a      	mov	r2, r5
 800d044:	4649      	mov	r1, r9
 800d046:	4620      	mov	r0, r4
 800d048:	f7ff ffa8 	bl	800cf9c <L_shift>
 800d04c:	4544      	cmp	r4, r8
 800d04e:	d950      	bls.n	800d0f2 <__hexnan+0x10a>
 800d050:	2300      	movs	r3, #0
 800d052:	f1a4 0904 	sub.w	r9, r4, #4
 800d056:	f844 3c04 	str.w	r3, [r4, #-4]
 800d05a:	f8cd b008 	str.w	fp, [sp, #8]
 800d05e:	464c      	mov	r4, r9
 800d060:	461d      	mov	r5, r3
 800d062:	9903      	ldr	r1, [sp, #12]
 800d064:	e7d7      	b.n	800d016 <__hexnan+0x2e>
 800d066:	2a29      	cmp	r2, #41	; 0x29
 800d068:	d155      	bne.n	800d116 <__hexnan+0x12e>
 800d06a:	3102      	adds	r1, #2
 800d06c:	f8ca 1000 	str.w	r1, [sl]
 800d070:	f1bb 0f00 	cmp.w	fp, #0
 800d074:	d04f      	beq.n	800d116 <__hexnan+0x12e>
 800d076:	454c      	cmp	r4, r9
 800d078:	d206      	bcs.n	800d088 <__hexnan+0xa0>
 800d07a:	2d07      	cmp	r5, #7
 800d07c:	dc04      	bgt.n	800d088 <__hexnan+0xa0>
 800d07e:	462a      	mov	r2, r5
 800d080:	4649      	mov	r1, r9
 800d082:	4620      	mov	r0, r4
 800d084:	f7ff ff8a 	bl	800cf9c <L_shift>
 800d088:	4544      	cmp	r4, r8
 800d08a:	d934      	bls.n	800d0f6 <__hexnan+0x10e>
 800d08c:	f1a8 0204 	sub.w	r2, r8, #4
 800d090:	4623      	mov	r3, r4
 800d092:	f853 1b04 	ldr.w	r1, [r3], #4
 800d096:	f842 1f04 	str.w	r1, [r2, #4]!
 800d09a:	429f      	cmp	r7, r3
 800d09c:	d2f9      	bcs.n	800d092 <__hexnan+0xaa>
 800d09e:	1b3b      	subs	r3, r7, r4
 800d0a0:	f023 0303 	bic.w	r3, r3, #3
 800d0a4:	3304      	adds	r3, #4
 800d0a6:	3e03      	subs	r6, #3
 800d0a8:	3401      	adds	r4, #1
 800d0aa:	42a6      	cmp	r6, r4
 800d0ac:	bf38      	it	cc
 800d0ae:	2304      	movcc	r3, #4
 800d0b0:	4443      	add	r3, r8
 800d0b2:	2200      	movs	r2, #0
 800d0b4:	f843 2b04 	str.w	r2, [r3], #4
 800d0b8:	429f      	cmp	r7, r3
 800d0ba:	d2fb      	bcs.n	800d0b4 <__hexnan+0xcc>
 800d0bc:	683b      	ldr	r3, [r7, #0]
 800d0be:	b91b      	cbnz	r3, 800d0c8 <__hexnan+0xe0>
 800d0c0:	4547      	cmp	r7, r8
 800d0c2:	d126      	bne.n	800d112 <__hexnan+0x12a>
 800d0c4:	2301      	movs	r3, #1
 800d0c6:	603b      	str	r3, [r7, #0]
 800d0c8:	2005      	movs	r0, #5
 800d0ca:	e025      	b.n	800d118 <__hexnan+0x130>
 800d0cc:	3501      	adds	r5, #1
 800d0ce:	2d08      	cmp	r5, #8
 800d0d0:	f10b 0b01 	add.w	fp, fp, #1
 800d0d4:	dd06      	ble.n	800d0e4 <__hexnan+0xfc>
 800d0d6:	4544      	cmp	r4, r8
 800d0d8:	d9c3      	bls.n	800d062 <__hexnan+0x7a>
 800d0da:	2300      	movs	r3, #0
 800d0dc:	f844 3c04 	str.w	r3, [r4, #-4]
 800d0e0:	2501      	movs	r5, #1
 800d0e2:	3c04      	subs	r4, #4
 800d0e4:	6822      	ldr	r2, [r4, #0]
 800d0e6:	f000 000f 	and.w	r0, r0, #15
 800d0ea:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800d0ee:	6020      	str	r0, [r4, #0]
 800d0f0:	e7b7      	b.n	800d062 <__hexnan+0x7a>
 800d0f2:	2508      	movs	r5, #8
 800d0f4:	e7b5      	b.n	800d062 <__hexnan+0x7a>
 800d0f6:	9b01      	ldr	r3, [sp, #4]
 800d0f8:	2b00      	cmp	r3, #0
 800d0fa:	d0df      	beq.n	800d0bc <__hexnan+0xd4>
 800d0fc:	f1c3 0320 	rsb	r3, r3, #32
 800d100:	f04f 32ff 	mov.w	r2, #4294967295
 800d104:	40da      	lsrs	r2, r3
 800d106:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800d10a:	4013      	ands	r3, r2
 800d10c:	f846 3c04 	str.w	r3, [r6, #-4]
 800d110:	e7d4      	b.n	800d0bc <__hexnan+0xd4>
 800d112:	3f04      	subs	r7, #4
 800d114:	e7d2      	b.n	800d0bc <__hexnan+0xd4>
 800d116:	2004      	movs	r0, #4
 800d118:	b007      	add	sp, #28
 800d11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d11e <__ascii_mbtowc>:
 800d11e:	b082      	sub	sp, #8
 800d120:	b901      	cbnz	r1, 800d124 <__ascii_mbtowc+0x6>
 800d122:	a901      	add	r1, sp, #4
 800d124:	b142      	cbz	r2, 800d138 <__ascii_mbtowc+0x1a>
 800d126:	b14b      	cbz	r3, 800d13c <__ascii_mbtowc+0x1e>
 800d128:	7813      	ldrb	r3, [r2, #0]
 800d12a:	600b      	str	r3, [r1, #0]
 800d12c:	7812      	ldrb	r2, [r2, #0]
 800d12e:	1e10      	subs	r0, r2, #0
 800d130:	bf18      	it	ne
 800d132:	2001      	movne	r0, #1
 800d134:	b002      	add	sp, #8
 800d136:	4770      	bx	lr
 800d138:	4610      	mov	r0, r2
 800d13a:	e7fb      	b.n	800d134 <__ascii_mbtowc+0x16>
 800d13c:	f06f 0001 	mvn.w	r0, #1
 800d140:	e7f8      	b.n	800d134 <__ascii_mbtowc+0x16>

0800d142 <_realloc_r>:
 800d142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d146:	4680      	mov	r8, r0
 800d148:	4614      	mov	r4, r2
 800d14a:	460e      	mov	r6, r1
 800d14c:	b921      	cbnz	r1, 800d158 <_realloc_r+0x16>
 800d14e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d152:	4611      	mov	r1, r2
 800d154:	f7fd be2e 	b.w	800adb4 <_malloc_r>
 800d158:	b92a      	cbnz	r2, 800d166 <_realloc_r+0x24>
 800d15a:	f7fd fdb7 	bl	800accc <_free_r>
 800d15e:	4625      	mov	r5, r4
 800d160:	4628      	mov	r0, r5
 800d162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d166:	f000 f842 	bl	800d1ee <_malloc_usable_size_r>
 800d16a:	4284      	cmp	r4, r0
 800d16c:	4607      	mov	r7, r0
 800d16e:	d802      	bhi.n	800d176 <_realloc_r+0x34>
 800d170:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d174:	d812      	bhi.n	800d19c <_realloc_r+0x5a>
 800d176:	4621      	mov	r1, r4
 800d178:	4640      	mov	r0, r8
 800d17a:	f7fd fe1b 	bl	800adb4 <_malloc_r>
 800d17e:	4605      	mov	r5, r0
 800d180:	2800      	cmp	r0, #0
 800d182:	d0ed      	beq.n	800d160 <_realloc_r+0x1e>
 800d184:	42bc      	cmp	r4, r7
 800d186:	4622      	mov	r2, r4
 800d188:	4631      	mov	r1, r6
 800d18a:	bf28      	it	cs
 800d18c:	463a      	movcs	r2, r7
 800d18e:	f7ff fc23 	bl	800c9d8 <memcpy>
 800d192:	4631      	mov	r1, r6
 800d194:	4640      	mov	r0, r8
 800d196:	f7fd fd99 	bl	800accc <_free_r>
 800d19a:	e7e1      	b.n	800d160 <_realloc_r+0x1e>
 800d19c:	4635      	mov	r5, r6
 800d19e:	e7df      	b.n	800d160 <_realloc_r+0x1e>

0800d1a0 <__ascii_wctomb>:
 800d1a0:	b149      	cbz	r1, 800d1b6 <__ascii_wctomb+0x16>
 800d1a2:	2aff      	cmp	r2, #255	; 0xff
 800d1a4:	bf85      	ittet	hi
 800d1a6:	238a      	movhi	r3, #138	; 0x8a
 800d1a8:	6003      	strhi	r3, [r0, #0]
 800d1aa:	700a      	strbls	r2, [r1, #0]
 800d1ac:	f04f 30ff 	movhi.w	r0, #4294967295
 800d1b0:	bf98      	it	ls
 800d1b2:	2001      	movls	r0, #1
 800d1b4:	4770      	bx	lr
 800d1b6:	4608      	mov	r0, r1
 800d1b8:	4770      	bx	lr
	...

0800d1bc <fiprintf>:
 800d1bc:	b40e      	push	{r1, r2, r3}
 800d1be:	b503      	push	{r0, r1, lr}
 800d1c0:	4601      	mov	r1, r0
 800d1c2:	ab03      	add	r3, sp, #12
 800d1c4:	4805      	ldr	r0, [pc, #20]	; (800d1dc <fiprintf+0x20>)
 800d1c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d1ca:	6800      	ldr	r0, [r0, #0]
 800d1cc:	9301      	str	r3, [sp, #4]
 800d1ce:	f000 f83f 	bl	800d250 <_vfiprintf_r>
 800d1d2:	b002      	add	sp, #8
 800d1d4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d1d8:	b003      	add	sp, #12
 800d1da:	4770      	bx	lr
 800d1dc:	20000078 	.word	0x20000078

0800d1e0 <abort>:
 800d1e0:	b508      	push	{r3, lr}
 800d1e2:	2006      	movs	r0, #6
 800d1e4:	f000 fa0c 	bl	800d600 <raise>
 800d1e8:	2001      	movs	r0, #1
 800d1ea:	f7f4 fcfd 	bl	8001be8 <_exit>

0800d1ee <_malloc_usable_size_r>:
 800d1ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d1f2:	1f18      	subs	r0, r3, #4
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	bfbc      	itt	lt
 800d1f8:	580b      	ldrlt	r3, [r1, r0]
 800d1fa:	18c0      	addlt	r0, r0, r3
 800d1fc:	4770      	bx	lr

0800d1fe <__sfputc_r>:
 800d1fe:	6893      	ldr	r3, [r2, #8]
 800d200:	3b01      	subs	r3, #1
 800d202:	2b00      	cmp	r3, #0
 800d204:	b410      	push	{r4}
 800d206:	6093      	str	r3, [r2, #8]
 800d208:	da08      	bge.n	800d21c <__sfputc_r+0x1e>
 800d20a:	6994      	ldr	r4, [r2, #24]
 800d20c:	42a3      	cmp	r3, r4
 800d20e:	db01      	blt.n	800d214 <__sfputc_r+0x16>
 800d210:	290a      	cmp	r1, #10
 800d212:	d103      	bne.n	800d21c <__sfputc_r+0x1e>
 800d214:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d218:	f000 b934 	b.w	800d484 <__swbuf_r>
 800d21c:	6813      	ldr	r3, [r2, #0]
 800d21e:	1c58      	adds	r0, r3, #1
 800d220:	6010      	str	r0, [r2, #0]
 800d222:	7019      	strb	r1, [r3, #0]
 800d224:	4608      	mov	r0, r1
 800d226:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d22a:	4770      	bx	lr

0800d22c <__sfputs_r>:
 800d22c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d22e:	4606      	mov	r6, r0
 800d230:	460f      	mov	r7, r1
 800d232:	4614      	mov	r4, r2
 800d234:	18d5      	adds	r5, r2, r3
 800d236:	42ac      	cmp	r4, r5
 800d238:	d101      	bne.n	800d23e <__sfputs_r+0x12>
 800d23a:	2000      	movs	r0, #0
 800d23c:	e007      	b.n	800d24e <__sfputs_r+0x22>
 800d23e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d242:	463a      	mov	r2, r7
 800d244:	4630      	mov	r0, r6
 800d246:	f7ff ffda 	bl	800d1fe <__sfputc_r>
 800d24a:	1c43      	adds	r3, r0, #1
 800d24c:	d1f3      	bne.n	800d236 <__sfputs_r+0xa>
 800d24e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800d250 <_vfiprintf_r>:
 800d250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d254:	460d      	mov	r5, r1
 800d256:	b09d      	sub	sp, #116	; 0x74
 800d258:	4614      	mov	r4, r2
 800d25a:	4698      	mov	r8, r3
 800d25c:	4606      	mov	r6, r0
 800d25e:	b118      	cbz	r0, 800d268 <_vfiprintf_r+0x18>
 800d260:	6a03      	ldr	r3, [r0, #32]
 800d262:	b90b      	cbnz	r3, 800d268 <_vfiprintf_r+0x18>
 800d264:	f7fc fd62 	bl	8009d2c <__sinit>
 800d268:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d26a:	07d9      	lsls	r1, r3, #31
 800d26c:	d405      	bmi.n	800d27a <_vfiprintf_r+0x2a>
 800d26e:	89ab      	ldrh	r3, [r5, #12]
 800d270:	059a      	lsls	r2, r3, #22
 800d272:	d402      	bmi.n	800d27a <_vfiprintf_r+0x2a>
 800d274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d276:	f7fc fea4 	bl	8009fc2 <__retarget_lock_acquire_recursive>
 800d27a:	89ab      	ldrh	r3, [r5, #12]
 800d27c:	071b      	lsls	r3, r3, #28
 800d27e:	d501      	bpl.n	800d284 <_vfiprintf_r+0x34>
 800d280:	692b      	ldr	r3, [r5, #16]
 800d282:	b99b      	cbnz	r3, 800d2ac <_vfiprintf_r+0x5c>
 800d284:	4629      	mov	r1, r5
 800d286:	4630      	mov	r0, r6
 800d288:	f000 f93a 	bl	800d500 <__swsetup_r>
 800d28c:	b170      	cbz	r0, 800d2ac <_vfiprintf_r+0x5c>
 800d28e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d290:	07dc      	lsls	r4, r3, #31
 800d292:	d504      	bpl.n	800d29e <_vfiprintf_r+0x4e>
 800d294:	f04f 30ff 	mov.w	r0, #4294967295
 800d298:	b01d      	add	sp, #116	; 0x74
 800d29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d29e:	89ab      	ldrh	r3, [r5, #12]
 800d2a0:	0598      	lsls	r0, r3, #22
 800d2a2:	d4f7      	bmi.n	800d294 <_vfiprintf_r+0x44>
 800d2a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2a6:	f7fc fe8d 	bl	8009fc4 <__retarget_lock_release_recursive>
 800d2aa:	e7f3      	b.n	800d294 <_vfiprintf_r+0x44>
 800d2ac:	2300      	movs	r3, #0
 800d2ae:	9309      	str	r3, [sp, #36]	; 0x24
 800d2b0:	2320      	movs	r3, #32
 800d2b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d2b6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d2ba:	2330      	movs	r3, #48	; 0x30
 800d2bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800d470 <_vfiprintf_r+0x220>
 800d2c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d2c4:	f04f 0901 	mov.w	r9, #1
 800d2c8:	4623      	mov	r3, r4
 800d2ca:	469a      	mov	sl, r3
 800d2cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d2d0:	b10a      	cbz	r2, 800d2d6 <_vfiprintf_r+0x86>
 800d2d2:	2a25      	cmp	r2, #37	; 0x25
 800d2d4:	d1f9      	bne.n	800d2ca <_vfiprintf_r+0x7a>
 800d2d6:	ebba 0b04 	subs.w	fp, sl, r4
 800d2da:	d00b      	beq.n	800d2f4 <_vfiprintf_r+0xa4>
 800d2dc:	465b      	mov	r3, fp
 800d2de:	4622      	mov	r2, r4
 800d2e0:	4629      	mov	r1, r5
 800d2e2:	4630      	mov	r0, r6
 800d2e4:	f7ff ffa2 	bl	800d22c <__sfputs_r>
 800d2e8:	3001      	adds	r0, #1
 800d2ea:	f000 80a9 	beq.w	800d440 <_vfiprintf_r+0x1f0>
 800d2ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d2f0:	445a      	add	r2, fp
 800d2f2:	9209      	str	r2, [sp, #36]	; 0x24
 800d2f4:	f89a 3000 	ldrb.w	r3, [sl]
 800d2f8:	2b00      	cmp	r3, #0
 800d2fa:	f000 80a1 	beq.w	800d440 <_vfiprintf_r+0x1f0>
 800d2fe:	2300      	movs	r3, #0
 800d300:	f04f 32ff 	mov.w	r2, #4294967295
 800d304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d308:	f10a 0a01 	add.w	sl, sl, #1
 800d30c:	9304      	str	r3, [sp, #16]
 800d30e:	9307      	str	r3, [sp, #28]
 800d310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d314:	931a      	str	r3, [sp, #104]	; 0x68
 800d316:	4654      	mov	r4, sl
 800d318:	2205      	movs	r2, #5
 800d31a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d31e:	4854      	ldr	r0, [pc, #336]	; (800d470 <_vfiprintf_r+0x220>)
 800d320:	f7f2 ff86 	bl	8000230 <memchr>
 800d324:	9a04      	ldr	r2, [sp, #16]
 800d326:	b9d8      	cbnz	r0, 800d360 <_vfiprintf_r+0x110>
 800d328:	06d1      	lsls	r1, r2, #27
 800d32a:	bf44      	itt	mi
 800d32c:	2320      	movmi	r3, #32
 800d32e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d332:	0713      	lsls	r3, r2, #28
 800d334:	bf44      	itt	mi
 800d336:	232b      	movmi	r3, #43	; 0x2b
 800d338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d33c:	f89a 3000 	ldrb.w	r3, [sl]
 800d340:	2b2a      	cmp	r3, #42	; 0x2a
 800d342:	d015      	beq.n	800d370 <_vfiprintf_r+0x120>
 800d344:	9a07      	ldr	r2, [sp, #28]
 800d346:	4654      	mov	r4, sl
 800d348:	2000      	movs	r0, #0
 800d34a:	f04f 0c0a 	mov.w	ip, #10
 800d34e:	4621      	mov	r1, r4
 800d350:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d354:	3b30      	subs	r3, #48	; 0x30
 800d356:	2b09      	cmp	r3, #9
 800d358:	d94d      	bls.n	800d3f6 <_vfiprintf_r+0x1a6>
 800d35a:	b1b0      	cbz	r0, 800d38a <_vfiprintf_r+0x13a>
 800d35c:	9207      	str	r2, [sp, #28]
 800d35e:	e014      	b.n	800d38a <_vfiprintf_r+0x13a>
 800d360:	eba0 0308 	sub.w	r3, r0, r8
 800d364:	fa09 f303 	lsl.w	r3, r9, r3
 800d368:	4313      	orrs	r3, r2
 800d36a:	9304      	str	r3, [sp, #16]
 800d36c:	46a2      	mov	sl, r4
 800d36e:	e7d2      	b.n	800d316 <_vfiprintf_r+0xc6>
 800d370:	9b03      	ldr	r3, [sp, #12]
 800d372:	1d19      	adds	r1, r3, #4
 800d374:	681b      	ldr	r3, [r3, #0]
 800d376:	9103      	str	r1, [sp, #12]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	bfbb      	ittet	lt
 800d37c:	425b      	neglt	r3, r3
 800d37e:	f042 0202 	orrlt.w	r2, r2, #2
 800d382:	9307      	strge	r3, [sp, #28]
 800d384:	9307      	strlt	r3, [sp, #28]
 800d386:	bfb8      	it	lt
 800d388:	9204      	strlt	r2, [sp, #16]
 800d38a:	7823      	ldrb	r3, [r4, #0]
 800d38c:	2b2e      	cmp	r3, #46	; 0x2e
 800d38e:	d10c      	bne.n	800d3aa <_vfiprintf_r+0x15a>
 800d390:	7863      	ldrb	r3, [r4, #1]
 800d392:	2b2a      	cmp	r3, #42	; 0x2a
 800d394:	d134      	bne.n	800d400 <_vfiprintf_r+0x1b0>
 800d396:	9b03      	ldr	r3, [sp, #12]
 800d398:	1d1a      	adds	r2, r3, #4
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	9203      	str	r2, [sp, #12]
 800d39e:	2b00      	cmp	r3, #0
 800d3a0:	bfb8      	it	lt
 800d3a2:	f04f 33ff 	movlt.w	r3, #4294967295
 800d3a6:	3402      	adds	r4, #2
 800d3a8:	9305      	str	r3, [sp, #20]
 800d3aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800d480 <_vfiprintf_r+0x230>
 800d3ae:	7821      	ldrb	r1, [r4, #0]
 800d3b0:	2203      	movs	r2, #3
 800d3b2:	4650      	mov	r0, sl
 800d3b4:	f7f2 ff3c 	bl	8000230 <memchr>
 800d3b8:	b138      	cbz	r0, 800d3ca <_vfiprintf_r+0x17a>
 800d3ba:	9b04      	ldr	r3, [sp, #16]
 800d3bc:	eba0 000a 	sub.w	r0, r0, sl
 800d3c0:	2240      	movs	r2, #64	; 0x40
 800d3c2:	4082      	lsls	r2, r0
 800d3c4:	4313      	orrs	r3, r2
 800d3c6:	3401      	adds	r4, #1
 800d3c8:	9304      	str	r3, [sp, #16]
 800d3ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d3ce:	4829      	ldr	r0, [pc, #164]	; (800d474 <_vfiprintf_r+0x224>)
 800d3d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d3d4:	2206      	movs	r2, #6
 800d3d6:	f7f2 ff2b 	bl	8000230 <memchr>
 800d3da:	2800      	cmp	r0, #0
 800d3dc:	d03f      	beq.n	800d45e <_vfiprintf_r+0x20e>
 800d3de:	4b26      	ldr	r3, [pc, #152]	; (800d478 <_vfiprintf_r+0x228>)
 800d3e0:	bb1b      	cbnz	r3, 800d42a <_vfiprintf_r+0x1da>
 800d3e2:	9b03      	ldr	r3, [sp, #12]
 800d3e4:	3307      	adds	r3, #7
 800d3e6:	f023 0307 	bic.w	r3, r3, #7
 800d3ea:	3308      	adds	r3, #8
 800d3ec:	9303      	str	r3, [sp, #12]
 800d3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3f0:	443b      	add	r3, r7
 800d3f2:	9309      	str	r3, [sp, #36]	; 0x24
 800d3f4:	e768      	b.n	800d2c8 <_vfiprintf_r+0x78>
 800d3f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d3fa:	460c      	mov	r4, r1
 800d3fc:	2001      	movs	r0, #1
 800d3fe:	e7a6      	b.n	800d34e <_vfiprintf_r+0xfe>
 800d400:	2300      	movs	r3, #0
 800d402:	3401      	adds	r4, #1
 800d404:	9305      	str	r3, [sp, #20]
 800d406:	4619      	mov	r1, r3
 800d408:	f04f 0c0a 	mov.w	ip, #10
 800d40c:	4620      	mov	r0, r4
 800d40e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d412:	3a30      	subs	r2, #48	; 0x30
 800d414:	2a09      	cmp	r2, #9
 800d416:	d903      	bls.n	800d420 <_vfiprintf_r+0x1d0>
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d0c6      	beq.n	800d3aa <_vfiprintf_r+0x15a>
 800d41c:	9105      	str	r1, [sp, #20]
 800d41e:	e7c4      	b.n	800d3aa <_vfiprintf_r+0x15a>
 800d420:	fb0c 2101 	mla	r1, ip, r1, r2
 800d424:	4604      	mov	r4, r0
 800d426:	2301      	movs	r3, #1
 800d428:	e7f0      	b.n	800d40c <_vfiprintf_r+0x1bc>
 800d42a:	ab03      	add	r3, sp, #12
 800d42c:	9300      	str	r3, [sp, #0]
 800d42e:	462a      	mov	r2, r5
 800d430:	4b12      	ldr	r3, [pc, #72]	; (800d47c <_vfiprintf_r+0x22c>)
 800d432:	a904      	add	r1, sp, #16
 800d434:	4630      	mov	r0, r6
 800d436:	f7fb fe17 	bl	8009068 <_printf_float>
 800d43a:	4607      	mov	r7, r0
 800d43c:	1c78      	adds	r0, r7, #1
 800d43e:	d1d6      	bne.n	800d3ee <_vfiprintf_r+0x19e>
 800d440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d442:	07d9      	lsls	r1, r3, #31
 800d444:	d405      	bmi.n	800d452 <_vfiprintf_r+0x202>
 800d446:	89ab      	ldrh	r3, [r5, #12]
 800d448:	059a      	lsls	r2, r3, #22
 800d44a:	d402      	bmi.n	800d452 <_vfiprintf_r+0x202>
 800d44c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d44e:	f7fc fdb9 	bl	8009fc4 <__retarget_lock_release_recursive>
 800d452:	89ab      	ldrh	r3, [r5, #12]
 800d454:	065b      	lsls	r3, r3, #25
 800d456:	f53f af1d 	bmi.w	800d294 <_vfiprintf_r+0x44>
 800d45a:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d45c:	e71c      	b.n	800d298 <_vfiprintf_r+0x48>
 800d45e:	ab03      	add	r3, sp, #12
 800d460:	9300      	str	r3, [sp, #0]
 800d462:	462a      	mov	r2, r5
 800d464:	4b05      	ldr	r3, [pc, #20]	; (800d47c <_vfiprintf_r+0x22c>)
 800d466:	a904      	add	r1, sp, #16
 800d468:	4630      	mov	r0, r6
 800d46a:	f7fc f8a1 	bl	80095b0 <_printf_i>
 800d46e:	e7e4      	b.n	800d43a <_vfiprintf_r+0x1ea>
 800d470:	0800db41 	.word	0x0800db41
 800d474:	0800db4b 	.word	0x0800db4b
 800d478:	08009069 	.word	0x08009069
 800d47c:	0800d22d 	.word	0x0800d22d
 800d480:	0800db47 	.word	0x0800db47

0800d484 <__swbuf_r>:
 800d484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d486:	460e      	mov	r6, r1
 800d488:	4614      	mov	r4, r2
 800d48a:	4605      	mov	r5, r0
 800d48c:	b118      	cbz	r0, 800d496 <__swbuf_r+0x12>
 800d48e:	6a03      	ldr	r3, [r0, #32]
 800d490:	b90b      	cbnz	r3, 800d496 <__swbuf_r+0x12>
 800d492:	f7fc fc4b 	bl	8009d2c <__sinit>
 800d496:	69a3      	ldr	r3, [r4, #24]
 800d498:	60a3      	str	r3, [r4, #8]
 800d49a:	89a3      	ldrh	r3, [r4, #12]
 800d49c:	071a      	lsls	r2, r3, #28
 800d49e:	d525      	bpl.n	800d4ec <__swbuf_r+0x68>
 800d4a0:	6923      	ldr	r3, [r4, #16]
 800d4a2:	b31b      	cbz	r3, 800d4ec <__swbuf_r+0x68>
 800d4a4:	6823      	ldr	r3, [r4, #0]
 800d4a6:	6922      	ldr	r2, [r4, #16]
 800d4a8:	1a98      	subs	r0, r3, r2
 800d4aa:	6963      	ldr	r3, [r4, #20]
 800d4ac:	b2f6      	uxtb	r6, r6
 800d4ae:	4283      	cmp	r3, r0
 800d4b0:	4637      	mov	r7, r6
 800d4b2:	dc04      	bgt.n	800d4be <__swbuf_r+0x3a>
 800d4b4:	4621      	mov	r1, r4
 800d4b6:	4628      	mov	r0, r5
 800d4b8:	f7ff fa2a 	bl	800c910 <_fflush_r>
 800d4bc:	b9e0      	cbnz	r0, 800d4f8 <__swbuf_r+0x74>
 800d4be:	68a3      	ldr	r3, [r4, #8]
 800d4c0:	3b01      	subs	r3, #1
 800d4c2:	60a3      	str	r3, [r4, #8]
 800d4c4:	6823      	ldr	r3, [r4, #0]
 800d4c6:	1c5a      	adds	r2, r3, #1
 800d4c8:	6022      	str	r2, [r4, #0]
 800d4ca:	701e      	strb	r6, [r3, #0]
 800d4cc:	6962      	ldr	r2, [r4, #20]
 800d4ce:	1c43      	adds	r3, r0, #1
 800d4d0:	429a      	cmp	r2, r3
 800d4d2:	d004      	beq.n	800d4de <__swbuf_r+0x5a>
 800d4d4:	89a3      	ldrh	r3, [r4, #12]
 800d4d6:	07db      	lsls	r3, r3, #31
 800d4d8:	d506      	bpl.n	800d4e8 <__swbuf_r+0x64>
 800d4da:	2e0a      	cmp	r6, #10
 800d4dc:	d104      	bne.n	800d4e8 <__swbuf_r+0x64>
 800d4de:	4621      	mov	r1, r4
 800d4e0:	4628      	mov	r0, r5
 800d4e2:	f7ff fa15 	bl	800c910 <_fflush_r>
 800d4e6:	b938      	cbnz	r0, 800d4f8 <__swbuf_r+0x74>
 800d4e8:	4638      	mov	r0, r7
 800d4ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4ec:	4621      	mov	r1, r4
 800d4ee:	4628      	mov	r0, r5
 800d4f0:	f000 f806 	bl	800d500 <__swsetup_r>
 800d4f4:	2800      	cmp	r0, #0
 800d4f6:	d0d5      	beq.n	800d4a4 <__swbuf_r+0x20>
 800d4f8:	f04f 37ff 	mov.w	r7, #4294967295
 800d4fc:	e7f4      	b.n	800d4e8 <__swbuf_r+0x64>
	...

0800d500 <__swsetup_r>:
 800d500:	b538      	push	{r3, r4, r5, lr}
 800d502:	4b2a      	ldr	r3, [pc, #168]	; (800d5ac <__swsetup_r+0xac>)
 800d504:	4605      	mov	r5, r0
 800d506:	6818      	ldr	r0, [r3, #0]
 800d508:	460c      	mov	r4, r1
 800d50a:	b118      	cbz	r0, 800d514 <__swsetup_r+0x14>
 800d50c:	6a03      	ldr	r3, [r0, #32]
 800d50e:	b90b      	cbnz	r3, 800d514 <__swsetup_r+0x14>
 800d510:	f7fc fc0c 	bl	8009d2c <__sinit>
 800d514:	89a3      	ldrh	r3, [r4, #12]
 800d516:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d51a:	0718      	lsls	r0, r3, #28
 800d51c:	d422      	bmi.n	800d564 <__swsetup_r+0x64>
 800d51e:	06d9      	lsls	r1, r3, #27
 800d520:	d407      	bmi.n	800d532 <__swsetup_r+0x32>
 800d522:	2309      	movs	r3, #9
 800d524:	602b      	str	r3, [r5, #0]
 800d526:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d52a:	81a3      	strh	r3, [r4, #12]
 800d52c:	f04f 30ff 	mov.w	r0, #4294967295
 800d530:	e034      	b.n	800d59c <__swsetup_r+0x9c>
 800d532:	0758      	lsls	r0, r3, #29
 800d534:	d512      	bpl.n	800d55c <__swsetup_r+0x5c>
 800d536:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d538:	b141      	cbz	r1, 800d54c <__swsetup_r+0x4c>
 800d53a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d53e:	4299      	cmp	r1, r3
 800d540:	d002      	beq.n	800d548 <__swsetup_r+0x48>
 800d542:	4628      	mov	r0, r5
 800d544:	f7fd fbc2 	bl	800accc <_free_r>
 800d548:	2300      	movs	r3, #0
 800d54a:	6363      	str	r3, [r4, #52]	; 0x34
 800d54c:	89a3      	ldrh	r3, [r4, #12]
 800d54e:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d552:	81a3      	strh	r3, [r4, #12]
 800d554:	2300      	movs	r3, #0
 800d556:	6063      	str	r3, [r4, #4]
 800d558:	6923      	ldr	r3, [r4, #16]
 800d55a:	6023      	str	r3, [r4, #0]
 800d55c:	89a3      	ldrh	r3, [r4, #12]
 800d55e:	f043 0308 	orr.w	r3, r3, #8
 800d562:	81a3      	strh	r3, [r4, #12]
 800d564:	6923      	ldr	r3, [r4, #16]
 800d566:	b94b      	cbnz	r3, 800d57c <__swsetup_r+0x7c>
 800d568:	89a3      	ldrh	r3, [r4, #12]
 800d56a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d56e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d572:	d003      	beq.n	800d57c <__swsetup_r+0x7c>
 800d574:	4621      	mov	r1, r4
 800d576:	4628      	mov	r0, r5
 800d578:	f000 f884 	bl	800d684 <__smakebuf_r>
 800d57c:	89a0      	ldrh	r0, [r4, #12]
 800d57e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d582:	f010 0301 	ands.w	r3, r0, #1
 800d586:	d00a      	beq.n	800d59e <__swsetup_r+0x9e>
 800d588:	2300      	movs	r3, #0
 800d58a:	60a3      	str	r3, [r4, #8]
 800d58c:	6963      	ldr	r3, [r4, #20]
 800d58e:	425b      	negs	r3, r3
 800d590:	61a3      	str	r3, [r4, #24]
 800d592:	6923      	ldr	r3, [r4, #16]
 800d594:	b943      	cbnz	r3, 800d5a8 <__swsetup_r+0xa8>
 800d596:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d59a:	d1c4      	bne.n	800d526 <__swsetup_r+0x26>
 800d59c:	bd38      	pop	{r3, r4, r5, pc}
 800d59e:	0781      	lsls	r1, r0, #30
 800d5a0:	bf58      	it	pl
 800d5a2:	6963      	ldrpl	r3, [r4, #20]
 800d5a4:	60a3      	str	r3, [r4, #8]
 800d5a6:	e7f4      	b.n	800d592 <__swsetup_r+0x92>
 800d5a8:	2000      	movs	r0, #0
 800d5aa:	e7f7      	b.n	800d59c <__swsetup_r+0x9c>
 800d5ac:	20000078 	.word	0x20000078

0800d5b0 <_raise_r>:
 800d5b0:	291f      	cmp	r1, #31
 800d5b2:	b538      	push	{r3, r4, r5, lr}
 800d5b4:	4604      	mov	r4, r0
 800d5b6:	460d      	mov	r5, r1
 800d5b8:	d904      	bls.n	800d5c4 <_raise_r+0x14>
 800d5ba:	2316      	movs	r3, #22
 800d5bc:	6003      	str	r3, [r0, #0]
 800d5be:	f04f 30ff 	mov.w	r0, #4294967295
 800d5c2:	bd38      	pop	{r3, r4, r5, pc}
 800d5c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800d5c6:	b112      	cbz	r2, 800d5ce <_raise_r+0x1e>
 800d5c8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d5cc:	b94b      	cbnz	r3, 800d5e2 <_raise_r+0x32>
 800d5ce:	4620      	mov	r0, r4
 800d5d0:	f000 f830 	bl	800d634 <_getpid_r>
 800d5d4:	462a      	mov	r2, r5
 800d5d6:	4601      	mov	r1, r0
 800d5d8:	4620      	mov	r0, r4
 800d5da:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d5de:	f000 b817 	b.w	800d610 <_kill_r>
 800d5e2:	2b01      	cmp	r3, #1
 800d5e4:	d00a      	beq.n	800d5fc <_raise_r+0x4c>
 800d5e6:	1c59      	adds	r1, r3, #1
 800d5e8:	d103      	bne.n	800d5f2 <_raise_r+0x42>
 800d5ea:	2316      	movs	r3, #22
 800d5ec:	6003      	str	r3, [r0, #0]
 800d5ee:	2001      	movs	r0, #1
 800d5f0:	e7e7      	b.n	800d5c2 <_raise_r+0x12>
 800d5f2:	2400      	movs	r4, #0
 800d5f4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800d5f8:	4628      	mov	r0, r5
 800d5fa:	4798      	blx	r3
 800d5fc:	2000      	movs	r0, #0
 800d5fe:	e7e0      	b.n	800d5c2 <_raise_r+0x12>

0800d600 <raise>:
 800d600:	4b02      	ldr	r3, [pc, #8]	; (800d60c <raise+0xc>)
 800d602:	4601      	mov	r1, r0
 800d604:	6818      	ldr	r0, [r3, #0]
 800d606:	f7ff bfd3 	b.w	800d5b0 <_raise_r>
 800d60a:	bf00      	nop
 800d60c:	20000078 	.word	0x20000078

0800d610 <_kill_r>:
 800d610:	b538      	push	{r3, r4, r5, lr}
 800d612:	4d07      	ldr	r5, [pc, #28]	; (800d630 <_kill_r+0x20>)
 800d614:	2300      	movs	r3, #0
 800d616:	4604      	mov	r4, r0
 800d618:	4608      	mov	r0, r1
 800d61a:	4611      	mov	r1, r2
 800d61c:	602b      	str	r3, [r5, #0]
 800d61e:	f7f4 fad3 	bl	8001bc8 <_kill>
 800d622:	1c43      	adds	r3, r0, #1
 800d624:	d102      	bne.n	800d62c <_kill_r+0x1c>
 800d626:	682b      	ldr	r3, [r5, #0]
 800d628:	b103      	cbz	r3, 800d62c <_kill_r+0x1c>
 800d62a:	6023      	str	r3, [r4, #0]
 800d62c:	bd38      	pop	{r3, r4, r5, pc}
 800d62e:	bf00      	nop
 800d630:	20000d14 	.word	0x20000d14

0800d634 <_getpid_r>:
 800d634:	f7f4 bac0 	b.w	8001bb8 <_getpid>

0800d638 <__swhatbuf_r>:
 800d638:	b570      	push	{r4, r5, r6, lr}
 800d63a:	460c      	mov	r4, r1
 800d63c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d640:	2900      	cmp	r1, #0
 800d642:	b096      	sub	sp, #88	; 0x58
 800d644:	4615      	mov	r5, r2
 800d646:	461e      	mov	r6, r3
 800d648:	da0d      	bge.n	800d666 <__swhatbuf_r+0x2e>
 800d64a:	89a3      	ldrh	r3, [r4, #12]
 800d64c:	f013 0f80 	tst.w	r3, #128	; 0x80
 800d650:	f04f 0100 	mov.w	r1, #0
 800d654:	bf0c      	ite	eq
 800d656:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800d65a:	2340      	movne	r3, #64	; 0x40
 800d65c:	2000      	movs	r0, #0
 800d65e:	6031      	str	r1, [r6, #0]
 800d660:	602b      	str	r3, [r5, #0]
 800d662:	b016      	add	sp, #88	; 0x58
 800d664:	bd70      	pop	{r4, r5, r6, pc}
 800d666:	466a      	mov	r2, sp
 800d668:	f000 f848 	bl	800d6fc <_fstat_r>
 800d66c:	2800      	cmp	r0, #0
 800d66e:	dbec      	blt.n	800d64a <__swhatbuf_r+0x12>
 800d670:	9901      	ldr	r1, [sp, #4]
 800d672:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800d676:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800d67a:	4259      	negs	r1, r3
 800d67c:	4159      	adcs	r1, r3
 800d67e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d682:	e7eb      	b.n	800d65c <__swhatbuf_r+0x24>

0800d684 <__smakebuf_r>:
 800d684:	898b      	ldrh	r3, [r1, #12]
 800d686:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d688:	079d      	lsls	r5, r3, #30
 800d68a:	4606      	mov	r6, r0
 800d68c:	460c      	mov	r4, r1
 800d68e:	d507      	bpl.n	800d6a0 <__smakebuf_r+0x1c>
 800d690:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d694:	6023      	str	r3, [r4, #0]
 800d696:	6123      	str	r3, [r4, #16]
 800d698:	2301      	movs	r3, #1
 800d69a:	6163      	str	r3, [r4, #20]
 800d69c:	b002      	add	sp, #8
 800d69e:	bd70      	pop	{r4, r5, r6, pc}
 800d6a0:	ab01      	add	r3, sp, #4
 800d6a2:	466a      	mov	r2, sp
 800d6a4:	f7ff ffc8 	bl	800d638 <__swhatbuf_r>
 800d6a8:	9900      	ldr	r1, [sp, #0]
 800d6aa:	4605      	mov	r5, r0
 800d6ac:	4630      	mov	r0, r6
 800d6ae:	f7fd fb81 	bl	800adb4 <_malloc_r>
 800d6b2:	b948      	cbnz	r0, 800d6c8 <__smakebuf_r+0x44>
 800d6b4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6b8:	059a      	lsls	r2, r3, #22
 800d6ba:	d4ef      	bmi.n	800d69c <__smakebuf_r+0x18>
 800d6bc:	f023 0303 	bic.w	r3, r3, #3
 800d6c0:	f043 0302 	orr.w	r3, r3, #2
 800d6c4:	81a3      	strh	r3, [r4, #12]
 800d6c6:	e7e3      	b.n	800d690 <__smakebuf_r+0xc>
 800d6c8:	89a3      	ldrh	r3, [r4, #12]
 800d6ca:	6020      	str	r0, [r4, #0]
 800d6cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d6d0:	81a3      	strh	r3, [r4, #12]
 800d6d2:	9b00      	ldr	r3, [sp, #0]
 800d6d4:	6163      	str	r3, [r4, #20]
 800d6d6:	9b01      	ldr	r3, [sp, #4]
 800d6d8:	6120      	str	r0, [r4, #16]
 800d6da:	b15b      	cbz	r3, 800d6f4 <__smakebuf_r+0x70>
 800d6dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d6e0:	4630      	mov	r0, r6
 800d6e2:	f000 f81d 	bl	800d720 <_isatty_r>
 800d6e6:	b128      	cbz	r0, 800d6f4 <__smakebuf_r+0x70>
 800d6e8:	89a3      	ldrh	r3, [r4, #12]
 800d6ea:	f023 0303 	bic.w	r3, r3, #3
 800d6ee:	f043 0301 	orr.w	r3, r3, #1
 800d6f2:	81a3      	strh	r3, [r4, #12]
 800d6f4:	89a3      	ldrh	r3, [r4, #12]
 800d6f6:	431d      	orrs	r5, r3
 800d6f8:	81a5      	strh	r5, [r4, #12]
 800d6fa:	e7cf      	b.n	800d69c <__smakebuf_r+0x18>

0800d6fc <_fstat_r>:
 800d6fc:	b538      	push	{r3, r4, r5, lr}
 800d6fe:	4d07      	ldr	r5, [pc, #28]	; (800d71c <_fstat_r+0x20>)
 800d700:	2300      	movs	r3, #0
 800d702:	4604      	mov	r4, r0
 800d704:	4608      	mov	r0, r1
 800d706:	4611      	mov	r1, r2
 800d708:	602b      	str	r3, [r5, #0]
 800d70a:	f7f4 fabc 	bl	8001c86 <_fstat>
 800d70e:	1c43      	adds	r3, r0, #1
 800d710:	d102      	bne.n	800d718 <_fstat_r+0x1c>
 800d712:	682b      	ldr	r3, [r5, #0]
 800d714:	b103      	cbz	r3, 800d718 <_fstat_r+0x1c>
 800d716:	6023      	str	r3, [r4, #0]
 800d718:	bd38      	pop	{r3, r4, r5, pc}
 800d71a:	bf00      	nop
 800d71c:	20000d14 	.word	0x20000d14

0800d720 <_isatty_r>:
 800d720:	b538      	push	{r3, r4, r5, lr}
 800d722:	4d06      	ldr	r5, [pc, #24]	; (800d73c <_isatty_r+0x1c>)
 800d724:	2300      	movs	r3, #0
 800d726:	4604      	mov	r4, r0
 800d728:	4608      	mov	r0, r1
 800d72a:	602b      	str	r3, [r5, #0]
 800d72c:	f7f4 fabb 	bl	8001ca6 <_isatty>
 800d730:	1c43      	adds	r3, r0, #1
 800d732:	d102      	bne.n	800d73a <_isatty_r+0x1a>
 800d734:	682b      	ldr	r3, [r5, #0]
 800d736:	b103      	cbz	r3, 800d73a <_isatty_r+0x1a>
 800d738:	6023      	str	r3, [r4, #0]
 800d73a:	bd38      	pop	{r3, r4, r5, pc}
 800d73c:	20000d14 	.word	0x20000d14

0800d740 <_init>:
 800d740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d742:	bf00      	nop
 800d744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d746:	bc08      	pop	{r3}
 800d748:	469e      	mov	lr, r3
 800d74a:	4770      	bx	lr

0800d74c <_fini>:
 800d74c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d74e:	bf00      	nop
 800d750:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d752:	bc08      	pop	{r3}
 800d754:	469e      	mov	lr, r3
 800d756:	4770      	bx	lr
